// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: yandex/cloud/ai/assistants/v1/runs/run_service.proto

package runs

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	v1 "github.com/yandex-cloud/go-genproto/yandex/cloud/ai/assistants/v1"
	threads "github.com/yandex-cloud/go-genproto/yandex/cloud/ai/assistants/v1/threads"
	common "github.com/yandex-cloud/go-genproto/yandex/cloud/ai/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum representing events that can occur in the stream.
type StreamEvent_EventType int32

const (
	// Unspecified event type.
	StreamEvent_EVENT_TYPE_UNSPECIFIED StreamEvent_EventType = 0
	// Partial message is available.
	StreamEvent_PARTIAL_MESSAGE StreamEvent_EventType = 1
	// Run has failed due to an error.
	StreamEvent_ERROR StreamEvent_EventType = 2
	// The run has completed.
	StreamEvent_DONE StreamEvent_EventType = 3
)

// Enum value maps for StreamEvent_EventType.
var (
	StreamEvent_EventType_name = map[int32]string{
		0: "EVENT_TYPE_UNSPECIFIED",
		1: "PARTIAL_MESSAGE",
		2: "ERROR",
		3: "DONE",
	}
	StreamEvent_EventType_value = map[string]int32{
		"EVENT_TYPE_UNSPECIFIED": 0,
		"PARTIAL_MESSAGE":        1,
		"ERROR":                  2,
		"DONE":                   3,
	}
)

func (x StreamEvent_EventType) Enum() *StreamEvent_EventType {
	p := new(StreamEvent_EventType)
	*p = x
	return p
}

func (x StreamEvent_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamEvent_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_enumTypes[0].Descriptor()
}

func (StreamEvent_EventType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_enumTypes[0]
}

func (x StreamEvent_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamEvent_EventType.Descriptor instead.
func (StreamEvent_EventType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_rawDescGZIP(), []int{7, 0}
}

// Request message for creating a new run.
type CreateRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the assistant for which the run is being created
	AssistantId string `protobuf:"bytes,1,opt,name=assistant_id,json=assistantId,proto3" json:"assistant_id,omitempty"`
	// ID of the thread associated with the run.
	ThreadId string `protobuf:"bytes,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	// Set of key-value pairs to label the run.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Additional messages that will be written to the thread before the run starts.
	AdditionalMessages []*threads.MessageData `protobuf:"bytes,4,rep,name=additional_messages,json=additionalMessages,proto3" json:"additional_messages,omitempty"`
	// Configuration options for truncating the prompt when the token count exceeds a specified limit.
	// If specified, these options will override the assistant's prompt truncation settings for this run.
	CustomPromptTruncationOptions *v1.PromptTruncationOptions `protobuf:"bytes,5,opt,name=custom_prompt_truncation_options,json=customPromptTruncationOptions,proto3" json:"custom_prompt_truncation_options,omitempty"`
	// Configuration options for completion generation.
	// If specified, these options will override the assistant's completion settings for this run.
	CustomCompletionOptions *v1.CompletionOptions `protobuf:"bytes,6,opt,name=custom_completion_options,json=customCompletionOptions,proto3" json:"custom_completion_options,omitempty"`
	// Enables streaming of intermediate events, such as partial messages.
	Stream bool `protobuf:"varint,7,opt,name=stream,proto3" json:"stream,omitempty"`
}

func (x *CreateRunRequest) Reset() {
	*x = CreateRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRunRequest) ProtoMessage() {}

func (x *CreateRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRunRequest.ProtoReflect.Descriptor instead.
func (*CreateRunRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateRunRequest) GetAssistantId() string {
	if x != nil {
		return x.AssistantId
	}
	return ""
}

func (x *CreateRunRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *CreateRunRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateRunRequest) GetAdditionalMessages() []*threads.MessageData {
	if x != nil {
		return x.AdditionalMessages
	}
	return nil
}

func (x *CreateRunRequest) GetCustomPromptTruncationOptions() *v1.PromptTruncationOptions {
	if x != nil {
		return x.CustomPromptTruncationOptions
	}
	return nil
}

func (x *CreateRunRequest) GetCustomCompletionOptions() *v1.CompletionOptions {
	if x != nil {
		return x.CustomCompletionOptions
	}
	return nil
}

func (x *CreateRunRequest) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

// Request message for listing to a run events.
type ListenRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the run to listen to.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Starting index for events. If provided, listening will start from this event.
	EventsStartIdx *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=events_start_idx,json=eventsStartIdx,proto3" json:"events_start_idx,omitempty"`
}

func (x *ListenRunRequest) Reset() {
	*x = ListenRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRunRequest) ProtoMessage() {}

func (x *ListenRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRunRequest.ProtoReflect.Descriptor instead.
func (*ListenRunRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListenRunRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ListenRunRequest) GetEventsStartIdx() *wrapperspb.Int64Value {
	if x != nil {
		return x.EventsStartIdx
	}
	return nil
}

// Request message for retrieving a specific run by its ID.
type GetRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the run to retrieve.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *GetRunRequest) Reset() {
	*x = GetRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunRequest) ProtoMessage() {}

func (x *GetRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunRequest.ProtoReflect.Descriptor instead.
func (*GetRunRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetRunRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

// Request message for retrieving the last run associated with a specific thread.
type GetLastRunByThreadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the thread for which the last run is being fetched.
	ThreadId string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
}

func (x *GetLastRunByThreadRequest) Reset() {
	*x = GetLastRunByThreadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastRunByThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastRunByThreadRequest) ProtoMessage() {}

func (x *GetLastRunByThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastRunByThreadRequest.ProtoReflect.Descriptor instead.
func (*GetLastRunByThreadRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetLastRunByThreadRequest) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

// Request message for listing runs.
type ListRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Folder ID from which to list runs.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Maximum number of threads to return per page.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token to retrieve the next page of results.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListRunsRequest) Reset() {
	*x = ListRunsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunsRequest) ProtoMessage() {}

func (x *ListRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunsRequest.ProtoReflect.Descriptor instead.
func (*ListRunsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListRunsRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListRunsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRunsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// Response message for the list operation.
type ListRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of runs in the specified folder.
	Runs []*Run `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs,omitempty"`
	// Token to retrieve the next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRunsResponse) Reset() {
	*x = ListRunsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunsResponse) ProtoMessage() {}

func (x *ListRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunsResponse.ProtoReflect.Descriptor instead.
func (*ListRunsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListRunsResponse) GetRuns() []*Run {
	if x != nil {
		return x.Runs
	}
	return nil
}

func (x *ListRunsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Represents the cursor position in a stream of events.
type StreamCursor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index of the current event in the stream.
	CurrentEventIdx int64 `protobuf:"varint,1,opt,name=current_event_idx,json=currentEventIdx,proto3" json:"current_event_idx,omitempty"`
	// The number of user events received so far.
	NumUserEventsReceived int64 `protobuf:"varint,2,opt,name=num_user_events_received,json=numUserEventsReceived,proto3" json:"num_user_events_received,omitempty"`
}

func (x *StreamCursor) Reset() {
	*x = StreamCursor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCursor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCursor) ProtoMessage() {}

func (x *StreamCursor) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCursor.ProtoReflect.Descriptor instead.
func (*StreamCursor) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_rawDescGZIP(), []int{6}
}

func (x *StreamCursor) GetCurrentEventIdx() int64 {
	if x != nil {
		return x.CurrentEventIdx
	}
	return 0
}

func (x *StreamCursor) GetNumUserEventsReceived() int64 {
	if x != nil {
		return x.NumUserEventsReceived
	}
	return 0
}

// Represents an event in the stream of a run.
type StreamEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of event.
	EventType StreamEvent_EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=yandex.cloud.ai.assistants.v1.runs.StreamEvent_EventType" json:"event_type,omitempty"`
	// The current position in the stream.
	StreamCursor *StreamCursor `protobuf:"bytes,2,opt,name=stream_cursor,json=streamCursor,proto3" json:"stream_cursor,omitempty"`
	// Event data, which can be one of several types.
	//
	// Types that are assignable to EventData:
	//
	//	*StreamEvent_Error
	//	*StreamEvent_PartialMessage
	//	*StreamEvent_CompletedMessage
	EventData isStreamEvent_EventData `protobuf_oneof:"EventData"`
}

func (x *StreamEvent) Reset() {
	*x = StreamEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent) ProtoMessage() {}

func (x *StreamEvent) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent.ProtoReflect.Descriptor instead.
func (*StreamEvent) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_rawDescGZIP(), []int{7}
}

func (x *StreamEvent) GetEventType() StreamEvent_EventType {
	if x != nil {
		return x.EventType
	}
	return StreamEvent_EVENT_TYPE_UNSPECIFIED
}

func (x *StreamEvent) GetStreamCursor() *StreamCursor {
	if x != nil {
		return x.StreamCursor
	}
	return nil
}

func (m *StreamEvent) GetEventData() isStreamEvent_EventData {
	if m != nil {
		return m.EventData
	}
	return nil
}

func (x *StreamEvent) GetError() *common.Error {
	if x, ok := x.GetEventData().(*StreamEvent_Error); ok {
		return x.Error
	}
	return nil
}

func (x *StreamEvent) GetPartialMessage() *threads.MessageContent {
	if x, ok := x.GetEventData().(*StreamEvent_PartialMessage); ok {
		return x.PartialMessage
	}
	return nil
}

func (x *StreamEvent) GetCompletedMessage() *threads.Message {
	if x, ok := x.GetEventData().(*StreamEvent_CompletedMessage); ok {
		return x.CompletedMessage
	}
	return nil
}

type isStreamEvent_EventData interface {
	isStreamEvent_EventData()
}

type StreamEvent_Error struct {
	// Error information if the run has failed.
	Error *common.Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

type StreamEvent_PartialMessage struct {
	// Partially generated message.
	PartialMessage *threads.MessageContent `protobuf:"bytes,4,opt,name=partial_message,json=partialMessage,proto3,oneof"`
}

type StreamEvent_CompletedMessage struct {
	// Final message generated by an assistant if a run has completed successfully.
	CompletedMessage *threads.Message `protobuf:"bytes,5,opt,name=completed_message,json=completedMessage,proto3,oneof"`
}

func (*StreamEvent_Error) isStreamEvent_EventData() {}

func (*StreamEvent_PartialMessage) isStreamEvent_EventData() {}

func (*StreamEvent_CompletedMessage) isStreamEvent_EventData() {}

var File_yandex_cloud_ai_assistants_v1_runs_run_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_rawDesc = []byte{
	0x0a, 0x34, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61,
	0x69, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x75, 0x6e, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6e, 0x73, 0x1a, 0x23, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2a, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x69,
	0x2f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x69, 0x2f, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2c, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61,
	0x69, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x75, 0x6e, 0x73, 0x2f, 0x72, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x04, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0b, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7,
	0x31, 0x01, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6e,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x63, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x20, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x1d, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6c, 0x0a, 0x19,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x76, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x45,
	0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x49, 0x64, 0x78, 0x22, 0x2c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x05, 0x72, 0x75,
	0x6e, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x75,
	0x6e, 0x42, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52,
	0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x77, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x72, 0x75, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6e, 0x73, 0x2e, 0x52, 0x75, 0x6e,
	0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x73,
	0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x2a,
	0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x78, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x75,
	0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6e, 0x75,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x22, 0x96, 0x04, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a,
	0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x60, 0x0a, 0x0f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x51, 0x0a, 0x09,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x42,
	0x0b, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x32, 0xee, 0x05, 0x0a,
	0x0a, 0x52, 0x75, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x06,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6e,
	0x73, 0x2e, 0x52, 0x75, 0x6e, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a,
	0x22, 0x13, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x12, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x75, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12,
	0x1a, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x75, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x30, 0x01, 0x12, 0x87, 0x01,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6e, 0x73, 0x2e, 0x52, 0x75,
	0x6e, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6e, 0x73, 0x2f, 0x7b,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xa2, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x73, 0x74, 0x42, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x3d, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6e, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x42, 0x79, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6e, 0x73, 0x2e,
	0x52, 0x75, 0x6e, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6e, 0x73,
	0x3a, 0x67, 0x65, 0x74, 0x42, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x8e, 0x01, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x75, 0x6e, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6e, 0x73, 0x42, 0x75, 0x0a,
	0x26, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x75, 0x6e, 0x73, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x69, 0x2f, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6e, 0x73, 0x3b,
	0x72, 0x75, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_rawDescData = file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_rawDesc
)

func file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_rawDescData)
	})
	return file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_rawDescData
}

var file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_goTypes = []any{
	(StreamEvent_EventType)(0),         // 0: yandex.cloud.ai.assistants.v1.runs.StreamEvent.EventType
	(*CreateRunRequest)(nil),           // 1: yandex.cloud.ai.assistants.v1.runs.CreateRunRequest
	(*ListenRunRequest)(nil),           // 2: yandex.cloud.ai.assistants.v1.runs.ListenRunRequest
	(*GetRunRequest)(nil),              // 3: yandex.cloud.ai.assistants.v1.runs.GetRunRequest
	(*GetLastRunByThreadRequest)(nil),  // 4: yandex.cloud.ai.assistants.v1.runs.GetLastRunByThreadRequest
	(*ListRunsRequest)(nil),            // 5: yandex.cloud.ai.assistants.v1.runs.ListRunsRequest
	(*ListRunsResponse)(nil),           // 6: yandex.cloud.ai.assistants.v1.runs.ListRunsResponse
	(*StreamCursor)(nil),               // 7: yandex.cloud.ai.assistants.v1.runs.StreamCursor
	(*StreamEvent)(nil),                // 8: yandex.cloud.ai.assistants.v1.runs.StreamEvent
	nil,                                // 9: yandex.cloud.ai.assistants.v1.runs.CreateRunRequest.LabelsEntry
	(*threads.MessageData)(nil),        // 10: yandex.cloud.ai.assistants.v1.threads.MessageData
	(*v1.PromptTruncationOptions)(nil), // 11: yandex.cloud.ai.assistants.v1.PromptTruncationOptions
	(*v1.CompletionOptions)(nil),       // 12: yandex.cloud.ai.assistants.v1.CompletionOptions
	(*wrapperspb.Int64Value)(nil),      // 13: google.protobuf.Int64Value
	(*Run)(nil),                        // 14: yandex.cloud.ai.assistants.v1.runs.Run
	(*common.Error)(nil),               // 15: yandex.cloud.ai.common.Error
	(*threads.MessageContent)(nil),     // 16: yandex.cloud.ai.assistants.v1.threads.MessageContent
	(*threads.Message)(nil),            // 17: yandex.cloud.ai.assistants.v1.threads.Message
}
var file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_depIdxs = []int32{
	9,  // 0: yandex.cloud.ai.assistants.v1.runs.CreateRunRequest.labels:type_name -> yandex.cloud.ai.assistants.v1.runs.CreateRunRequest.LabelsEntry
	10, // 1: yandex.cloud.ai.assistants.v1.runs.CreateRunRequest.additional_messages:type_name -> yandex.cloud.ai.assistants.v1.threads.MessageData
	11, // 2: yandex.cloud.ai.assistants.v1.runs.CreateRunRequest.custom_prompt_truncation_options:type_name -> yandex.cloud.ai.assistants.v1.PromptTruncationOptions
	12, // 3: yandex.cloud.ai.assistants.v1.runs.CreateRunRequest.custom_completion_options:type_name -> yandex.cloud.ai.assistants.v1.CompletionOptions
	13, // 4: yandex.cloud.ai.assistants.v1.runs.ListenRunRequest.events_start_idx:type_name -> google.protobuf.Int64Value
	14, // 5: yandex.cloud.ai.assistants.v1.runs.ListRunsResponse.runs:type_name -> yandex.cloud.ai.assistants.v1.runs.Run
	0,  // 6: yandex.cloud.ai.assistants.v1.runs.StreamEvent.event_type:type_name -> yandex.cloud.ai.assistants.v1.runs.StreamEvent.EventType
	7,  // 7: yandex.cloud.ai.assistants.v1.runs.StreamEvent.stream_cursor:type_name -> yandex.cloud.ai.assistants.v1.runs.StreamCursor
	15, // 8: yandex.cloud.ai.assistants.v1.runs.StreamEvent.error:type_name -> yandex.cloud.ai.common.Error
	16, // 9: yandex.cloud.ai.assistants.v1.runs.StreamEvent.partial_message:type_name -> yandex.cloud.ai.assistants.v1.threads.MessageContent
	17, // 10: yandex.cloud.ai.assistants.v1.runs.StreamEvent.completed_message:type_name -> yandex.cloud.ai.assistants.v1.threads.Message
	1,  // 11: yandex.cloud.ai.assistants.v1.runs.RunService.Create:input_type -> yandex.cloud.ai.assistants.v1.runs.CreateRunRequest
	2,  // 12: yandex.cloud.ai.assistants.v1.runs.RunService.Listen:input_type -> yandex.cloud.ai.assistants.v1.runs.ListenRunRequest
	3,  // 13: yandex.cloud.ai.assistants.v1.runs.RunService.Get:input_type -> yandex.cloud.ai.assistants.v1.runs.GetRunRequest
	4,  // 14: yandex.cloud.ai.assistants.v1.runs.RunService.GetLastByThread:input_type -> yandex.cloud.ai.assistants.v1.runs.GetLastRunByThreadRequest
	5,  // 15: yandex.cloud.ai.assistants.v1.runs.RunService.List:input_type -> yandex.cloud.ai.assistants.v1.runs.ListRunsRequest
	14, // 16: yandex.cloud.ai.assistants.v1.runs.RunService.Create:output_type -> yandex.cloud.ai.assistants.v1.runs.Run
	8,  // 17: yandex.cloud.ai.assistants.v1.runs.RunService.Listen:output_type -> yandex.cloud.ai.assistants.v1.runs.StreamEvent
	14, // 18: yandex.cloud.ai.assistants.v1.runs.RunService.Get:output_type -> yandex.cloud.ai.assistants.v1.runs.Run
	14, // 19: yandex.cloud.ai.assistants.v1.runs.RunService.GetLastByThread:output_type -> yandex.cloud.ai.assistants.v1.runs.Run
	6,  // 20: yandex.cloud.ai.assistants.v1.runs.RunService.List:output_type -> yandex.cloud.ai.assistants.v1.runs.ListRunsResponse
	16, // [16:21] is the sub-list for method output_type
	11, // [11:16] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_init() }
func file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_init() {
	if File_yandex_cloud_ai_assistants_v1_runs_run_service_proto != nil {
		return
	}
	file_yandex_cloud_ai_assistants_v1_runs_run_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListenRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetLastRunByThreadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ListRunsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ListRunsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*StreamCursor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*StreamEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes[7].OneofWrappers = []any{
		(*StreamEvent_Error)(nil),
		(*StreamEvent_PartialMessage)(nil),
		(*StreamEvent_CompletedMessage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_ai_assistants_v1_runs_run_service_proto = out.File
	file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_rawDesc = nil
	file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_goTypes = nil
	file_yandex_cloud_ai_assistants_v1_runs_run_service_proto_depIdxs = nil
}

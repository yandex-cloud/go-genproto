// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: yandex/cloud/ai/assistants/v1/searchindex/common.proto

package searchindex

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines a chunking strategy where chunks are created with a fixed maximum chunk size and an overlap between consecutive chunks.
type StaticChunkingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of tokens allowed in a single chunk.
	// Constraints: must be within the range [100, 2048].
	// Default value: 800
	MaxChunkSizeTokens int64 `protobuf:"varint,1,opt,name=max_chunk_size_tokens,json=maxChunkSizeTokens,proto3" json:"max_chunk_size_tokens,omitempty"`
	// The number of tokens that should overlap between consecutive chunks.
	// This allows for some context from the previous chunk to be included in the next chunk.
	// Constraints: must be less than or equal to half of `max_chunk_size_tokens`.
	// Default value: 400
	ChunkOverlapTokens int64 `protobuf:"varint,2,opt,name=chunk_overlap_tokens,json=chunkOverlapTokens,proto3" json:"chunk_overlap_tokens,omitempty"`
}

func (x *StaticChunkingStrategy) Reset() {
	*x = StaticChunkingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticChunkingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticChunkingStrategy) ProtoMessage() {}

func (x *StaticChunkingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticChunkingStrategy.ProtoReflect.Descriptor instead.
func (*StaticChunkingStrategy) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_rawDescGZIP(), []int{0}
}

func (x *StaticChunkingStrategy) GetMaxChunkSizeTokens() int64 {
	if x != nil {
		return x.MaxChunkSizeTokens
	}
	return 0
}

func (x *StaticChunkingStrategy) GetChunkOverlapTokens() int64 {
	if x != nil {
		return x.ChunkOverlapTokens
	}
	return 0
}

// Defines a general strategy for chunking text into smaller segments.
// Currently, only StaticChunkingStrategy is supported.
type ChunkingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Strategy:
	//
	//	*ChunkingStrategy_StaticStrategy
	Strategy isChunkingStrategy_Strategy `protobuf_oneof:"Strategy"`
}

func (x *ChunkingStrategy) Reset() {
	*x = ChunkingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkingStrategy) ProtoMessage() {}

func (x *ChunkingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkingStrategy.ProtoReflect.Descriptor instead.
func (*ChunkingStrategy) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_rawDescGZIP(), []int{1}
}

func (m *ChunkingStrategy) GetStrategy() isChunkingStrategy_Strategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (x *ChunkingStrategy) GetStaticStrategy() *StaticChunkingStrategy {
	if x, ok := x.GetStrategy().(*ChunkingStrategy_StaticStrategy); ok {
		return x.StaticStrategy
	}
	return nil
}

type isChunkingStrategy_Strategy interface {
	isChunkingStrategy_Strategy()
}

type ChunkingStrategy_StaticStrategy struct {
	StaticStrategy *StaticChunkingStrategy `protobuf:"bytes,1,opt,name=static_strategy,json=staticStrategy,proto3,oneof"`
}

func (*ChunkingStrategy_StaticStrategy) isChunkingStrategy_Strategy() {}

var File_yandex_cloud_ai_assistants_v1_searchindex_common_proto protoreflect.FileDescriptor

var file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_rawDesc = []byte{
	0x0a, 0x36, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61,
	0x69, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x7d, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x31, 0x0a,
	0x15, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6d, 0x61,
	0x78, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x6c, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x42, 0x8a, 0x01, 0x0a, 0x2d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x69, 0x2e, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5a, 0x59, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x69, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x3b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_rawDescOnce sync.Once
	file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_rawDescData = file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_rawDesc
)

func file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_rawDescGZIP() []byte {
	file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_rawDescData)
	})
	return file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_rawDescData
}

var file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_goTypes = []any{
	(*StaticChunkingStrategy)(nil), // 0: yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy
	(*ChunkingStrategy)(nil),       // 1: yandex.cloud.ai.assistants.v1.searchindex.ChunkingStrategy
}
var file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_depIdxs = []int32{
	0, // 0: yandex.cloud.ai.assistants.v1.searchindex.ChunkingStrategy.static_strategy:type_name -> yandex.cloud.ai.assistants.v1.searchindex.StaticChunkingStrategy
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_init() }
func file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_init() {
	if File_yandex_cloud_ai_assistants_v1_searchindex_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*StaticChunkingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ChunkingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_msgTypes[1].OneofWrappers = []any{
		(*ChunkingStrategy_StaticStrategy)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_msgTypes,
	}.Build()
	File_yandex_cloud_ai_assistants_v1_searchindex_common_proto = out.File
	file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_rawDesc = nil
	file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_goTypes = nil
	file_yandex_cloud_ai_assistants_v1_searchindex_common_proto_depIdxs = nil
}

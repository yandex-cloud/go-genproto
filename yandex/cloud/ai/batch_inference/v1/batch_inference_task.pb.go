// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: yandex/cloud/ai/batch_inference/v1/batch_inference_task.proto

package fomo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchInferenceTask_Status int32

const (
	BatchInferenceTask_STATUS_UNSPECIFIED BatchInferenceTask_Status = 0
	BatchInferenceTask_CREATED            BatchInferenceTask_Status = 1
	BatchInferenceTask_PENDING            BatchInferenceTask_Status = 2
	BatchInferenceTask_IN_PROGRESS        BatchInferenceTask_Status = 3
	BatchInferenceTask_COMPLETED          BatchInferenceTask_Status = 4
	BatchInferenceTask_FAILED             BatchInferenceTask_Status = 5
	BatchInferenceTask_CANCELED           BatchInferenceTask_Status = 6
)

// Enum value maps for BatchInferenceTask_Status.
var (
	BatchInferenceTask_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "CREATED",
		2: "PENDING",
		3: "IN_PROGRESS",
		4: "COMPLETED",
		5: "FAILED",
		6: "CANCELED",
	}
	BatchInferenceTask_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"CREATED":            1,
		"PENDING":            2,
		"IN_PROGRESS":        3,
		"COMPLETED":          4,
		"FAILED":             5,
		"CANCELED":           6,
	}
)

func (x BatchInferenceTask_Status) Enum() *BatchInferenceTask_Status {
	p := new(BatchInferenceTask_Status)
	*p = x
	return p
}

func (x BatchInferenceTask_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchInferenceTask_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_enumTypes[0].Descriptor()
}

func (BatchInferenceTask_Status) Type() protoreflect.EnumType {
	return &file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_enumTypes[0]
}

func (x BatchInferenceTask_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatchInferenceTask_Status.Descriptor instead.
func (BatchInferenceTask_Status) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_rawDescGZIP(), []int{0, 0}
}

type BatchInferenceTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId          string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	OperationId     string `protobuf:"bytes,2,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	FolderId        string `protobuf:"bytes,3,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	ModelUri        string `protobuf:"bytes,4,opt,name=model_uri,json=modelUri,proto3" json:"model_uri,omitempty"`
	SourceDatasetId string `protobuf:"bytes,5,opt,name=source_dataset_id,json=sourceDatasetId,proto3" json:"source_dataset_id,omitempty"`
	// Types that are assignable to Request:
	//
	//	*BatchInferenceTask_CompletionRequest
	Request         isBatchInferenceTask_Request `protobuf_oneof:"request"`
	Status          BatchInferenceTask_Status    `protobuf:"varint,7,opt,name=status,proto3,enum=yandex.cloud.ai.batch_inference.v1.BatchInferenceTask_Status" json:"status,omitempty"`
	ResultDatasetId string                       `protobuf:"bytes,8,opt,name=result_dataset_id,json=resultDatasetId,proto3" json:"result_dataset_id,omitempty"`
	Labels          map[string]string            `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CreatedBy       string                       `protobuf:"bytes,10,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedAt       *timestamppb.Timestamp       `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	StartedAt       *timestamppb.Timestamp       `protobuf:"bytes,12,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt      *timestamppb.Timestamp       `protobuf:"bytes,13,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
}

func (x *BatchInferenceTask) Reset() {
	*x = BatchInferenceTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchInferenceTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInferenceTask) ProtoMessage() {}

func (x *BatchInferenceTask) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInferenceTask.ProtoReflect.Descriptor instead.
func (*BatchInferenceTask) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_rawDescGZIP(), []int{0}
}

func (x *BatchInferenceTask) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *BatchInferenceTask) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *BatchInferenceTask) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *BatchInferenceTask) GetModelUri() string {
	if x != nil {
		return x.ModelUri
	}
	return ""
}

func (x *BatchInferenceTask) GetSourceDatasetId() string {
	if x != nil {
		return x.SourceDatasetId
	}
	return ""
}

func (m *BatchInferenceTask) GetRequest() isBatchInferenceTask_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *BatchInferenceTask) GetCompletionRequest() *BatchCompletionRequest {
	if x, ok := x.GetRequest().(*BatchInferenceTask_CompletionRequest); ok {
		return x.CompletionRequest
	}
	return nil
}

func (x *BatchInferenceTask) GetStatus() BatchInferenceTask_Status {
	if x != nil {
		return x.Status
	}
	return BatchInferenceTask_STATUS_UNSPECIFIED
}

func (x *BatchInferenceTask) GetResultDatasetId() string {
	if x != nil {
		return x.ResultDatasetId
	}
	return ""
}

func (x *BatchInferenceTask) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *BatchInferenceTask) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *BatchInferenceTask) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *BatchInferenceTask) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *BatchInferenceTask) GetFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

type isBatchInferenceTask_Request interface {
	isBatchInferenceTask_Request()
}

type BatchInferenceTask_CompletionRequest struct {
	CompletionRequest *BatchCompletionRequest `protobuf:"bytes,6,opt,name=completion_request,json=completionRequest,proto3,oneof"`
}

func (*BatchInferenceTask_CompletionRequest) isBatchInferenceTask_Request() {}

var File_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto protoreflect.FileDescriptor

var file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61,
	0x69, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x22, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69,
	0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x61, 0x69, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x90, 0x07, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x72, 0x69, 0x12, 0x2a, 0x0a,
	0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x12, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x74, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x75, 0x0a, 0x26, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x5a, 0x4b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x61, 0x69, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x66, 0x6f, 0x6d, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_rawDescOnce sync.Once
	file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_rawDescData = file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_rawDesc
)

func file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_rawDescGZIP() []byte {
	file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_rawDescData)
	})
	return file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_rawDescData
}

var file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_goTypes = []any{
	(BatchInferenceTask_Status)(0), // 0: yandex.cloud.ai.batch_inference.v1.BatchInferenceTask.Status
	(*BatchInferenceTask)(nil),     // 1: yandex.cloud.ai.batch_inference.v1.BatchInferenceTask
	nil,                            // 2: yandex.cloud.ai.batch_inference.v1.BatchInferenceTask.LabelsEntry
	(*BatchCompletionRequest)(nil), // 3: yandex.cloud.ai.batch_inference.v1.BatchCompletionRequest
	(*timestamppb.Timestamp)(nil),  // 4: google.protobuf.Timestamp
}
var file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_depIdxs = []int32{
	3, // 0: yandex.cloud.ai.batch_inference.v1.BatchInferenceTask.completion_request:type_name -> yandex.cloud.ai.batch_inference.v1.BatchCompletionRequest
	0, // 1: yandex.cloud.ai.batch_inference.v1.BatchInferenceTask.status:type_name -> yandex.cloud.ai.batch_inference.v1.BatchInferenceTask.Status
	2, // 2: yandex.cloud.ai.batch_inference.v1.BatchInferenceTask.labels:type_name -> yandex.cloud.ai.batch_inference.v1.BatchInferenceTask.LabelsEntry
	4, // 3: yandex.cloud.ai.batch_inference.v1.BatchInferenceTask.created_at:type_name -> google.protobuf.Timestamp
	4, // 4: yandex.cloud.ai.batch_inference.v1.BatchInferenceTask.started_at:type_name -> google.protobuf.Timestamp
	4, // 5: yandex.cloud.ai.batch_inference.v1.BatchInferenceTask.finished_at:type_name -> google.protobuf.Timestamp
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_init() }
func file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_init() {
	if File_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto != nil {
		return
	}
	file_yandex_cloud_ai_batch_inference_v1_inference_options_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*BatchInferenceTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_msgTypes[0].OneofWrappers = []any{
		(*BatchInferenceTask_CompletionRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_msgTypes,
	}.Build()
	File_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto = out.File
	file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_rawDesc = nil
	file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_goTypes = nil
	file_yandex_cloud_ai_batch_inference_v1_batch_inference_task_proto_depIdxs = nil
}

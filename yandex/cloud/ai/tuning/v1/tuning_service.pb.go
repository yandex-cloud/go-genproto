// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: yandex/cloud/ai/tuning/v1/tuning_service.proto

package fomo

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListTuningsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required field. ID of the folder to list tunings in.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Maximum number of tuning tasks to return per page.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token to retrieve the next page of results.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListTuningsRequest) Reset() {
	*x = ListTuningsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTuningsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTuningsRequest) ProtoMessage() {}

func (x *ListTuningsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTuningsRequest.ProtoReflect.Descriptor instead.
func (*ListTuningsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListTuningsRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListTuningsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTuningsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListTuningsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of tuning tasks in the specified folder.
	TuningTasks []*TuningTask `protobuf:"bytes,1,rep,name=tuning_tasks,json=tuningTasks,proto3" json:"tuning_tasks,omitempty"`
	// Token to retrieve the next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListTuningsResponse) Reset() {
	*x = ListTuningsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTuningsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTuningsResponse) ProtoMessage() {}

func (x *ListTuningsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTuningsResponse.ProtoReflect.Descriptor instead.
func (*ListTuningsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListTuningsResponse) GetTuningTasks() []*TuningTask {
	if x != nil {
		return x.TuningTasks
	}
	return nil
}

func (x *ListTuningsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DescribeTuningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TuningTaskId string `protobuf:"bytes,1,opt,name=tuning_task_id,json=tuningTaskId,proto3" json:"tuning_task_id,omitempty"`
}

func (x *DescribeTuningRequest) Reset() {
	*x = DescribeTuningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTuningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTuningRequest) ProtoMessage() {}

func (x *DescribeTuningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTuningRequest.ProtoReflect.Descriptor instead.
func (*DescribeTuningRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{2}
}

func (x *DescribeTuningRequest) GetTuningTaskId() string {
	if x != nil {
		return x.TuningTaskId
	}
	return ""
}

type DescribeTuningResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TuningTask *TuningTask `protobuf:"bytes,1,opt,name=tuning_task,json=tuningTask,proto3" json:"tuning_task,omitempty"`
}

func (x *DescribeTuningResponse) Reset() {
	*x = DescribeTuningResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeTuningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeTuningResponse) ProtoMessage() {}

func (x *DescribeTuningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeTuningResponse.ProtoReflect.Descriptor instead.
func (*DescribeTuningResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{3}
}

func (x *DescribeTuningResponse) GetTuningTask() *TuningTask {
	if x != nil {
		return x.TuningTask
	}
	return nil
}

type CancelTuningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TuningTaskId string `protobuf:"bytes,1,opt,name=tuning_task_id,json=tuningTaskId,proto3" json:"tuning_task_id,omitempty"`
}

func (x *CancelTuningRequest) Reset() {
	*x = CancelTuningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTuningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTuningRequest) ProtoMessage() {}

func (x *CancelTuningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTuningRequest.ProtoReflect.Descriptor instead.
func (*CancelTuningRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{4}
}

func (x *CancelTuningRequest) GetTuningTaskId() string {
	if x != nil {
		return x.TuningTaskId
	}
	return ""
}

type CancelTuningResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TuningTaskId string `protobuf:"bytes,1,opt,name=tuning_task_id,json=tuningTaskId,proto3" json:"tuning_task_id,omitempty"`
}

func (x *CancelTuningResponse) Reset() {
	*x = CancelTuningResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelTuningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTuningResponse) ProtoMessage() {}

func (x *CancelTuningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTuningResponse.ProtoReflect.Descriptor instead.
func (*CancelTuningResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{5}
}

func (x *CancelTuningResponse) GetTuningTaskId() string {
	if x != nil {
		return x.TuningTaskId
	}
	return ""
}

type TuningResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TuningTaskId   string            `protobuf:"bytes,3,opt,name=tuning_task_id,json=tuningTaskId,proto3" json:"tuning_task_id,omitempty"`
	Status         TuningTask_Status `protobuf:"varint,4,opt,name=status,proto3,enum=yandex.cloud.ai.tuning.v1.TuningTask_Status" json:"status,omitempty"`
	TargetModelUri string            `protobuf:"bytes,5,opt,name=target_model_uri,json=targetModelUri,proto3" json:"target_model_uri,omitempty"`
}

func (x *TuningResponse) Reset() {
	*x = TuningResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TuningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TuningResponse) ProtoMessage() {}

func (x *TuningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TuningResponse.ProtoReflect.Descriptor instead.
func (*TuningResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{6}
}

func (x *TuningResponse) GetTuningTaskId() string {
	if x != nil {
		return x.TuningTaskId
	}
	return ""
}

func (x *TuningResponse) GetStatus() TuningTask_Status {
	if x != nil {
		return x.Status
	}
	return TuningTask_STATUS_UNSPECIFIED
}

func (x *TuningResponse) GetTargetModelUri() string {
	if x != nil {
		return x.TargetModelUri
	}
	return ""
}

type TuningMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TuningTaskId string            `protobuf:"bytes,1,opt,name=tuning_task_id,json=tuningTaskId,proto3" json:"tuning_task_id,omitempty"`
	Status       TuningTask_Status `protobuf:"varint,2,opt,name=status,proto3,enum=yandex.cloud.ai.tuning.v1.TuningTask_Status" json:"status,omitempty"`
}

func (x *TuningMetadata) Reset() {
	*x = TuningMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TuningMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TuningMetadata) ProtoMessage() {}

func (x *TuningMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TuningMetadata.ProtoReflect.Descriptor instead.
func (*TuningMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{7}
}

func (x *TuningMetadata) GetTuningTaskId() string {
	if x != nil {
		return x.TuningTaskId
	}
	return ""
}

func (x *TuningMetadata) GetStatus() TuningTask_Status {
	if x != nil {
		return x.Status
	}
	return TuningTask_STATUS_UNSPECIFIED
}

type TuningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Format like a gpt://{folder_id}/yandex-gpt/latest
	BaseModelUri       string                           `protobuf:"bytes,1,opt,name=base_model_uri,json=baseModelUri,proto3" json:"base_model_uri,omitempty"`
	TrainDatasets      []*TuningRequest_WeightedDataset `protobuf:"bytes,2,rep,name=train_datasets,json=trainDatasets,proto3" json:"train_datasets,omitempty"`
	ValidationDatasets []*TuningRequest_WeightedDataset `protobuf:"bytes,3,rep,name=validation_datasets,json=validationDatasets,proto3" json:"validation_datasets,omitempty"`
	// Types that are assignable to TuningParams:
	//
	//	*TuningRequest_TextToTextCompletion
	//	*TuningRequest_TextClassificationMultilabel
	//	*TuningRequest_TextClassificationMulticlass
	TuningParams isTuningRequest_TuningParams `protobuf_oneof:"tuning_params"`
	// common params
	Name        string            `protobuf:"bytes,200,opt,name=name,proto3" json:"name,omitempty"`
	Description string            `protobuf:"bytes,201,opt,name=description,proto3" json:"description,omitempty"`
	Labels      map[string]string `protobuf:"bytes,202,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TuningRequest) Reset() {
	*x = TuningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TuningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TuningRequest) ProtoMessage() {}

func (x *TuningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TuningRequest.ProtoReflect.Descriptor instead.
func (*TuningRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{8}
}

func (x *TuningRequest) GetBaseModelUri() string {
	if x != nil {
		return x.BaseModelUri
	}
	return ""
}

func (x *TuningRequest) GetTrainDatasets() []*TuningRequest_WeightedDataset {
	if x != nil {
		return x.TrainDatasets
	}
	return nil
}

func (x *TuningRequest) GetValidationDatasets() []*TuningRequest_WeightedDataset {
	if x != nil {
		return x.ValidationDatasets
	}
	return nil
}

func (m *TuningRequest) GetTuningParams() isTuningRequest_TuningParams {
	if m != nil {
		return m.TuningParams
	}
	return nil
}

func (x *TuningRequest) GetTextToTextCompletion() *TextToTextCompletionTuningParams {
	if x, ok := x.GetTuningParams().(*TuningRequest_TextToTextCompletion); ok {
		return x.TextToTextCompletion
	}
	return nil
}

func (x *TuningRequest) GetTextClassificationMultilabel() *TextClassificationMultilabelParams {
	if x, ok := x.GetTuningParams().(*TuningRequest_TextClassificationMultilabel); ok {
		return x.TextClassificationMultilabel
	}
	return nil
}

func (x *TuningRequest) GetTextClassificationMulticlass() *TextClassificationMulticlassParams {
	if x, ok := x.GetTuningParams().(*TuningRequest_TextClassificationMulticlass); ok {
		return x.TextClassificationMulticlass
	}
	return nil
}

func (x *TuningRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TuningRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TuningRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type isTuningRequest_TuningParams interface {
	isTuningRequest_TuningParams()
}

type TuningRequest_TextToTextCompletion struct {
	TextToTextCompletion *TextToTextCompletionTuningParams `protobuf:"bytes,100,opt,name=text_to_text_completion,json=textToTextCompletion,proto3,oneof"`
}

type TuningRequest_TextClassificationMultilabel struct {
	TextClassificationMultilabel *TextClassificationMultilabelParams `protobuf:"bytes,101,opt,name=text_classification_multilabel,json=textClassificationMultilabel,proto3,oneof"`
}

type TuningRequest_TextClassificationMulticlass struct {
	TextClassificationMulticlass *TextClassificationMulticlassParams `protobuf:"bytes,102,opt,name=text_classification_multiclass,json=textClassificationMulticlass,proto3,oneof"`
}

func (*TuningRequest_TextToTextCompletion) isTuningRequest_TuningParams() {}

func (*TuningRequest_TextClassificationMultilabel) isTuningRequest_TuningParams() {}

func (*TuningRequest_TextClassificationMulticlass) isTuningRequest_TuningParams() {}

type TextToTextCompletionTuningParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seed                int64   `protobuf:"varint,1,opt,name=seed,proto3" json:"seed,omitempty"`
	Lr                  float64 `protobuf:"fixed64,2,opt,name=lr,proto3" json:"lr,omitempty"`
	NSamples            int64   `protobuf:"varint,3,opt,name=n_samples,json=nSamples,proto3" json:"n_samples,omitempty"`
	AdditionalArguments string  `protobuf:"bytes,7,opt,name=additional_arguments,json=additionalArguments,proto3" json:"additional_arguments,omitempty"`
	// Types that are assignable to TuningType:
	//
	//	*TextToTextCompletionTuningParams_Lora
	//	*TextToTextCompletionTuningParams_PromptTune
	TuningType isTextToTextCompletionTuningParams_TuningType `protobuf_oneof:"tuning_type"`
	Scheduler  *TextToTextCompletionTuningParams_Scheduler   `protobuf:"bytes,200,opt,name=scheduler,proto3" json:"scheduler,omitempty"`
	Optimizer  *TextToTextCompletionTuningParams_Optimizer   `protobuf:"bytes,201,opt,name=optimizer,proto3" json:"optimizer,omitempty"`
}

func (x *TextToTextCompletionTuningParams) Reset() {
	*x = TextToTextCompletionTuningParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextToTextCompletionTuningParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextToTextCompletionTuningParams) ProtoMessage() {}

func (x *TextToTextCompletionTuningParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextToTextCompletionTuningParams.ProtoReflect.Descriptor instead.
func (*TextToTextCompletionTuningParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{9}
}

func (x *TextToTextCompletionTuningParams) GetSeed() int64 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *TextToTextCompletionTuningParams) GetLr() float64 {
	if x != nil {
		return x.Lr
	}
	return 0
}

func (x *TextToTextCompletionTuningParams) GetNSamples() int64 {
	if x != nil {
		return x.NSamples
	}
	return 0
}

func (x *TextToTextCompletionTuningParams) GetAdditionalArguments() string {
	if x != nil {
		return x.AdditionalArguments
	}
	return ""
}

func (m *TextToTextCompletionTuningParams) GetTuningType() isTextToTextCompletionTuningParams_TuningType {
	if m != nil {
		return m.TuningType
	}
	return nil
}

func (x *TextToTextCompletionTuningParams) GetLora() *TuningTypeLora {
	if x, ok := x.GetTuningType().(*TextToTextCompletionTuningParams_Lora); ok {
		return x.Lora
	}
	return nil
}

func (x *TextToTextCompletionTuningParams) GetPromptTune() *TuningTypePromptTune {
	if x, ok := x.GetTuningType().(*TextToTextCompletionTuningParams_PromptTune); ok {
		return x.PromptTune
	}
	return nil
}

func (x *TextToTextCompletionTuningParams) GetScheduler() *TextToTextCompletionTuningParams_Scheduler {
	if x != nil {
		return x.Scheduler
	}
	return nil
}

func (x *TextToTextCompletionTuningParams) GetOptimizer() *TextToTextCompletionTuningParams_Optimizer {
	if x != nil {
		return x.Optimizer
	}
	return nil
}

type isTextToTextCompletionTuningParams_TuningType interface {
	isTextToTextCompletionTuningParams_TuningType()
}

type TextToTextCompletionTuningParams_Lora struct {
	Lora *TuningTypeLora `protobuf:"bytes,100,opt,name=lora,proto3,oneof"`
}

type TextToTextCompletionTuningParams_PromptTune struct {
	PromptTune *TuningTypePromptTune `protobuf:"bytes,101,opt,name=prompt_tune,json=promptTune,proto3,oneof"`
}

func (*TextToTextCompletionTuningParams_Lora) isTextToTextCompletionTuningParams_TuningType() {}

func (*TextToTextCompletionTuningParams_PromptTune) isTextToTextCompletionTuningParams_TuningType() {}

type TextClassificationMultilabelParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seed                int64   `protobuf:"varint,1,opt,name=seed,proto3" json:"seed,omitempty"`
	Lr                  float64 `protobuf:"fixed64,2,opt,name=lr,proto3" json:"lr,omitempty"`
	NSamples            int64   `protobuf:"varint,3,opt,name=n_samples,json=nSamples,proto3" json:"n_samples,omitempty"`
	AdditionalArguments string  `protobuf:"bytes,7,opt,name=additional_arguments,json=additionalArguments,proto3" json:"additional_arguments,omitempty"`
	// Types that are assignable to TuningType:
	//
	//	*TextClassificationMultilabelParams_Lora
	//	*TextClassificationMultilabelParams_PromptTune
	TuningType isTextClassificationMultilabelParams_TuningType `protobuf_oneof:"tuning_type"`
	Scheduler  *TextClassificationMultilabelParams_Scheduler   `protobuf:"bytes,200,opt,name=scheduler,proto3" json:"scheduler,omitempty"`
	Optimizer  *TextClassificationMultilabelParams_Optimizer   `protobuf:"bytes,201,opt,name=optimizer,proto3" json:"optimizer,omitempty"`
}

func (x *TextClassificationMultilabelParams) Reset() {
	*x = TextClassificationMultilabelParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextClassificationMultilabelParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextClassificationMultilabelParams) ProtoMessage() {}

func (x *TextClassificationMultilabelParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextClassificationMultilabelParams.ProtoReflect.Descriptor instead.
func (*TextClassificationMultilabelParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{10}
}

func (x *TextClassificationMultilabelParams) GetSeed() int64 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *TextClassificationMultilabelParams) GetLr() float64 {
	if x != nil {
		return x.Lr
	}
	return 0
}

func (x *TextClassificationMultilabelParams) GetNSamples() int64 {
	if x != nil {
		return x.NSamples
	}
	return 0
}

func (x *TextClassificationMultilabelParams) GetAdditionalArguments() string {
	if x != nil {
		return x.AdditionalArguments
	}
	return ""
}

func (m *TextClassificationMultilabelParams) GetTuningType() isTextClassificationMultilabelParams_TuningType {
	if m != nil {
		return m.TuningType
	}
	return nil
}

func (x *TextClassificationMultilabelParams) GetLora() *TuningTypeLora {
	if x, ok := x.GetTuningType().(*TextClassificationMultilabelParams_Lora); ok {
		return x.Lora
	}
	return nil
}

func (x *TextClassificationMultilabelParams) GetPromptTune() *TuningTypePromptTune {
	if x, ok := x.GetTuningType().(*TextClassificationMultilabelParams_PromptTune); ok {
		return x.PromptTune
	}
	return nil
}

func (x *TextClassificationMultilabelParams) GetScheduler() *TextClassificationMultilabelParams_Scheduler {
	if x != nil {
		return x.Scheduler
	}
	return nil
}

func (x *TextClassificationMultilabelParams) GetOptimizer() *TextClassificationMultilabelParams_Optimizer {
	if x != nil {
		return x.Optimizer
	}
	return nil
}

type isTextClassificationMultilabelParams_TuningType interface {
	isTextClassificationMultilabelParams_TuningType()
}

type TextClassificationMultilabelParams_Lora struct {
	Lora *TuningTypeLora `protobuf:"bytes,100,opt,name=lora,proto3,oneof"`
}

type TextClassificationMultilabelParams_PromptTune struct {
	PromptTune *TuningTypePromptTune `protobuf:"bytes,101,opt,name=prompt_tune,json=promptTune,proto3,oneof"`
}

func (*TextClassificationMultilabelParams_Lora) isTextClassificationMultilabelParams_TuningType() {}

func (*TextClassificationMultilabelParams_PromptTune) isTextClassificationMultilabelParams_TuningType() {
}

type TextClassificationMulticlassParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seed                int64   `protobuf:"varint,1,opt,name=seed,proto3" json:"seed,omitempty"`
	Lr                  float64 `protobuf:"fixed64,2,opt,name=lr,proto3" json:"lr,omitempty"`
	NSamples            int64   `protobuf:"varint,3,opt,name=n_samples,json=nSamples,proto3" json:"n_samples,omitempty"`
	AdditionalArguments string  `protobuf:"bytes,7,opt,name=additional_arguments,json=additionalArguments,proto3" json:"additional_arguments,omitempty"`
	// Types that are assignable to TuningType:
	//
	//	*TextClassificationMulticlassParams_Lora
	//	*TextClassificationMulticlassParams_PromptTune
	TuningType isTextClassificationMulticlassParams_TuningType `protobuf_oneof:"tuning_type"`
	Scheduler  *TextClassificationMulticlassParams_Scheduler   `protobuf:"bytes,200,opt,name=scheduler,proto3" json:"scheduler,omitempty"`
	Optimizer  *TextClassificationMulticlassParams_Optimizer   `protobuf:"bytes,201,opt,name=optimizer,proto3" json:"optimizer,omitempty"`
}

func (x *TextClassificationMulticlassParams) Reset() {
	*x = TextClassificationMulticlassParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextClassificationMulticlassParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextClassificationMulticlassParams) ProtoMessage() {}

func (x *TextClassificationMulticlassParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextClassificationMulticlassParams.ProtoReflect.Descriptor instead.
func (*TextClassificationMulticlassParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{11}
}

func (x *TextClassificationMulticlassParams) GetSeed() int64 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *TextClassificationMulticlassParams) GetLr() float64 {
	if x != nil {
		return x.Lr
	}
	return 0
}

func (x *TextClassificationMulticlassParams) GetNSamples() int64 {
	if x != nil {
		return x.NSamples
	}
	return 0
}

func (x *TextClassificationMulticlassParams) GetAdditionalArguments() string {
	if x != nil {
		return x.AdditionalArguments
	}
	return ""
}

func (m *TextClassificationMulticlassParams) GetTuningType() isTextClassificationMulticlassParams_TuningType {
	if m != nil {
		return m.TuningType
	}
	return nil
}

func (x *TextClassificationMulticlassParams) GetLora() *TuningTypeLora {
	if x, ok := x.GetTuningType().(*TextClassificationMulticlassParams_Lora); ok {
		return x.Lora
	}
	return nil
}

func (x *TextClassificationMulticlassParams) GetPromptTune() *TuningTypePromptTune {
	if x, ok := x.GetTuningType().(*TextClassificationMulticlassParams_PromptTune); ok {
		return x.PromptTune
	}
	return nil
}

func (x *TextClassificationMulticlassParams) GetScheduler() *TextClassificationMulticlassParams_Scheduler {
	if x != nil {
		return x.Scheduler
	}
	return nil
}

func (x *TextClassificationMulticlassParams) GetOptimizer() *TextClassificationMulticlassParams_Optimizer {
	if x != nil {
		return x.Optimizer
	}
	return nil
}

type isTextClassificationMulticlassParams_TuningType interface {
	isTextClassificationMulticlassParams_TuningType()
}

type TextClassificationMulticlassParams_Lora struct {
	Lora *TuningTypeLora `protobuf:"bytes,100,opt,name=lora,proto3,oneof"`
}

type TextClassificationMulticlassParams_PromptTune struct {
	PromptTune *TuningTypePromptTune `protobuf:"bytes,101,opt,name=prompt_tune,json=promptTune,proto3,oneof"`
}

func (*TextClassificationMulticlassParams_Lora) isTextClassificationMulticlassParams_TuningType() {}

func (*TextClassificationMulticlassParams_PromptTune) isTextClassificationMulticlassParams_TuningType() {
}

type GetMetricsUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *GetMetricsUrlRequest) Reset() {
	*x = GetMetricsUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricsUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricsUrlRequest) ProtoMessage() {}

func (x *GetMetricsUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricsUrlRequest.ProtoReflect.Descriptor instead.
func (*GetMetricsUrlRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetMetricsUrlRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetMetricsUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadUrl string `protobuf:"bytes,1,opt,name=load_url,json=loadUrl,proto3" json:"load_url,omitempty"`
}

func (x *GetMetricsUrlResponse) Reset() {
	*x = GetMetricsUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricsUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricsUrlResponse) ProtoMessage() {}

func (x *GetMetricsUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricsUrlResponse.ProtoReflect.Descriptor instead.
func (*GetMetricsUrlResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetMetricsUrlResponse) GetLoadUrl() string {
	if x != nil {
		return x.LoadUrl
	}
	return ""
}

type GetOptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *GetOptionsRequest) Reset() {
	*x = GetOptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOptionsRequest) ProtoMessage() {}

func (x *GetOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOptionsRequest.ProtoReflect.Descriptor instead.
func (*GetOptionsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetOptionsRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId             string                           `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	BaseModelUri       string                           `protobuf:"bytes,2,opt,name=base_model_uri,json=baseModelUri,proto3" json:"base_model_uri,omitempty"`
	TrainDatasets      []*TuningRequest_WeightedDataset `protobuf:"bytes,3,rep,name=train_datasets,json=trainDatasets,proto3" json:"train_datasets,omitempty"`
	ValidationDatasets []*TuningRequest_WeightedDataset `protobuf:"bytes,4,rep,name=validation_datasets,json=validationDatasets,proto3" json:"validation_datasets,omitempty"`
	// Types that are assignable to TuningParams:
	//
	//	*GetOptionsResponse_TextToTextCompletion
	//	*GetOptionsResponse_TextClassificationMultilabel
	//	*GetOptionsResponse_TextClassificationMulticlass
	TuningParams isGetOptionsResponse_TuningParams `protobuf_oneof:"tuning_params"`
}

func (x *GetOptionsResponse) Reset() {
	*x = GetOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOptionsResponse) ProtoMessage() {}

func (x *GetOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOptionsResponse.ProtoReflect.Descriptor instead.
func (*GetOptionsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetOptionsResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetOptionsResponse) GetBaseModelUri() string {
	if x != nil {
		return x.BaseModelUri
	}
	return ""
}

func (x *GetOptionsResponse) GetTrainDatasets() []*TuningRequest_WeightedDataset {
	if x != nil {
		return x.TrainDatasets
	}
	return nil
}

func (x *GetOptionsResponse) GetValidationDatasets() []*TuningRequest_WeightedDataset {
	if x != nil {
		return x.ValidationDatasets
	}
	return nil
}

func (m *GetOptionsResponse) GetTuningParams() isGetOptionsResponse_TuningParams {
	if m != nil {
		return m.TuningParams
	}
	return nil
}

func (x *GetOptionsResponse) GetTextToTextCompletion() *TextToTextCompletionTuningParams {
	if x, ok := x.GetTuningParams().(*GetOptionsResponse_TextToTextCompletion); ok {
		return x.TextToTextCompletion
	}
	return nil
}

func (x *GetOptionsResponse) GetTextClassificationMultilabel() *TextClassificationMultilabelParams {
	if x, ok := x.GetTuningParams().(*GetOptionsResponse_TextClassificationMultilabel); ok {
		return x.TextClassificationMultilabel
	}
	return nil
}

func (x *GetOptionsResponse) GetTextClassificationMulticlass() *TextClassificationMulticlassParams {
	if x, ok := x.GetTuningParams().(*GetOptionsResponse_TextClassificationMulticlass); ok {
		return x.TextClassificationMulticlass
	}
	return nil
}

type isGetOptionsResponse_TuningParams interface {
	isGetOptionsResponse_TuningParams()
}

type GetOptionsResponse_TextToTextCompletion struct {
	TextToTextCompletion *TextToTextCompletionTuningParams `protobuf:"bytes,100,opt,name=text_to_text_completion,json=textToTextCompletion,proto3,oneof"`
}

type GetOptionsResponse_TextClassificationMultilabel struct {
	TextClassificationMultilabel *TextClassificationMultilabelParams `protobuf:"bytes,101,opt,name=text_classification_multilabel,json=textClassificationMultilabel,proto3,oneof"`
}

type GetOptionsResponse_TextClassificationMulticlass struct {
	TextClassificationMulticlass *TextClassificationMulticlassParams `protobuf:"bytes,102,opt,name=text_classification_multiclass,json=textClassificationMulticlass,proto3,oneof"`
}

func (*GetOptionsResponse_TextToTextCompletion) isGetOptionsResponse_TuningParams() {}

func (*GetOptionsResponse_TextClassificationMultilabel) isGetOptionsResponse_TuningParams() {}

func (*GetOptionsResponse_TextClassificationMulticlass) isGetOptionsResponse_TuningParams() {}

type TuningRequest_WeightedDataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId string  `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	Weight    float64 `protobuf:"fixed64,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *TuningRequest_WeightedDataset) Reset() {
	*x = TuningRequest_WeightedDataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TuningRequest_WeightedDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TuningRequest_WeightedDataset) ProtoMessage() {}

func (x *TuningRequest_WeightedDataset) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TuningRequest_WeightedDataset.ProtoReflect.Descriptor instead.
func (*TuningRequest_WeightedDataset) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{8, 1}
}

func (x *TuningRequest_WeightedDataset) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *TuningRequest_WeightedDataset) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type TextToTextCompletionTuningParams_Scheduler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*TextToTextCompletionTuningParams_Scheduler_Linear
	//	*TextToTextCompletionTuningParams_Scheduler_Constant
	//	*TextToTextCompletionTuningParams_Scheduler_Cosine
	Type        isTextToTextCompletionTuningParams_Scheduler_Type `protobuf_oneof:"type"`
	WarmupRatio float64                                           `protobuf:"fixed64,101,opt,name=warmup_ratio,json=warmupRatio,proto3" json:"warmup_ratio,omitempty"`
}

func (x *TextToTextCompletionTuningParams_Scheduler) Reset() {
	*x = TextToTextCompletionTuningParams_Scheduler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextToTextCompletionTuningParams_Scheduler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextToTextCompletionTuningParams_Scheduler) ProtoMessage() {}

func (x *TextToTextCompletionTuningParams_Scheduler) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextToTextCompletionTuningParams_Scheduler.ProtoReflect.Descriptor instead.
func (*TextToTextCompletionTuningParams_Scheduler) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{9, 0}
}

func (m *TextToTextCompletionTuningParams_Scheduler) GetType() isTextToTextCompletionTuningParams_Scheduler_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *TextToTextCompletionTuningParams_Scheduler) GetLinear() *SchedulerLinear {
	if x, ok := x.GetType().(*TextToTextCompletionTuningParams_Scheduler_Linear); ok {
		return x.Linear
	}
	return nil
}

func (x *TextToTextCompletionTuningParams_Scheduler) GetConstant() *SchedulerConstant {
	if x, ok := x.GetType().(*TextToTextCompletionTuningParams_Scheduler_Constant); ok {
		return x.Constant
	}
	return nil
}

func (x *TextToTextCompletionTuningParams_Scheduler) GetCosine() *SchedulerCosine {
	if x, ok := x.GetType().(*TextToTextCompletionTuningParams_Scheduler_Cosine); ok {
		return x.Cosine
	}
	return nil
}

func (x *TextToTextCompletionTuningParams_Scheduler) GetWarmupRatio() float64 {
	if x != nil {
		return x.WarmupRatio
	}
	return 0
}

type isTextToTextCompletionTuningParams_Scheduler_Type interface {
	isTextToTextCompletionTuningParams_Scheduler_Type()
}

type TextToTextCompletionTuningParams_Scheduler_Linear struct {
	Linear *SchedulerLinear `protobuf:"bytes,1,opt,name=linear,proto3,oneof"`
}

type TextToTextCompletionTuningParams_Scheduler_Constant struct {
	Constant *SchedulerConstant `protobuf:"bytes,2,opt,name=constant,proto3,oneof"`
}

type TextToTextCompletionTuningParams_Scheduler_Cosine struct {
	Cosine *SchedulerCosine `protobuf:"bytes,3,opt,name=cosine,proto3,oneof"`
}

func (*TextToTextCompletionTuningParams_Scheduler_Linear) isTextToTextCompletionTuningParams_Scheduler_Type() {
}

func (*TextToTextCompletionTuningParams_Scheduler_Constant) isTextToTextCompletionTuningParams_Scheduler_Type() {
}

func (*TextToTextCompletionTuningParams_Scheduler_Cosine) isTextToTextCompletionTuningParams_Scheduler_Type() {
}

type TextToTextCompletionTuningParams_Optimizer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*TextToTextCompletionTuningParams_Optimizer_Adamw
	Type isTextToTextCompletionTuningParams_Optimizer_Type `protobuf_oneof:"type"`
}

func (x *TextToTextCompletionTuningParams_Optimizer) Reset() {
	*x = TextToTextCompletionTuningParams_Optimizer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextToTextCompletionTuningParams_Optimizer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextToTextCompletionTuningParams_Optimizer) ProtoMessage() {}

func (x *TextToTextCompletionTuningParams_Optimizer) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextToTextCompletionTuningParams_Optimizer.ProtoReflect.Descriptor instead.
func (*TextToTextCompletionTuningParams_Optimizer) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{9, 1}
}

func (m *TextToTextCompletionTuningParams_Optimizer) GetType() isTextToTextCompletionTuningParams_Optimizer_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *TextToTextCompletionTuningParams_Optimizer) GetAdamw() *OptimizerAdamw {
	if x, ok := x.GetType().(*TextToTextCompletionTuningParams_Optimizer_Adamw); ok {
		return x.Adamw
	}
	return nil
}

type isTextToTextCompletionTuningParams_Optimizer_Type interface {
	isTextToTextCompletionTuningParams_Optimizer_Type()
}

type TextToTextCompletionTuningParams_Optimizer_Adamw struct {
	Adamw *OptimizerAdamw `protobuf:"bytes,1,opt,name=adamw,proto3,oneof"`
}

func (*TextToTextCompletionTuningParams_Optimizer_Adamw) isTextToTextCompletionTuningParams_Optimizer_Type() {
}

type TextClassificationMultilabelParams_Scheduler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*TextClassificationMultilabelParams_Scheduler_Linear
	//	*TextClassificationMultilabelParams_Scheduler_Constant
	//	*TextClassificationMultilabelParams_Scheduler_Cosine
	Type        isTextClassificationMultilabelParams_Scheduler_Type `protobuf_oneof:"type"`
	WarmupRatio float64                                             `protobuf:"fixed64,101,opt,name=warmup_ratio,json=warmupRatio,proto3" json:"warmup_ratio,omitempty"`
}

func (x *TextClassificationMultilabelParams_Scheduler) Reset() {
	*x = TextClassificationMultilabelParams_Scheduler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextClassificationMultilabelParams_Scheduler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextClassificationMultilabelParams_Scheduler) ProtoMessage() {}

func (x *TextClassificationMultilabelParams_Scheduler) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextClassificationMultilabelParams_Scheduler.ProtoReflect.Descriptor instead.
func (*TextClassificationMultilabelParams_Scheduler) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{10, 0}
}

func (m *TextClassificationMultilabelParams_Scheduler) GetType() isTextClassificationMultilabelParams_Scheduler_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *TextClassificationMultilabelParams_Scheduler) GetLinear() *SchedulerLinear {
	if x, ok := x.GetType().(*TextClassificationMultilabelParams_Scheduler_Linear); ok {
		return x.Linear
	}
	return nil
}

func (x *TextClassificationMultilabelParams_Scheduler) GetConstant() *SchedulerConstant {
	if x, ok := x.GetType().(*TextClassificationMultilabelParams_Scheduler_Constant); ok {
		return x.Constant
	}
	return nil
}

func (x *TextClassificationMultilabelParams_Scheduler) GetCosine() *SchedulerCosine {
	if x, ok := x.GetType().(*TextClassificationMultilabelParams_Scheduler_Cosine); ok {
		return x.Cosine
	}
	return nil
}

func (x *TextClassificationMultilabelParams_Scheduler) GetWarmupRatio() float64 {
	if x != nil {
		return x.WarmupRatio
	}
	return 0
}

type isTextClassificationMultilabelParams_Scheduler_Type interface {
	isTextClassificationMultilabelParams_Scheduler_Type()
}

type TextClassificationMultilabelParams_Scheduler_Linear struct {
	Linear *SchedulerLinear `protobuf:"bytes,1,opt,name=linear,proto3,oneof"`
}

type TextClassificationMultilabelParams_Scheduler_Constant struct {
	Constant *SchedulerConstant `protobuf:"bytes,2,opt,name=constant,proto3,oneof"`
}

type TextClassificationMultilabelParams_Scheduler_Cosine struct {
	Cosine *SchedulerCosine `protobuf:"bytes,3,opt,name=cosine,proto3,oneof"`
}

func (*TextClassificationMultilabelParams_Scheduler_Linear) isTextClassificationMultilabelParams_Scheduler_Type() {
}

func (*TextClassificationMultilabelParams_Scheduler_Constant) isTextClassificationMultilabelParams_Scheduler_Type() {
}

func (*TextClassificationMultilabelParams_Scheduler_Cosine) isTextClassificationMultilabelParams_Scheduler_Type() {
}

type TextClassificationMultilabelParams_Optimizer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*TextClassificationMultilabelParams_Optimizer_Adamw
	Type isTextClassificationMultilabelParams_Optimizer_Type `protobuf_oneof:"type"`
}

func (x *TextClassificationMultilabelParams_Optimizer) Reset() {
	*x = TextClassificationMultilabelParams_Optimizer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextClassificationMultilabelParams_Optimizer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextClassificationMultilabelParams_Optimizer) ProtoMessage() {}

func (x *TextClassificationMultilabelParams_Optimizer) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextClassificationMultilabelParams_Optimizer.ProtoReflect.Descriptor instead.
func (*TextClassificationMultilabelParams_Optimizer) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{10, 1}
}

func (m *TextClassificationMultilabelParams_Optimizer) GetType() isTextClassificationMultilabelParams_Optimizer_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *TextClassificationMultilabelParams_Optimizer) GetAdamw() *OptimizerAdamw {
	if x, ok := x.GetType().(*TextClassificationMultilabelParams_Optimizer_Adamw); ok {
		return x.Adamw
	}
	return nil
}

type isTextClassificationMultilabelParams_Optimizer_Type interface {
	isTextClassificationMultilabelParams_Optimizer_Type()
}

type TextClassificationMultilabelParams_Optimizer_Adamw struct {
	Adamw *OptimizerAdamw `protobuf:"bytes,1,opt,name=adamw,proto3,oneof"`
}

func (*TextClassificationMultilabelParams_Optimizer_Adamw) isTextClassificationMultilabelParams_Optimizer_Type() {
}

type TextClassificationMulticlassParams_Scheduler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*TextClassificationMulticlassParams_Scheduler_Linear
	//	*TextClassificationMulticlassParams_Scheduler_Constant
	//	*TextClassificationMulticlassParams_Scheduler_Cosine
	Type        isTextClassificationMulticlassParams_Scheduler_Type `protobuf_oneof:"type"`
	WarmupRatio float64                                             `protobuf:"fixed64,101,opt,name=warmup_ratio,json=warmupRatio,proto3" json:"warmup_ratio,omitempty"`
}

func (x *TextClassificationMulticlassParams_Scheduler) Reset() {
	*x = TextClassificationMulticlassParams_Scheduler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextClassificationMulticlassParams_Scheduler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextClassificationMulticlassParams_Scheduler) ProtoMessage() {}

func (x *TextClassificationMulticlassParams_Scheduler) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextClassificationMulticlassParams_Scheduler.ProtoReflect.Descriptor instead.
func (*TextClassificationMulticlassParams_Scheduler) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{11, 0}
}

func (m *TextClassificationMulticlassParams_Scheduler) GetType() isTextClassificationMulticlassParams_Scheduler_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *TextClassificationMulticlassParams_Scheduler) GetLinear() *SchedulerLinear {
	if x, ok := x.GetType().(*TextClassificationMulticlassParams_Scheduler_Linear); ok {
		return x.Linear
	}
	return nil
}

func (x *TextClassificationMulticlassParams_Scheduler) GetConstant() *SchedulerConstant {
	if x, ok := x.GetType().(*TextClassificationMulticlassParams_Scheduler_Constant); ok {
		return x.Constant
	}
	return nil
}

func (x *TextClassificationMulticlassParams_Scheduler) GetCosine() *SchedulerCosine {
	if x, ok := x.GetType().(*TextClassificationMulticlassParams_Scheduler_Cosine); ok {
		return x.Cosine
	}
	return nil
}

func (x *TextClassificationMulticlassParams_Scheduler) GetWarmupRatio() float64 {
	if x != nil {
		return x.WarmupRatio
	}
	return 0
}

type isTextClassificationMulticlassParams_Scheduler_Type interface {
	isTextClassificationMulticlassParams_Scheduler_Type()
}

type TextClassificationMulticlassParams_Scheduler_Linear struct {
	Linear *SchedulerLinear `protobuf:"bytes,1,opt,name=linear,proto3,oneof"`
}

type TextClassificationMulticlassParams_Scheduler_Constant struct {
	Constant *SchedulerConstant `protobuf:"bytes,2,opt,name=constant,proto3,oneof"`
}

type TextClassificationMulticlassParams_Scheduler_Cosine struct {
	Cosine *SchedulerCosine `protobuf:"bytes,3,opt,name=cosine,proto3,oneof"`
}

func (*TextClassificationMulticlassParams_Scheduler_Linear) isTextClassificationMulticlassParams_Scheduler_Type() {
}

func (*TextClassificationMulticlassParams_Scheduler_Constant) isTextClassificationMulticlassParams_Scheduler_Type() {
}

func (*TextClassificationMulticlassParams_Scheduler_Cosine) isTextClassificationMulticlassParams_Scheduler_Type() {
}

type TextClassificationMulticlassParams_Optimizer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*TextClassificationMulticlassParams_Optimizer_Adamw
	Type isTextClassificationMulticlassParams_Optimizer_Type `protobuf_oneof:"type"`
}

func (x *TextClassificationMulticlassParams_Optimizer) Reset() {
	*x = TextClassificationMulticlassParams_Optimizer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextClassificationMulticlassParams_Optimizer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextClassificationMulticlassParams_Optimizer) ProtoMessage() {}

func (x *TextClassificationMulticlassParams_Optimizer) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextClassificationMulticlassParams_Optimizer.ProtoReflect.Descriptor instead.
func (*TextClassificationMulticlassParams_Optimizer) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP(), []int{11, 1}
}

func (m *TextClassificationMulticlassParams_Optimizer) GetType() isTextClassificationMulticlassParams_Optimizer_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *TextClassificationMulticlassParams_Optimizer) GetAdamw() *OptimizerAdamw {
	if x, ok := x.GetType().(*TextClassificationMulticlassParams_Optimizer_Adamw); ok {
		return x.Adamw
	}
	return nil
}

type isTextClassificationMulticlassParams_Optimizer_Type interface {
	isTextClassificationMulticlassParams_Optimizer_Type()
}

type TextClassificationMulticlassParams_Optimizer_Adamw struct {
	Adamw *OptimizerAdamw `protobuf:"bytes,1,opt,name=adamw,proto3,oneof"`
}

func (*TextClassificationMulticlassParams_Optimizer_Adamw) isTextClassificationMulticlassParams_Optimizer_Type() {
}

var File_yandex_cloud_ai_tuning_v1_tuning_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61,
	0x69, 0x2f, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x75, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x19, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1d, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x61, 0x69, 0x2f, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2c, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x61, 0x69, 0x2f, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x75, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x31, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x69,
	0x2f, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x75, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x31, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x61, 0x69, 0x2f, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x75,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x73, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x75, 0x6e,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe8, 0xc7, 0x31, 0x01, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x0b, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x43, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x0e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0c, 0x74, 0x75, 0x6e,
	0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x16, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x41, 0x0a, 0x13, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01,
	0x52, 0x0c, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x3c,
	0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xb2, 0x01, 0x0a,
	0x0e, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x55, 0x72, 0x69, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x22, 0x7c, 0x0a, 0x0e, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x75, 0x6e,
	0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xc5, 0x07, 0x0a, 0x0d, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x72, 0x69, 0x12, 0x67, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x42,
	0x06, 0x82, 0xc8, 0x31, 0x02, 0x3e, 0x30, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x69, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x12, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x12, 0x74, 0x0a, 0x17, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x78, 0x74, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48,
	0x00, 0x52, 0x14, 0x74, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x1e, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48,
	0x00, 0x52, 0x1c, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x85, 0x01, 0x0a, 0x1e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x1c, 0x74, 0x65, 0x78, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc9, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xca, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x0f, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x74, 0x75, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x64,
	0x4a, 0x05, 0x08, 0x67, 0x10, 0xc8, 0x01, 0x22, 0x88, 0x07, 0x0a, 0x20, 0x54, 0x65, 0x78, 0x74,
	0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x6c, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x31, 0x0a,
	0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x6f, 0x72, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69,
	0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x6f, 0x72, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x72,
	0x61, 0x12, 0x52, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x75, 0x6e, 0x65,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x54, 0x75, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x54, 0x75, 0x6e, 0x65, 0x12, 0x64, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x09, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x45, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x72, 0x1a, 0x94, 0x02, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12,
	0x44, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x48, 0x00, 0x52, 0x06, 0x6c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x12, 0x4a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x6f, 0x73, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x63, 0x6f, 0x73, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6d, 0x75,
	0x70, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x65, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x77,
	0x61, 0x72, 0x6d, 0x75, 0x70, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x65, 0x1a, 0x56, 0x0a, 0x09, 0x4f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x05, 0x61, 0x64, 0x61, 0x6d, 0x77, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x41, 0x64, 0x61, 0x6d, 0x77, 0x48,
	0x00, 0x52, 0x05, 0x61, 0x64, 0x61, 0x6d, 0x77, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x4a,
	0x04, 0x08, 0x04, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x64, 0x4a, 0x05, 0x08, 0x66, 0x10,
	0xc8, 0x01, 0x22, 0x8e, 0x07, 0x0a, 0x22, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x6c, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x6c, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a,
	0x04, 0x6c, 0x6f, 0x72, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x4c, 0x6f, 0x72, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x72, 0x61, 0x12, 0x52,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x75, 0x6e, 0x65, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x54, 0x75, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x75,
	0x6e, 0x65, 0x12, 0x66, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18,
	0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52,
	0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x09, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69,
	0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x65, 0x72, 0x1a, 0x94, 0x02, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x12, 0x44, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x48, 0x00, 0x52, 0x06,
	0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x12, 0x4a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x6f, 0x73, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x69, 0x6e, 0x65, 0x48, 0x00,
	0x52, 0x06, 0x63, 0x6f, 0x73, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6d,
	0x75, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x65, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x77, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x65, 0x1a, 0x56, 0x0a, 0x09, 0x4f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x05, 0x61, 0x64, 0x61, 0x6d, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x41, 0x64, 0x61, 0x6d, 0x77,
	0x48, 0x00, 0x52, 0x05, 0x61, 0x64, 0x61, 0x6d, 0x77, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x4a, 0x04, 0x08, 0x04, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x64, 0x4a, 0x05, 0x08, 0x66,
	0x10, 0xc8, 0x01, 0x22, 0x8e, 0x07, 0x0a, 0x22, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x6c, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x6c, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f,
	0x0a, 0x04, 0x6c, 0x6f, 0x72, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74,
	0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x4c, 0x6f, 0x72, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x6f, 0x72, 0x61, 0x12,
	0x52, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x75, 0x6e, 0x65, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x54, 0x75, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54,
	0x75, 0x6e, 0x65, 0x12, 0x66, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x09, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x47, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x65, 0x72, 0x1a, 0x94, 0x02, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x12, 0x44, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x48, 0x00, 0x52,
	0x06, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x12, 0x4a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x6f, 0x73, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x69, 0x6e, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x6f, 0x73, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72,
	0x6d, 0x75, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x65, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x77, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x65, 0x1a, 0x56, 0x0a, 0x09, 0x4f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x05, 0x61, 0x64, 0x61, 0x6d, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x41, 0x64, 0x61, 0x6d,
	0x77, 0x48, 0x00, 0x52, 0x05, 0x61, 0x64, 0x61, 0x6d, 0x77, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x64, 0x4a, 0x05, 0x08,
	0x66, 0x10, 0xc8, 0x01, 0x22, 0x35, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8,
	0xc7, 0x31, 0x01, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22,
	0x32, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x22, 0xbc, 0x05, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x72, 0x69, 0x12, 0x5f, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x69, 0x0a, 0x13, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x74, 0x0a, 0x17, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x14, 0x74, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x54, 0x65, 0x78,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x1e,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x1c, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x85, 0x01, 0x0a, 0x1e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74,
	0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x1c, 0x74,
	0x65, 0x78, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x74,
	0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4a, 0x04, 0x08, 0x05,
	0x10, 0x64, 0x32, 0xac, 0x05, 0x0a, 0x0d, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x79, 0x0a, 0x04, 0x54, 0x75, 0x6e, 0x65, 0x12, 0x28, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74,
	0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x24, 0xb2, 0xd2, 0x2a, 0x20, 0x0a,
	0x0e, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x65, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x08, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x12, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x54, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x72, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x55, 0x72, 0x6c, 0x12, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x55, 0x72, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x63, 0x0a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x69, 0x2e, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x69, 0x2f, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x76,
	0x31, 0x3b, 0x66, 0x6f, 0x6d, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescData = file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDesc
)

func file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescData)
	})
	return file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDescData
}

var file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_yandex_cloud_ai_tuning_v1_tuning_service_proto_goTypes = []any{
	(*ListTuningsRequest)(nil),                           // 0: yandex.cloud.ai.tuning.v1.ListTuningsRequest
	(*ListTuningsResponse)(nil),                          // 1: yandex.cloud.ai.tuning.v1.ListTuningsResponse
	(*DescribeTuningRequest)(nil),                        // 2: yandex.cloud.ai.tuning.v1.DescribeTuningRequest
	(*DescribeTuningResponse)(nil),                       // 3: yandex.cloud.ai.tuning.v1.DescribeTuningResponse
	(*CancelTuningRequest)(nil),                          // 4: yandex.cloud.ai.tuning.v1.CancelTuningRequest
	(*CancelTuningResponse)(nil),                         // 5: yandex.cloud.ai.tuning.v1.CancelTuningResponse
	(*TuningResponse)(nil),                               // 6: yandex.cloud.ai.tuning.v1.TuningResponse
	(*TuningMetadata)(nil),                               // 7: yandex.cloud.ai.tuning.v1.TuningMetadata
	(*TuningRequest)(nil),                                // 8: yandex.cloud.ai.tuning.v1.TuningRequest
	(*TextToTextCompletionTuningParams)(nil),             // 9: yandex.cloud.ai.tuning.v1.TextToTextCompletionTuningParams
	(*TextClassificationMultilabelParams)(nil),           // 10: yandex.cloud.ai.tuning.v1.TextClassificationMultilabelParams
	(*TextClassificationMulticlassParams)(nil),           // 11: yandex.cloud.ai.tuning.v1.TextClassificationMulticlassParams
	(*GetMetricsUrlRequest)(nil),                         // 12: yandex.cloud.ai.tuning.v1.GetMetricsUrlRequest
	(*GetMetricsUrlResponse)(nil),                        // 13: yandex.cloud.ai.tuning.v1.GetMetricsUrlResponse
	(*GetOptionsRequest)(nil),                            // 14: yandex.cloud.ai.tuning.v1.GetOptionsRequest
	(*GetOptionsResponse)(nil),                           // 15: yandex.cloud.ai.tuning.v1.GetOptionsResponse
	nil,                                                  // 16: yandex.cloud.ai.tuning.v1.TuningRequest.LabelsEntry
	(*TuningRequest_WeightedDataset)(nil),                // 17: yandex.cloud.ai.tuning.v1.TuningRequest.WeightedDataset
	(*TextToTextCompletionTuningParams_Scheduler)(nil),   // 18: yandex.cloud.ai.tuning.v1.TextToTextCompletionTuningParams.Scheduler
	(*TextToTextCompletionTuningParams_Optimizer)(nil),   // 19: yandex.cloud.ai.tuning.v1.TextToTextCompletionTuningParams.Optimizer
	(*TextClassificationMultilabelParams_Scheduler)(nil), // 20: yandex.cloud.ai.tuning.v1.TextClassificationMultilabelParams.Scheduler
	(*TextClassificationMultilabelParams_Optimizer)(nil), // 21: yandex.cloud.ai.tuning.v1.TextClassificationMultilabelParams.Optimizer
	(*TextClassificationMulticlassParams_Scheduler)(nil), // 22: yandex.cloud.ai.tuning.v1.TextClassificationMulticlassParams.Scheduler
	(*TextClassificationMulticlassParams_Optimizer)(nil), // 23: yandex.cloud.ai.tuning.v1.TextClassificationMulticlassParams.Optimizer
	(*TuningTask)(nil),                                   // 24: yandex.cloud.ai.tuning.v1.TuningTask
	(TuningTask_Status)(0),                               // 25: yandex.cloud.ai.tuning.v1.TuningTask.Status
	(*TuningTypeLora)(nil),                               // 26: yandex.cloud.ai.tuning.v1.TuningTypeLora
	(*TuningTypePromptTune)(nil),                         // 27: yandex.cloud.ai.tuning.v1.TuningTypePromptTune
	(*SchedulerLinear)(nil),                              // 28: yandex.cloud.ai.tuning.v1.SchedulerLinear
	(*SchedulerConstant)(nil),                            // 29: yandex.cloud.ai.tuning.v1.SchedulerConstant
	(*SchedulerCosine)(nil),                              // 30: yandex.cloud.ai.tuning.v1.SchedulerCosine
	(*OptimizerAdamw)(nil),                               // 31: yandex.cloud.ai.tuning.v1.OptimizerAdamw
	(*operation.Operation)(nil),                          // 32: yandex.cloud.operation.Operation
}
var file_yandex_cloud_ai_tuning_v1_tuning_service_proto_depIdxs = []int32{
	24, // 0: yandex.cloud.ai.tuning.v1.ListTuningsResponse.tuning_tasks:type_name -> yandex.cloud.ai.tuning.v1.TuningTask
	24, // 1: yandex.cloud.ai.tuning.v1.DescribeTuningResponse.tuning_task:type_name -> yandex.cloud.ai.tuning.v1.TuningTask
	25, // 2: yandex.cloud.ai.tuning.v1.TuningResponse.status:type_name -> yandex.cloud.ai.tuning.v1.TuningTask.Status
	25, // 3: yandex.cloud.ai.tuning.v1.TuningMetadata.status:type_name -> yandex.cloud.ai.tuning.v1.TuningTask.Status
	17, // 4: yandex.cloud.ai.tuning.v1.TuningRequest.train_datasets:type_name -> yandex.cloud.ai.tuning.v1.TuningRequest.WeightedDataset
	17, // 5: yandex.cloud.ai.tuning.v1.TuningRequest.validation_datasets:type_name -> yandex.cloud.ai.tuning.v1.TuningRequest.WeightedDataset
	9,  // 6: yandex.cloud.ai.tuning.v1.TuningRequest.text_to_text_completion:type_name -> yandex.cloud.ai.tuning.v1.TextToTextCompletionTuningParams
	10, // 7: yandex.cloud.ai.tuning.v1.TuningRequest.text_classification_multilabel:type_name -> yandex.cloud.ai.tuning.v1.TextClassificationMultilabelParams
	11, // 8: yandex.cloud.ai.tuning.v1.TuningRequest.text_classification_multiclass:type_name -> yandex.cloud.ai.tuning.v1.TextClassificationMulticlassParams
	16, // 9: yandex.cloud.ai.tuning.v1.TuningRequest.labels:type_name -> yandex.cloud.ai.tuning.v1.TuningRequest.LabelsEntry
	26, // 10: yandex.cloud.ai.tuning.v1.TextToTextCompletionTuningParams.lora:type_name -> yandex.cloud.ai.tuning.v1.TuningTypeLora
	27, // 11: yandex.cloud.ai.tuning.v1.TextToTextCompletionTuningParams.prompt_tune:type_name -> yandex.cloud.ai.tuning.v1.TuningTypePromptTune
	18, // 12: yandex.cloud.ai.tuning.v1.TextToTextCompletionTuningParams.scheduler:type_name -> yandex.cloud.ai.tuning.v1.TextToTextCompletionTuningParams.Scheduler
	19, // 13: yandex.cloud.ai.tuning.v1.TextToTextCompletionTuningParams.optimizer:type_name -> yandex.cloud.ai.tuning.v1.TextToTextCompletionTuningParams.Optimizer
	26, // 14: yandex.cloud.ai.tuning.v1.TextClassificationMultilabelParams.lora:type_name -> yandex.cloud.ai.tuning.v1.TuningTypeLora
	27, // 15: yandex.cloud.ai.tuning.v1.TextClassificationMultilabelParams.prompt_tune:type_name -> yandex.cloud.ai.tuning.v1.TuningTypePromptTune
	20, // 16: yandex.cloud.ai.tuning.v1.TextClassificationMultilabelParams.scheduler:type_name -> yandex.cloud.ai.tuning.v1.TextClassificationMultilabelParams.Scheduler
	21, // 17: yandex.cloud.ai.tuning.v1.TextClassificationMultilabelParams.optimizer:type_name -> yandex.cloud.ai.tuning.v1.TextClassificationMultilabelParams.Optimizer
	26, // 18: yandex.cloud.ai.tuning.v1.TextClassificationMulticlassParams.lora:type_name -> yandex.cloud.ai.tuning.v1.TuningTypeLora
	27, // 19: yandex.cloud.ai.tuning.v1.TextClassificationMulticlassParams.prompt_tune:type_name -> yandex.cloud.ai.tuning.v1.TuningTypePromptTune
	22, // 20: yandex.cloud.ai.tuning.v1.TextClassificationMulticlassParams.scheduler:type_name -> yandex.cloud.ai.tuning.v1.TextClassificationMulticlassParams.Scheduler
	23, // 21: yandex.cloud.ai.tuning.v1.TextClassificationMulticlassParams.optimizer:type_name -> yandex.cloud.ai.tuning.v1.TextClassificationMulticlassParams.Optimizer
	17, // 22: yandex.cloud.ai.tuning.v1.GetOptionsResponse.train_datasets:type_name -> yandex.cloud.ai.tuning.v1.TuningRequest.WeightedDataset
	17, // 23: yandex.cloud.ai.tuning.v1.GetOptionsResponse.validation_datasets:type_name -> yandex.cloud.ai.tuning.v1.TuningRequest.WeightedDataset
	9,  // 24: yandex.cloud.ai.tuning.v1.GetOptionsResponse.text_to_text_completion:type_name -> yandex.cloud.ai.tuning.v1.TextToTextCompletionTuningParams
	10, // 25: yandex.cloud.ai.tuning.v1.GetOptionsResponse.text_classification_multilabel:type_name -> yandex.cloud.ai.tuning.v1.TextClassificationMultilabelParams
	11, // 26: yandex.cloud.ai.tuning.v1.GetOptionsResponse.text_classification_multiclass:type_name -> yandex.cloud.ai.tuning.v1.TextClassificationMulticlassParams
	28, // 27: yandex.cloud.ai.tuning.v1.TextToTextCompletionTuningParams.Scheduler.linear:type_name -> yandex.cloud.ai.tuning.v1.SchedulerLinear
	29, // 28: yandex.cloud.ai.tuning.v1.TextToTextCompletionTuningParams.Scheduler.constant:type_name -> yandex.cloud.ai.tuning.v1.SchedulerConstant
	30, // 29: yandex.cloud.ai.tuning.v1.TextToTextCompletionTuningParams.Scheduler.cosine:type_name -> yandex.cloud.ai.tuning.v1.SchedulerCosine
	31, // 30: yandex.cloud.ai.tuning.v1.TextToTextCompletionTuningParams.Optimizer.adamw:type_name -> yandex.cloud.ai.tuning.v1.OptimizerAdamw
	28, // 31: yandex.cloud.ai.tuning.v1.TextClassificationMultilabelParams.Scheduler.linear:type_name -> yandex.cloud.ai.tuning.v1.SchedulerLinear
	29, // 32: yandex.cloud.ai.tuning.v1.TextClassificationMultilabelParams.Scheduler.constant:type_name -> yandex.cloud.ai.tuning.v1.SchedulerConstant
	30, // 33: yandex.cloud.ai.tuning.v1.TextClassificationMultilabelParams.Scheduler.cosine:type_name -> yandex.cloud.ai.tuning.v1.SchedulerCosine
	31, // 34: yandex.cloud.ai.tuning.v1.TextClassificationMultilabelParams.Optimizer.adamw:type_name -> yandex.cloud.ai.tuning.v1.OptimizerAdamw
	28, // 35: yandex.cloud.ai.tuning.v1.TextClassificationMulticlassParams.Scheduler.linear:type_name -> yandex.cloud.ai.tuning.v1.SchedulerLinear
	29, // 36: yandex.cloud.ai.tuning.v1.TextClassificationMulticlassParams.Scheduler.constant:type_name -> yandex.cloud.ai.tuning.v1.SchedulerConstant
	30, // 37: yandex.cloud.ai.tuning.v1.TextClassificationMulticlassParams.Scheduler.cosine:type_name -> yandex.cloud.ai.tuning.v1.SchedulerCosine
	31, // 38: yandex.cloud.ai.tuning.v1.TextClassificationMulticlassParams.Optimizer.adamw:type_name -> yandex.cloud.ai.tuning.v1.OptimizerAdamw
	8,  // 39: yandex.cloud.ai.tuning.v1.TuningService.Tune:input_type -> yandex.cloud.ai.tuning.v1.TuningRequest
	0,  // 40: yandex.cloud.ai.tuning.v1.TuningService.List:input_type -> yandex.cloud.ai.tuning.v1.ListTuningsRequest
	2,  // 41: yandex.cloud.ai.tuning.v1.TuningService.Describe:input_type -> yandex.cloud.ai.tuning.v1.DescribeTuningRequest
	4,  // 42: yandex.cloud.ai.tuning.v1.TuningService.Cancel:input_type -> yandex.cloud.ai.tuning.v1.CancelTuningRequest
	12, // 43: yandex.cloud.ai.tuning.v1.TuningService.GetMetricsUrl:input_type -> yandex.cloud.ai.tuning.v1.GetMetricsUrlRequest
	14, // 44: yandex.cloud.ai.tuning.v1.TuningService.GetOptions:input_type -> yandex.cloud.ai.tuning.v1.GetOptionsRequest
	32, // 45: yandex.cloud.ai.tuning.v1.TuningService.Tune:output_type -> yandex.cloud.operation.Operation
	1,  // 46: yandex.cloud.ai.tuning.v1.TuningService.List:output_type -> yandex.cloud.ai.tuning.v1.ListTuningsResponse
	3,  // 47: yandex.cloud.ai.tuning.v1.TuningService.Describe:output_type -> yandex.cloud.ai.tuning.v1.DescribeTuningResponse
	5,  // 48: yandex.cloud.ai.tuning.v1.TuningService.Cancel:output_type -> yandex.cloud.ai.tuning.v1.CancelTuningResponse
	13, // 49: yandex.cloud.ai.tuning.v1.TuningService.GetMetricsUrl:output_type -> yandex.cloud.ai.tuning.v1.GetMetricsUrlResponse
	15, // 50: yandex.cloud.ai.tuning.v1.TuningService.GetOptions:output_type -> yandex.cloud.ai.tuning.v1.GetOptionsResponse
	45, // [45:51] is the sub-list for method output_type
	39, // [39:45] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_yandex_cloud_ai_tuning_v1_tuning_service_proto_init() }
func file_yandex_cloud_ai_tuning_v1_tuning_service_proto_init() {
	if File_yandex_cloud_ai_tuning_v1_tuning_service_proto != nil {
		return
	}
	file_yandex_cloud_ai_tuning_v1_tuning_task_proto_init()
	file_yandex_cloud_ai_tuning_v1_tuning_types_proto_init()
	file_yandex_cloud_ai_tuning_v1_tuning_optimizers_proto_init()
	file_yandex_cloud_ai_tuning_v1_tuning_schedulers_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ListTuningsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListTuningsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeTuningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeTuningResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CancelTuningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CancelTuningResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TuningResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*TuningMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*TuningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*TextToTextCompletionTuningParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*TextClassificationMultilabelParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*TextClassificationMulticlassParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GetMetricsUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GetMetricsUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*GetOptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*GetOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*TuningRequest_WeightedDataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*TextToTextCompletionTuningParams_Scheduler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*TextToTextCompletionTuningParams_Optimizer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*TextClassificationMultilabelParams_Scheduler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*TextClassificationMultilabelParams_Optimizer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*TextClassificationMulticlassParams_Scheduler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*TextClassificationMulticlassParams_Optimizer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[8].OneofWrappers = []any{
		(*TuningRequest_TextToTextCompletion)(nil),
		(*TuningRequest_TextClassificationMultilabel)(nil),
		(*TuningRequest_TextClassificationMulticlass)(nil),
	}
	file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[9].OneofWrappers = []any{
		(*TextToTextCompletionTuningParams_Lora)(nil),
		(*TextToTextCompletionTuningParams_PromptTune)(nil),
	}
	file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[10].OneofWrappers = []any{
		(*TextClassificationMultilabelParams_Lora)(nil),
		(*TextClassificationMultilabelParams_PromptTune)(nil),
	}
	file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[11].OneofWrappers = []any{
		(*TextClassificationMulticlassParams_Lora)(nil),
		(*TextClassificationMulticlassParams_PromptTune)(nil),
	}
	file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[15].OneofWrappers = []any{
		(*GetOptionsResponse_TextToTextCompletion)(nil),
		(*GetOptionsResponse_TextClassificationMultilabel)(nil),
		(*GetOptionsResponse_TextClassificationMulticlass)(nil),
	}
	file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[18].OneofWrappers = []any{
		(*TextToTextCompletionTuningParams_Scheduler_Linear)(nil),
		(*TextToTextCompletionTuningParams_Scheduler_Constant)(nil),
		(*TextToTextCompletionTuningParams_Scheduler_Cosine)(nil),
	}
	file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[19].OneofWrappers = []any{
		(*TextToTextCompletionTuningParams_Optimizer_Adamw)(nil),
	}
	file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[20].OneofWrappers = []any{
		(*TextClassificationMultilabelParams_Scheduler_Linear)(nil),
		(*TextClassificationMultilabelParams_Scheduler_Constant)(nil),
		(*TextClassificationMultilabelParams_Scheduler_Cosine)(nil),
	}
	file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[21].OneofWrappers = []any{
		(*TextClassificationMultilabelParams_Optimizer_Adamw)(nil),
	}
	file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[22].OneofWrappers = []any{
		(*TextClassificationMulticlassParams_Scheduler_Linear)(nil),
		(*TextClassificationMulticlassParams_Scheduler_Constant)(nil),
		(*TextClassificationMulticlassParams_Scheduler_Cosine)(nil),
	}
	file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes[23].OneofWrappers = []any{
		(*TextClassificationMulticlassParams_Optimizer_Adamw)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_ai_tuning_v1_tuning_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_ai_tuning_v1_tuning_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_ai_tuning_v1_tuning_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_ai_tuning_v1_tuning_service_proto = out.File
	file_yandex_cloud_ai_tuning_v1_tuning_service_proto_rawDesc = nil
	file_yandex_cloud_ai_tuning_v1_tuning_service_proto_goTypes = nil
	file_yandex_cloud_ai_tuning_v1_tuning_service_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: yandex/cloud/ai/tuning/v1/tuning_service.proto

package fomo

import (
	context "context"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TuningService_Tune_FullMethodName          = "/yandex.cloud.ai.tuning.v1.TuningService/Tune"
	TuningService_List_FullMethodName          = "/yandex.cloud.ai.tuning.v1.TuningService/List"
	TuningService_Describe_FullMethodName      = "/yandex.cloud.ai.tuning.v1.TuningService/Describe"
	TuningService_Cancel_FullMethodName        = "/yandex.cloud.ai.tuning.v1.TuningService/Cancel"
	TuningService_GetMetricsUrl_FullMethodName = "/yandex.cloud.ai.tuning.v1.TuningService/GetMetricsUrl"
	TuningService_GetOptions_FullMethodName    = "/yandex.cloud.ai.tuning.v1.TuningService/GetOptions"
)

// TuningServiceClient is the client API for TuningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TuningServiceClient interface {
	Tune(ctx context.Context, in *TuningRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	List(ctx context.Context, in *ListTuningsRequest, opts ...grpc.CallOption) (*ListTuningsResponse, error)
	Describe(ctx context.Context, in *DescribeTuningRequest, opts ...grpc.CallOption) (*DescribeTuningResponse, error)
	Cancel(ctx context.Context, in *CancelTuningRequest, opts ...grpc.CallOption) (*CancelTuningResponse, error)
	GetMetricsUrl(ctx context.Context, in *GetMetricsUrlRequest, opts ...grpc.CallOption) (*GetMetricsUrlResponse, error)
	GetOptions(ctx context.Context, in *GetOptionsRequest, opts ...grpc.CallOption) (*GetOptionsResponse, error)
}

type tuningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTuningServiceClient(cc grpc.ClientConnInterface) TuningServiceClient {
	return &tuningServiceClient{cc}
}

func (c *tuningServiceClient) Tune(ctx context.Context, in *TuningRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, TuningService_Tune_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tuningServiceClient) List(ctx context.Context, in *ListTuningsRequest, opts ...grpc.CallOption) (*ListTuningsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTuningsResponse)
	err := c.cc.Invoke(ctx, TuningService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tuningServiceClient) Describe(ctx context.Context, in *DescribeTuningRequest, opts ...grpc.CallOption) (*DescribeTuningResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeTuningResponse)
	err := c.cc.Invoke(ctx, TuningService_Describe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tuningServiceClient) Cancel(ctx context.Context, in *CancelTuningRequest, opts ...grpc.CallOption) (*CancelTuningResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTuningResponse)
	err := c.cc.Invoke(ctx, TuningService_Cancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tuningServiceClient) GetMetricsUrl(ctx context.Context, in *GetMetricsUrlRequest, opts ...grpc.CallOption) (*GetMetricsUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMetricsUrlResponse)
	err := c.cc.Invoke(ctx, TuningService_GetMetricsUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tuningServiceClient) GetOptions(ctx context.Context, in *GetOptionsRequest, opts ...grpc.CallOption) (*GetOptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOptionsResponse)
	err := c.cc.Invoke(ctx, TuningService_GetOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TuningServiceServer is the server API for TuningService service.
// All implementations should embed UnimplementedTuningServiceServer
// for forward compatibility.
type TuningServiceServer interface {
	Tune(context.Context, *TuningRequest) (*operation.Operation, error)
	List(context.Context, *ListTuningsRequest) (*ListTuningsResponse, error)
	Describe(context.Context, *DescribeTuningRequest) (*DescribeTuningResponse, error)
	Cancel(context.Context, *CancelTuningRequest) (*CancelTuningResponse, error)
	GetMetricsUrl(context.Context, *GetMetricsUrlRequest) (*GetMetricsUrlResponse, error)
	GetOptions(context.Context, *GetOptionsRequest) (*GetOptionsResponse, error)
}

// UnimplementedTuningServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTuningServiceServer struct{}

func (UnimplementedTuningServiceServer) Tune(context.Context, *TuningRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tune not implemented")
}
func (UnimplementedTuningServiceServer) List(context.Context, *ListTuningsRequest) (*ListTuningsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTuningServiceServer) Describe(context.Context, *DescribeTuningRequest) (*DescribeTuningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Describe not implemented")
}
func (UnimplementedTuningServiceServer) Cancel(context.Context, *CancelTuningRequest) (*CancelTuningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedTuningServiceServer) GetMetricsUrl(context.Context, *GetMetricsUrlRequest) (*GetMetricsUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricsUrl not implemented")
}
func (UnimplementedTuningServiceServer) GetOptions(context.Context, *GetOptionsRequest) (*GetOptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOptions not implemented")
}
func (UnimplementedTuningServiceServer) testEmbeddedByValue() {}

// UnsafeTuningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TuningServiceServer will
// result in compilation errors.
type UnsafeTuningServiceServer interface {
	mustEmbedUnimplementedTuningServiceServer()
}

func RegisterTuningServiceServer(s grpc.ServiceRegistrar, srv TuningServiceServer) {
	// If the following call pancis, it indicates UnimplementedTuningServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TuningService_ServiceDesc, srv)
}

func _TuningService_Tune_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TuningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuningServiceServer).Tune(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TuningService_Tune_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuningServiceServer).Tune(ctx, req.(*TuningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TuningService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTuningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuningServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TuningService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuningServiceServer).List(ctx, req.(*ListTuningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TuningService_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTuningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuningServiceServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TuningService_Describe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuningServiceServer).Describe(ctx, req.(*DescribeTuningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TuningService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTuningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuningServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TuningService_Cancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuningServiceServer).Cancel(ctx, req.(*CancelTuningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TuningService_GetMetricsUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuningServiceServer).GetMetricsUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TuningService_GetMetricsUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuningServiceServer).GetMetricsUrl(ctx, req.(*GetMetricsUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TuningService_GetOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuningServiceServer).GetOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TuningService_GetOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuningServiceServer).GetOptions(ctx, req.(*GetOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TuningService_ServiceDesc is the grpc.ServiceDesc for TuningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TuningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.ai.tuning.v1.TuningService",
	HandlerType: (*TuningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Tune",
			Handler:    _TuningService_Tune_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TuningService_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _TuningService_Describe_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _TuningService_Cancel_Handler,
		},
		{
			MethodName: "GetMetricsUrl",
			Handler:    _TuningService_GetMetricsUrl_Handler,
		},
		{
			MethodName: "GetOptions",
			Handler:    _TuningService_GetOptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/ai/tuning/v1/tuning_service.proto",
}

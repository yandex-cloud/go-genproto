// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: yandex/cloud/baremetal/v1alpha/private_subnet.proto

package baremetal

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Private subnet status.
type PrivateSubnet_Status int32

const (
	// Unspecified private subnet status.
	PrivateSubnet_STATUS_UNSPECIFIED PrivateSubnet_Status = 0
	// Private subnet is being created.
	PrivateSubnet_CREATING PrivateSubnet_Status = 1
	// Private subnet is ready to use.
	PrivateSubnet_READY PrivateSubnet_Status = 2
	// Private subnet is being updated.
	PrivateSubnet_UPDATING PrivateSubnet_Status = 3
	// Private subnet is being deleted.
	PrivateSubnet_DELETING PrivateSubnet_Status = 4
	// Private subnet encountered a problem and cannot operate.
	PrivateSubnet_ERROR PrivateSubnet_Status = 5
)

// Enum value maps for PrivateSubnet_Status.
var (
	PrivateSubnet_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "CREATING",
		2: "READY",
		3: "UPDATING",
		4: "DELETING",
		5: "ERROR",
	}
	PrivateSubnet_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"CREATING":           1,
		"READY":              2,
		"UPDATING":           3,
		"DELETING":           4,
		"ERROR":              5,
	}
)

func (x PrivateSubnet_Status) Enum() *PrivateSubnet_Status {
	p := new(PrivateSubnet_Status)
	*p = x
	return p
}

func (x PrivateSubnet_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrivateSubnet_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_enumTypes[0].Descriptor()
}

func (PrivateSubnet_Status) Type() protoreflect.EnumType {
	return &file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_enumTypes[0]
}

func (x PrivateSubnet_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrivateSubnet_Status.Descriptor instead.
func (PrivateSubnet_Status) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_rawDescGZIP(), []int{0, 0}
}

// A PrivateSubnet resource.
type PrivateSubnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the private subnet.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the cloud that the private subnet belongs to.
	CloudId string `protobuf:"bytes,2,opt,name=cloud_id,json=cloudId,proto3" json:"cloud_id,omitempty"`
	// ID of the folder that the private subnet belongs to.
	FolderId string `protobuf:"bytes,3,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the private subnet.
	// The name is unique within the folder.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Optional description of the private subnet.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Status of the private subnet.
	Status PrivateSubnet_Status `protobuf:"varint,6,opt,name=status,proto3,enum=yandex.cloud.baremetal.v1alpha.PrivateSubnet_Status" json:"status,omitempty"`
	// ID of the availability zone where the server resides.
	ZoneId string `protobuf:"bytes,7,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// ID of the hardware pool that the private subnet belongs to.
	HardwarePoolId string `protobuf:"bytes,8,opt,name=hardware_pool_id,json=hardwarePoolId,proto3" json:"hardware_pool_id,omitempty"`
	// Optional VRF options for the private subnet. If missing, the private subnet will be unrouted,
	// i.e. it will lack a DHCP server and routing capabilities between this subnet and other private
	// subnets.
	VrfOptions *PrivateSubnet_VrfOptions `protobuf:"bytes,9,opt,name=vrf_options,json=vrfOptions,proto3" json:"vrf_options,omitempty"`
	// Creation timestamp.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,100,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Resource labels as `key:value` pairs.
	Labels map[string]string `protobuf:"bytes,200,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PrivateSubnet) Reset() {
	*x = PrivateSubnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateSubnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateSubnet) ProtoMessage() {}

func (x *PrivateSubnet) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateSubnet.ProtoReflect.Descriptor instead.
func (*PrivateSubnet) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_rawDescGZIP(), []int{0}
}

func (x *PrivateSubnet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PrivateSubnet) GetCloudId() string {
	if x != nil {
		return x.CloudId
	}
	return ""
}

func (x *PrivateSubnet) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *PrivateSubnet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrivateSubnet) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PrivateSubnet) GetStatus() PrivateSubnet_Status {
	if x != nil {
		return x.Status
	}
	return PrivateSubnet_STATUS_UNSPECIFIED
}

func (x *PrivateSubnet) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *PrivateSubnet) GetHardwarePoolId() string {
	if x != nil {
		return x.HardwarePoolId
	}
	return ""
}

func (x *PrivateSubnet) GetVrfOptions() *PrivateSubnet_VrfOptions {
	if x != nil {
		return x.VrfOptions
	}
	return nil
}

func (x *PrivateSubnet) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PrivateSubnet) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// VRF options for the private subnet.
type PrivateSubnet_VrfOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the VRF.
	VrfId string `protobuf:"bytes,1,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
	// CIDR block for the subnet.
	Cidr string `protobuf:"bytes,2,opt,name=cidr,proto3" json:"cidr,omitempty"`
	// DHCP options for the subnet.
	DhcpOptions *DhcpOptions `protobuf:"bytes,3,opt,name=dhcp_options,json=dhcpOptions,proto3" json:"dhcp_options,omitempty"`
	// Gateway IP address for the subnet.
	GatewayIp string `protobuf:"bytes,4,opt,name=gateway_ip,json=gatewayIp,proto3" json:"gateway_ip,omitempty"`
}

func (x *PrivateSubnet_VrfOptions) Reset() {
	*x = PrivateSubnet_VrfOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateSubnet_VrfOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateSubnet_VrfOptions) ProtoMessage() {}

func (x *PrivateSubnet_VrfOptions) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateSubnet_VrfOptions.ProtoReflect.Descriptor instead.
func (*PrivateSubnet_VrfOptions) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PrivateSubnet_VrfOptions) GetVrfId() string {
	if x != nil {
		return x.VrfId
	}
	return ""
}

func (x *PrivateSubnet_VrfOptions) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *PrivateSubnet_VrfOptions) GetDhcpOptions() *DhcpOptions {
	if x != nil {
		return x.DhcpOptions
	}
	return nil
}

func (x *PrivateSubnet_VrfOptions) GetGatewayIp() string {
	if x != nil {
		return x.GatewayIp
	}
	return ""
}

var File_yandex_cloud_baremetal_v1alpha_private_subnet_proto protoreflect.FileDescriptor

var file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_rawDesc = []byte{
	0x0a, 0x33, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x61, 0x72, 0x65, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xdb, 0x06, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x49, 0x64, 0x12, 0x59, 0x0a, 0x0b, 0x76, 0x72, 0x66, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x56, 0x72, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0a, 0x76, 0x72, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x52, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xa6, 0x01, 0x0a, 0x0a, 0x56, 0x72, 0x66, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x72, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x72, 0x66, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64,
	0x72, 0x12, 0x4e, 0x0a, 0x0c, 0x64, 0x68, 0x63, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x68, 0x63, 0x70, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x64, 0x68, 0x63, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x70,
	0x22, 0x60, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x05, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x64, 0x4a, 0x05, 0x08, 0x65, 0x10, 0xc8, 0x01, 0x42,
	0x72, 0x0a, 0x22, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67,
	0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x74, 0x61,
	0x6c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x62, 0x61, 0x72, 0x65, 0x6d, 0x65,
	0x74, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_rawDescOnce sync.Once
	file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_rawDescData = file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_rawDesc
)

func file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_rawDescGZIP() []byte {
	file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_rawDescData)
	})
	return file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_rawDescData
}

var file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_goTypes = []any{
	(PrivateSubnet_Status)(0),        // 0: yandex.cloud.baremetal.v1alpha.PrivateSubnet.Status
	(*PrivateSubnet)(nil),            // 1: yandex.cloud.baremetal.v1alpha.PrivateSubnet
	nil,                              // 2: yandex.cloud.baremetal.v1alpha.PrivateSubnet.LabelsEntry
	(*PrivateSubnet_VrfOptions)(nil), // 3: yandex.cloud.baremetal.v1alpha.PrivateSubnet.VrfOptions
	(*timestamppb.Timestamp)(nil),    // 4: google.protobuf.Timestamp
	(*DhcpOptions)(nil),              // 5: yandex.cloud.baremetal.v1alpha.DhcpOptions
}
var file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_depIdxs = []int32{
	0, // 0: yandex.cloud.baremetal.v1alpha.PrivateSubnet.status:type_name -> yandex.cloud.baremetal.v1alpha.PrivateSubnet.Status
	3, // 1: yandex.cloud.baremetal.v1alpha.PrivateSubnet.vrf_options:type_name -> yandex.cloud.baremetal.v1alpha.PrivateSubnet.VrfOptions
	4, // 2: yandex.cloud.baremetal.v1alpha.PrivateSubnet.created_at:type_name -> google.protobuf.Timestamp
	2, // 3: yandex.cloud.baremetal.v1alpha.PrivateSubnet.labels:type_name -> yandex.cloud.baremetal.v1alpha.PrivateSubnet.LabelsEntry
	5, // 4: yandex.cloud.baremetal.v1alpha.PrivateSubnet.VrfOptions.dhcp_options:type_name -> yandex.cloud.baremetal.v1alpha.DhcpOptions
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_init() }
func file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_init() {
	if File_yandex_cloud_baremetal_v1alpha_private_subnet_proto != nil {
		return
	}
	file_yandex_cloud_baremetal_v1alpha_dhcp_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PrivateSubnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PrivateSubnet_VrfOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_msgTypes,
	}.Build()
	File_yandex_cloud_baremetal_v1alpha_private_subnet_proto = out.File
	file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_rawDesc = nil
	file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_goTypes = nil
	file_yandex_cloud_baremetal_v1alpha_private_subnet_proto_depIdxs = nil
}

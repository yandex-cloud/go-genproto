// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: yandex/cloud/baremetal/v1alpha/storage.proto

package baremetal

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Storage partition type.
type StoragePartitionType int32

const (
	// Unspecified storage partition type.
	StoragePartitionType_STORAGE_PARTITION_TYPE_UNSPECIFIED StoragePartitionType = 0
	// ext4 file system partition type.
	StoragePartitionType_EXT4 StoragePartitionType = 1
	// Swap partition type.
	StoragePartitionType_SWAP StoragePartitionType = 2
	// ext3 file system partition type.
	StoragePartitionType_EXT3 StoragePartitionType = 3
	// XFS file system partition type.
	StoragePartitionType_XFS StoragePartitionType = 4
)

// Enum value maps for StoragePartitionType.
var (
	StoragePartitionType_name = map[int32]string{
		0: "STORAGE_PARTITION_TYPE_UNSPECIFIED",
		1: "EXT4",
		2: "SWAP",
		3: "EXT3",
		4: "XFS",
	}
	StoragePartitionType_value = map[string]int32{
		"STORAGE_PARTITION_TYPE_UNSPECIFIED": 0,
		"EXT4":                               1,
		"SWAP":                               2,
		"EXT3":                               3,
		"XFS":                                4,
	}
)

func (x StoragePartitionType) Enum() *StoragePartitionType {
	p := new(StoragePartitionType)
	*p = x
	return p
}

func (x StoragePartitionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StoragePartitionType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_baremetal_v1alpha_storage_proto_enumTypes[0].Descriptor()
}

func (StoragePartitionType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_baremetal_v1alpha_storage_proto_enumTypes[0]
}

func (x StoragePartitionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StoragePartitionType.Descriptor instead.
func (StoragePartitionType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_baremetal_v1alpha_storage_proto_rawDescGZIP(), []int{0}
}

// RaidType represents different RAID configurations.
type RaidType int32

const (
	// Unspecified RAID configuration.
	RaidType_RAID_TYPE_UNSPECIFIED RaidType = 0
	// RAID0 configuration.
	RaidType_RAID0 RaidType = 1
	// RAID1 configuration.
	RaidType_RAID1 RaidType = 2
	// RAID10 configuration.
	RaidType_RAID10 RaidType = 3
)

// Enum value maps for RaidType.
var (
	RaidType_name = map[int32]string{
		0: "RAID_TYPE_UNSPECIFIED",
		1: "RAID0",
		2: "RAID1",
		3: "RAID10",
	}
	RaidType_value = map[string]int32{
		"RAID_TYPE_UNSPECIFIED": 0,
		"RAID0":                 1,
		"RAID1":                 2,
		"RAID10":                3,
	}
)

func (x RaidType) Enum() *RaidType {
	p := new(RaidType)
	*p = x
	return p
}

func (x RaidType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RaidType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_baremetal_v1alpha_storage_proto_enumTypes[1].Descriptor()
}

func (RaidType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_baremetal_v1alpha_storage_proto_enumTypes[1]
}

func (x RaidType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RaidType.Descriptor instead.
func (RaidType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_baremetal_v1alpha_storage_proto_rawDescGZIP(), []int{1}
}

type StoragePartition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition type.
	Type StoragePartitionType `protobuf:"varint,1,opt,name=type,proto3,enum=yandex.cloud.baremetal.v1alpha.StoragePartitionType" json:"type,omitempty"`
	// Size of the storage partition in gibibytes (2^30 bytes).
	SizeGib int64 `protobuf:"varint,2,opt,name=size_gib,json=sizeGib,proto3" json:"size_gib,omitempty"`
	// Storage mount point.
	MountPoint string `protobuf:"bytes,3,opt,name=mount_point,json=mountPoint,proto3" json:"mount_point,omitempty"`
}

func (x *StoragePartition) Reset() {
	*x = StoragePartition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_baremetal_v1alpha_storage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoragePartition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoragePartition) ProtoMessage() {}

func (x *StoragePartition) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_baremetal_v1alpha_storage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoragePartition.ProtoReflect.Descriptor instead.
func (*StoragePartition) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_baremetal_v1alpha_storage_proto_rawDescGZIP(), []int{0}
}

func (x *StoragePartition) GetType() StoragePartitionType {
	if x != nil {
		return x.Type
	}
	return StoragePartitionType_STORAGE_PARTITION_TYPE_UNSPECIFIED
}

func (x *StoragePartition) GetSizeGib() int64 {
	if x != nil {
		return x.SizeGib
	}
	return 0
}

func (x *StoragePartition) GetMountPoint() string {
	if x != nil {
		return x.MountPoint
	}
	return ""
}

// Storage, a OS-level storage entity used for creating partitions. For example, this could
// represent a plain disk or a software RAID of disks.
type Storage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of partitions created on the storage.
	Partitions []*StoragePartition `protobuf:"bytes,3,rep,name=partitions,proto3" json:"partitions,omitempty"`
	// Storage type.
	//
	// Types that are assignable to StorageType:
	//
	//	*Storage_Disk
	//	*Storage_Raid
	StorageType isStorage_StorageType `protobuf_oneof:"storage_type"`
}

func (x *Storage) Reset() {
	*x = Storage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_baremetal_v1alpha_storage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Storage) ProtoMessage() {}

func (x *Storage) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_baremetal_v1alpha_storage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Storage.ProtoReflect.Descriptor instead.
func (*Storage) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_baremetal_v1alpha_storage_proto_rawDescGZIP(), []int{1}
}

func (x *Storage) GetPartitions() []*StoragePartition {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (m *Storage) GetStorageType() isStorage_StorageType {
	if m != nil {
		return m.StorageType
	}
	return nil
}

func (x *Storage) GetDisk() *Disk {
	if x, ok := x.GetStorageType().(*Storage_Disk); ok {
		return x.Disk
	}
	return nil
}

func (x *Storage) GetRaid() *Raid {
	if x, ok := x.GetStorageType().(*Storage_Raid); ok {
		return x.Raid
	}
	return nil
}

type isStorage_StorageType interface {
	isStorage_StorageType()
}

type Storage_Disk struct {
	// Disk storage.
	Disk *Disk `protobuf:"bytes,4,opt,name=disk,proto3,oneof"`
}

type Storage_Raid struct {
	// RAID storage.
	Raid *Raid `protobuf:"bytes,5,opt,name=raid,proto3,oneof"`
}

func (*Storage_Disk) isStorage_StorageType() {}

func (*Storage_Raid) isStorage_StorageType() {}

// RAID storage.
type Raid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RAID type.
	Type RaidType `protobuf:"varint,1,opt,name=type,proto3,enum=yandex.cloud.baremetal.v1alpha.RaidType" json:"type,omitempty"`
	// Array of disks in the RAID configuration.
	Disks []*Disk `protobuf:"bytes,2,rep,name=disks,proto3" json:"disks,omitempty"`
}

func (x *Raid) Reset() {
	*x = Raid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_baremetal_v1alpha_storage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raid) ProtoMessage() {}

func (x *Raid) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_baremetal_v1alpha_storage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raid.ProtoReflect.Descriptor instead.
func (*Raid) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_baremetal_v1alpha_storage_proto_rawDescGZIP(), []int{2}
}

func (x *Raid) GetType() RaidType {
	if x != nil {
		return x.Type
	}
	return RaidType_RAID_TYPE_UNSPECIFIED
}

func (x *Raid) GetDisks() []*Disk {
	if x != nil {
		return x.Disks
	}
	return nil
}

var File_yandex_cloud_baremetal_v1alpha_storage_proto protoreflect.FileDescriptor

var file_yandex_cloud_baremetal_v1alpha_storage_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x61, 0x72, 0x65, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x72,
	0x65, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x29,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x61, 0x72,
	0x65, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64,
	0x69, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x72, 0x65,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x67, 0x69, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x69, 0x7a, 0x65,
	0x47, 0x69, 0x62, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x22, 0xef, 0x01, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x50, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x3a,
	0x0a, 0x04, 0x72, 0x61, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x72, 0x65,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x61,
	0x69, 0x64, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x80, 0x01, 0x0a, 0x04, 0x52, 0x61, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x72,
	0x65, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52,
	0x61, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a,
	0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x72, 0x65,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69,
	0x73, 0x6b, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x2a, 0x65, 0x0a, 0x14, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x58, 0x54,
	0x34, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x57, 0x41, 0x50, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x45, 0x58, 0x54, 0x33, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x46, 0x53, 0x10, 0x04,
	0x2a, 0x47, 0x0a, 0x08, 0x52, 0x61, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x52, 0x41, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x49, 0x44, 0x30,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x49, 0x44, 0x31, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x41, 0x49, 0x44, 0x31, 0x30, 0x10, 0x03, 0x42, 0x72, 0x0a, 0x22, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61,
	0x72, 0x65, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5a,
	0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x62, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x3b, 0x62, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_baremetal_v1alpha_storage_proto_rawDescOnce sync.Once
	file_yandex_cloud_baremetal_v1alpha_storage_proto_rawDescData = file_yandex_cloud_baremetal_v1alpha_storage_proto_rawDesc
)

func file_yandex_cloud_baremetal_v1alpha_storage_proto_rawDescGZIP() []byte {
	file_yandex_cloud_baremetal_v1alpha_storage_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_baremetal_v1alpha_storage_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_baremetal_v1alpha_storage_proto_rawDescData)
	})
	return file_yandex_cloud_baremetal_v1alpha_storage_proto_rawDescData
}

var file_yandex_cloud_baremetal_v1alpha_storage_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_yandex_cloud_baremetal_v1alpha_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_yandex_cloud_baremetal_v1alpha_storage_proto_goTypes = []any{
	(StoragePartitionType)(0), // 0: yandex.cloud.baremetal.v1alpha.StoragePartitionType
	(RaidType)(0),             // 1: yandex.cloud.baremetal.v1alpha.RaidType
	(*StoragePartition)(nil),  // 2: yandex.cloud.baremetal.v1alpha.StoragePartition
	(*Storage)(nil),           // 3: yandex.cloud.baremetal.v1alpha.Storage
	(*Raid)(nil),              // 4: yandex.cloud.baremetal.v1alpha.Raid
	(*Disk)(nil),              // 5: yandex.cloud.baremetal.v1alpha.Disk
}
var file_yandex_cloud_baremetal_v1alpha_storage_proto_depIdxs = []int32{
	0, // 0: yandex.cloud.baremetal.v1alpha.StoragePartition.type:type_name -> yandex.cloud.baremetal.v1alpha.StoragePartitionType
	2, // 1: yandex.cloud.baremetal.v1alpha.Storage.partitions:type_name -> yandex.cloud.baremetal.v1alpha.StoragePartition
	5, // 2: yandex.cloud.baremetal.v1alpha.Storage.disk:type_name -> yandex.cloud.baremetal.v1alpha.Disk
	4, // 3: yandex.cloud.baremetal.v1alpha.Storage.raid:type_name -> yandex.cloud.baremetal.v1alpha.Raid
	1, // 4: yandex.cloud.baremetal.v1alpha.Raid.type:type_name -> yandex.cloud.baremetal.v1alpha.RaidType
	5, // 5: yandex.cloud.baremetal.v1alpha.Raid.disks:type_name -> yandex.cloud.baremetal.v1alpha.Disk
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_yandex_cloud_baremetal_v1alpha_storage_proto_init() }
func file_yandex_cloud_baremetal_v1alpha_storage_proto_init() {
	if File_yandex_cloud_baremetal_v1alpha_storage_proto != nil {
		return
	}
	file_yandex_cloud_baremetal_v1alpha_disk_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_baremetal_v1alpha_storage_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*StoragePartition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_baremetal_v1alpha_storage_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Storage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_baremetal_v1alpha_storage_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Raid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_baremetal_v1alpha_storage_proto_msgTypes[1].OneofWrappers = []any{
		(*Storage_Disk)(nil),
		(*Storage_Raid)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_baremetal_v1alpha_storage_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_baremetal_v1alpha_storage_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_baremetal_v1alpha_storage_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_baremetal_v1alpha_storage_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_baremetal_v1alpha_storage_proto_msgTypes,
	}.Build()
	File_yandex_cloud_baremetal_v1alpha_storage_proto = out.File
	file_yandex_cloud_baremetal_v1alpha_storage_proto_rawDesc = nil
	file_yandex_cloud_baremetal_v1alpha_storage_proto_goTypes = nil
	file_yandex_cloud_baremetal_v1alpha_storage_proto_depIdxs = nil
}

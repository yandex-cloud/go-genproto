// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/certificatemanager/v1/certificate.proto

package certificatemanager

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported certificate types.
type CertificateType int32

const (
	CertificateType_CERTIFICATE_TYPE_UNSPECIFIED CertificateType = 0
	// The certificate is imported by user.
	CertificateType_IMPORTED CertificateType = 1
	// The certificate is created by service.
	CertificateType_MANAGED CertificateType = 2
)

// Enum value maps for CertificateType.
var (
	CertificateType_name = map[int32]string{
		0: "CERTIFICATE_TYPE_UNSPECIFIED",
		1: "IMPORTED",
		2: "MANAGED",
	}
	CertificateType_value = map[string]int32{
		"CERTIFICATE_TYPE_UNSPECIFIED": 0,
		"IMPORTED":                     1,
		"MANAGED":                      2,
	}
)

func (x CertificateType) Enum() *CertificateType {
	p := new(CertificateType)
	*p = x
	return p
}

func (x CertificateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_certificatemanager_v1_certificate_proto_enumTypes[0].Descriptor()
}

func (CertificateType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_certificatemanager_v1_certificate_proto_enumTypes[0]
}

func (x CertificateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateType.Descriptor instead.
func (CertificateType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_proto_rawDescGZIP(), []int{0}
}

// Supported domain validation types.
type ChallengeType int32

const (
	ChallengeType_CHALLENGE_TYPE_UNSPECIFIED ChallengeType = 0
	// Domain validation type that using DNS-records.
	ChallengeType_DNS ChallengeType = 1
	// Domain validation type that using HTTP-files.
	ChallengeType_HTTP ChallengeType = 2
)

// Enum value maps for ChallengeType.
var (
	ChallengeType_name = map[int32]string{
		0: "CHALLENGE_TYPE_UNSPECIFIED",
		1: "DNS",
		2: "HTTP",
	}
	ChallengeType_value = map[string]int32{
		"CHALLENGE_TYPE_UNSPECIFIED": 0,
		"DNS":                        1,
		"HTTP":                       2,
	}
)

func (x ChallengeType) Enum() *ChallengeType {
	p := new(ChallengeType)
	*p = x
	return p
}

func (x ChallengeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChallengeType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_certificatemanager_v1_certificate_proto_enumTypes[1].Descriptor()
}

func (ChallengeType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_certificatemanager_v1_certificate_proto_enumTypes[1]
}

func (x ChallengeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChallengeType.Descriptor instead.
func (ChallengeType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_proto_rawDescGZIP(), []int{1}
}

type Certificate_Status int32

const (
	Certificate_STATUS_UNSPECIFIED Certificate_Status = 0
	// The certificate domains validation are required. Used only for managed certificates.
	Certificate_VALIDATING Certificate_Status = 1
	// The certificate issuance is failed. Used only for managed certificates.
	Certificate_INVALID Certificate_Status = 2
	// The certificate is issued.
	Certificate_ISSUED Certificate_Status = 3
	// The certificate is revoked.
	Certificate_REVOKED Certificate_Status = 4
	// The certificate renewal is started. Used only for managed certificates.
	Certificate_RENEWING Certificate_Status = 5
	// The certificate renewal is failed. Used only for managed certificates.
	Certificate_RENEWAL_FAILED Certificate_Status = 6
)

// Enum value maps for Certificate_Status.
var (
	Certificate_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "VALIDATING",
		2: "INVALID",
		3: "ISSUED",
		4: "REVOKED",
		5: "RENEWING",
		6: "RENEWAL_FAILED",
	}
	Certificate_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"VALIDATING":         1,
		"INVALID":            2,
		"ISSUED":             3,
		"REVOKED":            4,
		"RENEWING":           5,
		"RENEWAL_FAILED":     6,
	}
)

func (x Certificate_Status) Enum() *Certificate_Status {
	p := new(Certificate_Status)
	*p = x
	return p
}

func (x Certificate_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Certificate_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_certificatemanager_v1_certificate_proto_enumTypes[2].Descriptor()
}

func (Certificate_Status) Type() protoreflect.EnumType {
	return &file_yandex_cloud_certificatemanager_v1_certificate_proto_enumTypes[2]
}

func (x Certificate_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Certificate_Status.Descriptor instead.
func (Certificate_Status) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_proto_rawDescGZIP(), []int{0, 0}
}

type Challenge_Status int32

const (
	Challenge_STATUS_UNSPECIFIED Challenge_Status = 0
	// The challenge is waiting to be completed.
	Challenge_PENDING Challenge_Status = 1
	// The challenge is awaiting approval from Let's Encrypt.
	Challenge_PROCESSING Challenge_Status = 2
	// The challenge is complete.
	Challenge_VALID Challenge_Status = 3
	// The rights check for a specific domain failed or the one-week period allocated for the check expired.
	Challenge_INVALID Challenge_Status = 4
)

// Enum value maps for Challenge_Status.
var (
	Challenge_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "PENDING",
		2: "PROCESSING",
		3: "VALID",
		4: "INVALID",
	}
	Challenge_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"PENDING":            1,
		"PROCESSING":         2,
		"VALID":              3,
		"INVALID":            4,
	}
)

func (x Challenge_Status) Enum() *Challenge_Status {
	p := new(Challenge_Status)
	*p = x
	return p
}

func (x Challenge_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Challenge_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_certificatemanager_v1_certificate_proto_enumTypes[3].Descriptor()
}

func (Challenge_Status) Type() protoreflect.EnumType {
	return &file_yandex_cloud_certificatemanager_v1_certificate_proto_enumTypes[3]
}

func (x Challenge_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Challenge_Status.Descriptor instead.
func (Challenge_Status) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_proto_rawDescGZIP(), []int{1, 0}
}

// A certificate. For details about the concept, see [documentation](/docs/certificate-manager/concepts/).
type Certificate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the certificate. Generated at creation time.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the folder that the certificate belongs to.
	FolderId string `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Creation timestamp.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Name of the certificate.
	// The name is unique within the folder.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the certificate.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Certificate labels as `key:value` pairs.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Type of the certificate.
	Type CertificateType `protobuf:"varint,7,opt,name=type,proto3,enum=yandex.cloud.certificatemanager.v1.CertificateType" json:"type,omitempty"`
	// Fully qualified domain names of the certificate.
	Domains []string `protobuf:"bytes,8,rep,name=domains,proto3" json:"domains,omitempty"`
	// Status of the certificate.
	Status Certificate_Status `protobuf:"varint,9,opt,name=status,proto3,enum=yandex.cloud.certificatemanager.v1.Certificate_Status" json:"status,omitempty"`
	// [Distinguished Name](https://tools.ietf.org/html/rfc1779) of the certificate authority that issued the certificate.
	Issuer string `protobuf:"bytes,10,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// [Distinguished Name](https://tools.ietf.org/html/rfc1779) of the entity that is associated with the public key contained in the certificate.
	Subject string `protobuf:"bytes,11,opt,name=subject,proto3" json:"subject,omitempty"`
	// Serial number of the certificate.
	Serial string `protobuf:"bytes,12,opt,name=serial,proto3" json:"serial,omitempty"`
	// Time when the certificate is updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Time when the certificate is issued.
	IssuedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
	// Time after which the certificate is not valid.
	NotAfter *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`
	// Time before which the certificate is not valid.
	NotBefore *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"`
	// Domains validation challenges of the certificate. Used only for managed certificates.
	Challenges []*Challenge `protobuf:"bytes,17,rep,name=challenges,proto3" json:"challenges,omitempty"`
	// Flag that protects deletion of the certificate
	DeletionProtection bool `protobuf:"varint,18,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// Mark imported certificates without uploaded chain or with chain which not lead to root certificate
	IncompleteChain bool `protobuf:"varint,19,opt,name=incomplete_chain,json=incompleteChain,proto3" json:"incomplete_chain,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_proto_rawDescGZIP(), []int{0}
}

func (x *Certificate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Certificate) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *Certificate) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Certificate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Certificate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Certificate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Certificate) GetType() CertificateType {
	if x != nil {
		return x.Type
	}
	return CertificateType_CERTIFICATE_TYPE_UNSPECIFIED
}

func (x *Certificate) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *Certificate) GetStatus() Certificate_Status {
	if x != nil {
		return x.Status
	}
	return Certificate_STATUS_UNSPECIFIED
}

func (x *Certificate) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *Certificate) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Certificate) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *Certificate) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Certificate) GetIssuedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuedAt
	}
	return nil
}

func (x *Certificate) GetNotAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.NotAfter
	}
	return nil
}

func (x *Certificate) GetNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBefore
	}
	return nil
}

func (x *Certificate) GetChallenges() []*Challenge {
	if x != nil {
		return x.Challenges
	}
	return nil
}

func (x *Certificate) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *Certificate) GetIncompleteChain() bool {
	if x != nil {
		return x.IncompleteChain
	}
	return false
}

// Domain validation challenge.
type Challenge struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Domain of the challenge.
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// Type of the challenge.
	Type ChallengeType `protobuf:"varint,2,opt,name=type,proto3,enum=yandex.cloud.certificatemanager.v1.ChallengeType" json:"type,omitempty"`
	// Time when the challenge is created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Time when the challenge is updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Status of the challenge.
	Status Challenge_Status `protobuf:"varint,5,opt,name=status,proto3,enum=yandex.cloud.certificatemanager.v1.Challenge_Status" json:"status,omitempty"`
	// Description of the challenge.
	Message string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	// Error of the challenge.
	Error string `protobuf:"bytes,7,opt,name=error,proto3" json:"error,omitempty"`
	// Data of the challenge.
	//
	// Types that are valid to be assigned to Challenge:
	//
	//	*Challenge_DnsChallenge
	//	*Challenge_HttpChallenge
	Challenge     isChallenge_Challenge `protobuf_oneof:"challenge"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Challenge) Reset() {
	*x = Challenge{}
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Challenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenge) ProtoMessage() {}

func (x *Challenge) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenge.ProtoReflect.Descriptor instead.
func (*Challenge) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_proto_rawDescGZIP(), []int{1}
}

func (x *Challenge) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Challenge) GetType() ChallengeType {
	if x != nil {
		return x.Type
	}
	return ChallengeType_CHALLENGE_TYPE_UNSPECIFIED
}

func (x *Challenge) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Challenge) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Challenge) GetStatus() Challenge_Status {
	if x != nil {
		return x.Status
	}
	return Challenge_STATUS_UNSPECIFIED
}

func (x *Challenge) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Challenge) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Challenge) GetChallenge() isChallenge_Challenge {
	if x != nil {
		return x.Challenge
	}
	return nil
}

func (x *Challenge) GetDnsChallenge() *Challenge_DnsRecord {
	if x != nil {
		if x, ok := x.Challenge.(*Challenge_DnsChallenge); ok {
			return x.DnsChallenge
		}
	}
	return nil
}

func (x *Challenge) GetHttpChallenge() *Challenge_HttpFile {
	if x != nil {
		if x, ok := x.Challenge.(*Challenge_HttpChallenge); ok {
			return x.HttpChallenge
		}
	}
	return nil
}

type isChallenge_Challenge interface {
	isChallenge_Challenge()
}

type Challenge_DnsChallenge struct {
	// DNS-record.
	DnsChallenge *Challenge_DnsRecord `protobuf:"bytes,8,opt,name=dns_challenge,json=dnsChallenge,proto3,oneof"`
}

type Challenge_HttpChallenge struct {
	// HTTP-file.
	HttpChallenge *Challenge_HttpFile `protobuf:"bytes,9,opt,name=http_challenge,json=httpChallenge,proto3,oneof"`
}

func (*Challenge_DnsChallenge) isChallenge_Challenge() {}

func (*Challenge_HttpChallenge) isChallenge_Challenge() {}

// A certificate version
type Version struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the version.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the certificate that the version belongs to.
	CertificateId string `protobuf:"bytes,2,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	// Time when the version was created.
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Version) Reset() {
	*x = Version{}
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_proto_rawDescGZIP(), []int{2}
}

func (x *Version) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Version) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

func (x *Version) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type Challenge_DnsRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the DNS record.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of the DNS-record.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Value of the DNS-record.
	Value         string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Challenge_DnsRecord) Reset() {
	*x = Challenge_DnsRecord{}
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Challenge_DnsRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenge_DnsRecord) ProtoMessage() {}

func (x *Challenge_DnsRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenge_DnsRecord.ProtoReflect.Descriptor instead.
func (*Challenge_DnsRecord) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Challenge_DnsRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Challenge_DnsRecord) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Challenge_DnsRecord) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Challenge_HttpFile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Location of the HTTP file.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Content of the HTTP file.
	Content       string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Challenge_HttpFile) Reset() {
	*x = Challenge_HttpFile{}
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Challenge_HttpFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Challenge_HttpFile) ProtoMessage() {}

func (x *Challenge_HttpFile) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Challenge_HttpFile.ProtoReflect.Descriptor instead.
func (*Challenge_HttpFile) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Challenge_HttpFile) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Challenge_HttpFile) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

var File_yandex_cloud_certificatemanager_v1_certificate_proto protoreflect.FileDescriptor

const file_yandex_cloud_certificatemanager_v1_certificate_proto_rawDesc = "" +
	"\n" +
	"4yandex/cloud/certificatemanager/v1/certificate.proto\x12\"yandex.cloud.certificatemanager.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xc5\b\n" +
	"\vCertificate\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tfolder_id\x18\x02 \x01(\tR\bfolderId\x129\n" +
	"\n" +
	"created_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12S\n" +
	"\x06labels\x18\x06 \x03(\v2;.yandex.cloud.certificatemanager.v1.Certificate.LabelsEntryR\x06labels\x12G\n" +
	"\x04type\x18\a \x01(\x0e23.yandex.cloud.certificatemanager.v1.CertificateTypeR\x04type\x12\x18\n" +
	"\adomains\x18\b \x03(\tR\adomains\x12N\n" +
	"\x06status\x18\t \x01(\x0e26.yandex.cloud.certificatemanager.v1.Certificate.StatusR\x06status\x12\x16\n" +
	"\x06issuer\x18\n" +
	" \x01(\tR\x06issuer\x12\x18\n" +
	"\asubject\x18\v \x01(\tR\asubject\x12\x16\n" +
	"\x06serial\x18\f \x01(\tR\x06serial\x129\n" +
	"\n" +
	"updated_at\x18\r \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x127\n" +
	"\tissued_at\x18\x0e \x01(\v2\x1a.google.protobuf.TimestampR\bissuedAt\x127\n" +
	"\tnot_after\x18\x0f \x01(\v2\x1a.google.protobuf.TimestampR\bnotAfter\x129\n" +
	"\n" +
	"not_before\x18\x10 \x01(\v2\x1a.google.protobuf.TimestampR\tnotBefore\x12M\n" +
	"\n" +
	"challenges\x18\x11 \x03(\v2-.yandex.cloud.certificatemanager.v1.ChallengeR\n" +
	"challenges\x12/\n" +
	"\x13deletion_protection\x18\x12 \x01(\bR\x12deletionProtection\x12)\n" +
	"\x10incomplete_chain\x18\x13 \x01(\bR\x0fincompleteChain\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"x\n" +
	"\x06Status\x12\x16\n" +
	"\x12STATUS_UNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"VALIDATING\x10\x01\x12\v\n" +
	"\aINVALID\x10\x02\x12\n" +
	"\n" +
	"\x06ISSUED\x10\x03\x12\v\n" +
	"\aREVOKED\x10\x04\x12\f\n" +
	"\bRENEWING\x10\x05\x12\x12\n" +
	"\x0eRENEWAL_FAILED\x10\x06\"\x86\x06\n" +
	"\tChallenge\x12\x16\n" +
	"\x06domain\x18\x01 \x01(\tR\x06domain\x12E\n" +
	"\x04type\x18\x02 \x01(\x0e21.yandex.cloud.certificatemanager.v1.ChallengeTypeR\x04type\x129\n" +
	"\n" +
	"created_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12L\n" +
	"\x06status\x18\x05 \x01(\x0e24.yandex.cloud.certificatemanager.v1.Challenge.StatusR\x06status\x12\x18\n" +
	"\amessage\x18\x06 \x01(\tR\amessage\x12\x14\n" +
	"\x05error\x18\a \x01(\tR\x05error\x12^\n" +
	"\rdns_challenge\x18\b \x01(\v27.yandex.cloud.certificatemanager.v1.Challenge.DnsRecordH\x00R\fdnsChallenge\x12_\n" +
	"\x0ehttp_challenge\x18\t \x01(\v26.yandex.cloud.certificatemanager.v1.Challenge.HttpFileH\x00R\rhttpChallenge\x1aI\n" +
	"\tDnsRecord\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x14\n" +
	"\x05value\x18\x03 \x01(\tR\x05value\x1a6\n" +
	"\bHttpFile\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\"U\n" +
	"\x06Status\x12\x16\n" +
	"\x12STATUS_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aPENDING\x10\x01\x12\x0e\n" +
	"\n" +
	"PROCESSING\x10\x02\x12\t\n" +
	"\x05VALID\x10\x03\x12\v\n" +
	"\aINVALID\x10\x04B\v\n" +
	"\tchallenge\"{\n" +
	"\aVersion\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12%\n" +
	"\x0ecertificate_id\x18\x02 \x01(\tR\rcertificateId\x129\n" +
	"\n" +
	"created_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt*N\n" +
	"\x0fCertificateType\x12 \n" +
	"\x1cCERTIFICATE_TYPE_UNSPECIFIED\x10\x00\x12\f\n" +
	"\bIMPORTED\x10\x01\x12\v\n" +
	"\aMANAGED\x10\x02*B\n" +
	"\rChallengeType\x12\x1e\n" +
	"\x1aCHALLENGE_TYPE_UNSPECIFIED\x10\x00\x12\a\n" +
	"\x03DNS\x10\x01\x12\b\n" +
	"\x04HTTP\x10\x02B\x83\x01\n" +
	"&yandex.cloud.api.certificatemanager.v1ZYgithub.com/yandex-cloud/go-genproto/yandex/cloud/certificatemanager/v1;certificatemanagerb\x06proto3"

var (
	file_yandex_cloud_certificatemanager_v1_certificate_proto_rawDescOnce sync.Once
	file_yandex_cloud_certificatemanager_v1_certificate_proto_rawDescData []byte
)

func file_yandex_cloud_certificatemanager_v1_certificate_proto_rawDescGZIP() []byte {
	file_yandex_cloud_certificatemanager_v1_certificate_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_certificatemanager_v1_certificate_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_certificatemanager_v1_certificate_proto_rawDesc), len(file_yandex_cloud_certificatemanager_v1_certificate_proto_rawDesc)))
	})
	return file_yandex_cloud_certificatemanager_v1_certificate_proto_rawDescData
}

var file_yandex_cloud_certificatemanager_v1_certificate_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_yandex_cloud_certificatemanager_v1_certificate_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_yandex_cloud_certificatemanager_v1_certificate_proto_goTypes = []any{
	(CertificateType)(0),          // 0: yandex.cloud.certificatemanager.v1.CertificateType
	(ChallengeType)(0),            // 1: yandex.cloud.certificatemanager.v1.ChallengeType
	(Certificate_Status)(0),       // 2: yandex.cloud.certificatemanager.v1.Certificate.Status
	(Challenge_Status)(0),         // 3: yandex.cloud.certificatemanager.v1.Challenge.Status
	(*Certificate)(nil),           // 4: yandex.cloud.certificatemanager.v1.Certificate
	(*Challenge)(nil),             // 5: yandex.cloud.certificatemanager.v1.Challenge
	(*Version)(nil),               // 6: yandex.cloud.certificatemanager.v1.Version
	nil,                           // 7: yandex.cloud.certificatemanager.v1.Certificate.LabelsEntry
	(*Challenge_DnsRecord)(nil),   // 8: yandex.cloud.certificatemanager.v1.Challenge.DnsRecord
	(*Challenge_HttpFile)(nil),    // 9: yandex.cloud.certificatemanager.v1.Challenge.HttpFile
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
}
var file_yandex_cloud_certificatemanager_v1_certificate_proto_depIdxs = []int32{
	10, // 0: yandex.cloud.certificatemanager.v1.Certificate.created_at:type_name -> google.protobuf.Timestamp
	7,  // 1: yandex.cloud.certificatemanager.v1.Certificate.labels:type_name -> yandex.cloud.certificatemanager.v1.Certificate.LabelsEntry
	0,  // 2: yandex.cloud.certificatemanager.v1.Certificate.type:type_name -> yandex.cloud.certificatemanager.v1.CertificateType
	2,  // 3: yandex.cloud.certificatemanager.v1.Certificate.status:type_name -> yandex.cloud.certificatemanager.v1.Certificate.Status
	10, // 4: yandex.cloud.certificatemanager.v1.Certificate.updated_at:type_name -> google.protobuf.Timestamp
	10, // 5: yandex.cloud.certificatemanager.v1.Certificate.issued_at:type_name -> google.protobuf.Timestamp
	10, // 6: yandex.cloud.certificatemanager.v1.Certificate.not_after:type_name -> google.protobuf.Timestamp
	10, // 7: yandex.cloud.certificatemanager.v1.Certificate.not_before:type_name -> google.protobuf.Timestamp
	5,  // 8: yandex.cloud.certificatemanager.v1.Certificate.challenges:type_name -> yandex.cloud.certificatemanager.v1.Challenge
	1,  // 9: yandex.cloud.certificatemanager.v1.Challenge.type:type_name -> yandex.cloud.certificatemanager.v1.ChallengeType
	10, // 10: yandex.cloud.certificatemanager.v1.Challenge.created_at:type_name -> google.protobuf.Timestamp
	10, // 11: yandex.cloud.certificatemanager.v1.Challenge.updated_at:type_name -> google.protobuf.Timestamp
	3,  // 12: yandex.cloud.certificatemanager.v1.Challenge.status:type_name -> yandex.cloud.certificatemanager.v1.Challenge.Status
	8,  // 13: yandex.cloud.certificatemanager.v1.Challenge.dns_challenge:type_name -> yandex.cloud.certificatemanager.v1.Challenge.DnsRecord
	9,  // 14: yandex.cloud.certificatemanager.v1.Challenge.http_challenge:type_name -> yandex.cloud.certificatemanager.v1.Challenge.HttpFile
	10, // 15: yandex.cloud.certificatemanager.v1.Version.created_at:type_name -> google.protobuf.Timestamp
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_yandex_cloud_certificatemanager_v1_certificate_proto_init() }
func file_yandex_cloud_certificatemanager_v1_certificate_proto_init() {
	if File_yandex_cloud_certificatemanager_v1_certificate_proto != nil {
		return
	}
	file_yandex_cloud_certificatemanager_v1_certificate_proto_msgTypes[1].OneofWrappers = []any{
		(*Challenge_DnsChallenge)(nil),
		(*Challenge_HttpChallenge)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_certificatemanager_v1_certificate_proto_rawDesc), len(file_yandex_cloud_certificatemanager_v1_certificate_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_certificatemanager_v1_certificate_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_certificatemanager_v1_certificate_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_certificatemanager_v1_certificate_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_certificatemanager_v1_certificate_proto_msgTypes,
	}.Build()
	File_yandex_cloud_certificatemanager_v1_certificate_proto = out.File
	file_yandex_cloud_certificatemanager_v1_certificate_proto_goTypes = nil
	file_yandex_cloud_certificatemanager_v1_certificate_proto_depIdxs = nil
}

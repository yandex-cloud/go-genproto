// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/certificatemanager/v1/certificate_service.proto

package certificatemanager

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CertificateView int32

const (
	// Output basic information about the certificate.
	CertificateView_BASIC CertificateView = 0
	// Output full information about the certificate including domain challenges.
	CertificateView_FULL CertificateView = 1
)

// Enum value maps for CertificateView.
var (
	CertificateView_name = map[int32]string{
		0: "BASIC",
		1: "FULL",
	}
	CertificateView_value = map[string]int32{
		"BASIC": 0,
		"FULL":  1,
	}
)

func (x CertificateView) Enum() *CertificateView {
	p := new(CertificateView)
	*p = x
	return p
}

func (x CertificateView) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateView) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_certificatemanager_v1_certificate_service_proto_enumTypes[0].Descriptor()
}

func (CertificateView) Type() protoreflect.EnumType {
	return &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_enumTypes[0]
}

func (x CertificateView) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateView.Descriptor instead.
func (CertificateView) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescGZIP(), []int{0}
}

type GetCertificateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the certificate to return.
	//
	// To get the ID of a certificate use a [CertificateService.List] request.
	CertificateId string `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	// The output type of the certificate.
	View          CertificateView `protobuf:"varint,2,opt,name=view,proto3,enum=yandex.cloud.certificatemanager.v1.CertificateView" json:"view,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCertificateRequest) Reset() {
	*x = GetCertificateRequest{}
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertificateRequest) ProtoMessage() {}

func (x *GetCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertificateRequest.ProtoReflect.Descriptor instead.
func (*GetCertificateRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetCertificateRequest) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

func (x *GetCertificateRequest) GetView() CertificateView {
	if x != nil {
		return x.View
	}
	return CertificateView_BASIC
}

type ListCertificatesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to list certificate in.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than `page_size`, the service returns a [ListCertificatesResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set `page_token` to the
	// [ListCertificatesResponse.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The output type of the certificate.
	View          CertificateView `protobuf:"varint,6,opt,name=view,proto3,enum=yandex.cloud.certificatemanager.v1.CertificateView" json:"view,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCertificatesRequest) Reset() {
	*x = ListCertificatesRequest{}
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCertificatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCertificatesRequest) ProtoMessage() {}

func (x *ListCertificatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCertificatesRequest.ProtoReflect.Descriptor instead.
func (*ListCertificatesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListCertificatesRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListCertificatesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCertificatesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListCertificatesRequest) GetView() CertificateView {
	if x != nil {
		return x.View
	}
	return CertificateView_BASIC
}

type ListCertificatesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of certificates in the specified folder.
	Certificates []*Certificate `protobuf:"bytes,1,rep,name=certificates,proto3" json:"certificates,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number
	// of results is greater than the specified [ListCertificatesRequest.page_size], use
	// the `next_page_token` as the value for the [ListCertificatesRequest.page_token] query parameter
	// in the next list request. Each subsequent list request will have its own
	// [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCertificatesResponse) Reset() {
	*x = ListCertificatesResponse{}
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCertificatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCertificatesResponse) ProtoMessage() {}

func (x *ListCertificatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCertificatesResponse.ProtoReflect.Descriptor instead.
func (*ListCertificatesResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListCertificatesResponse) GetCertificates() []*Certificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *ListCertificatesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListVersionsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the certificate to list versions for.
	CertificateId string `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	// Page token. To get the next page of results, set `page_token` to the
	// [ListCertificatesResponse.next_page_token] returned by a previous list request.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set `page_token` to the
	// [ListCertificatesResponse.next_page_token] returned by a previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVersionsRequest) Reset() {
	*x = ListVersionsRequest{}
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVersionsRequest) ProtoMessage() {}

func (x *ListVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVersionsRequest.ProtoReflect.Descriptor instead.
func (*ListVersionsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListVersionsRequest) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

func (x *ListVersionsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListVersionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListVersionsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of versions for the specified certificate.
	Versions []*Version `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number
	// of results is greater than the specified [ListCertificatesRequest.page_size], use
	// the `next_page_token` as the value for the [ListCertificatesRequest.page_token] query parameter
	// in the next list request. Each subsequent list request will have its own
	// [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVersionsResponse) Reset() {
	*x = ListVersionsResponse{}
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVersionsResponse) ProtoMessage() {}

func (x *ListVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVersionsResponse.ProtoReflect.Descriptor instead.
func (*ListVersionsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListVersionsResponse) GetVersions() []*Version {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *ListVersionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateCertificateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to create a certificate in.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the certificate.
	// The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the certificate.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Labels for the certificate as `key:value` pairs.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// PEM-encoded certificate content of the certificate.
	Certificate string `protobuf:"bytes,5,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// PEM-encoded certificate chain content of the certificate.
	Chain string `protobuf:"bytes,6,opt,name=chain,proto3" json:"chain,omitempty"`
	// PEM-encoded private key content of the certificate.
	PrivateKey string `protobuf:"bytes,7,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Flag that protects deletion of the certificate
	DeletionProtection bool `protobuf:"varint,8,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CreateCertificateRequest) Reset() {
	*x = CreateCertificateRequest{}
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCertificateRequest) ProtoMessage() {}

func (x *CreateCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCertificateRequest.ProtoReflect.Descriptor instead.
func (*CreateCertificateRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateCertificateRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateCertificateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCertificateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateCertificateRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateCertificateRequest) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

func (x *CreateCertificateRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *CreateCertificateRequest) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *CreateCertificateRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

type CreateCertificateMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the certificate being created.
	CertificateId string `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCertificateMetadata) Reset() {
	*x = CreateCertificateMetadata{}
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCertificateMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCertificateMetadata) ProtoMessage() {}

func (x *CreateCertificateMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCertificateMetadata.ProtoReflect.Descriptor instead.
func (*CreateCertificateMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescGZIP(), []int{6}
}

func (x *CreateCertificateMetadata) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

type UpdateCertificateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the certificate to update.
	// To get the ID of a certificate use a [CertificateService.List] request.
	CertificateId string `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	// Field mask that specifies which attributes of the certificate are going to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// New name for the certificate.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// New description for the certificate.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// New labels for the certificate as `key:value` pairs.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// New PEM-encoded certificate content for the certificate. Used only for imported certificates.
	Certificate string `protobuf:"bytes,6,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// New PEM-encoded certificate chain content for the certificate. Used only for imported certificates.
	Chain string `protobuf:"bytes,7,opt,name=chain,proto3" json:"chain,omitempty"`
	// New PEM-encoded private key content for the certificate. Used only for imported certificates.
	PrivateKey string `protobuf:"bytes,8,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Flag that protects deletion of the certificate
	DeletionProtection bool `protobuf:"varint,9,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateCertificateRequest) Reset() {
	*x = UpdateCertificateRequest{}
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCertificateRequest) ProtoMessage() {}

func (x *UpdateCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCertificateRequest.ProtoReflect.Descriptor instead.
func (*UpdateCertificateRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateCertificateRequest) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

func (x *UpdateCertificateRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateCertificateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCertificateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateCertificateRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateCertificateRequest) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

func (x *UpdateCertificateRequest) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *UpdateCertificateRequest) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *UpdateCertificateRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

type UpdateCertificateMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the certificate being updated.
	CertificateId string `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCertificateMetadata) Reset() {
	*x = UpdateCertificateMetadata{}
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCertificateMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCertificateMetadata) ProtoMessage() {}

func (x *UpdateCertificateMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCertificateMetadata.ProtoReflect.Descriptor instead.
func (*UpdateCertificateMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateCertificateMetadata) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

type DeleteCertificateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the certificate to be deleted.
	CertificateId string `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCertificateRequest) Reset() {
	*x = DeleteCertificateRequest{}
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCertificateRequest) ProtoMessage() {}

func (x *DeleteCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCertificateRequest.ProtoReflect.Descriptor instead.
func (*DeleteCertificateRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteCertificateRequest) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

type DeleteCertificateMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the certificate being deleted.
	CertificateId string `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCertificateMetadata) Reset() {
	*x = DeleteCertificateMetadata{}
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCertificateMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCertificateMetadata) ProtoMessage() {}

func (x *DeleteCertificateMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCertificateMetadata.ProtoReflect.Descriptor instead.
func (*DeleteCertificateMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteCertificateMetadata) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

type RequestNewCertificateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to create a certificate in.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the certificate.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the certificate.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Labels for the certificate as `key:value` pairs.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Fully qualified domain names of the certificate.
	Domains []string `protobuf:"bytes,5,rep,name=domains,proto3" json:"domains,omitempty"`
	// Type of the domain validation challenge.
	ChallengeType ChallengeType `protobuf:"varint,6,opt,name=challenge_type,json=challengeType,proto3,enum=yandex.cloud.certificatemanager.v1.ChallengeType" json:"challenge_type,omitempty"`
	// Flag that protects deletion of the certificate
	DeletionProtection bool `protobuf:"varint,7,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RequestNewCertificateRequest) Reset() {
	*x = RequestNewCertificateRequest{}
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestNewCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestNewCertificateRequest) ProtoMessage() {}

func (x *RequestNewCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestNewCertificateRequest.ProtoReflect.Descriptor instead.
func (*RequestNewCertificateRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescGZIP(), []int{11}
}

func (x *RequestNewCertificateRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *RequestNewCertificateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RequestNewCertificateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RequestNewCertificateRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RequestNewCertificateRequest) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *RequestNewCertificateRequest) GetChallengeType() ChallengeType {
	if x != nil {
		return x.ChallengeType
	}
	return ChallengeType_CHALLENGE_TYPE_UNSPECIFIED
}

func (x *RequestNewCertificateRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

type RequestNewCertificateMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the certificate that is being requested.
	CertificateId string `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestNewCertificateMetadata) Reset() {
	*x = RequestNewCertificateMetadata{}
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestNewCertificateMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestNewCertificateMetadata) ProtoMessage() {}

func (x *RequestNewCertificateMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestNewCertificateMetadata.ProtoReflect.Descriptor instead.
func (*RequestNewCertificateMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescGZIP(), []int{12}
}

func (x *RequestNewCertificateMetadata) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

type ListCertificateOperationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the certificate to list operations for.
	//
	// To get the certificate ID, use a [CertificateService.List] request.
	CertificateId string `protobuf:"bytes,1,opt,name=certificate_id,json=certificateId,proto3" json:"certificate_id,omitempty"`
	// The maximum number of results per page that should be returned. If the number of available
	// results is larger than `page_size`, the service returns a [ListCertificateOperationsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set `page_token` to the
	// [ListCertificateOperationsResponse.next_page_token] returned by a previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCertificateOperationsRequest) Reset() {
	*x = ListCertificateOperationsRequest{}
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCertificateOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCertificateOperationsRequest) ProtoMessage() {}

func (x *ListCertificateOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCertificateOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListCertificateOperationsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListCertificateOperationsRequest) GetCertificateId() string {
	if x != nil {
		return x.CertificateId
	}
	return ""
}

func (x *ListCertificateOperationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCertificateOperationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListCertificateOperationsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of operations for the specified certificate.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListCertificateOperationsRequest.page_size], use the `next_page_token` as the value
	// for the [ListCertificateOperationsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCertificateOperationsResponse) Reset() {
	*x = ListCertificateOperationsResponse{}
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCertificateOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCertificateOperationsResponse) ProtoMessage() {}

func (x *ListCertificateOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCertificateOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListCertificateOperationsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListCertificateOperationsResponse) GetOperations() []*operation.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListCertificateOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_yandex_cloud_certificatemanager_v1_certificate_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDesc = "" +
	"\n" +
	"<yandex/cloud/certificatemanager/v1/certificate_service.proto\x12\"yandex.cloud.certificatemanager.v1\x1a\x1cgoogle/api/annotations.proto\x1a google/protobuf/field_mask.proto\x1a yandex/cloud/access/access.proto\x1a yandex/cloud/api/operation.proto\x1a4yandex/cloud/certificatemanager/v1/certificate.proto\x1a&yandex/cloud/operation/operation.proto\x1a\x1dyandex/cloud/validation.proto\"\x95\x01\n" +
	"\x15GetCertificateRequest\x123\n" +
	"\x0ecertificate_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\rcertificateId\x12G\n" +
	"\x04view\x18\x02 \x01(\x0e23.yandex.cloud.certificatemanager.v1.CertificateViewR\x04view\"\xe6\x01\n" +
	"\x17ListCertificatesRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\x12G\n" +
	"\x04view\x18\x06 \x01(\x0e23.yandex.cloud.certificatemanager.v1.CertificateViewR\x04viewJ\x04\b\x04\x10\x06\"\x97\x01\n" +
	"\x18ListCertificatesResponse\x12S\n" +
	"\fcertificates\x18\x01 \x03(\v2/.yandex.cloud.certificatemanager.v1.CertificateR\fcertificates\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x9d\x01\n" +
	"\x13ListVersionsRequest\x123\n" +
	"\x0ecertificate_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\rcertificateId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x87\x01\n" +
	"\x14ListVersionsResponse\x12G\n" +
	"\bversions\x18\x01 \x03(\v2+.yandex.cloud.certificatemanager.v1.VersionR\bversions\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xc0\x04\n" +
	"\x18CreateCertificateRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x128\n" +
	"\x04name\x18\x02 \x01(\tB$\xf2\xc71 |[a-z]([-a-z0-9]{0,61}[a-z0-9])?R\x04name\x12,\n" +
	"\vdescription\x18\x03 \x01(\tB\n" +
	"\x8a\xc81\x06<=1024R\vdescription\x12\x9d\x01\n" +
	"\x06labels\x18\x04 \x03(\v2H.yandex.cloud.certificatemanager.v1.CreateCertificateRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x04<=63R\x06labels\x12-\n" +
	"\vcertificate\x18\x05 \x01(\tB\v\x8a\xc81\a<=32768R\vcertificate\x12#\n" +
	"\x05chain\x18\x06 \x01(\tB\r\x8a\xc81\t<=2097152R\x05chain\x121\n" +
	"\vprivate_key\x18\a \x01(\tB\x10\xe8\xc71\x01\x8a\xc81\b1-524288R\n" +
	"privateKey\x12/\n" +
	"\x13deletion_protection\x18\b \x01(\bR\x12deletionProtection\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"B\n" +
	"\x19CreateCertificateMetadata\x12%\n" +
	"\x0ecertificate_id\x18\x01 \x01(\tR\rcertificateId\"\x83\x05\n" +
	"\x18UpdateCertificateRequest\x123\n" +
	"\x0ecertificate_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\rcertificateId\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x128\n" +
	"\x04name\x18\x03 \x01(\tB$\xf2\xc71 |[a-z]([-a-z0-9]{0,61}[a-z0-9])?R\x04name\x12,\n" +
	"\vdescription\x18\x04 \x01(\tB\n" +
	"\x8a\xc81\x06<=1024R\vdescription\x12\x9d\x01\n" +
	"\x06labels\x18\x05 \x03(\v2H.yandex.cloud.certificatemanager.v1.UpdateCertificateRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x04<=63R\x06labels\x12-\n" +
	"\vcertificate\x18\x06 \x01(\tB\v\x8a\xc81\a<=32768R\vcertificate\x12#\n" +
	"\x05chain\x18\a \x01(\tB\r\x8a\xc81\t<=2097152R\x05chain\x12-\n" +
	"\vprivate_key\x18\b \x01(\tB\f\x8a\xc81\b<=524288R\n" +
	"privateKey\x12/\n" +
	"\x13deletion_protection\x18\t \x01(\bR\x12deletionProtection\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"B\n" +
	"\x19UpdateCertificateMetadata\x12%\n" +
	"\x0ecertificate_id\x18\x01 \x01(\tR\rcertificateId\"O\n" +
	"\x18DeleteCertificateRequest\x123\n" +
	"\x0ecertificate_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\rcertificateId\"B\n" +
	"\x19DeleteCertificateMetadata\x12%\n" +
	"\x0ecertificate_id\x18\x01 \x01(\tR\rcertificateId\"\xb5\x04\n" +
	"\x1cRequestNewCertificateRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x128\n" +
	"\x04name\x18\x02 \x01(\tB$\xf2\xc71 |[a-z]([-a-z0-9]{0,61}[a-z0-9])?R\x04name\x12,\n" +
	"\vdescription\x18\x03 \x01(\tB\n" +
	"\x8a\xc81\x06<=1024R\vdescription\x12\xa1\x01\n" +
	"\x06labels\x18\x04 \x03(\v2L.yandex.cloud.certificatemanager.v1.RequestNewCertificateRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x04<=63R\x06labels\x12\x18\n" +
	"\adomains\x18\x05 \x03(\tR\adomains\x12X\n" +
	"\x0echallenge_type\x18\x06 \x01(\x0e21.yandex.cloud.certificatemanager.v1.ChallengeTypeR\rchallengeType\x12/\n" +
	"\x13deletion_protection\x18\a \x01(\bR\x12deletionProtection\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"F\n" +
	"\x1dRequestNewCertificateMetadata\x12%\n" +
	"\x0ecertificate_id\x18\x01 \x01(\tR\rcertificateId\"\xaa\x01\n" +
	" ListCertificateOperationsRequest\x123\n" +
	"\x0ecertificate_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\rcertificateId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x8e\x01\n" +
	"!ListCertificateOperationsResponse\x12A\n" +
	"\n" +
	"operations\x18\x01 \x03(\v2!.yandex.cloud.operation.OperationR\n" +
	"operations\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken*&\n" +
	"\x0fCertificateView\x12\t\n" +
	"\x05BASIC\x10\x00\x12\b\n" +
	"\x04FULL\x10\x012\xca\x12\n" +
	"\x12CertificateService\x12\xb0\x01\n" +
	"\x03Get\x129.yandex.cloud.certificatemanager.v1.GetCertificateRequest\x1a/.yandex.cloud.certificatemanager.v1.Certificate\"=\x82\xd3\xe4\x93\x027\x125/certificate-manager/v1/certificates/{certificate_id}\x12\xaf\x01\n" +
	"\x04List\x12;.yandex.cloud.certificatemanager.v1.ListCertificatesRequest\x1a<.yandex.cloud.certificatemanager.v1.ListCertificatesResponse\",\x82\xd3\xe4\x93\x02&\x12$/certificate-manager/v1/certificates\x12\xc9\x01\n" +
	"\fListVersions\x127.yandex.cloud.certificatemanager.v1.ListVersionsRequest\x1a8.yandex.cloud.certificatemanager.v1.ListVersionsResponse\"F\x82\xd3\xe4\x93\x02@\x12>/certificate-manager/v1/certificates/{certificate_id}/versions\x12\xc6\x01\n" +
	"\x06Create\x12<.yandex.cloud.certificatemanager.v1.CreateCertificateRequest\x1a!.yandex.cloud.operation.Operation\"[\xb2\xd2*(\n" +
	"\x19CreateCertificateMetadata\x12\vCertificate\x82\xd3\xe4\x93\x02):\x01*\"$/certificate-manager/v1/certificates\x12\xd7\x01\n" +
	"\x06Update\x12<.yandex.cloud.certificatemanager.v1.UpdateCertificateRequest\x1a!.yandex.cloud.operation.Operation\"l\xb2\xd2*(\n" +
	"\x19UpdateCertificateMetadata\x12\vCertificate\x82\xd3\xe4\x93\x02::\x01*25/certificate-manager/v1/certificates/{certificate_id}\x12\xd4\x01\n" +
	"\x06Delete\x12<.yandex.cloud.certificatemanager.v1.DeleteCertificateRequest\x1a!.yandex.cloud.operation.Operation\"i\xb2\xd2*(\n" +
	"\x19DeleteCertificateMetadata\x12\vCertificate\x82\xd3\xe4\x93\x027*5/certificate-manager/v1/certificates/{certificate_id}\x12\xdd\x01\n" +
	"\n" +
	"RequestNew\x12@.yandex.cloud.certificatemanager.v1.RequestNewCertificateRequest\x1a!.yandex.cloud.operation.Operation\"j\xb2\xd2*,\n" +
	"\x1dRequestNewCertificateMetadata\x12\vCertificate\x82\xd3\xe4\x93\x024:\x01*\"//certificate-manager/v1/certificates/requestNew\x12\xe7\x01\n" +
	"\x0eListOperations\x12D.yandex.cloud.certificatemanager.v1.ListCertificateOperationsRequest\x1aE.yandex.cloud.certificatemanager.v1.ListCertificateOperationsResponse\"H\x82\xd3\xe4\x93\x02B\x12@/certificate-manager/v1/certificates/{certificate_id}/operations\x12\xc4\x01\n" +
	"\x12ListAccessBindings\x12..yandex.cloud.access.ListAccessBindingsRequest\x1a/.yandex.cloud.access.ListAccessBindingsResponse\"M\x82\xd3\xe4\x93\x02G\x12E/certificate-manager/v1/certificates/{resource_id}:listAccessBindings\x12\xf4\x01\n" +
	"\x11SetAccessBindings\x12-.yandex.cloud.access.SetAccessBindingsRequest\x1a!.yandex.cloud.operation.Operation\"\x8c\x01\xb2\xd2*9\n" +
	" access.SetAccessBindingsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02I:\x01*\"D/certificate-manager/v1/certificates/{resource_id}:setAccessBindings\x12\x80\x02\n" +
	"\x14UpdateAccessBindings\x120.yandex.cloud.access.UpdateAccessBindingsRequest\x1a!.yandex.cloud.operation.Operation\"\x92\x01\xb2\xd2*<\n" +
	"#access.UpdateAccessBindingsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02L:\x01*\"G/certificate-manager/v1/certificates/{resource_id}:updateAccessBindingsB\x83\x01\n" +
	"&yandex.cloud.api.certificatemanager.v1ZYgithub.com/yandex-cloud/go-genproto/yandex/cloud/certificatemanager/v1;certificatemanagerb\x06proto3"

var (
	file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescData []byte
)

func file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDesc), len(file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDesc)))
	})
	return file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDescData
}

var file_yandex_cloud_certificatemanager_v1_certificate_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_yandex_cloud_certificatemanager_v1_certificate_service_proto_goTypes = []any{
	(CertificateView)(0),                      // 0: yandex.cloud.certificatemanager.v1.CertificateView
	(*GetCertificateRequest)(nil),             // 1: yandex.cloud.certificatemanager.v1.GetCertificateRequest
	(*ListCertificatesRequest)(nil),           // 2: yandex.cloud.certificatemanager.v1.ListCertificatesRequest
	(*ListCertificatesResponse)(nil),          // 3: yandex.cloud.certificatemanager.v1.ListCertificatesResponse
	(*ListVersionsRequest)(nil),               // 4: yandex.cloud.certificatemanager.v1.ListVersionsRequest
	(*ListVersionsResponse)(nil),              // 5: yandex.cloud.certificatemanager.v1.ListVersionsResponse
	(*CreateCertificateRequest)(nil),          // 6: yandex.cloud.certificatemanager.v1.CreateCertificateRequest
	(*CreateCertificateMetadata)(nil),         // 7: yandex.cloud.certificatemanager.v1.CreateCertificateMetadata
	(*UpdateCertificateRequest)(nil),          // 8: yandex.cloud.certificatemanager.v1.UpdateCertificateRequest
	(*UpdateCertificateMetadata)(nil),         // 9: yandex.cloud.certificatemanager.v1.UpdateCertificateMetadata
	(*DeleteCertificateRequest)(nil),          // 10: yandex.cloud.certificatemanager.v1.DeleteCertificateRequest
	(*DeleteCertificateMetadata)(nil),         // 11: yandex.cloud.certificatemanager.v1.DeleteCertificateMetadata
	(*RequestNewCertificateRequest)(nil),      // 12: yandex.cloud.certificatemanager.v1.RequestNewCertificateRequest
	(*RequestNewCertificateMetadata)(nil),     // 13: yandex.cloud.certificatemanager.v1.RequestNewCertificateMetadata
	(*ListCertificateOperationsRequest)(nil),  // 14: yandex.cloud.certificatemanager.v1.ListCertificateOperationsRequest
	(*ListCertificateOperationsResponse)(nil), // 15: yandex.cloud.certificatemanager.v1.ListCertificateOperationsResponse
	nil,                                      // 16: yandex.cloud.certificatemanager.v1.CreateCertificateRequest.LabelsEntry
	nil,                                      // 17: yandex.cloud.certificatemanager.v1.UpdateCertificateRequest.LabelsEntry
	nil,                                      // 18: yandex.cloud.certificatemanager.v1.RequestNewCertificateRequest.LabelsEntry
	(*Certificate)(nil),                      // 19: yandex.cloud.certificatemanager.v1.Certificate
	(*Version)(nil),                          // 20: yandex.cloud.certificatemanager.v1.Version
	(*fieldmaskpb.FieldMask)(nil),            // 21: google.protobuf.FieldMask
	(ChallengeType)(0),                       // 22: yandex.cloud.certificatemanager.v1.ChallengeType
	(*operation.Operation)(nil),              // 23: yandex.cloud.operation.Operation
	(*access.ListAccessBindingsRequest)(nil), // 24: yandex.cloud.access.ListAccessBindingsRequest
	(*access.SetAccessBindingsRequest)(nil),  // 25: yandex.cloud.access.SetAccessBindingsRequest
	(*access.UpdateAccessBindingsRequest)(nil), // 26: yandex.cloud.access.UpdateAccessBindingsRequest
	(*access.ListAccessBindingsResponse)(nil),  // 27: yandex.cloud.access.ListAccessBindingsResponse
}
var file_yandex_cloud_certificatemanager_v1_certificate_service_proto_depIdxs = []int32{
	0,  // 0: yandex.cloud.certificatemanager.v1.GetCertificateRequest.view:type_name -> yandex.cloud.certificatemanager.v1.CertificateView
	0,  // 1: yandex.cloud.certificatemanager.v1.ListCertificatesRequest.view:type_name -> yandex.cloud.certificatemanager.v1.CertificateView
	19, // 2: yandex.cloud.certificatemanager.v1.ListCertificatesResponse.certificates:type_name -> yandex.cloud.certificatemanager.v1.Certificate
	20, // 3: yandex.cloud.certificatemanager.v1.ListVersionsResponse.versions:type_name -> yandex.cloud.certificatemanager.v1.Version
	16, // 4: yandex.cloud.certificatemanager.v1.CreateCertificateRequest.labels:type_name -> yandex.cloud.certificatemanager.v1.CreateCertificateRequest.LabelsEntry
	21, // 5: yandex.cloud.certificatemanager.v1.UpdateCertificateRequest.update_mask:type_name -> google.protobuf.FieldMask
	17, // 6: yandex.cloud.certificatemanager.v1.UpdateCertificateRequest.labels:type_name -> yandex.cloud.certificatemanager.v1.UpdateCertificateRequest.LabelsEntry
	18, // 7: yandex.cloud.certificatemanager.v1.RequestNewCertificateRequest.labels:type_name -> yandex.cloud.certificatemanager.v1.RequestNewCertificateRequest.LabelsEntry
	22, // 8: yandex.cloud.certificatemanager.v1.RequestNewCertificateRequest.challenge_type:type_name -> yandex.cloud.certificatemanager.v1.ChallengeType
	23, // 9: yandex.cloud.certificatemanager.v1.ListCertificateOperationsResponse.operations:type_name -> yandex.cloud.operation.Operation
	1,  // 10: yandex.cloud.certificatemanager.v1.CertificateService.Get:input_type -> yandex.cloud.certificatemanager.v1.GetCertificateRequest
	2,  // 11: yandex.cloud.certificatemanager.v1.CertificateService.List:input_type -> yandex.cloud.certificatemanager.v1.ListCertificatesRequest
	4,  // 12: yandex.cloud.certificatemanager.v1.CertificateService.ListVersions:input_type -> yandex.cloud.certificatemanager.v1.ListVersionsRequest
	6,  // 13: yandex.cloud.certificatemanager.v1.CertificateService.Create:input_type -> yandex.cloud.certificatemanager.v1.CreateCertificateRequest
	8,  // 14: yandex.cloud.certificatemanager.v1.CertificateService.Update:input_type -> yandex.cloud.certificatemanager.v1.UpdateCertificateRequest
	10, // 15: yandex.cloud.certificatemanager.v1.CertificateService.Delete:input_type -> yandex.cloud.certificatemanager.v1.DeleteCertificateRequest
	12, // 16: yandex.cloud.certificatemanager.v1.CertificateService.RequestNew:input_type -> yandex.cloud.certificatemanager.v1.RequestNewCertificateRequest
	14, // 17: yandex.cloud.certificatemanager.v1.CertificateService.ListOperations:input_type -> yandex.cloud.certificatemanager.v1.ListCertificateOperationsRequest
	24, // 18: yandex.cloud.certificatemanager.v1.CertificateService.ListAccessBindings:input_type -> yandex.cloud.access.ListAccessBindingsRequest
	25, // 19: yandex.cloud.certificatemanager.v1.CertificateService.SetAccessBindings:input_type -> yandex.cloud.access.SetAccessBindingsRequest
	26, // 20: yandex.cloud.certificatemanager.v1.CertificateService.UpdateAccessBindings:input_type -> yandex.cloud.access.UpdateAccessBindingsRequest
	19, // 21: yandex.cloud.certificatemanager.v1.CertificateService.Get:output_type -> yandex.cloud.certificatemanager.v1.Certificate
	3,  // 22: yandex.cloud.certificatemanager.v1.CertificateService.List:output_type -> yandex.cloud.certificatemanager.v1.ListCertificatesResponse
	5,  // 23: yandex.cloud.certificatemanager.v1.CertificateService.ListVersions:output_type -> yandex.cloud.certificatemanager.v1.ListVersionsResponse
	23, // 24: yandex.cloud.certificatemanager.v1.CertificateService.Create:output_type -> yandex.cloud.operation.Operation
	23, // 25: yandex.cloud.certificatemanager.v1.CertificateService.Update:output_type -> yandex.cloud.operation.Operation
	23, // 26: yandex.cloud.certificatemanager.v1.CertificateService.Delete:output_type -> yandex.cloud.operation.Operation
	23, // 27: yandex.cloud.certificatemanager.v1.CertificateService.RequestNew:output_type -> yandex.cloud.operation.Operation
	15, // 28: yandex.cloud.certificatemanager.v1.CertificateService.ListOperations:output_type -> yandex.cloud.certificatemanager.v1.ListCertificateOperationsResponse
	27, // 29: yandex.cloud.certificatemanager.v1.CertificateService.ListAccessBindings:output_type -> yandex.cloud.access.ListAccessBindingsResponse
	23, // 30: yandex.cloud.certificatemanager.v1.CertificateService.SetAccessBindings:output_type -> yandex.cloud.operation.Operation
	23, // 31: yandex.cloud.certificatemanager.v1.CertificateService.UpdateAccessBindings:output_type -> yandex.cloud.operation.Operation
	21, // [21:32] is the sub-list for method output_type
	10, // [10:21] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_yandex_cloud_certificatemanager_v1_certificate_service_proto_init() }
func file_yandex_cloud_certificatemanager_v1_certificate_service_proto_init() {
	if File_yandex_cloud_certificatemanager_v1_certificate_service_proto != nil {
		return
	}
	file_yandex_cloud_certificatemanager_v1_certificate_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDesc), len(file_yandex_cloud_certificatemanager_v1_certificate_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_certificatemanager_v1_certificate_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_certificatemanager_v1_certificate_service_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_certificatemanager_v1_certificate_service_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_certificatemanager_v1_certificate_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_certificatemanager_v1_certificate_service_proto = out.File
	file_yandex_cloud_certificatemanager_v1_certificate_service_proto_goTypes = nil
	file_yandex_cloud_certificatemanager_v1_certificate_service_proto_depIdxs = nil
}

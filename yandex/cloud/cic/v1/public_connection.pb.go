// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: yandex/cloud/cic/v1/public_connection.proto

package cic

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PublicConnection_CloudServiceType int32

const (
	PublicConnection_CLOUD_SERVICE_TYPE_UNSPECIFIED PublicConnection_CloudServiceType = 0
	// Deprecated: Marked as deprecated in yandex/cloud/cic/v1/public_connection.proto.
	PublicConnection_CLOUD_SERVICE_YANDEX             PublicConnection_CloudServiceType = 1
	PublicConnection_CLOUD_SERVICE_ALL_PUBLIC         PublicConnection_CloudServiceType = 2
	PublicConnection_CLOUD_SERVICE_S3                 PublicConnection_CloudServiceType = 3
	PublicConnection_CLOUD_SERVICE_ML                 PublicConnection_CloudServiceType = 4
	PublicConnection_CLOUD_SERVICE_APIGW              PublicConnection_CloudServiceType = 5
	PublicConnection_CLOUD_SERVICE_CONTAINER_REGISTRY PublicConnection_CloudServiceType = 6
	PublicConnection_CLOUD_SERVICE_CONSOLE            PublicConnection_CloudServiceType = 7
	PublicConnection_CLOUD_SERVICE_MONITORING         PublicConnection_CloudServiceType = 8
	PublicConnection_CLOUD_SERVICE_YANDEX_GPT         PublicConnection_CloudServiceType = 9
	PublicConnection_CLOUD_SERVICES_ALL_API_ENDPOINT  PublicConnection_CloudServiceType = 10
	PublicConnection_CLOUD_SERVICE_YMQ                PublicConnection_CloudServiceType = 11
)

// Enum value maps for PublicConnection_CloudServiceType.
var (
	PublicConnection_CloudServiceType_name = map[int32]string{
		0:  "CLOUD_SERVICE_TYPE_UNSPECIFIED",
		1:  "CLOUD_SERVICE_YANDEX",
		2:  "CLOUD_SERVICE_ALL_PUBLIC",
		3:  "CLOUD_SERVICE_S3",
		4:  "CLOUD_SERVICE_ML",
		5:  "CLOUD_SERVICE_APIGW",
		6:  "CLOUD_SERVICE_CONTAINER_REGISTRY",
		7:  "CLOUD_SERVICE_CONSOLE",
		8:  "CLOUD_SERVICE_MONITORING",
		9:  "CLOUD_SERVICE_YANDEX_GPT",
		10: "CLOUD_SERVICES_ALL_API_ENDPOINT",
		11: "CLOUD_SERVICE_YMQ",
	}
	PublicConnection_CloudServiceType_value = map[string]int32{
		"CLOUD_SERVICE_TYPE_UNSPECIFIED":   0,
		"CLOUD_SERVICE_YANDEX":             1,
		"CLOUD_SERVICE_ALL_PUBLIC":         2,
		"CLOUD_SERVICE_S3":                 3,
		"CLOUD_SERVICE_ML":                 4,
		"CLOUD_SERVICE_APIGW":              5,
		"CLOUD_SERVICE_CONTAINER_REGISTRY": 6,
		"CLOUD_SERVICE_CONSOLE":            7,
		"CLOUD_SERVICE_MONITORING":         8,
		"CLOUD_SERVICE_YANDEX_GPT":         9,
		"CLOUD_SERVICES_ALL_API_ENDPOINT":  10,
		"CLOUD_SERVICE_YMQ":                11,
	}
)

func (x PublicConnection_CloudServiceType) Enum() *PublicConnection_CloudServiceType {
	p := new(PublicConnection_CloudServiceType)
	*p = x
	return p
}

func (x PublicConnection_CloudServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicConnection_CloudServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_cic_v1_public_connection_proto_enumTypes[0].Descriptor()
}

func (PublicConnection_CloudServiceType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_cic_v1_public_connection_proto_enumTypes[0]
}

func (x PublicConnection_CloudServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicConnection_CloudServiceType.Descriptor instead.
func (PublicConnection_CloudServiceType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_cic_v1_public_connection_proto_rawDescGZIP(), []int{0, 0}
}

type PublicConnection_Status int32

const (
	PublicConnection_STATUS_UNSPECIFIED PublicConnection_Status = 0
	PublicConnection_CREATING           PublicConnection_Status = 1
	PublicConnection_UPDATING           PublicConnection_Status = 2
	PublicConnection_DELETING           PublicConnection_Status = 3
	PublicConnection_ACTIVE             PublicConnection_Status = 4
)

// Enum value maps for PublicConnection_Status.
var (
	PublicConnection_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "CREATING",
		2: "UPDATING",
		3: "DELETING",
		4: "ACTIVE",
	}
	PublicConnection_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"CREATING":           1,
		"UPDATING":           2,
		"DELETING":           3,
		"ACTIVE":             4,
	}
)

func (x PublicConnection_Status) Enum() *PublicConnection_Status {
	p := new(PublicConnection_Status)
	*p = x
	return p
}

func (x PublicConnection_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicConnection_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_cic_v1_public_connection_proto_enumTypes[1].Descriptor()
}

func (PublicConnection_Status) Type() protoreflect.EnumType {
	return &file_yandex_cloud_cic_v1_public_connection_proto_enumTypes[1]
}

func (x PublicConnection_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicConnection_Status.Descriptor instead.
func (PublicConnection_Status) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_cic_v1_public_connection_proto_rawDescGZIP(), []int{0, 1}
}

// A PublicConnection resource.
type PublicConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the publicConnection.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the publicConnection.
	// The name must be unique within the folder.
	// Value must match the regular expression “\|[a-zA-Z]([-_a-zA-Z0-9]{0,61}[a-zA-Z0-9])?“.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Optional description of the publicConnection. 0-256 characters long.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// ID of the folder that the publicConnection belongs to.
	FolderId string `protobuf:"bytes,5,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// ID of the region that the publicConnection belongs to.
	RegionId string `protobuf:"bytes,6,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// ID of the trunk_connection that the publicConnection belongs to.
	TrunkConnectionId string `protobuf:"bytes,7,opt,name=trunk_connection_id,json=trunkConnectionId,proto3" json:"trunk_connection_id,omitempty"`
	// VLAN_ID that the privateConnection uses in multiplexing.
	// Not used in connections over partners-II
	// Value range: [1, 4095]
	VlanId *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	// IPv4 peering config of connection
	Ipv4Peering *Peering `protobuf:"bytes,9,opt,name=ipv4_peering,json=ipv4Peering,proto3" json:"ipv4_peering,omitempty"`
	// Cloud services that the publicConnection connects to.
	Ipv4AllowedServiceTypes []PublicConnection_CloudServiceType `protobuf:"varint,11,rep,packed,name=ipv4_allowed_service_types,json=ipv4AllowedServiceTypes,proto3,enum=yandex.cloud.cic.v1.PublicConnection_CloudServiceType" json:"ipv4_allowed_service_types,omitempty"`
	// IPv4 Peer Announced Prefixes
	// It's an list of ip with format ipPrefix/length where address part of ipPrefix is 0
	Ipv4PeerAnnouncedPrefixes []string `protobuf:"bytes,13,rep,name=ipv4_peer_announced_prefixes,json=ipv4PeerAnnouncedPrefixes,proto3" json:"ipv4_peer_announced_prefixes,omitempty"`
	// Resource labels, `key:value` pairs.
	// No more than 64 per resource.
	// The maximum string length in characters for each value is 63.
	// Each value must match the regular expression `[-_0-9a-z]*`.
	// The string length in characters for each key must be 1-63.
	// Each key must match the regular expression `[a-z][-_0-9a-z]*`.
	Labels map[string]string `protobuf:"bytes,18,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Status of the publicConnection.
	Status PublicConnection_Status `protobuf:"varint,19,opt,name=status,proto3,enum=yandex.cloud.cic.v1.PublicConnection_Status" json:"status,omitempty"`
	// Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *PublicConnection) Reset() {
	*x = PublicConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_cic_v1_public_connection_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicConnection) ProtoMessage() {}

func (x *PublicConnection) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_cic_v1_public_connection_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicConnection.ProtoReflect.Descriptor instead.
func (*PublicConnection) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_cic_v1_public_connection_proto_rawDescGZIP(), []int{0}
}

func (x *PublicConnection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PublicConnection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublicConnection) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PublicConnection) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *PublicConnection) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *PublicConnection) GetTrunkConnectionId() string {
	if x != nil {
		return x.TrunkConnectionId
	}
	return ""
}

func (x *PublicConnection) GetVlanId() *wrapperspb.Int64Value {
	if x != nil {
		return x.VlanId
	}
	return nil
}

func (x *PublicConnection) GetIpv4Peering() *Peering {
	if x != nil {
		return x.Ipv4Peering
	}
	return nil
}

func (x *PublicConnection) GetIpv4AllowedServiceTypes() []PublicConnection_CloudServiceType {
	if x != nil {
		return x.Ipv4AllowedServiceTypes
	}
	return nil
}

func (x *PublicConnection) GetIpv4PeerAnnouncedPrefixes() []string {
	if x != nil {
		return x.Ipv4PeerAnnouncedPrefixes
	}
	return nil
}

func (x *PublicConnection) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PublicConnection) GetStatus() PublicConnection_Status {
	if x != nil {
		return x.Status
	}
	return PublicConnection_STATUS_UNSPECIFIED
}

func (x *PublicConnection) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

var File_yandex_cloud_cic_v1_public_connection_proto protoreflect.FileDescriptor

var file_yandex_cloud_cic_v1_public_connection_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x69, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x69, 0x63, 0x2e,
	0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x63, 0x69, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x09, 0x0a, 0x10, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74,
	0x72, 0x75, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x50, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x73, 0x0a, 0x1a, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x17,
	0x69, 0x70, 0x76, 0x34, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x69,
	0x70, 0x76, 0x34, 0x50, 0x65, 0x65, 0x72, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x69, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xf0, 0x02, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x14, 0x43, 0x4c, 0x4f, 0x55,
	0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x59, 0x41, 0x4e, 0x44, 0x45, 0x58,
	0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x33, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x4c, 0x10, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x41, 0x50, 0x49, 0x47, 0x57, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4c, 0x4f,
	0x55, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41,
	0x49, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x10, 0x06, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x4f, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x49,
	0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x4f, 0x55,
	0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x59, 0x41, 0x4e, 0x44, 0x45, 0x58,
	0x5f, 0x47, 0x50, 0x54, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x50, 0x49,
	0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x59, 0x4d, 0x51,
	0x10, 0x0b, 0x22, 0x56, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05,
	0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x0e,
	0x10, 0x12, 0x4a, 0x04, 0x08, 0x14, 0x10, 0x15, 0x42, 0x56, 0x0a, 0x17, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x69, 0x63,
	0x2e, 0x76, 0x31, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x69, 0x63, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x69, 0x63,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_cic_v1_public_connection_proto_rawDescOnce sync.Once
	file_yandex_cloud_cic_v1_public_connection_proto_rawDescData = file_yandex_cloud_cic_v1_public_connection_proto_rawDesc
)

func file_yandex_cloud_cic_v1_public_connection_proto_rawDescGZIP() []byte {
	file_yandex_cloud_cic_v1_public_connection_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_cic_v1_public_connection_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_cic_v1_public_connection_proto_rawDescData)
	})
	return file_yandex_cloud_cic_v1_public_connection_proto_rawDescData
}

var file_yandex_cloud_cic_v1_public_connection_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_yandex_cloud_cic_v1_public_connection_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_yandex_cloud_cic_v1_public_connection_proto_goTypes = []any{
	(PublicConnection_CloudServiceType)(0), // 0: yandex.cloud.cic.v1.PublicConnection.CloudServiceType
	(PublicConnection_Status)(0),           // 1: yandex.cloud.cic.v1.PublicConnection.Status
	(*PublicConnection)(nil),               // 2: yandex.cloud.cic.v1.PublicConnection
	nil,                                    // 3: yandex.cloud.cic.v1.PublicConnection.LabelsEntry
	(*wrapperspb.Int64Value)(nil),          // 4: google.protobuf.Int64Value
	(*Peering)(nil),                        // 5: yandex.cloud.cic.v1.Peering
	(*timestamppb.Timestamp)(nil),          // 6: google.protobuf.Timestamp
}
var file_yandex_cloud_cic_v1_public_connection_proto_depIdxs = []int32{
	4, // 0: yandex.cloud.cic.v1.PublicConnection.vlan_id:type_name -> google.protobuf.Int64Value
	5, // 1: yandex.cloud.cic.v1.PublicConnection.ipv4_peering:type_name -> yandex.cloud.cic.v1.Peering
	0, // 2: yandex.cloud.cic.v1.PublicConnection.ipv4_allowed_service_types:type_name -> yandex.cloud.cic.v1.PublicConnection.CloudServiceType
	3, // 3: yandex.cloud.cic.v1.PublicConnection.labels:type_name -> yandex.cloud.cic.v1.PublicConnection.LabelsEntry
	1, // 4: yandex.cloud.cic.v1.PublicConnection.status:type_name -> yandex.cloud.cic.v1.PublicConnection.Status
	6, // 5: yandex.cloud.cic.v1.PublicConnection.created_at:type_name -> google.protobuf.Timestamp
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_yandex_cloud_cic_v1_public_connection_proto_init() }
func file_yandex_cloud_cic_v1_public_connection_proto_init() {
	if File_yandex_cloud_cic_v1_public_connection_proto != nil {
		return
	}
	file_yandex_cloud_cic_v1_peering_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_cic_v1_public_connection_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PublicConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_cic_v1_public_connection_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_cic_v1_public_connection_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_cic_v1_public_connection_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_cic_v1_public_connection_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_cic_v1_public_connection_proto_msgTypes,
	}.Build()
	File_yandex_cloud_cic_v1_public_connection_proto = out.File
	file_yandex_cloud_cic_v1_public_connection_proto_rawDesc = nil
	file_yandex_cloud_cic_v1_public_connection_proto_goTypes = nil
	file_yandex_cloud_cic_v1_public_connection_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: yandex/cloud/clouddesktop/v1/desktop_group_service.proto

package clouddesktop

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetDesktopGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desktop group resource to return.
	//
	// To get the desktop group ID use a [DesktopGroupService.List] request.
	DesktopGroupId string `protobuf:"bytes,1,opt,name=desktop_group_id,json=desktopGroupId,proto3" json:"desktop_group_id,omitempty"`
}

func (x *GetDesktopGroupRequest) Reset() {
	*x = GetDesktopGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesktopGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesktopGroupRequest) ProtoMessage() {}

func (x *GetDesktopGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesktopGroupRequest.ProtoReflect.Descriptor instead.
func (*GetDesktopGroupRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetDesktopGroupRequest) GetDesktopGroupId() string {
	if x != nil {
		return x.DesktopGroupId
	}
	return ""
}

type ListDesktopGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the folder to list desktop groups in.
	//
	// To get the folder ID use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size],
	// the service returns a [ListDesktopGroupsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Default value: 100.
	PageSize int64 `protobuf:"varint,21,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListDesktopGroupsResponse.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,22,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression must specify:
	// 1. The field name. Currently you can use filtering only on [DesktopGroup.name] field.
	// 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
	// 3. Value or a list of values to compare against the values of the field.
	Filter string `protobuf:"bytes,23,opt,name=filter,proto3" json:"filter,omitempty"`
	// Sorting the list by [DesktopGroup.name], [DesktopGroup.created_at] and [DesktopGroup.status] fields.
	// The default sorting order is ascending.
	OrderBy string `protobuf:"bytes,24,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListDesktopGroupsRequest) Reset() {
	*x = ListDesktopGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDesktopGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDesktopGroupsRequest) ProtoMessage() {}

func (x *ListDesktopGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDesktopGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListDesktopGroupsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListDesktopGroupsRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListDesktopGroupsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDesktopGroupsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDesktopGroupsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListDesktopGroupsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListDesktopGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of desktop groups.
	DesktopGroups []*DesktopGroup `protobuf:"bytes,1,rep,name=desktop_groups,json=desktopGroups,proto3" json:"desktop_groups,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListDesktopGroupsRequest.page_size], use
	// the [next_page_token] as the value
	// for the [ListDesktopGroupsRequest.page_token] query parameter
	// in the next list request. Each subsequent list request will have its own
	// [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,22,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDesktopGroupsResponse) Reset() {
	*x = ListDesktopGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDesktopGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDesktopGroupsResponse) ProtoMessage() {}

func (x *ListDesktopGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDesktopGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListDesktopGroupsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListDesktopGroupsResponse) GetDesktopGroups() []*DesktopGroup {
	if x != nil {
		return x.DesktopGroups
	}
	return nil
}

func (x *ListDesktopGroupsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListDesktopGroupDesktopsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desktop group.
	DesktopGroupId string `protobuf:"bytes,1,opt,name=desktop_group_id,json=desktopGroupId,proto3" json:"desktop_group_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size],
	// the service returns a [ListDesktopGroupDesktopsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Default value: 100.
	PageSize int64 `protobuf:"varint,21,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListDesktopGroupDesktopsResponse.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,22,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression must specify:
	// 1. The field name. Currently you can use filtering only on [Desktop.name] field.
	// 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
	// 3. Value or a list of values to compare against the values of the field.
	Filter string `protobuf:"bytes,23,opt,name=filter,proto3" json:"filter,omitempty"`
	// Sorting the list by [Desktop.name], [Desktop.created_at] and [Desktop.status] fields.
	// The default sorting order is ascending.
	OrderBy string `protobuf:"bytes,24,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListDesktopGroupDesktopsRequest) Reset() {
	*x = ListDesktopGroupDesktopsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDesktopGroupDesktopsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDesktopGroupDesktopsRequest) ProtoMessage() {}

func (x *ListDesktopGroupDesktopsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDesktopGroupDesktopsRequest.ProtoReflect.Descriptor instead.
func (*ListDesktopGroupDesktopsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListDesktopGroupDesktopsRequest) GetDesktopGroupId() string {
	if x != nil {
		return x.DesktopGroupId
	}
	return ""
}

func (x *ListDesktopGroupDesktopsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDesktopGroupDesktopsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDesktopGroupDesktopsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListDesktopGroupDesktopsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListDesktopGroupDesktopsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of desktops.
	Desktops []*Desktop `protobuf:"bytes,1,rep,name=desktops,proto3" json:"desktops,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListDesktopGroupDesktopsRequest.page_size], use
	// the [next_page_token] as the value
	// for the [ListDesktopsDGS Request.page_token] query parameter
	// in the next list request. Each subsequent list request will have its own
	// [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,22,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDesktopGroupDesktopsResponse) Reset() {
	*x = ListDesktopGroupDesktopsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDesktopGroupDesktopsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDesktopGroupDesktopsResponse) ProtoMessage() {}

func (x *ListDesktopGroupDesktopsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDesktopGroupDesktopsResponse.ProtoReflect.Descriptor instead.
func (*ListDesktopGroupDesktopsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListDesktopGroupDesktopsResponse) GetDesktops() []*Desktop {
	if x != nil {
		return x.Desktops
	}
	return nil
}

func (x *ListDesktopGroupDesktopsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListDesktopGroupOperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desktop group.
	DesktopGroupId string `protobuf:"bytes,1,opt,name=desktop_group_id,json=desktopGroupId,proto3" json:"desktop_group_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size],
	// the service returns a [ListDesktopGroupOperationsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Default value: 100.
	PageSize int64 `protobuf:"varint,21,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListDesktopGroupOperationsResponse.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,22,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Sorting the list by [DesktopGroup.name] field.
	// The default sorting order is ascending.
	Filter string `protobuf:"bytes,23,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListDesktopGroupOperationsRequest) Reset() {
	*x = ListDesktopGroupOperationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDesktopGroupOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDesktopGroupOperationsRequest) ProtoMessage() {}

func (x *ListDesktopGroupOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDesktopGroupOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListDesktopGroupOperationsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListDesktopGroupOperationsRequest) GetDesktopGroupId() string {
	if x != nil {
		return x.DesktopGroupId
	}
	return ""
}

func (x *ListDesktopGroupOperationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDesktopGroupOperationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDesktopGroupOperationsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListDesktopGroupOperationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of operations for the specified desktop group.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListDesktopGroupOperationsRequest.page_size], use
	// the [next_page_token] as the value
	// for the [ListDesktopGroupOperationsRequest.page_token] query parameter
	// in the next list request. Each subsequent list request will have its own
	// [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,22,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDesktopGroupOperationsResponse) Reset() {
	*x = ListDesktopGroupOperationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDesktopGroupOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDesktopGroupOperationsResponse) ProtoMessage() {}

func (x *ListDesktopGroupOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDesktopGroupOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListDesktopGroupOperationsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListDesktopGroupOperationsResponse) GetOperations() []*operation.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListDesktopGroupOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateDesktopGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateMask     *fieldmaskpb.FieldMask `protobuf:"bytes,1,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	DesktopGroupId string                 `protobuf:"bytes,2,opt,name=desktop_group_id,json=desktopGroupId,proto3" json:"desktop_group_id,omitempty"`
	DesktopImageId string                 `protobuf:"bytes,3,opt,name=desktop_image_id,json=desktopImageId,proto3" json:"desktop_image_id,omitempty"`
	Name           string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Labels         map[string]string      `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResourcesSpec  *ResourcesSpec         `protobuf:"bytes,7,opt,name=resources_spec,json=resourcesSpec,proto3" json:"resources_spec,omitempty"`
	// Configuration of the desktop group.
	GroupConfig *DesktopGroupConfiguration `protobuf:"bytes,10,opt,name=group_config,json=groupConfig,proto3" json:"group_config,omitempty"`
	// Boot disk specification of the desktop group.
	BootDiskSpec *DiskSpec `protobuf:"bytes,11,opt,name=boot_disk_spec,json=bootDiskSpec,proto3" json:"boot_disk_spec,omitempty"`
	// Data disk specification of the desktop group.
	DataDiskSpec *DiskSpec `protobuf:"bytes,12,opt,name=data_disk_spec,json=dataDiskSpec,proto3" json:"data_disk_spec,omitempty"`
}

func (x *UpdateDesktopGroupRequest) Reset() {
	*x = UpdateDesktopGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDesktopGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDesktopGroupRequest) ProtoMessage() {}

func (x *UpdateDesktopGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDesktopGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateDesktopGroupRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateDesktopGroupRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateDesktopGroupRequest) GetDesktopGroupId() string {
	if x != nil {
		return x.DesktopGroupId
	}
	return ""
}

func (x *UpdateDesktopGroupRequest) GetDesktopImageId() string {
	if x != nil {
		return x.DesktopImageId
	}
	return ""
}

func (x *UpdateDesktopGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDesktopGroupRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateDesktopGroupRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateDesktopGroupRequest) GetResourcesSpec() *ResourcesSpec {
	if x != nil {
		return x.ResourcesSpec
	}
	return nil
}

func (x *UpdateDesktopGroupRequest) GetGroupConfig() *DesktopGroupConfiguration {
	if x != nil {
		return x.GroupConfig
	}
	return nil
}

func (x *UpdateDesktopGroupRequest) GetBootDiskSpec() *DiskSpec {
	if x != nil {
		return x.BootDiskSpec
	}
	return nil
}

func (x *UpdateDesktopGroupRequest) GetDataDiskSpec() *DiskSpec {
	if x != nil {
		return x.DataDiskSpec
	}
	return nil
}

type CreateDesktopGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the folder to create a DesktopGroup in.
	//
	// To get a folder ID make a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// An image used to create a desktop boot disk
	DesktopImageId string `protobuf:"bytes,3,opt,name=desktop_image_id,json=desktopImageId,proto3" json:"desktop_image_id,omitempty"`
	// Name of the DesktopGroup.
	// The name must be unique within the folder.
	Name string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the DesktopGroup.
	Description string `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	// Resource specification of the desktop group.
	ResourcesSpec *ResourcesSpec `protobuf:"bytes,21,opt,name=resources_spec,json=resourcesSpec,proto3" json:"resources_spec,omitempty"`
	// Network interface specification of the desktop group.
	NetworkInterfaceSpec *NetworkInterfaceSpec `protobuf:"bytes,22,opt,name=network_interface_spec,json=networkInterfaceSpec,proto3" json:"network_interface_spec,omitempty"`
	// Boot disk specification of the desktop group.
	BootDiskSpec *DiskSpec `protobuf:"bytes,23,opt,name=boot_disk_spec,json=bootDiskSpec,proto3" json:"boot_disk_spec,omitempty"`
	// Data disk specification of the desktop group.
	DataDiskSpec *DiskSpec `protobuf:"bytes,24,opt,name=data_disk_spec,json=dataDiskSpec,proto3" json:"data_disk_spec,omitempty"`
	// Configuration of the desktop group.
	GroupConfig *DesktopGroupConfiguration `protobuf:"bytes,25,opt,name=group_config,json=groupConfig,proto3" json:"group_config,omitempty"`
}

func (x *CreateDesktopGroupRequest) Reset() {
	*x = CreateDesktopGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDesktopGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDesktopGroupRequest) ProtoMessage() {}

func (x *CreateDesktopGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDesktopGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateDesktopGroupRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDescGZIP(), []int{8}
}

func (x *CreateDesktopGroupRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateDesktopGroupRequest) GetDesktopImageId() string {
	if x != nil {
		return x.DesktopImageId
	}
	return ""
}

func (x *CreateDesktopGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDesktopGroupRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateDesktopGroupRequest) GetResourcesSpec() *ResourcesSpec {
	if x != nil {
		return x.ResourcesSpec
	}
	return nil
}

func (x *CreateDesktopGroupRequest) GetNetworkInterfaceSpec() *NetworkInterfaceSpec {
	if x != nil {
		return x.NetworkInterfaceSpec
	}
	return nil
}

func (x *CreateDesktopGroupRequest) GetBootDiskSpec() *DiskSpec {
	if x != nil {
		return x.BootDiskSpec
	}
	return nil
}

func (x *CreateDesktopGroupRequest) GetDataDiskSpec() *DiskSpec {
	if x != nil {
		return x.DataDiskSpec
	}
	return nil
}

func (x *CreateDesktopGroupRequest) GetGroupConfig() *DesktopGroupConfiguration {
	if x != nil {
		return x.GroupConfig
	}
	return nil
}

type CreateDesktopGroupMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desktop group that is being created.
	DesktopGroupId string `protobuf:"bytes,1,opt,name=desktop_group_id,json=desktopGroupId,proto3" json:"desktop_group_id,omitempty"`
}

func (x *CreateDesktopGroupMetadata) Reset() {
	*x = CreateDesktopGroupMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDesktopGroupMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDesktopGroupMetadata) ProtoMessage() {}

func (x *CreateDesktopGroupMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDesktopGroupMetadata.ProtoReflect.Descriptor instead.
func (*CreateDesktopGroupMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDescGZIP(), []int{9}
}

func (x *CreateDesktopGroupMetadata) GetDesktopGroupId() string {
	if x != nil {
		return x.DesktopGroupId
	}
	return ""
}

type DeleteDesktopGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desktop group to delete.
	//
	// To get a desktop group ID make a [DesktopGroupService.List] request.
	DesktopGroupId string `protobuf:"bytes,1,opt,name=desktop_group_id,json=desktopGroupId,proto3" json:"desktop_group_id,omitempty"`
}

func (x *DeleteDesktopGroupRequest) Reset() {
	*x = DeleteDesktopGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDesktopGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDesktopGroupRequest) ProtoMessage() {}

func (x *DeleteDesktopGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDesktopGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteDesktopGroupRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteDesktopGroupRequest) GetDesktopGroupId() string {
	if x != nil {
		return x.DesktopGroupId
	}
	return ""
}

type DeleteDesktopGroupMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desktop group that is being deleted.
	DesktopGroupId string `protobuf:"bytes,1,opt,name=desktop_group_id,json=desktopGroupId,proto3" json:"desktop_group_id,omitempty"`
}

func (x *DeleteDesktopGroupMetadata) Reset() {
	*x = DeleteDesktopGroupMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDesktopGroupMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDesktopGroupMetadata) ProtoMessage() {}

func (x *DeleteDesktopGroupMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDesktopGroupMetadata.ProtoReflect.Descriptor instead.
func (*DeleteDesktopGroupMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteDesktopGroupMetadata) GetDesktopGroupId() string {
	if x != nil {
		return x.DesktopGroupId
	}
	return ""
}

type UpdateDesktopGroupMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desktop group that is being updated.
	DesktopGroupId string `protobuf:"bytes,1,opt,name=desktop_group_id,json=desktopGroupId,proto3" json:"desktop_group_id,omitempty"`
}

func (x *UpdateDesktopGroupMetadata) Reset() {
	*x = UpdateDesktopGroupMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDesktopGroupMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDesktopGroupMetadata) ProtoMessage() {}

func (x *UpdateDesktopGroupMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDesktopGroupMetadata.ProtoReflect.Descriptor instead.
func (*UpdateDesktopGroupMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateDesktopGroupMetadata) GetDesktopGroupId() string {
	if x != nil {
		return x.DesktopGroupId
	}
	return ""
}

var File_yandex_cloud_clouddesktop_v1_desktop_group_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDesc = []byte{
	0x0a, 0x38, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30,
	0x52, 0x0e, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0xe8, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x08,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0xfa, 0xc7, 0x31,
	0x06, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x28, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x8a, 0xc8, 0x31,
	0x06, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x15, 0x22, 0xa0, 0x01, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x16, 0x22, 0xfc,
	0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7,
	0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0xfa,
	0xc7, 0x31, 0x06, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31,
	0x30, 0x30, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x8a,
	0xc8, 0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x15, 0x22, 0x97, 0x01,
	0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x52,
	0x08, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x16, 0x22, 0xd8, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x10, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31,
	0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x30, 0x2d,
	0x31, 0x30, 0x30, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x8a, 0xc8, 0x31, 0x06, 0x3c, 0x3d,
	0x31, 0x30, 0x30, 0x30, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x15, 0x22, 0x95, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x16, 0x22, 0xe7, 0x06, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x36, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0e, 0x64,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x10, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35,
	0x30, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x23, 0xf2, 0xc7, 0x31, 0x1f, 0x7c, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x29, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0x8a, 0xc8, 0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x32, 0x34, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9c, 0x01, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x3b, 0xf2, 0xc7, 0x31, 0x0b, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x5d, 0x2a, 0x82, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x34, 0x8a, 0xc8, 0x31, 0x04, 0x3c,
	0x3d, 0x36, 0x33, 0xb2, 0xc8, 0x31, 0x18, 0x12, 0x10, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d,
	0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x1a, 0x04, 0x31, 0x2d, 0x36, 0x33, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x5e, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x50, 0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x50, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x70, 0x65, 0x63, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04,
	0x08, 0x08, 0x10, 0x0a, 0x22, 0xba, 0x05, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c,
	0x3d, 0x35, 0x30, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x10, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31,
	0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x22, 0xf2, 0xc7, 0x31, 0x1e, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b,
	0x2d, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x29, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x8a, 0xc8, 0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x32, 0x34, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x6c, 0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x14, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x50, 0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x50, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x69, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x5e, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x15, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x0b, 0x22, 0x46, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0e,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x46,
	0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x32, 0xe6,
	0x10, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x38,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34,
	0x12, 0x32, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x12, 0xa8, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0xda, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x73,
	0x12, 0x41, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12,
	0x3b, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x2f, 0x7b, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x73, 0x12, 0xe2, 0x01, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x43, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x64, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0xc2, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0xb2, 0xd2,
	0x2a, 0x2a, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0c,
	0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0xde, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x74, 0xb2, 0xd2, 0x2a, 0x33, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37,
	0x3a, 0x01, 0x2a, 0x32, 0x32, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x64, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xdb, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76,
	0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x71, 0xb2, 0xd2, 0x2a, 0x33, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x34, 0x2a, 0x32, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xbf, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x42, 0x12, 0x40, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xef, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2d, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x87, 0x01, 0xb2, 0xd2, 0x2a, 0x39, 0x0a, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x53,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x44, 0x3a, 0x01, 0x2a, 0x22, 0x3f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x73, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xfb, 0x01, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0xb2, 0xd2, 0x2a, 0x3c, 0x0a, 0x23,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47,
	0x3a, 0x01, 0x2a, 0x22, 0x42, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x64, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x7d, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x71, 0x0a, 0x20, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x5a, 0x4d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDescData = file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDesc
)

func file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDescData)
	})
	return file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDescData
}

var file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_goTypes = []any{
	(*GetDesktopGroupRequest)(nil),             // 0: yandex.cloud.clouddesktop.v1.api.GetDesktopGroupRequest
	(*ListDesktopGroupsRequest)(nil),           // 1: yandex.cloud.clouddesktop.v1.api.ListDesktopGroupsRequest
	(*ListDesktopGroupsResponse)(nil),          // 2: yandex.cloud.clouddesktop.v1.api.ListDesktopGroupsResponse
	(*ListDesktopGroupDesktopsRequest)(nil),    // 3: yandex.cloud.clouddesktop.v1.api.ListDesktopGroupDesktopsRequest
	(*ListDesktopGroupDesktopsResponse)(nil),   // 4: yandex.cloud.clouddesktop.v1.api.ListDesktopGroupDesktopsResponse
	(*ListDesktopGroupOperationsRequest)(nil),  // 5: yandex.cloud.clouddesktop.v1.api.ListDesktopGroupOperationsRequest
	(*ListDesktopGroupOperationsResponse)(nil), // 6: yandex.cloud.clouddesktop.v1.api.ListDesktopGroupOperationsResponse
	(*UpdateDesktopGroupRequest)(nil),          // 7: yandex.cloud.clouddesktop.v1.api.UpdateDesktopGroupRequest
	(*CreateDesktopGroupRequest)(nil),          // 8: yandex.cloud.clouddesktop.v1.api.CreateDesktopGroupRequest
	(*CreateDesktopGroupMetadata)(nil),         // 9: yandex.cloud.clouddesktop.v1.api.CreateDesktopGroupMetadata
	(*DeleteDesktopGroupRequest)(nil),          // 10: yandex.cloud.clouddesktop.v1.api.DeleteDesktopGroupRequest
	(*DeleteDesktopGroupMetadata)(nil),         // 11: yandex.cloud.clouddesktop.v1.api.DeleteDesktopGroupMetadata
	(*UpdateDesktopGroupMetadata)(nil),         // 12: yandex.cloud.clouddesktop.v1.api.UpdateDesktopGroupMetadata
	nil,                                        // 13: yandex.cloud.clouddesktop.v1.api.UpdateDesktopGroupRequest.LabelsEntry
	(*DesktopGroup)(nil),                       // 14: yandex.cloud.clouddesktop.v1.api.DesktopGroup
	(*Desktop)(nil),                            // 15: yandex.cloud.clouddesktop.v1.api.Desktop
	(*operation.Operation)(nil),                // 16: yandex.cloud.operation.Operation
	(*fieldmaskpb.FieldMask)(nil),              // 17: google.protobuf.FieldMask
	(*ResourcesSpec)(nil),                      // 18: yandex.cloud.clouddesktop.v1.api.ResourcesSpec
	(*DesktopGroupConfiguration)(nil),          // 19: yandex.cloud.clouddesktop.v1.api.DesktopGroupConfiguration
	(*DiskSpec)(nil),                           // 20: yandex.cloud.clouddesktop.v1.api.DiskSpec
	(*NetworkInterfaceSpec)(nil),               // 21: yandex.cloud.clouddesktop.v1.api.NetworkInterfaceSpec
	(*access.ListAccessBindingsRequest)(nil),   // 22: yandex.cloud.access.ListAccessBindingsRequest
	(*access.SetAccessBindingsRequest)(nil),    // 23: yandex.cloud.access.SetAccessBindingsRequest
	(*access.UpdateAccessBindingsRequest)(nil), // 24: yandex.cloud.access.UpdateAccessBindingsRequest
	(*access.ListAccessBindingsResponse)(nil),  // 25: yandex.cloud.access.ListAccessBindingsResponse
}
var file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_depIdxs = []int32{
	14, // 0: yandex.cloud.clouddesktop.v1.api.ListDesktopGroupsResponse.desktop_groups:type_name -> yandex.cloud.clouddesktop.v1.api.DesktopGroup
	15, // 1: yandex.cloud.clouddesktop.v1.api.ListDesktopGroupDesktopsResponse.desktops:type_name -> yandex.cloud.clouddesktop.v1.api.Desktop
	16, // 2: yandex.cloud.clouddesktop.v1.api.ListDesktopGroupOperationsResponse.operations:type_name -> yandex.cloud.operation.Operation
	17, // 3: yandex.cloud.clouddesktop.v1.api.UpdateDesktopGroupRequest.update_mask:type_name -> google.protobuf.FieldMask
	13, // 4: yandex.cloud.clouddesktop.v1.api.UpdateDesktopGroupRequest.labels:type_name -> yandex.cloud.clouddesktop.v1.api.UpdateDesktopGroupRequest.LabelsEntry
	18, // 5: yandex.cloud.clouddesktop.v1.api.UpdateDesktopGroupRequest.resources_spec:type_name -> yandex.cloud.clouddesktop.v1.api.ResourcesSpec
	19, // 6: yandex.cloud.clouddesktop.v1.api.UpdateDesktopGroupRequest.group_config:type_name -> yandex.cloud.clouddesktop.v1.api.DesktopGroupConfiguration
	20, // 7: yandex.cloud.clouddesktop.v1.api.UpdateDesktopGroupRequest.boot_disk_spec:type_name -> yandex.cloud.clouddesktop.v1.api.DiskSpec
	20, // 8: yandex.cloud.clouddesktop.v1.api.UpdateDesktopGroupRequest.data_disk_spec:type_name -> yandex.cloud.clouddesktop.v1.api.DiskSpec
	18, // 9: yandex.cloud.clouddesktop.v1.api.CreateDesktopGroupRequest.resources_spec:type_name -> yandex.cloud.clouddesktop.v1.api.ResourcesSpec
	21, // 10: yandex.cloud.clouddesktop.v1.api.CreateDesktopGroupRequest.network_interface_spec:type_name -> yandex.cloud.clouddesktop.v1.api.NetworkInterfaceSpec
	20, // 11: yandex.cloud.clouddesktop.v1.api.CreateDesktopGroupRequest.boot_disk_spec:type_name -> yandex.cloud.clouddesktop.v1.api.DiskSpec
	20, // 12: yandex.cloud.clouddesktop.v1.api.CreateDesktopGroupRequest.data_disk_spec:type_name -> yandex.cloud.clouddesktop.v1.api.DiskSpec
	19, // 13: yandex.cloud.clouddesktop.v1.api.CreateDesktopGroupRequest.group_config:type_name -> yandex.cloud.clouddesktop.v1.api.DesktopGroupConfiguration
	0,  // 14: yandex.cloud.clouddesktop.v1.api.DesktopGroupService.Get:input_type -> yandex.cloud.clouddesktop.v1.api.GetDesktopGroupRequest
	1,  // 15: yandex.cloud.clouddesktop.v1.api.DesktopGroupService.List:input_type -> yandex.cloud.clouddesktop.v1.api.ListDesktopGroupsRequest
	3,  // 16: yandex.cloud.clouddesktop.v1.api.DesktopGroupService.ListDesktops:input_type -> yandex.cloud.clouddesktop.v1.api.ListDesktopGroupDesktopsRequest
	5,  // 17: yandex.cloud.clouddesktop.v1.api.DesktopGroupService.ListOperations:input_type -> yandex.cloud.clouddesktop.v1.api.ListDesktopGroupOperationsRequest
	8,  // 18: yandex.cloud.clouddesktop.v1.api.DesktopGroupService.Create:input_type -> yandex.cloud.clouddesktop.v1.api.CreateDesktopGroupRequest
	7,  // 19: yandex.cloud.clouddesktop.v1.api.DesktopGroupService.Update:input_type -> yandex.cloud.clouddesktop.v1.api.UpdateDesktopGroupRequest
	10, // 20: yandex.cloud.clouddesktop.v1.api.DesktopGroupService.Delete:input_type -> yandex.cloud.clouddesktop.v1.api.DeleteDesktopGroupRequest
	22, // 21: yandex.cloud.clouddesktop.v1.api.DesktopGroupService.ListAccessBindings:input_type -> yandex.cloud.access.ListAccessBindingsRequest
	23, // 22: yandex.cloud.clouddesktop.v1.api.DesktopGroupService.SetAccessBindings:input_type -> yandex.cloud.access.SetAccessBindingsRequest
	24, // 23: yandex.cloud.clouddesktop.v1.api.DesktopGroupService.UpdateAccessBindings:input_type -> yandex.cloud.access.UpdateAccessBindingsRequest
	14, // 24: yandex.cloud.clouddesktop.v1.api.DesktopGroupService.Get:output_type -> yandex.cloud.clouddesktop.v1.api.DesktopGroup
	2,  // 25: yandex.cloud.clouddesktop.v1.api.DesktopGroupService.List:output_type -> yandex.cloud.clouddesktop.v1.api.ListDesktopGroupsResponse
	4,  // 26: yandex.cloud.clouddesktop.v1.api.DesktopGroupService.ListDesktops:output_type -> yandex.cloud.clouddesktop.v1.api.ListDesktopGroupDesktopsResponse
	6,  // 27: yandex.cloud.clouddesktop.v1.api.DesktopGroupService.ListOperations:output_type -> yandex.cloud.clouddesktop.v1.api.ListDesktopGroupOperationsResponse
	16, // 28: yandex.cloud.clouddesktop.v1.api.DesktopGroupService.Create:output_type -> yandex.cloud.operation.Operation
	16, // 29: yandex.cloud.clouddesktop.v1.api.DesktopGroupService.Update:output_type -> yandex.cloud.operation.Operation
	16, // 30: yandex.cloud.clouddesktop.v1.api.DesktopGroupService.Delete:output_type -> yandex.cloud.operation.Operation
	25, // 31: yandex.cloud.clouddesktop.v1.api.DesktopGroupService.ListAccessBindings:output_type -> yandex.cloud.access.ListAccessBindingsResponse
	16, // 32: yandex.cloud.clouddesktop.v1.api.DesktopGroupService.SetAccessBindings:output_type -> yandex.cloud.operation.Operation
	16, // 33: yandex.cloud.clouddesktop.v1.api.DesktopGroupService.UpdateAccessBindings:output_type -> yandex.cloud.operation.Operation
	24, // [24:34] is the sub-list for method output_type
	14, // [14:24] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_init() }
func file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_init() {
	if File_yandex_cloud_clouddesktop_v1_desktop_group_service_proto != nil {
		return
	}
	file_yandex_cloud_clouddesktop_v1_desktop_proto_init()
	file_yandex_cloud_clouddesktop_v1_desktop_group_proto_init()
	file_yandex_cloud_clouddesktop_v1_disk_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetDesktopGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListDesktopGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListDesktopGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ListDesktopGroupDesktopsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ListDesktopGroupDesktopsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ListDesktopGroupOperationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ListDesktopGroupOperationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDesktopGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CreateDesktopGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CreateDesktopGroupMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteDesktopGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteDesktopGroupMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDesktopGroupMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_clouddesktop_v1_desktop_group_service_proto = out.File
	file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_rawDesc = nil
	file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_goTypes = nil
	file_yandex_cloud_clouddesktop_v1_desktop_group_service_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: yandex/cloud/clouddesktop/v1/desktop_group_service.proto

package clouddesktop

import (
	context "context"
	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DesktopGroupService_Get_FullMethodName                  = "/yandex.cloud.clouddesktop.v1.api.DesktopGroupService/Get"
	DesktopGroupService_List_FullMethodName                 = "/yandex.cloud.clouddesktop.v1.api.DesktopGroupService/List"
	DesktopGroupService_ListDesktops_FullMethodName         = "/yandex.cloud.clouddesktop.v1.api.DesktopGroupService/ListDesktops"
	DesktopGroupService_ListOperations_FullMethodName       = "/yandex.cloud.clouddesktop.v1.api.DesktopGroupService/ListOperations"
	DesktopGroupService_Create_FullMethodName               = "/yandex.cloud.clouddesktop.v1.api.DesktopGroupService/Create"
	DesktopGroupService_Update_FullMethodName               = "/yandex.cloud.clouddesktop.v1.api.DesktopGroupService/Update"
	DesktopGroupService_Delete_FullMethodName               = "/yandex.cloud.clouddesktop.v1.api.DesktopGroupService/Delete"
	DesktopGroupService_ListAccessBindings_FullMethodName   = "/yandex.cloud.clouddesktop.v1.api.DesktopGroupService/ListAccessBindings"
	DesktopGroupService_SetAccessBindings_FullMethodName    = "/yandex.cloud.clouddesktop.v1.api.DesktopGroupService/SetAccessBindings"
	DesktopGroupService_UpdateAccessBindings_FullMethodName = "/yandex.cloud.clouddesktop.v1.api.DesktopGroupService/UpdateAccessBindings"
)

// DesktopGroupServiceClient is the client API for DesktopGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A set of methods for managing desktop group resources.
type DesktopGroupServiceClient interface {
	// Returns the specified desktop group resource.
	//
	// To get the list of available desktop groups, make a [List] request.
	Get(ctx context.Context, in *GetDesktopGroupRequest, opts ...grpc.CallOption) (*DesktopGroup, error)
	// Retrieves the list of desktop group resources.
	List(ctx context.Context, in *ListDesktopGroupsRequest, opts ...grpc.CallOption) (*ListDesktopGroupsResponse, error)
	// Retrieves the list of desktops resources.
	ListDesktops(ctx context.Context, in *ListDesktopGroupDesktopsRequest, opts ...grpc.CallOption) (*ListDesktopGroupDesktopsResponse, error)
	// Returns list of the operations for the specified desktop group.
	ListOperations(ctx context.Context, in *ListDesktopGroupOperationsRequest, opts ...grpc.CallOption) (*ListDesktopGroupOperationsResponse, error)
	// Creates desktop group in the specified folder.
	Create(ctx context.Context, in *CreateDesktopGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Updates desktop group properties
	Update(ctx context.Context, in *UpdateDesktopGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified desktop group.
	Delete(ctx context.Context, in *DeleteDesktopGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Returns a list of the access bindings for the specified desktop group.
	ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	// Sets access bindings for the specified desktop group.
	SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Updates access bindings of the specified desktop group.
	UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
}

type desktopGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDesktopGroupServiceClient(cc grpc.ClientConnInterface) DesktopGroupServiceClient {
	return &desktopGroupServiceClient{cc}
}

func (c *desktopGroupServiceClient) Get(ctx context.Context, in *GetDesktopGroupRequest, opts ...grpc.CallOption) (*DesktopGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DesktopGroup)
	err := c.cc.Invoke(ctx, DesktopGroupService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopGroupServiceClient) List(ctx context.Context, in *ListDesktopGroupsRequest, opts ...grpc.CallOption) (*ListDesktopGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDesktopGroupsResponse)
	err := c.cc.Invoke(ctx, DesktopGroupService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopGroupServiceClient) ListDesktops(ctx context.Context, in *ListDesktopGroupDesktopsRequest, opts ...grpc.CallOption) (*ListDesktopGroupDesktopsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDesktopGroupDesktopsResponse)
	err := c.cc.Invoke(ctx, DesktopGroupService_ListDesktops_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopGroupServiceClient) ListOperations(ctx context.Context, in *ListDesktopGroupOperationsRequest, opts ...grpc.CallOption) (*ListDesktopGroupOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDesktopGroupOperationsResponse)
	err := c.cc.Invoke(ctx, DesktopGroupService_ListOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopGroupServiceClient) Create(ctx context.Context, in *CreateDesktopGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, DesktopGroupService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopGroupServiceClient) Update(ctx context.Context, in *UpdateDesktopGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, DesktopGroupService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopGroupServiceClient) Delete(ctx context.Context, in *DeleteDesktopGroupRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, DesktopGroupService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopGroupServiceClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(access.ListAccessBindingsResponse)
	err := c.cc.Invoke(ctx, DesktopGroupService_ListAccessBindings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopGroupServiceClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, DesktopGroupService_SetAccessBindings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopGroupServiceClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, DesktopGroupService_UpdateAccessBindings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DesktopGroupServiceServer is the server API for DesktopGroupService service.
// All implementations should embed UnimplementedDesktopGroupServiceServer
// for forward compatibility.
//
// A set of methods for managing desktop group resources.
type DesktopGroupServiceServer interface {
	// Returns the specified desktop group resource.
	//
	// To get the list of available desktop groups, make a [List] request.
	Get(context.Context, *GetDesktopGroupRequest) (*DesktopGroup, error)
	// Retrieves the list of desktop group resources.
	List(context.Context, *ListDesktopGroupsRequest) (*ListDesktopGroupsResponse, error)
	// Retrieves the list of desktops resources.
	ListDesktops(context.Context, *ListDesktopGroupDesktopsRequest) (*ListDesktopGroupDesktopsResponse, error)
	// Returns list of the operations for the specified desktop group.
	ListOperations(context.Context, *ListDesktopGroupOperationsRequest) (*ListDesktopGroupOperationsResponse, error)
	// Creates desktop group in the specified folder.
	Create(context.Context, *CreateDesktopGroupRequest) (*operation.Operation, error)
	// Updates desktop group properties
	Update(context.Context, *UpdateDesktopGroupRequest) (*operation.Operation, error)
	// Deletes the specified desktop group.
	Delete(context.Context, *DeleteDesktopGroupRequest) (*operation.Operation, error)
	// Returns a list of the access bindings for the specified desktop group.
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error)
	// Sets access bindings for the specified desktop group.
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest) (*operation.Operation, error)
	// Updates access bindings of the specified desktop group.
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest) (*operation.Operation, error)
}

// UnimplementedDesktopGroupServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDesktopGroupServiceServer struct{}

func (UnimplementedDesktopGroupServiceServer) Get(context.Context, *GetDesktopGroupRequest) (*DesktopGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDesktopGroupServiceServer) List(context.Context, *ListDesktopGroupsRequest) (*ListDesktopGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDesktopGroupServiceServer) ListDesktops(context.Context, *ListDesktopGroupDesktopsRequest) (*ListDesktopGroupDesktopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDesktops not implemented")
}
func (UnimplementedDesktopGroupServiceServer) ListOperations(context.Context, *ListDesktopGroupOperationsRequest) (*ListDesktopGroupOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (UnimplementedDesktopGroupServiceServer) Create(context.Context, *CreateDesktopGroupRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDesktopGroupServiceServer) Update(context.Context, *UpdateDesktopGroupRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDesktopGroupServiceServer) Delete(context.Context, *DeleteDesktopGroupRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDesktopGroupServiceServer) ListAccessBindings(context.Context, *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessBindings not implemented")
}
func (UnimplementedDesktopGroupServiceServer) SetAccessBindings(context.Context, *access.SetAccessBindingsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccessBindings not implemented")
}
func (UnimplementedDesktopGroupServiceServer) UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccessBindings not implemented")
}
func (UnimplementedDesktopGroupServiceServer) testEmbeddedByValue() {}

// UnsafeDesktopGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DesktopGroupServiceServer will
// result in compilation errors.
type UnsafeDesktopGroupServiceServer interface {
	mustEmbedUnimplementedDesktopGroupServiceServer()
}

func RegisterDesktopGroupServiceServer(s grpc.ServiceRegistrar, srv DesktopGroupServiceServer) {
	// If the following call pancis, it indicates UnimplementedDesktopGroupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DesktopGroupService_ServiceDesc, srv)
}

func _DesktopGroupService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDesktopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopGroupServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopGroupService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopGroupServiceServer).Get(ctx, req.(*GetDesktopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopGroupService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDesktopGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopGroupServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopGroupService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopGroupServiceServer).List(ctx, req.(*ListDesktopGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopGroupService_ListDesktops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDesktopGroupDesktopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopGroupServiceServer).ListDesktops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopGroupService_ListDesktops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopGroupServiceServer).ListDesktops(ctx, req.(*ListDesktopGroupDesktopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopGroupService_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDesktopGroupOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopGroupServiceServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopGroupService_ListOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopGroupServiceServer).ListOperations(ctx, req.(*ListDesktopGroupOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopGroupService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDesktopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopGroupServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopGroupService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopGroupServiceServer).Create(ctx, req.(*CreateDesktopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopGroupService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDesktopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopGroupServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopGroupService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopGroupServiceServer).Update(ctx, req.(*UpdateDesktopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopGroupService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDesktopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopGroupServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopGroupService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopGroupServiceServer).Delete(ctx, req.(*DeleteDesktopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopGroupService_ListAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(access.ListAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopGroupServiceServer).ListAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopGroupService_ListAccessBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopGroupServiceServer).ListAccessBindings(ctx, req.(*access.ListAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopGroupService_SetAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(access.SetAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopGroupServiceServer).SetAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopGroupService_SetAccessBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopGroupServiceServer).SetAccessBindings(ctx, req.(*access.SetAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopGroupService_UpdateAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(access.UpdateAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopGroupServiceServer).UpdateAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopGroupService_UpdateAccessBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopGroupServiceServer).UpdateAccessBindings(ctx, req.(*access.UpdateAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DesktopGroupService_ServiceDesc is the grpc.ServiceDesc for DesktopGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DesktopGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.clouddesktop.v1.api.DesktopGroupService",
	HandlerType: (*DesktopGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _DesktopGroupService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DesktopGroupService_List_Handler,
		},
		{
			MethodName: "ListDesktops",
			Handler:    _DesktopGroupService_ListDesktops_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _DesktopGroupService_ListOperations_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DesktopGroupService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DesktopGroupService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DesktopGroupService_Delete_Handler,
		},
		{
			MethodName: "ListAccessBindings",
			Handler:    _DesktopGroupService_ListAccessBindings_Handler,
		},
		{
			MethodName: "SetAccessBindings",
			Handler:    _DesktopGroupService_SetAccessBindings_Handler,
		},
		{
			MethodName: "UpdateAccessBindings",
			Handler:    _DesktopGroupService_UpdateAccessBindings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/clouddesktop/v1/desktop_group_service.proto",
}

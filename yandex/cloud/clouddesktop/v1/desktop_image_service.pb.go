// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: yandex/cloud/clouddesktop/v1/desktop_image_service.proto

package clouddesktop

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListDesktopImagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the folder to list desktop images in.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size],
	// the service returns a [ListDesktopImagesRequest.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Default value: 100.
	PageSize int64 `protobuf:"varint,21,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListDesktopImagesRequest.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,22,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression must specify:
	// 1. The field name. Currently you can use filtering only on [DesktopImage.name] field.
	// 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
	// 3. Value or a list of values to compare against the values of the field.
	Filter string `protobuf:"bytes,23,opt,name=filter,proto3" json:"filter,omitempty"`
	// Sorting the list by [DesktopImage.name], [DesktopImage.created_at] and [DesktopImage.status] fields.
	// The default sorting order is ascending.
	OrderBy string `protobuf:"bytes,24,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListDesktopImagesRequest) Reset() {
	*x = ListDesktopImagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDesktopImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDesktopImagesRequest) ProtoMessage() {}

func (x *ListDesktopImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDesktopImagesRequest.ProtoReflect.Descriptor instead.
func (*ListDesktopImagesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListDesktopImagesRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListDesktopImagesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDesktopImagesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDesktopImagesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListDesktopImagesRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListDesktopImagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of desktop images.
	DesktopImages []*DesktopImage `protobuf:"bytes,1,rep,name=desktop_images,json=desktopImages,proto3" json:"desktop_images,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListDesktopImagesRequest.page_size], use
	// the [next_page_token] as the value
	// for the [ListDesktopImagesRequest.page_token] query parameter
	// in the next list request. Each subsequent list request will have its own
	// [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,22,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDesktopImagesResponse) Reset() {
	*x = ListDesktopImagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDesktopImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDesktopImagesResponse) ProtoMessage() {}

func (x *ListDesktopImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDesktopImagesResponse.ProtoReflect.Descriptor instead.
func (*ListDesktopImagesResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListDesktopImagesResponse) GetDesktopImages() []*DesktopImage {
	if x != nil {
		return x.DesktopImages
	}
	return nil
}

func (x *ListDesktopImagesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CopyDesktopImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the folder to copy the image to.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the image.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// ID of the compute image to copy the image from.
	ImageId string `protobuf:"bytes,8,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
}

func (x *CopyDesktopImageRequest) Reset() {
	*x = CopyDesktopImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyDesktopImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyDesktopImageRequest) ProtoMessage() {}

func (x *CopyDesktopImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyDesktopImageRequest.ProtoReflect.Descriptor instead.
func (*CopyDesktopImageRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDescGZIP(), []int{2}
}

func (x *CopyDesktopImageRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CopyDesktopImageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CopyDesktopImageRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

type UpdateDesktopImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageId    string                 `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	Name       string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Labels     map[string]string      `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateDesktopImageRequest) Reset() {
	*x = UpdateDesktopImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDesktopImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDesktopImageRequest) ProtoMessage() {}

func (x *UpdateDesktopImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDesktopImageRequest.ProtoReflect.Descriptor instead.
func (*UpdateDesktopImageRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateDesktopImageRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *UpdateDesktopImageRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateDesktopImageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDesktopImageRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type CopyFromDesktopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the folder to copy the image to.
	FolderId string `protobuf:"bytes,3,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the image.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// ID of the desktop to copy the image from.
	DesktopId string `protobuf:"bytes,8,opt,name=desktop_id,json=desktopId,proto3" json:"desktop_id,omitempty"`
}

func (x *CopyFromDesktopRequest) Reset() {
	*x = CopyFromDesktopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFromDesktopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFromDesktopRequest) ProtoMessage() {}

func (x *CopyFromDesktopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFromDesktopRequest.ProtoReflect.Descriptor instead.
func (*CopyFromDesktopRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDescGZIP(), []int{4}
}

func (x *CopyFromDesktopRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CopyFromDesktopRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CopyFromDesktopRequest) GetDesktopId() string {
	if x != nil {
		return x.DesktopId
	}
	return ""
}

type CopyDesktopImageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the new image.
	ImageId string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
}

func (x *CopyDesktopImageMetadata) Reset() {
	*x = CopyDesktopImageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyDesktopImageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyDesktopImageMetadata) ProtoMessage() {}

func (x *CopyDesktopImageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyDesktopImageMetadata.ProtoReflect.Descriptor instead.
func (*CopyDesktopImageMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDescGZIP(), []int{5}
}

func (x *CopyDesktopImageMetadata) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

type CopyFromDesktopMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the new image.
	ImageId string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
}

func (x *CopyFromDesktopMetadata) Reset() {
	*x = CopyFromDesktopMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFromDesktopMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFromDesktopMetadata) ProtoMessage() {}

func (x *CopyFromDesktopMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFromDesktopMetadata.ProtoReflect.Descriptor instead.
func (*CopyFromDesktopMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDescGZIP(), []int{6}
}

func (x *CopyFromDesktopMetadata) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

type DeleteDesktopImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the image to delete.
	ImageId string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
}

func (x *DeleteDesktopImageRequest) Reset() {
	*x = DeleteDesktopImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDesktopImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDesktopImageRequest) ProtoMessage() {}

func (x *DeleteDesktopImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDesktopImageRequest.ProtoReflect.Descriptor instead.
func (*DeleteDesktopImageRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteDesktopImageRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

type DeleteDesktopImageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the image to delete.
	ImageId string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
}

func (x *DeleteDesktopImageMetadata) Reset() {
	*x = DeleteDesktopImageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDesktopImageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDesktopImageMetadata) ProtoMessage() {}

func (x *DeleteDesktopImageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDesktopImageMetadata.ProtoReflect.Descriptor instead.
func (*DeleteDesktopImageMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteDesktopImageMetadata) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

type GetDesktopImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the image to get.
	ImageId string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
}

func (x *GetDesktopImageRequest) Reset() {
	*x = GetDesktopImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesktopImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesktopImageRequest) ProtoMessage() {}

func (x *GetDesktopImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesktopImageRequest.ProtoReflect.Descriptor instead.
func (*GetDesktopImageRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetDesktopImageRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

type UpdateDesktopImageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageId string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
}

func (x *UpdateDesktopImageMetadata) Reset() {
	*x = UpdateDesktopImageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDesktopImageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDesktopImageMetadata) ProtoMessage() {}

func (x *UpdateDesktopImageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDesktopImageMetadata.ProtoReflect.Descriptor instead.
func (*UpdateDesktopImageMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateDesktopImageMetadata) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

var File_yandex_cloud_clouddesktop_v1_desktop_image_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDesc = []byte{
	0x0a, 0x38, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31,
	0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8,
	0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0x8a, 0xc8, 0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d,
	0x31, 0x30, 0x30, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x15, 0x22, 0xa0, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x55, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4a,
	0x04, 0x08, 0x02, 0x10, 0x16, 0x22, 0x95, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x70, 0x79, 0x44, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d,
	0x35, 0x30, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01,
	0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x07,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x08, 0x22, 0xf1, 0x02,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8,
	0xc7, 0x31, 0x01, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35,
	0x30, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x3b, 0xf2, 0xc7, 0x31, 0x0b, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x5d, 0x2a, 0x82, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x34, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d,
	0x36, 0x33, 0xb2, 0xc8, 0x31, 0x18, 0x12, 0x10, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x1a, 0x04, 0x31, 0x2d, 0x36, 0x33, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c,
	0x3d, 0x35, 0x30, 0x52, 0x09, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x4a, 0x04,
	0x08, 0x05, 0x10, 0x08, 0x22, 0x35, 0x0a, 0x18, 0x43, 0x6f, 0x70, 0x79, 0x44, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x17, 0x43,
	0x6f, 0x70, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x22, 0x3c, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22,
	0x37, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x32, 0xfe, 0x08, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x9c,
	0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xba, 0x01,
	0x0a, 0x04, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x44, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0xb2, 0xd2, 0x2a, 0x28, 0x0a, 0x18, 0x43, 0x6f, 0x70, 0x79,
	0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x3a, 0x63, 0x6f, 0x70, 0x79, 0x12, 0xc6, 0x01, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0xb2, 0xd2, 0x2a, 0x2a, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x32, 0x23,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0xce, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x72, 0x6f, 0x6d,
	0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x12, 0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46,
	0x72, 0x6f, 0x6d, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0xb2, 0xd2, 0x2a, 0x27, 0x0a, 0x17, 0x43, 0x6f, 0x70, 0x79,
	0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x0c, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x3a, 0x63, 0x6f, 0x70, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x12, 0xcc, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x62, 0xb2, 0xd2, 0x2a, 0x33, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x2a, 0x23,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x42, 0x71, 0x0a, 0x20, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDescData = file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDesc
)

func file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDescData)
	})
	return file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDescData
}

var file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_goTypes = []any{
	(*ListDesktopImagesRequest)(nil),   // 0: yandex.cloud.clouddesktop.v1.api.ListDesktopImagesRequest
	(*ListDesktopImagesResponse)(nil),  // 1: yandex.cloud.clouddesktop.v1.api.ListDesktopImagesResponse
	(*CopyDesktopImageRequest)(nil),    // 2: yandex.cloud.clouddesktop.v1.api.CopyDesktopImageRequest
	(*UpdateDesktopImageRequest)(nil),  // 3: yandex.cloud.clouddesktop.v1.api.UpdateDesktopImageRequest
	(*CopyFromDesktopRequest)(nil),     // 4: yandex.cloud.clouddesktop.v1.api.CopyFromDesktopRequest
	(*CopyDesktopImageMetadata)(nil),   // 5: yandex.cloud.clouddesktop.v1.api.CopyDesktopImageMetadata
	(*CopyFromDesktopMetadata)(nil),    // 6: yandex.cloud.clouddesktop.v1.api.CopyFromDesktopMetadata
	(*DeleteDesktopImageRequest)(nil),  // 7: yandex.cloud.clouddesktop.v1.api.DeleteDesktopImageRequest
	(*DeleteDesktopImageMetadata)(nil), // 8: yandex.cloud.clouddesktop.v1.api.DeleteDesktopImageMetadata
	(*GetDesktopImageRequest)(nil),     // 9: yandex.cloud.clouddesktop.v1.api.GetDesktopImageRequest
	(*UpdateDesktopImageMetadata)(nil), // 10: yandex.cloud.clouddesktop.v1.api.UpdateDesktopImageMetadata
	nil,                                // 11: yandex.cloud.clouddesktop.v1.api.UpdateDesktopImageRequest.LabelsEntry
	(*DesktopImage)(nil),               // 12: yandex.cloud.clouddesktop.v1.api.DesktopImage
	(*fieldmaskpb.FieldMask)(nil),      // 13: google.protobuf.FieldMask
	(*operation.Operation)(nil),        // 14: yandex.cloud.operation.Operation
}
var file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_depIdxs = []int32{
	12, // 0: yandex.cloud.clouddesktop.v1.api.ListDesktopImagesResponse.desktop_images:type_name -> yandex.cloud.clouddesktop.v1.api.DesktopImage
	13, // 1: yandex.cloud.clouddesktop.v1.api.UpdateDesktopImageRequest.update_mask:type_name -> google.protobuf.FieldMask
	11, // 2: yandex.cloud.clouddesktop.v1.api.UpdateDesktopImageRequest.labels:type_name -> yandex.cloud.clouddesktop.v1.api.UpdateDesktopImageRequest.LabelsEntry
	0,  // 3: yandex.cloud.clouddesktop.v1.api.DesktopImageService.List:input_type -> yandex.cloud.clouddesktop.v1.api.ListDesktopImagesRequest
	9,  // 4: yandex.cloud.clouddesktop.v1.api.DesktopImageService.Get:input_type -> yandex.cloud.clouddesktop.v1.api.GetDesktopImageRequest
	2,  // 5: yandex.cloud.clouddesktop.v1.api.DesktopImageService.Copy:input_type -> yandex.cloud.clouddesktop.v1.api.CopyDesktopImageRequest
	3,  // 6: yandex.cloud.clouddesktop.v1.api.DesktopImageService.Update:input_type -> yandex.cloud.clouddesktop.v1.api.UpdateDesktopImageRequest
	4,  // 7: yandex.cloud.clouddesktop.v1.api.DesktopImageService.CopyFromDesktop:input_type -> yandex.cloud.clouddesktop.v1.api.CopyFromDesktopRequest
	7,  // 8: yandex.cloud.clouddesktop.v1.api.DesktopImageService.Delete:input_type -> yandex.cloud.clouddesktop.v1.api.DeleteDesktopImageRequest
	1,  // 9: yandex.cloud.clouddesktop.v1.api.DesktopImageService.List:output_type -> yandex.cloud.clouddesktop.v1.api.ListDesktopImagesResponse
	12, // 10: yandex.cloud.clouddesktop.v1.api.DesktopImageService.Get:output_type -> yandex.cloud.clouddesktop.v1.api.DesktopImage
	14, // 11: yandex.cloud.clouddesktop.v1.api.DesktopImageService.Copy:output_type -> yandex.cloud.operation.Operation
	14, // 12: yandex.cloud.clouddesktop.v1.api.DesktopImageService.Update:output_type -> yandex.cloud.operation.Operation
	14, // 13: yandex.cloud.clouddesktop.v1.api.DesktopImageService.CopyFromDesktop:output_type -> yandex.cloud.operation.Operation
	14, // 14: yandex.cloud.clouddesktop.v1.api.DesktopImageService.Delete:output_type -> yandex.cloud.operation.Operation
	9,  // [9:15] is the sub-list for method output_type
	3,  // [3:9] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_init() }
func file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_init() {
	if File_yandex_cloud_clouddesktop_v1_desktop_image_service_proto != nil {
		return
	}
	file_yandex_cloud_clouddesktop_v1_desktop_image_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ListDesktopImagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListDesktopImagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CopyDesktopImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDesktopImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CopyFromDesktopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CopyDesktopImageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CopyFromDesktopMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteDesktopImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteDesktopImageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetDesktopImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDesktopImageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_clouddesktop_v1_desktop_image_service_proto = out.File
	file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_rawDesc = nil
	file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_goTypes = nil
	file_yandex_cloud_clouddesktop_v1_desktop_image_service_proto_depIdxs = nil
}

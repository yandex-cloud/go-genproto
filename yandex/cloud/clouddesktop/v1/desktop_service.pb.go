// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: yandex/cloud/clouddesktop/v1/desktop_service.proto

package clouddesktop

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdatePropertiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// To get the desktop ID use a [DesktopService.List] request.
	DesktopId  string                 `protobuf:"bytes,1,opt,name=desktop_id,json=desktopId,proto3" json:"desktop_id,omitempty"`
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	Name       string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Labels     map[string]string      `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdatePropertiesRequest) Reset() {
	*x = UpdatePropertiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePropertiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePropertiesRequest) ProtoMessage() {}

func (x *UpdatePropertiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePropertiesRequest.ProtoReflect.Descriptor instead.
func (*UpdatePropertiesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{0}
}

func (x *UpdatePropertiesRequest) GetDesktopId() string {
	if x != nil {
		return x.DesktopId
	}
	return ""
}

func (x *UpdatePropertiesRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdatePropertiesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePropertiesRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type StartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desktop.
	DesktopId string `protobuf:"bytes,1,opt,name=desktop_id,json=desktopId,proto3" json:"desktop_id,omitempty"`
}

func (x *StartRequest) Reset() {
	*x = StartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRequest) ProtoMessage() {}

func (x *StartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRequest.ProtoReflect.Descriptor instead.
func (*StartRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{1}
}

func (x *StartRequest) GetDesktopId() string {
	if x != nil {
		return x.DesktopId
	}
	return ""
}

type StopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desktop.
	DesktopId string `protobuf:"bytes,1,opt,name=desktop_id,json=desktopId,proto3" json:"desktop_id,omitempty"`
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{2}
}

func (x *StopRequest) GetDesktopId() string {
	if x != nil {
		return x.DesktopId
	}
	return ""
}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desktop.
	DesktopId string `protobuf:"bytes,1,opt,name=desktop_id,json=desktopId,proto3" json:"desktop_id,omitempty"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateRequest) GetDesktopId() string {
	if x != nil {
		return x.DesktopId
	}
	return ""
}

type GetDesktopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desktop resource to return.
	//
	// To get the desktop ID use a [DesktopService.List] request.
	DesktopId string `protobuf:"bytes,1,opt,name=desktop_id,json=desktopId,proto3" json:"desktop_id,omitempty"`
}

func (x *GetDesktopRequest) Reset() {
	*x = GetDesktopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesktopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesktopRequest) ProtoMessage() {}

func (x *GetDesktopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesktopRequest.ProtoReflect.Descriptor instead.
func (*GetDesktopRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetDesktopRequest) GetDesktopId() string {
	if x != nil {
		return x.DesktopId
	}
	return ""
}

type GetRdpFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desktop resource to return.
	//
	// To get the desktop ID use a [DesktopService.List] request.
	DesktopId string `protobuf:"bytes,1,opt,name=desktop_id,json=desktopId,proto3" json:"desktop_id,omitempty"`
	// User of the desktop.
	User *User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GetRdpFileRequest) Reset() {
	*x = GetRdpFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRdpFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRdpFileRequest) ProtoMessage() {}

func (x *GetRdpFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRdpFileRequest.ProtoReflect.Descriptor instead.
func (*GetRdpFileRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetRdpFileRequest) GetDesktopId() string {
	if x != nil {
		return x.DesktopId
	}
	return ""
}

func (x *GetRdpFileRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type RdpFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HTTP headers mapping.
	Headers map[string]string `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// RDP file content.
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *RdpFileResponse) Reset() {
	*x = RdpFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RdpFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RdpFileResponse) ProtoMessage() {}

func (x *RdpFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RdpFileResponse.ProtoReflect.Descriptor instead.
func (*RdpFileResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{6}
}

func (x *RdpFileResponse) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *RdpFileResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ListDesktopsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the folder to create a DesktopGroup in.
	//
	// To get a folder ID make a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size],
	// the service returns a [ListDesktopsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Default value: 100.
	PageSize int64 `protobuf:"varint,21,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListDesktopsResponse.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,22,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression must specify:
	// 1. The field name. Currently you can use filtering only on [Desktop.name] field.
	// 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
	// 3. Value or a list of values to compare against the values of the field.
	Filter string `protobuf:"bytes,23,opt,name=filter,proto3" json:"filter,omitempty"`
	// Sorting the list by [Desktop.name], [Desktop.created_at] and [Desktop.status] fields.
	// The default sorting order is ascending.
	OrderBy string `protobuf:"bytes,24,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListDesktopsRequest) Reset() {
	*x = ListDesktopsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDesktopsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDesktopsRequest) ProtoMessage() {}

func (x *ListDesktopsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDesktopsRequest.ProtoReflect.Descriptor instead.
func (*ListDesktopsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListDesktopsRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListDesktopsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDesktopsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDesktopsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListDesktopsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListDesktopsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of desktops.
	Desktops []*Desktop `protobuf:"bytes,1,rep,name=desktops,proto3" json:"desktops,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListDesktopsRequest.page_size], use
	// the [next_page_token] as the value
	// for the [ListDesktopsRequest.page_token] query parameter
	// in the next list request. Each subsequent list request will have its own
	// [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,22,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDesktopsResponse) Reset() {
	*x = ListDesktopsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDesktopsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDesktopsResponse) ProtoMessage() {}

func (x *ListDesktopsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDesktopsResponse.ProtoReflect.Descriptor instead.
func (*ListDesktopsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListDesktopsResponse) GetDesktops() []*Desktop {
	if x != nil {
		return x.Desktops
	}
	return nil
}

func (x *ListDesktopsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListDesktopOperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desktop.
	DesktopId string `protobuf:"bytes,1,opt,name=desktop_id,json=desktopId,proto3" json:"desktop_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size],
	// the service returns a [ListDesktopOperationsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Default value: 100.
	PageSize int64 `protobuf:"varint,21,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListDesktopOperationsResponse.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,22,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression must specify:
	// 1. The field name. Currently you can use filtering only on [Desktop.name] field.
	// 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
	// 3. Value or a list of values to compare against the values of the field.
	Filter string `protobuf:"bytes,23,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListDesktopOperationsRequest) Reset() {
	*x = ListDesktopOperationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDesktopOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDesktopOperationsRequest) ProtoMessage() {}

func (x *ListDesktopOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDesktopOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListDesktopOperationsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListDesktopOperationsRequest) GetDesktopId() string {
	if x != nil {
		return x.DesktopId
	}
	return ""
}

func (x *ListDesktopOperationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDesktopOperationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDesktopOperationsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListDesktopOperationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of operations for the specified desktop.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListDesktopOperationsRequest.page_size], use
	// the [next_page_token] as the value
	// for the [ListDesktopOperationsRequest.page_token] query parameter
	// in the next list request. Each subsequent list request will have its own
	// [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,22,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListDesktopOperationsResponse) Reset() {
	*x = ListDesktopOperationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDesktopOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDesktopOperationsResponse) ProtoMessage() {}

func (x *ListDesktopOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDesktopOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListDesktopOperationsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListDesktopOperationsResponse) GetOperations() []*operation.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListDesktopOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateDesktopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desktop group.
	DesktopGroupId string `protobuf:"bytes,3,opt,name=desktop_group_id,json=desktopGroupId,proto3" json:"desktop_group_id,omitempty"`
	// ID of the subnet for desktop.
	SubnetId string `protobuf:"bytes,4,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// List of users.
	Users []*User `protobuf:"bytes,23,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *CreateDesktopRequest) Reset() {
	*x = CreateDesktopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDesktopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDesktopRequest) ProtoMessage() {}

func (x *CreateDesktopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDesktopRequest.ProtoReflect.Descriptor instead.
func (*CreateDesktopRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{11}
}

func (x *CreateDesktopRequest) GetDesktopGroupId() string {
	if x != nil {
		return x.DesktopGroupId
	}
	return ""
}

func (x *CreateDesktopRequest) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *CreateDesktopRequest) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type CreateDesktopMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desktop that is being created.
	DesktopId string `protobuf:"bytes,1,opt,name=desktop_id,json=desktopId,proto3" json:"desktop_id,omitempty"`
}

func (x *CreateDesktopMetadata) Reset() {
	*x = CreateDesktopMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDesktopMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDesktopMetadata) ProtoMessage() {}

func (x *CreateDesktopMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDesktopMetadata.ProtoReflect.Descriptor instead.
func (*CreateDesktopMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{12}
}

func (x *CreateDesktopMetadata) GetDesktopId() string {
	if x != nil {
		return x.DesktopId
	}
	return ""
}

type DeleteDesktopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desktop to delete.
	DesktopId string `protobuf:"bytes,1,opt,name=desktop_id,json=desktopId,proto3" json:"desktop_id,omitempty"`
}

func (x *DeleteDesktopRequest) Reset() {
	*x = DeleteDesktopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDesktopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDesktopRequest) ProtoMessage() {}

func (x *DeleteDesktopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDesktopRequest.ProtoReflect.Descriptor instead.
func (*DeleteDesktopRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteDesktopRequest) GetDesktopId() string {
	if x != nil {
		return x.DesktopId
	}
	return ""
}

type DeleteDesktopMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desktop that is being deleted.
	DesktopId string `protobuf:"bytes,1,opt,name=desktop_id,json=desktopId,proto3" json:"desktop_id,omitempty"`
}

func (x *DeleteDesktopMetadata) Reset() {
	*x = DeleteDesktopMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDesktopMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDesktopMetadata) ProtoMessage() {}

func (x *DeleteDesktopMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDesktopMetadata.ProtoReflect.Descriptor instead.
func (*DeleteDesktopMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteDesktopMetadata) GetDesktopId() string {
	if x != nil {
		return x.DesktopId
	}
	return ""
}

type ResetPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desktop.
	DesktopId string `protobuf:"bytes,1,opt,name=desktop_id,json=desktopId,proto3" json:"desktop_id,omitempty"`
	// User of the desktop.
	User *User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *ResetPasswordRequest) Reset() {
	*x = ResetPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordRequest) ProtoMessage() {}

func (x *ResetPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordRequest.ProtoReflect.Descriptor instead.
func (*ResetPasswordRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{15}
}

func (x *ResetPasswordRequest) GetDesktopId() string {
	if x != nil {
		return x.DesktopId
	}
	return ""
}

func (x *ResetPasswordRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type ResetPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Generated password
	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ResetPasswordResponse) Reset() {
	*x = ResetPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordResponse) ProtoMessage() {}

func (x *ResetPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordResponse.ProtoReflect.Descriptor instead.
func (*ResetPasswordResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{16}
}

func (x *ResetPasswordResponse) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type RestartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desktop.
	DesktopId string `protobuf:"bytes,1,opt,name=desktop_id,json=desktopId,proto3" json:"desktop_id,omitempty"`
}

func (x *RestartRequest) Reset() {
	*x = RestartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartRequest) ProtoMessage() {}

func (x *RestartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartRequest.ProtoReflect.Descriptor instead.
func (*RestartRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{17}
}

func (x *RestartRequest) GetDesktopId() string {
	if x != nil {
		return x.DesktopId
	}
	return ""
}

type RestartDesktopMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the desktop.
	DesktopId string `protobuf:"bytes,1,opt,name=desktop_id,json=desktopId,proto3" json:"desktop_id,omitempty"`
}

func (x *RestartDesktopMetadata) Reset() {
	*x = RestartDesktopMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartDesktopMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartDesktopMetadata) ProtoMessage() {}

func (x *RestartDesktopMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartDesktopMetadata.ProtoReflect.Descriptor instead.
func (*RestartDesktopMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{18}
}

func (x *RestartDesktopMetadata) GetDesktopId() string {
	if x != nil {
		return x.DesktopId
	}
	return ""
}

type UpdateDesktopPropertiesMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesktopId string `protobuf:"bytes,1,opt,name=desktop_id,json=desktopId,proto3" json:"desktop_id,omitempty"`
}

func (x *UpdateDesktopPropertiesMetadata) Reset() {
	*x = UpdateDesktopPropertiesMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDesktopPropertiesMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDesktopPropertiesMetadata) ProtoMessage() {}

func (x *UpdateDesktopPropertiesMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDesktopPropertiesMetadata.ProtoReflect.Descriptor instead.
func (*UpdateDesktopPropertiesMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateDesktopPropertiesMetadata) GetDesktopId() string {
	if x != nil {
		return x.DesktopId
	}
	return ""
}

type StartDesktopMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesktopId string `protobuf:"bytes,1,opt,name=desktop_id,json=desktopId,proto3" json:"desktop_id,omitempty"`
}

func (x *StartDesktopMetadata) Reset() {
	*x = StartDesktopMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartDesktopMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDesktopMetadata) ProtoMessage() {}

func (x *StartDesktopMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDesktopMetadata.ProtoReflect.Descriptor instead.
func (*StartDesktopMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{20}
}

func (x *StartDesktopMetadata) GetDesktopId() string {
	if x != nil {
		return x.DesktopId
	}
	return ""
}

type StopDesktopMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesktopId string `protobuf:"bytes,1,opt,name=desktop_id,json=desktopId,proto3" json:"desktop_id,omitempty"`
}

func (x *StopDesktopMetadata) Reset() {
	*x = StopDesktopMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopDesktopMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopDesktopMetadata) ProtoMessage() {}

func (x *StopDesktopMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopDesktopMetadata.ProtoReflect.Descriptor instead.
func (*StopDesktopMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{21}
}

func (x *StopDesktopMetadata) GetDesktopId() string {
	if x != nil {
		return x.DesktopId
	}
	return ""
}

type UpdateDesktopMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesktopId string `protobuf:"bytes,1,opt,name=desktop_id,json=desktopId,proto3" json:"desktop_id,omitempty"`
}

func (x *UpdateDesktopMetadata) Reset() {
	*x = UpdateDesktopMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDesktopMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDesktopMetadata) ProtoMessage() {}

func (x *UpdateDesktopMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDesktopMetadata.ProtoReflect.Descriptor instead.
func (*UpdateDesktopMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateDesktopMetadata) GetDesktopId() string {
	if x != nil {
		return x.DesktopId
	}
	return ""
}

var File_yandex_cloud_clouddesktop_v1_desktop_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDesc = []byte{
	0x0a, 0x32, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x26, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x03, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31,
	0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x09, 0x64, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x23, 0xf2, 0xc7, 0x31, 0x1f, 0x7c, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x28, 0x5b, 0x2d, 0x61, 0x2d,
	0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x31, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x29, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x3b, 0xf2, 0xc7, 0x31, 0x0b, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x5d, 0x2a, 0x82, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x34, 0x8a, 0xc8, 0x31, 0x04, 0x3c,
	0x3d, 0x36, 0x33, 0xb2, 0xc8, 0x31, 0x18, 0x12, 0x10, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d,
	0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x1a, 0x04, 0x31, 0x2d, 0x36, 0x33, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x3b, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04,
	0x3c, 0x3d, 0x35, 0x30, 0x52, 0x09, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x22,
	0x3a, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x0a, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30,
	0x52, 0x09, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x09,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x0a, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30,
	0x52, 0x09, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x52, 0x64, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c,
	0x3d, 0x35, 0x30, 0x52, 0x09, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x22, 0xc1, 0x01, 0x0a, 0x0f, 0x52, 0x64, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x64, 0x70, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xe3, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x09,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x08, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06,
	0x30, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x28, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x8a, 0xc8, 0x31, 0x06,
	0x3c, 0x3d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x15, 0x22, 0x8b, 0x01, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x52, 0x08, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x16, 0x22, 0xc8, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8,
	0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x09, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0xfa, 0xc7, 0x31, 0x06, 0x30,
	0x2d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x28, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x8a, 0xc8, 0x31, 0x06, 0x3c,
	0x3d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4a, 0x04, 0x08,
	0x02, 0x10, 0x15, 0x22, 0x90, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x16, 0x22, 0xc5, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a,
	0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x00,
	0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x06, 0x82, 0xc8, 0x31, 0x02, 0x3e,
	0x30, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x17, 0x22, 0x36,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x0a, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30,
	0x52, 0x09, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x09,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x33, 0x0a, 0x15, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0x3d, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04,
	0x3c, 0x3d, 0x35, 0x30, 0x52, 0x09, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x22,
	0x37, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x14, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49,
	0x64, 0x22, 0x34, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x32,
	0xc9, 0x11, 0x0a, 0x0e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x33, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x12, 0x27, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x64, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x73, 0x2f, 0x7b,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb0, 0x01, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x52, 0x64, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x33, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x64, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x64, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f,
	0x69, 0x64, 0x7d, 0x3a, 0x67, 0x65, 0x74, 0x52, 0x64, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x99,
	0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x73, 0x12, 0xcd, 0x01, 0x0a, 0x0e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x64,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xae, 0x01, 0x0a, 0x06, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x36, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x49, 0xb2, 0xd2, 0x2a, 0x20, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x07, 0x44,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22,
	0x1a, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x73, 0x12, 0xd2, 0x01, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x60,
	0xb2, 0xd2, 0x2a, 0x2a, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x07, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x32, 0x27, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x12, 0xc6, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x36, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0xb2, 0xd2, 0x2a, 0x2e, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x2a, 0x27, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x73, 0x2f, 0x7b, 0x64, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xc2, 0x01, 0x0a, 0x0d, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x36, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3a, 0x3a, 0x01, 0x2a, 0x22, 0x35, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x7d,
	0x3a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0xbf,
	0x01, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x30, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x5f, 0xb2, 0xd2, 0x2a, 0x21, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x07, 0x44,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x01, 0x2a, 0x22,
	0x2f, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0xb8, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x5a, 0xb2, 0xd2, 0x2a, 0x20, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x07, 0x44, 0x65,
	0x73, 0x6b, 0x74, 0x6f, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x32, 0x2e, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xb7, 0x01, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0xb2, 0xd2, 0x2a, 0x1f, 0x0a, 0x14,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x07, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x64,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x3a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0xb3, 0x01, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x2d,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x59, 0xb2, 0xd2, 0x2a, 0x1e, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x44, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x07, 0x44, 0x65, 0x73,
	0x6b, 0x74, 0x6f, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x73, 0x74, 0x6f, 0x70, 0x42, 0x71, 0x0a, 0x20, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x76, 0x31, 0x5a,
	0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x76,
	0x31, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescData = file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDesc
)

func file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescData)
	})
	return file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDescData
}

var file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_yandex_cloud_clouddesktop_v1_desktop_service_proto_goTypes = []any{
	(*UpdatePropertiesRequest)(nil),         // 0: yandex.cloud.clouddesktop.v1.api.UpdatePropertiesRequest
	(*StartRequest)(nil),                    // 1: yandex.cloud.clouddesktop.v1.api.StartRequest
	(*StopRequest)(nil),                     // 2: yandex.cloud.clouddesktop.v1.api.StopRequest
	(*UpdateRequest)(nil),                   // 3: yandex.cloud.clouddesktop.v1.api.UpdateRequest
	(*GetDesktopRequest)(nil),               // 4: yandex.cloud.clouddesktop.v1.api.GetDesktopRequest
	(*GetRdpFileRequest)(nil),               // 5: yandex.cloud.clouddesktop.v1.api.GetRdpFileRequest
	(*RdpFileResponse)(nil),                 // 6: yandex.cloud.clouddesktop.v1.api.RdpFileResponse
	(*ListDesktopsRequest)(nil),             // 7: yandex.cloud.clouddesktop.v1.api.ListDesktopsRequest
	(*ListDesktopsResponse)(nil),            // 8: yandex.cloud.clouddesktop.v1.api.ListDesktopsResponse
	(*ListDesktopOperationsRequest)(nil),    // 9: yandex.cloud.clouddesktop.v1.api.ListDesktopOperationsRequest
	(*ListDesktopOperationsResponse)(nil),   // 10: yandex.cloud.clouddesktop.v1.api.ListDesktopOperationsResponse
	(*CreateDesktopRequest)(nil),            // 11: yandex.cloud.clouddesktop.v1.api.CreateDesktopRequest
	(*CreateDesktopMetadata)(nil),           // 12: yandex.cloud.clouddesktop.v1.api.CreateDesktopMetadata
	(*DeleteDesktopRequest)(nil),            // 13: yandex.cloud.clouddesktop.v1.api.DeleteDesktopRequest
	(*DeleteDesktopMetadata)(nil),           // 14: yandex.cloud.clouddesktop.v1.api.DeleteDesktopMetadata
	(*ResetPasswordRequest)(nil),            // 15: yandex.cloud.clouddesktop.v1.api.ResetPasswordRequest
	(*ResetPasswordResponse)(nil),           // 16: yandex.cloud.clouddesktop.v1.api.ResetPasswordResponse
	(*RestartRequest)(nil),                  // 17: yandex.cloud.clouddesktop.v1.api.RestartRequest
	(*RestartDesktopMetadata)(nil),          // 18: yandex.cloud.clouddesktop.v1.api.RestartDesktopMetadata
	(*UpdateDesktopPropertiesMetadata)(nil), // 19: yandex.cloud.clouddesktop.v1.api.UpdateDesktopPropertiesMetadata
	(*StartDesktopMetadata)(nil),            // 20: yandex.cloud.clouddesktop.v1.api.StartDesktopMetadata
	(*StopDesktopMetadata)(nil),             // 21: yandex.cloud.clouddesktop.v1.api.StopDesktopMetadata
	(*UpdateDesktopMetadata)(nil),           // 22: yandex.cloud.clouddesktop.v1.api.UpdateDesktopMetadata
	nil,                                     // 23: yandex.cloud.clouddesktop.v1.api.UpdatePropertiesRequest.LabelsEntry
	nil,                                     // 24: yandex.cloud.clouddesktop.v1.api.RdpFileResponse.HeadersEntry
	(*fieldmaskpb.FieldMask)(nil),           // 25: google.protobuf.FieldMask
	(*User)(nil),                            // 26: yandex.cloud.clouddesktop.v1.api.User
	(*Desktop)(nil),                         // 27: yandex.cloud.clouddesktop.v1.api.Desktop
	(*operation.Operation)(nil),             // 28: yandex.cloud.operation.Operation
}
var file_yandex_cloud_clouddesktop_v1_desktop_service_proto_depIdxs = []int32{
	25, // 0: yandex.cloud.clouddesktop.v1.api.UpdatePropertiesRequest.update_mask:type_name -> google.protobuf.FieldMask
	23, // 1: yandex.cloud.clouddesktop.v1.api.UpdatePropertiesRequest.labels:type_name -> yandex.cloud.clouddesktop.v1.api.UpdatePropertiesRequest.LabelsEntry
	26, // 2: yandex.cloud.clouddesktop.v1.api.GetRdpFileRequest.user:type_name -> yandex.cloud.clouddesktop.v1.api.User
	24, // 3: yandex.cloud.clouddesktop.v1.api.RdpFileResponse.headers:type_name -> yandex.cloud.clouddesktop.v1.api.RdpFileResponse.HeadersEntry
	27, // 4: yandex.cloud.clouddesktop.v1.api.ListDesktopsResponse.desktops:type_name -> yandex.cloud.clouddesktop.v1.api.Desktop
	28, // 5: yandex.cloud.clouddesktop.v1.api.ListDesktopOperationsResponse.operations:type_name -> yandex.cloud.operation.Operation
	26, // 6: yandex.cloud.clouddesktop.v1.api.CreateDesktopRequest.users:type_name -> yandex.cloud.clouddesktop.v1.api.User
	26, // 7: yandex.cloud.clouddesktop.v1.api.ResetPasswordRequest.user:type_name -> yandex.cloud.clouddesktop.v1.api.User
	4,  // 8: yandex.cloud.clouddesktop.v1.api.DesktopService.Get:input_type -> yandex.cloud.clouddesktop.v1.api.GetDesktopRequest
	5,  // 9: yandex.cloud.clouddesktop.v1.api.DesktopService.GetRdpFile:input_type -> yandex.cloud.clouddesktop.v1.api.GetRdpFileRequest
	7,  // 10: yandex.cloud.clouddesktop.v1.api.DesktopService.List:input_type -> yandex.cloud.clouddesktop.v1.api.ListDesktopsRequest
	9,  // 11: yandex.cloud.clouddesktop.v1.api.DesktopService.ListOperations:input_type -> yandex.cloud.clouddesktop.v1.api.ListDesktopOperationsRequest
	11, // 12: yandex.cloud.clouddesktop.v1.api.DesktopService.Create:input_type -> yandex.cloud.clouddesktop.v1.api.CreateDesktopRequest
	0,  // 13: yandex.cloud.clouddesktop.v1.api.DesktopService.UpdateProperties:input_type -> yandex.cloud.clouddesktop.v1.api.UpdatePropertiesRequest
	13, // 14: yandex.cloud.clouddesktop.v1.api.DesktopService.Delete:input_type -> yandex.cloud.clouddesktop.v1.api.DeleteDesktopRequest
	15, // 15: yandex.cloud.clouddesktop.v1.api.DesktopService.ResetPassword:input_type -> yandex.cloud.clouddesktop.v1.api.ResetPasswordRequest
	17, // 16: yandex.cloud.clouddesktop.v1.api.DesktopService.Restart:input_type -> yandex.cloud.clouddesktop.v1.api.RestartRequest
	3,  // 17: yandex.cloud.clouddesktop.v1.api.DesktopService.Update:input_type -> yandex.cloud.clouddesktop.v1.api.UpdateRequest
	1,  // 18: yandex.cloud.clouddesktop.v1.api.DesktopService.Start:input_type -> yandex.cloud.clouddesktop.v1.api.StartRequest
	2,  // 19: yandex.cloud.clouddesktop.v1.api.DesktopService.Stop:input_type -> yandex.cloud.clouddesktop.v1.api.StopRequest
	27, // 20: yandex.cloud.clouddesktop.v1.api.DesktopService.Get:output_type -> yandex.cloud.clouddesktop.v1.api.Desktop
	6,  // 21: yandex.cloud.clouddesktop.v1.api.DesktopService.GetRdpFile:output_type -> yandex.cloud.clouddesktop.v1.api.RdpFileResponse
	8,  // 22: yandex.cloud.clouddesktop.v1.api.DesktopService.List:output_type -> yandex.cloud.clouddesktop.v1.api.ListDesktopsResponse
	10, // 23: yandex.cloud.clouddesktop.v1.api.DesktopService.ListOperations:output_type -> yandex.cloud.clouddesktop.v1.api.ListDesktopOperationsResponse
	28, // 24: yandex.cloud.clouddesktop.v1.api.DesktopService.Create:output_type -> yandex.cloud.operation.Operation
	28, // 25: yandex.cloud.clouddesktop.v1.api.DesktopService.UpdateProperties:output_type -> yandex.cloud.operation.Operation
	28, // 26: yandex.cloud.clouddesktop.v1.api.DesktopService.Delete:output_type -> yandex.cloud.operation.Operation
	16, // 27: yandex.cloud.clouddesktop.v1.api.DesktopService.ResetPassword:output_type -> yandex.cloud.clouddesktop.v1.api.ResetPasswordResponse
	28, // 28: yandex.cloud.clouddesktop.v1.api.DesktopService.Restart:output_type -> yandex.cloud.operation.Operation
	28, // 29: yandex.cloud.clouddesktop.v1.api.DesktopService.Update:output_type -> yandex.cloud.operation.Operation
	28, // 30: yandex.cloud.clouddesktop.v1.api.DesktopService.Start:output_type -> yandex.cloud.operation.Operation
	28, // 31: yandex.cloud.clouddesktop.v1.api.DesktopService.Stop:output_type -> yandex.cloud.operation.Operation
	20, // [20:32] is the sub-list for method output_type
	8,  // [8:20] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_yandex_cloud_clouddesktop_v1_desktop_service_proto_init() }
func file_yandex_cloud_clouddesktop_v1_desktop_service_proto_init() {
	if File_yandex_cloud_clouddesktop_v1_desktop_service_proto != nil {
		return
	}
	file_yandex_cloud_clouddesktop_v1_desktop_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePropertiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*StartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*StopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetDesktopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetRdpFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*RdpFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ListDesktopsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ListDesktopsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ListDesktopOperationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ListDesktopOperationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CreateDesktopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CreateDesktopMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteDesktopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteDesktopMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ResetPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ResetPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*RestartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*RestartDesktopMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDesktopPropertiesMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*StartDesktopMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*StopDesktopMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDesktopMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_clouddesktop_v1_desktop_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_clouddesktop_v1_desktop_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_clouddesktop_v1_desktop_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_clouddesktop_v1_desktop_service_proto = out.File
	file_yandex_cloud_clouddesktop_v1_desktop_service_proto_rawDesc = nil
	file_yandex_cloud_clouddesktop_v1_desktop_service_proto_goTypes = nil
	file_yandex_cloud_clouddesktop_v1_desktop_service_proto_depIdxs = nil
}

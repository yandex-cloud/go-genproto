// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: yandex/cloud/clouddesktop/v1/desktop_service.proto

package clouddesktop

import (
	context "context"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DesktopService_Get_FullMethodName              = "/yandex.cloud.clouddesktop.v1.api.DesktopService/Get"
	DesktopService_GetRdpFile_FullMethodName       = "/yandex.cloud.clouddesktop.v1.api.DesktopService/GetRdpFile"
	DesktopService_List_FullMethodName             = "/yandex.cloud.clouddesktop.v1.api.DesktopService/List"
	DesktopService_ListOperations_FullMethodName   = "/yandex.cloud.clouddesktop.v1.api.DesktopService/ListOperations"
	DesktopService_Create_FullMethodName           = "/yandex.cloud.clouddesktop.v1.api.DesktopService/Create"
	DesktopService_UpdateProperties_FullMethodName = "/yandex.cloud.clouddesktop.v1.api.DesktopService/UpdateProperties"
	DesktopService_Delete_FullMethodName           = "/yandex.cloud.clouddesktop.v1.api.DesktopService/Delete"
	DesktopService_ResetPassword_FullMethodName    = "/yandex.cloud.clouddesktop.v1.api.DesktopService/ResetPassword"
	DesktopService_Restart_FullMethodName          = "/yandex.cloud.clouddesktop.v1.api.DesktopService/Restart"
	DesktopService_Update_FullMethodName           = "/yandex.cloud.clouddesktop.v1.api.DesktopService/Update"
	DesktopService_Start_FullMethodName            = "/yandex.cloud.clouddesktop.v1.api.DesktopService/Start"
	DesktopService_Stop_FullMethodName             = "/yandex.cloud.clouddesktop.v1.api.DesktopService/Stop"
)

// DesktopServiceClient is the client API for DesktopService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A set of methods for managing desktop resources.
type DesktopServiceClient interface {
	// Returns the specified desktop resource.
	//
	// To get the list of available desktops, make a [List] request.
	Get(ctx context.Context, in *GetDesktopRequest, opts ...grpc.CallOption) (*Desktop, error)
	// Returns a RDP file for the specified desktop.
	GetRdpFile(ctx context.Context, in *GetRdpFileRequest, opts ...grpc.CallOption) (*RdpFileResponse, error)
	// Retrieves the list of desktop resources.
	List(ctx context.Context, in *ListDesktopsRequest, opts ...grpc.CallOption) (*ListDesktopsResponse, error)
	// Returns list of the operations for the specified desktop.
	ListOperations(ctx context.Context, in *ListDesktopOperationsRequest, opts ...grpc.CallOption) (*ListDesktopOperationsResponse, error)
	// Creates desktop in the specified folder.
	Create(ctx context.Context, in *CreateDesktopRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Updates desktop properties.
	UpdateProperties(ctx context.Context, in *UpdatePropertiesRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified desktop.
	Delete(ctx context.Context, in *DeleteDesktopRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Reset password
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	// Restart the specified desktop.
	Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Sync desktop with group configuration
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Start the specified desktop.
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Stop the specified desktop.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*operation.Operation, error)
}

type desktopServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDesktopServiceClient(cc grpc.ClientConnInterface) DesktopServiceClient {
	return &desktopServiceClient{cc}
}

func (c *desktopServiceClient) Get(ctx context.Context, in *GetDesktopRequest, opts ...grpc.CallOption) (*Desktop, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Desktop)
	err := c.cc.Invoke(ctx, DesktopService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopServiceClient) GetRdpFile(ctx context.Context, in *GetRdpFileRequest, opts ...grpc.CallOption) (*RdpFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RdpFileResponse)
	err := c.cc.Invoke(ctx, DesktopService_GetRdpFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopServiceClient) List(ctx context.Context, in *ListDesktopsRequest, opts ...grpc.CallOption) (*ListDesktopsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDesktopsResponse)
	err := c.cc.Invoke(ctx, DesktopService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopServiceClient) ListOperations(ctx context.Context, in *ListDesktopOperationsRequest, opts ...grpc.CallOption) (*ListDesktopOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDesktopOperationsResponse)
	err := c.cc.Invoke(ctx, DesktopService_ListOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopServiceClient) Create(ctx context.Context, in *CreateDesktopRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, DesktopService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopServiceClient) UpdateProperties(ctx context.Context, in *UpdatePropertiesRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, DesktopService_UpdateProperties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopServiceClient) Delete(ctx context.Context, in *DeleteDesktopRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, DesktopService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, DesktopService_ResetPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopServiceClient) Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, DesktopService_Restart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, DesktopService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopServiceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, DesktopService_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, DesktopService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DesktopServiceServer is the server API for DesktopService service.
// All implementations should embed UnimplementedDesktopServiceServer
// for forward compatibility.
//
// A set of methods for managing desktop resources.
type DesktopServiceServer interface {
	// Returns the specified desktop resource.
	//
	// To get the list of available desktops, make a [List] request.
	Get(context.Context, *GetDesktopRequest) (*Desktop, error)
	// Returns a RDP file for the specified desktop.
	GetRdpFile(context.Context, *GetRdpFileRequest) (*RdpFileResponse, error)
	// Retrieves the list of desktop resources.
	List(context.Context, *ListDesktopsRequest) (*ListDesktopsResponse, error)
	// Returns list of the operations for the specified desktop.
	ListOperations(context.Context, *ListDesktopOperationsRequest) (*ListDesktopOperationsResponse, error)
	// Creates desktop in the specified folder.
	Create(context.Context, *CreateDesktopRequest) (*operation.Operation, error)
	// Updates desktop properties.
	UpdateProperties(context.Context, *UpdatePropertiesRequest) (*operation.Operation, error)
	// Deletes the specified desktop.
	Delete(context.Context, *DeleteDesktopRequest) (*operation.Operation, error)
	// Reset password
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	// Restart the specified desktop.
	Restart(context.Context, *RestartRequest) (*operation.Operation, error)
	// Sync desktop with group configuration
	Update(context.Context, *UpdateRequest) (*operation.Operation, error)
	// Start the specified desktop.
	Start(context.Context, *StartRequest) (*operation.Operation, error)
	// Stop the specified desktop.
	Stop(context.Context, *StopRequest) (*operation.Operation, error)
}

// UnimplementedDesktopServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDesktopServiceServer struct{}

func (UnimplementedDesktopServiceServer) Get(context.Context, *GetDesktopRequest) (*Desktop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDesktopServiceServer) GetRdpFile(context.Context, *GetRdpFileRequest) (*RdpFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRdpFile not implemented")
}
func (UnimplementedDesktopServiceServer) List(context.Context, *ListDesktopsRequest) (*ListDesktopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDesktopServiceServer) ListOperations(context.Context, *ListDesktopOperationsRequest) (*ListDesktopOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (UnimplementedDesktopServiceServer) Create(context.Context, *CreateDesktopRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDesktopServiceServer) UpdateProperties(context.Context, *UpdatePropertiesRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProperties not implemented")
}
func (UnimplementedDesktopServiceServer) Delete(context.Context, *DeleteDesktopRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDesktopServiceServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedDesktopServiceServer) Restart(context.Context, *RestartRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedDesktopServiceServer) Update(context.Context, *UpdateRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDesktopServiceServer) Start(context.Context, *StartRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedDesktopServiceServer) Stop(context.Context, *StopRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedDesktopServiceServer) testEmbeddedByValue() {}

// UnsafeDesktopServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DesktopServiceServer will
// result in compilation errors.
type UnsafeDesktopServiceServer interface {
	mustEmbedUnimplementedDesktopServiceServer()
}

func RegisterDesktopServiceServer(s grpc.ServiceRegistrar, srv DesktopServiceServer) {
	// If the following call pancis, it indicates UnimplementedDesktopServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DesktopService_ServiceDesc, srv)
}

func _DesktopService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDesktopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopServiceServer).Get(ctx, req.(*GetDesktopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopService_GetRdpFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRdpFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopServiceServer).GetRdpFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopService_GetRdpFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopServiceServer).GetRdpFile(ctx, req.(*GetRdpFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDesktopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopServiceServer).List(ctx, req.(*ListDesktopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopService_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDesktopOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopServiceServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopService_ListOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopServiceServer).ListOperations(ctx, req.(*ListDesktopOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDesktopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopServiceServer).Create(ctx, req.(*CreateDesktopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopService_UpdateProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopServiceServer).UpdateProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopService_UpdateProperties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopServiceServer).UpdateProperties(ctx, req.(*UpdatePropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDesktopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopServiceServer).Delete(ctx, req.(*DeleteDesktopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopService_ResetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopServiceServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopService_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopServiceServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopService_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopServiceServer).Restart(ctx, req.(*RestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopServiceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DesktopService_ServiceDesc is the grpc.ServiceDesc for DesktopService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DesktopService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.clouddesktop.v1.api.DesktopService",
	HandlerType: (*DesktopServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _DesktopService_Get_Handler,
		},
		{
			MethodName: "GetRdpFile",
			Handler:    _DesktopService_GetRdpFile_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DesktopService_List_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _DesktopService_ListOperations_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DesktopService_Create_Handler,
		},
		{
			MethodName: "UpdateProperties",
			Handler:    _DesktopService_UpdateProperties_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DesktopService_Delete_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _DesktopService_ResetPassword_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _DesktopService_Restart_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DesktopService_Update_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _DesktopService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _DesktopService_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/clouddesktop/v1/desktop_service.proto",
}

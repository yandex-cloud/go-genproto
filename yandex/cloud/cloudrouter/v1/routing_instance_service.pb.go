// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: yandex/cloud/cloudrouter/v1/routing_instance_service.proto

package cloudrouter

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetRoutingInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the RoutingInstance resource to return.
	// To get the routingInstance ID use a [RoutingInstanceService.List] request.
	RoutingInstanceId string `protobuf:"bytes,1,opt,name=routing_instance_id,json=routingInstanceId,proto3" json:"routing_instance_id,omitempty"`
}

func (x *GetRoutingInstanceRequest) Reset() {
	*x = GetRoutingInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoutingInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoutingInstanceRequest) ProtoMessage() {}

func (x *GetRoutingInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoutingInstanceRequest.ProtoReflect.Descriptor instead.
func (*GetRoutingInstanceRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetRoutingInstanceRequest) GetRoutingInstanceId() string {
	if x != nil {
		return x.RoutingInstanceId
	}
	return ""
}

type GetRoutingInstanceByCicPrivateConnectionIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the PrivateConnection resource to return by.
	// To get the routingInstance ID use a [RoutingInstanceService.List] request.
	CicPrivateConnectionId string `protobuf:"bytes,1,opt,name=cic_private_connection_id,json=cicPrivateConnectionId,proto3" json:"cic_private_connection_id,omitempty"`
}

func (x *GetRoutingInstanceByCicPrivateConnectionIdRequest) Reset() {
	*x = GetRoutingInstanceByCicPrivateConnectionIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoutingInstanceByCicPrivateConnectionIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoutingInstanceByCicPrivateConnectionIdRequest) ProtoMessage() {}

func (x *GetRoutingInstanceByCicPrivateConnectionIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoutingInstanceByCicPrivateConnectionIdRequest.ProtoReflect.Descriptor instead.
func (*GetRoutingInstanceByCicPrivateConnectionIdRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetRoutingInstanceByCicPrivateConnectionIdRequest) GetCicPrivateConnectionId() string {
	if x != nil {
		return x.CicPrivateConnectionId
	}
	return ""
}

type GetRoutingInstanceByVpcNetworkIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the VpcNetwork resource to return by.
	// To get the routingInstance ID use a [RoutingInstanceService.List] request.
	VpcNetworkId string `protobuf:"bytes,1,opt,name=vpc_network_id,json=vpcNetworkId,proto3" json:"vpc_network_id,omitempty"`
}

func (x *GetRoutingInstanceByVpcNetworkIdRequest) Reset() {
	*x = GetRoutingInstanceByVpcNetworkIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoutingInstanceByVpcNetworkIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoutingInstanceByVpcNetworkIdRequest) ProtoMessage() {}

func (x *GetRoutingInstanceByVpcNetworkIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoutingInstanceByVpcNetworkIdRequest.ProtoReflect.Descriptor instead.
func (*GetRoutingInstanceByVpcNetworkIdRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetRoutingInstanceByVpcNetworkIdRequest) GetVpcNetworkId() string {
	if x != nil {
		return x.VpcNetworkId
	}
	return ""
}

type ListRoutingInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the folder to list RoutingInstance resources.
	// To get the folder ID use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size],
	// the service returns a [ListRoutingInstancesResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests. Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListRoutingInstanceResponse.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression must specify:
	// 1. The field name. Currently you can use filtering only on [RoutingInstance.name] field.
	// 2. An `=` operator.
	// 3. The value in double quotes (`"`). Must be 3-63 characters long and match the regular expression `[a-z][-a-z0-9]{1,61}[a-z0-9]`.
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListRoutingInstancesRequest) Reset() {
	*x = ListRoutingInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoutingInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutingInstancesRequest) ProtoMessage() {}

func (x *ListRoutingInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutingInstancesRequest.ProtoReflect.Descriptor instead.
func (*ListRoutingInstancesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListRoutingInstancesRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListRoutingInstancesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRoutingInstancesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRoutingInstancesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListRoutingInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of RoutingInstance resources.
	RoutingInstances []*RoutingInstance `protobuf:"bytes,1,rep,name=routing_instances,json=routingInstances,proto3" json:"routing_instances,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListRoutingInstancesResponse.page_size], use
	// the [next_page_token] as the value
	// for the [ListRoutingInstanceResponses.page_token] query parameter
	// in the next list request. Subsequent list requests will have their own
	// [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRoutingInstancesResponse) Reset() {
	*x = ListRoutingInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoutingInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutingInstancesResponse) ProtoMessage() {}

func (x *ListRoutingInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutingInstancesResponse.ProtoReflect.Descriptor instead.
func (*ListRoutingInstancesResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListRoutingInstancesResponse) GetRoutingInstances() []*RoutingInstance {
	if x != nil {
		return x.RoutingInstances
	}
	return nil
}

func (x *ListRoutingInstancesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateRoutingInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the RoutingInstance.
	// The name must be unique within the folder.
	// Value must match the regular expression “\|[a-zA-Z]([-_a-zA-Z0-9]{0,61}[a-zA-Z0-9])?“.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional description of the RoutingInstance. 0-256 characters long.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// ID of the folder that the RoutingInstance belongs to.
	FolderId string `protobuf:"bytes,4,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// ID of the region that the routingInstance belongs to.
	RegionId string `protobuf:"bytes,5,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// List of the info about vpcNetworks which are attached to the RoutingInstance.
	VpcInfo []*RoutingInstance_VpcInfo `protobuf:"bytes,6,rep,name=vpc_info,json=vpcInfo,proto3" json:"vpc_info,omitempty"`
	// List of the info about privateConnections which are attached to the RoutingInstance.
	CicPrivateConnectionInfo []*RoutingInstance_CicPrivateConnectionInfo `protobuf:"bytes,7,rep,name=cic_private_connection_info,json=cicPrivateConnectionInfo,proto3" json:"cic_private_connection_info,omitempty"`
	// Resource labels, `key:value` pairs.
	// No more than 64 per resource.
	// The maximum string length in characters for each value is 63.
	// Each value must match the regular expression `[-_0-9a-z]*`.
	// The string length in characters for each key must be 1-63.
	// Each key must match the regular expression `[a-z][-_0-9a-z]*`.
	Labels map[string]string `protobuf:"bytes,12,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateRoutingInstanceRequest) Reset() {
	*x = CreateRoutingInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoutingInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoutingInstanceRequest) ProtoMessage() {}

func (x *CreateRoutingInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoutingInstanceRequest.ProtoReflect.Descriptor instead.
func (*CreateRoutingInstanceRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateRoutingInstanceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRoutingInstanceRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateRoutingInstanceRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateRoutingInstanceRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *CreateRoutingInstanceRequest) GetVpcInfo() []*RoutingInstance_VpcInfo {
	if x != nil {
		return x.VpcInfo
	}
	return nil
}

func (x *CreateRoutingInstanceRequest) GetCicPrivateConnectionInfo() []*RoutingInstance_CicPrivateConnectionInfo {
	if x != nil {
		return x.CicPrivateConnectionInfo
	}
	return nil
}

func (x *CreateRoutingInstanceRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type CreateRoutingInstanceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the RoutingInstance resource.
	RoutingInstanceId string `protobuf:"bytes,1,opt,name=routing_instance_id,json=routingInstanceId,proto3" json:"routing_instance_id,omitempty"`
}

func (x *CreateRoutingInstanceMetadata) Reset() {
	*x = CreateRoutingInstanceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoutingInstanceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoutingInstanceMetadata) ProtoMessage() {}

func (x *CreateRoutingInstanceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoutingInstanceMetadata.ProtoReflect.Descriptor instead.
func (*CreateRoutingInstanceMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescGZIP(), []int{6}
}

func (x *CreateRoutingInstanceMetadata) GetRoutingInstanceId() string {
	if x != nil {
		return x.RoutingInstanceId
	}
	return ""
}

type UpdateRoutingInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the RoutingInstance resource to return.
	RoutingInstanceId string `protobuf:"bytes,1,opt,name=routing_instance_id,json=routingInstanceId,proto3" json:"routing_instance_id,omitempty"`
	// Field mask that specifies which fields of the RoutingInstance resource are going to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Name of the RoutingInstance.
	// The name must be unique within the folder.
	// Value must match the regular expression “\|[a-zA-Z]([-_a-zA-Z0-9]{0,61}[a-zA-Z0-9])?“.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Optional description of the RoutingInstance. 0-256 characters long.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// ID of the region that the routingInstance belongs to.
	RegionId string `protobuf:"bytes,7,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// List of the info about vpcNetworks which are attached to the RoutingInstance.
	//
	// Deprecated: Marked as deprecated in yandex/cloud/cloudrouter/v1/routing_instance_service.proto.
	VpcInfo []*RoutingInstance_VpcInfo `protobuf:"bytes,8,rep,name=vpc_info,json=vpcInfo,proto3" json:"vpc_info,omitempty"`
	// List of the info about privateConnections which are attached to the RoutingInstance.
	//
	// Deprecated: Marked as deprecated in yandex/cloud/cloudrouter/v1/routing_instance_service.proto.
	CicPrivateConnectionInfo []*RoutingInstance_CicPrivateConnectionInfo `protobuf:"bytes,9,rep,name=cic_private_connection_info,json=cicPrivateConnectionInfo,proto3" json:"cic_private_connection_info,omitempty"`
	// Resource labels, `key:value` pairs.
	// No more than 64 per resource.
	// The maximum string length in characters for each value is 63.
	// Each value must match the regular expression `[-_0-9a-z]*`.
	// The string length in characters for each key must be 1-63.
	// Each key must match the regular expression `[a-z][-_0-9a-z]*`.
	Labels map[string]string `protobuf:"bytes,14,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateRoutingInstanceRequest) Reset() {
	*x = UpdateRoutingInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRoutingInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoutingInstanceRequest) ProtoMessage() {}

func (x *UpdateRoutingInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoutingInstanceRequest.ProtoReflect.Descriptor instead.
func (*UpdateRoutingInstanceRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateRoutingInstanceRequest) GetRoutingInstanceId() string {
	if x != nil {
		return x.RoutingInstanceId
	}
	return ""
}

func (x *UpdateRoutingInstanceRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateRoutingInstanceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateRoutingInstanceRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateRoutingInstanceRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

// Deprecated: Marked as deprecated in yandex/cloud/cloudrouter/v1/routing_instance_service.proto.
func (x *UpdateRoutingInstanceRequest) GetVpcInfo() []*RoutingInstance_VpcInfo {
	if x != nil {
		return x.VpcInfo
	}
	return nil
}

// Deprecated: Marked as deprecated in yandex/cloud/cloudrouter/v1/routing_instance_service.proto.
func (x *UpdateRoutingInstanceRequest) GetCicPrivateConnectionInfo() []*RoutingInstance_CicPrivateConnectionInfo {
	if x != nil {
		return x.CicPrivateConnectionInfo
	}
	return nil
}

func (x *UpdateRoutingInstanceRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type UpdateRoutingInstanceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the RoutingInstance resource.
	RoutingInstanceId string `protobuf:"bytes,1,opt,name=routing_instance_id,json=routingInstanceId,proto3" json:"routing_instance_id,omitempty"`
}

func (x *UpdateRoutingInstanceMetadata) Reset() {
	*x = UpdateRoutingInstanceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRoutingInstanceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoutingInstanceMetadata) ProtoMessage() {}

func (x *UpdateRoutingInstanceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoutingInstanceMetadata.ProtoReflect.Descriptor instead.
func (*UpdateRoutingInstanceMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateRoutingInstanceMetadata) GetRoutingInstanceId() string {
	if x != nil {
		return x.RoutingInstanceId
	}
	return ""
}

type UpsertPrefixesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the RoutingInstance resource.
	RoutingInstanceId string `protobuf:"bytes,1,opt,name=routing_instance_id,json=routingInstanceId,proto3" json:"routing_instance_id,omitempty"`
	// ID of the VpcNetwork to update.
	VpcNetworkId string `protobuf:"bytes,2,opt,name=vpc_network_id,json=vpcNetworkId,proto3" json:"vpc_network_id,omitempty"`
	// List of VpcAzInfoPrefixes to upsert.
	VpcAzInfoPrefixes []*VpcAzInfoPrefixes `protobuf:"bytes,3,rep,name=vpc_az_info_prefixes,json=vpcAzInfoPrefixes,proto3" json:"vpc_az_info_prefixes,omitempty"`
}

func (x *UpsertPrefixesRequest) Reset() {
	*x = UpsertPrefixesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertPrefixesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertPrefixesRequest) ProtoMessage() {}

func (x *UpsertPrefixesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertPrefixesRequest.ProtoReflect.Descriptor instead.
func (*UpsertPrefixesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescGZIP(), []int{9}
}

func (x *UpsertPrefixesRequest) GetRoutingInstanceId() string {
	if x != nil {
		return x.RoutingInstanceId
	}
	return ""
}

func (x *UpsertPrefixesRequest) GetVpcNetworkId() string {
	if x != nil {
		return x.VpcNetworkId
	}
	return ""
}

func (x *UpsertPrefixesRequest) GetVpcAzInfoPrefixes() []*VpcAzInfoPrefixes {
	if x != nil {
		return x.VpcAzInfoPrefixes
	}
	return nil
}

type RemovePrefixesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the RoutingInstance resource.
	RoutingInstanceId string `protobuf:"bytes,1,opt,name=routing_instance_id,json=routingInstanceId,proto3" json:"routing_instance_id,omitempty"`
	// ID of the VpcNetwork to update.
	VpcNetworkId string `protobuf:"bytes,2,opt,name=vpc_network_id,json=vpcNetworkId,proto3" json:"vpc_network_id,omitempty"`
	// List of VpcAzInfoPrefixes to remove.
	VpcAzInfoPrefixes []*VpcAzInfoPrefixes `protobuf:"bytes,3,rep,name=vpc_az_info_prefixes,json=vpcAzInfoPrefixes,proto3" json:"vpc_az_info_prefixes,omitempty"`
}

func (x *RemovePrefixesRequest) Reset() {
	*x = RemovePrefixesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePrefixesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePrefixesRequest) ProtoMessage() {}

func (x *RemovePrefixesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePrefixesRequest.ProtoReflect.Descriptor instead.
func (*RemovePrefixesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescGZIP(), []int{10}
}

func (x *RemovePrefixesRequest) GetRoutingInstanceId() string {
	if x != nil {
		return x.RoutingInstanceId
	}
	return ""
}

func (x *RemovePrefixesRequest) GetVpcNetworkId() string {
	if x != nil {
		return x.VpcNetworkId
	}
	return ""
}

func (x *RemovePrefixesRequest) GetVpcAzInfoPrefixes() []*VpcAzInfoPrefixes {
	if x != nil {
		return x.VpcAzInfoPrefixes
	}
	return nil
}

type VpcAzInfoPrefixes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the AZ.
	AzId string `protobuf:"bytes,1,opt,name=az_id,json=azId,proto3" json:"az_id,omitempty"`
	// List of prefixes.
	Prefixes []string `protobuf:"bytes,2,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (x *VpcAzInfoPrefixes) Reset() {
	*x = VpcAzInfoPrefixes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VpcAzInfoPrefixes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcAzInfoPrefixes) ProtoMessage() {}

func (x *VpcAzInfoPrefixes) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcAzInfoPrefixes.ProtoReflect.Descriptor instead.
func (*VpcAzInfoPrefixes) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescGZIP(), []int{11}
}

func (x *VpcAzInfoPrefixes) GetAzId() string {
	if x != nil {
		return x.AzId
	}
	return ""
}

func (x *VpcAzInfoPrefixes) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

type MovePrefixRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the RoutingInstance resource.
	RoutingInstanceId string `protobuf:"bytes,1,opt,name=routing_instance_id,json=routingInstanceId,proto3" json:"routing_instance_id,omitempty"`
	// ID of the source VpcNetwork.
	SrcVpcNetworkId string `protobuf:"bytes,2,opt,name=src_vpc_network_id,json=srcVpcNetworkId,proto3" json:"src_vpc_network_id,omitempty"`
	// ID of the AZ in the source VpcNetwork.
	SrcAzId string `protobuf:"bytes,3,opt,name=src_az_id,json=srcAzId,proto3" json:"src_az_id,omitempty"`
	// ID of the destination VpcNetwork.
	DstVpcNetworkId string `protobuf:"bytes,4,opt,name=dst_vpc_network_id,json=dstVpcNetworkId,proto3" json:"dst_vpc_network_id,omitempty"`
	// ID of the AZ in the destination VpcNetwork.
	DstAzId string `protobuf:"bytes,5,opt,name=dst_az_id,json=dstAzId,proto3" json:"dst_az_id,omitempty"`
	// Prefix to move.
	Prefix string `protobuf:"bytes,6,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *MovePrefixRequest) Reset() {
	*x = MovePrefixRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovePrefixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovePrefixRequest) ProtoMessage() {}

func (x *MovePrefixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovePrefixRequest.ProtoReflect.Descriptor instead.
func (*MovePrefixRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescGZIP(), []int{12}
}

func (x *MovePrefixRequest) GetRoutingInstanceId() string {
	if x != nil {
		return x.RoutingInstanceId
	}
	return ""
}

func (x *MovePrefixRequest) GetSrcVpcNetworkId() string {
	if x != nil {
		return x.SrcVpcNetworkId
	}
	return ""
}

func (x *MovePrefixRequest) GetSrcAzId() string {
	if x != nil {
		return x.SrcAzId
	}
	return ""
}

func (x *MovePrefixRequest) GetDstVpcNetworkId() string {
	if x != nil {
		return x.DstVpcNetworkId
	}
	return ""
}

func (x *MovePrefixRequest) GetDstAzId() string {
	if x != nil {
		return x.DstAzId
	}
	return ""
}

func (x *MovePrefixRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type UpdatePrefixMaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the RoutingInstance resource.
	RoutingInstanceId string `protobuf:"bytes,1,opt,name=routing_instance_id,json=routingInstanceId,proto3" json:"routing_instance_id,omitempty"`
	// ID of the VpcNetwork.
	VpcNetworkId string `protobuf:"bytes,2,opt,name=vpc_network_id,json=vpcNetworkId,proto3" json:"vpc_network_id,omitempty"`
	// ID of the AZ
	AzId string `protobuf:"bytes,3,opt,name=az_id,json=azId,proto3" json:"az_id,omitempty"`
	// Prefix to update mask
	Prefix string `protobuf:"bytes,4,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// The new mask
	NewMask int64 `protobuf:"varint,5,opt,name=new_mask,json=newMask,proto3" json:"new_mask,omitempty"`
	// Specifies whether existing sub-prefixes covered by the mask should be removed.
	RemoveSubPrefixes bool `protobuf:"varint,6,opt,name=remove_sub_prefixes,json=removeSubPrefixes,proto3" json:"remove_sub_prefixes,omitempty"`
}

func (x *UpdatePrefixMaskRequest) Reset() {
	*x = UpdatePrefixMaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePrefixMaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePrefixMaskRequest) ProtoMessage() {}

func (x *UpdatePrefixMaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePrefixMaskRequest.ProtoReflect.Descriptor instead.
func (*UpdatePrefixMaskRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescGZIP(), []int{13}
}

func (x *UpdatePrefixMaskRequest) GetRoutingInstanceId() string {
	if x != nil {
		return x.RoutingInstanceId
	}
	return ""
}

func (x *UpdatePrefixMaskRequest) GetVpcNetworkId() string {
	if x != nil {
		return x.VpcNetworkId
	}
	return ""
}

func (x *UpdatePrefixMaskRequest) GetAzId() string {
	if x != nil {
		return x.AzId
	}
	return ""
}

func (x *UpdatePrefixMaskRequest) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *UpdatePrefixMaskRequest) GetNewMask() int64 {
	if x != nil {
		return x.NewMask
	}
	return 0
}

func (x *UpdatePrefixMaskRequest) GetRemoveSubPrefixes() bool {
	if x != nil {
		return x.RemoveSubPrefixes
	}
	return false
}

type AddPrivateConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the RoutingInstance resource.
	RoutingInstanceId string `protobuf:"bytes,1,opt,name=routing_instance_id,json=routingInstanceId,proto3" json:"routing_instance_id,omitempty"`
	// ID of the PrivateConnection to add to the RoutingInstance.
	CicPrivateConnectionId string `protobuf:"bytes,2,opt,name=cic_private_connection_id,json=cicPrivateConnectionId,proto3" json:"cic_private_connection_id,omitempty"`
}

func (x *AddPrivateConnectionRequest) Reset() {
	*x = AddPrivateConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPrivateConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPrivateConnectionRequest) ProtoMessage() {}

func (x *AddPrivateConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPrivateConnectionRequest.ProtoReflect.Descriptor instead.
func (*AddPrivateConnectionRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescGZIP(), []int{14}
}

func (x *AddPrivateConnectionRequest) GetRoutingInstanceId() string {
	if x != nil {
		return x.RoutingInstanceId
	}
	return ""
}

func (x *AddPrivateConnectionRequest) GetCicPrivateConnectionId() string {
	if x != nil {
		return x.CicPrivateConnectionId
	}
	return ""
}

type RemovePrivateConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the RoutingInstance resource.
	RoutingInstanceId string `protobuf:"bytes,1,opt,name=routing_instance_id,json=routingInstanceId,proto3" json:"routing_instance_id,omitempty"`
	// ID of the PrivateConnection to remove from the RoutingInstance.
	CicPrivateConnectionId string `protobuf:"bytes,2,opt,name=cic_private_connection_id,json=cicPrivateConnectionId,proto3" json:"cic_private_connection_id,omitempty"`
}

func (x *RemovePrivateConnectionRequest) Reset() {
	*x = RemovePrivateConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePrivateConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePrivateConnectionRequest) ProtoMessage() {}

func (x *RemovePrivateConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePrivateConnectionRequest.ProtoReflect.Descriptor instead.
func (*RemovePrivateConnectionRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescGZIP(), []int{15}
}

func (x *RemovePrivateConnectionRequest) GetRoutingInstanceId() string {
	if x != nil {
		return x.RoutingInstanceId
	}
	return ""
}

func (x *RemovePrivateConnectionRequest) GetCicPrivateConnectionId() string {
	if x != nil {
		return x.CicPrivateConnectionId
	}
	return ""
}

type DeleteRoutingInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the RoutingInstance resource.
	RoutingInstanceId string `protobuf:"bytes,1,opt,name=routing_instance_id,json=routingInstanceId,proto3" json:"routing_instance_id,omitempty"`
}

func (x *DeleteRoutingInstanceRequest) Reset() {
	*x = DeleteRoutingInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRoutingInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRoutingInstanceRequest) ProtoMessage() {}

func (x *DeleteRoutingInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRoutingInstanceRequest.ProtoReflect.Descriptor instead.
func (*DeleteRoutingInstanceRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteRoutingInstanceRequest) GetRoutingInstanceId() string {
	if x != nil {
		return x.RoutingInstanceId
	}
	return ""
}

type DeleteRoutingInstanceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the RoutingInstance resource.
	RoutingInstanceId string `protobuf:"bytes,1,opt,name=routing_instance_id,json=routingInstanceId,proto3" json:"routing_instance_id,omitempty"`
}

func (x *DeleteRoutingInstanceMetadata) Reset() {
	*x = DeleteRoutingInstanceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRoutingInstanceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRoutingInstanceMetadata) ProtoMessage() {}

func (x *DeleteRoutingInstanceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRoutingInstanceMetadata.ProtoReflect.Descriptor instead.
func (*DeleteRoutingInstanceMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteRoutingInstanceMetadata) GetRoutingInstanceId() string {
	if x != nil {
		return x.RoutingInstanceId
	}
	return ""
}

type ListRoutingInstanceOperationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the RoutingInstance resource.
	RoutingInstanceId string `protobuf:"bytes,1,opt,name=routing_instance_id,json=routingInstanceId,proto3" json:"routing_instance_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size],
	// the service returns a [ListRoutingInstanceOperationsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests. Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListRoutingInstanceOperationsResponse.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListRoutingInstanceOperationsRequest) Reset() {
	*x = ListRoutingInstanceOperationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoutingInstanceOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutingInstanceOperationsRequest) ProtoMessage() {}

func (x *ListRoutingInstanceOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutingInstanceOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListRoutingInstanceOperationsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescGZIP(), []int{18}
}

func (x *ListRoutingInstanceOperationsRequest) GetRoutingInstanceId() string {
	if x != nil {
		return x.RoutingInstanceId
	}
	return ""
}

func (x *ListRoutingInstanceOperationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRoutingInstanceOperationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListRoutingInstanceOperationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of RoutingInstance operations.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListRoutingInstanceOperationsRequest.page_size], use
	// the [next_page_token] as the value
	// for the [ListRoutingInstanceOperationsRequest.page_token] query parameter
	// in the next list request. Subsequent list requests will have their own
	// [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListRoutingInstanceOperationsResponse) Reset() {
	*x = ListRoutingInstanceOperationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRoutingInstanceOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutingInstanceOperationsResponse) ProtoMessage() {}

func (x *ListRoutingInstanceOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutingInstanceOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListRoutingInstanceOperationsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescGZIP(), []int{19}
}

func (x *ListRoutingInstanceOperationsResponse) GetOperations() []*operation.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListRoutingInstanceOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_yandex_cloud_cloudrouter_v1_routing_instance_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x32, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x59, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x11,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x7c, 0x0a, 0x31, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x43, 0x69, 0x63, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x19, 0x63, 0x69, 0x63, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a,
	0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x16, 0x63, 0x69, 0x63, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x5d, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x56, 0x70, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0e, 0x76, 0x70,
	0x63, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30,
	0x52, 0x0c, 0x76, 0x70, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0xbf,
	0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52,
	0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0xfa, 0xc7,
	0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30,
	0x30, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x8a, 0xc8,
	0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0xa1, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x59, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xca, 0x04, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x08, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x56, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x76,
	0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x84, 0x01, 0x0a, 0x1b, 0x63, 0x69, 0x63, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x69, 0x63, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x18, 0x63, 0x69, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x9a, 0x01,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x3b, 0xf2, 0xc7, 0x31, 0x0b, 0x5b, 0x2d, 0x5f, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x82, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x34, 0x8a, 0xc8,
	0x31, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0xb2, 0xc8, 0x31, 0x18, 0x12, 0x10, 0x5b, 0x61, 0x2d, 0x7a,
	0x5d, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x1a, 0x04, 0x31, 0x2d,
	0x36, 0x33, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x08, 0x10,
	0x0c, 0x22, 0x4f, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x22, 0xb0, 0x05, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x11,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x53, 0x0a, 0x08, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x56, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x76,
	0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x88, 0x01, 0x0a, 0x1b, 0x63, 0x69, 0x63, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x69, 0x63, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x02, 0x18, 0x01, 0x52, 0x18, 0x63, 0x69, 0x63, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x9a, 0x01, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x3b, 0xf2, 0xc7, 0x31, 0x0b, 0x5b,
	0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x82, 0xc8, 0x31, 0x04, 0x3c, 0x3d,
	0x36, 0x34, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0xb2, 0xc8, 0x31, 0x18, 0x12, 0x10,
	0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a,
	0x1a, 0x04, 0x31, 0x2d, 0x36, 0x33, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x07, 0x4a,
	0x04, 0x08, 0x0a, 0x10, 0x0e, 0x22, 0x4f, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xe2, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8,
	0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x11, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x76, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x70, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x14, 0x76, 0x70, 0x63, 0x5f, 0x61, 0x7a, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x70, 0x63, 0x41, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x52, 0x11, 0x76, 0x70, 0x63, 0x41, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x07, 0x22, 0xdc, 0x01, 0x0a, 0x15,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30,
	0x52, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x70, 0x63,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x14, 0x76, 0x70, 0x63,
	0x5f, 0x61, 0x7a, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x41, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x11, 0x76, 0x70, 0x63, 0x41, 0x7a, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0x4a, 0x0a, 0x11, 0x56, 0x70,
	0x63, 0x41, 0x7a, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12,
	0x13, 0x0a, 0x05, 0x61, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x7a, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xfb, 0x01, 0x0a, 0x11, 0x4d, 0x6f, 0x76, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x13,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a,
	0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x72,
	0x63, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x72, 0x63, 0x56, 0x70, 0x63, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x5f, 0x61,
	0x7a, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x41,
	0x7a, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x73, 0x74, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x73, 0x74, 0x56, 0x70, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x09, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x73, 0x74, 0x41, 0x7a, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x22, 0xf5, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8,
	0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x11, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x76, 0x70, 0x63, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x70, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x7a, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x2e, 0x0a, 0x13,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x75, 0x62, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a,
	0x1b, 0x41, 0x64, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x13,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a,
	0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x69,
	0x63, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63,
	0x69, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x09, 0x22, 0x99, 0x01, 0x0a, 0x1e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31,
	0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19,
	0x63, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x63, 0x69, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d,
	0x35, 0x30, 0x52, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x24, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3c, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7,
	0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x11, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x25, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x9f,
	0x16, 0x0a, 0x16, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xab, 0x01, 0x0a, 0x03, 0x47, 0x65,
	0x74, 0x12, 0x36, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12,
	0x36, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x87, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x56, 0x70, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x44, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x79,
	0x56, 0x70, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x9b, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x79, 0x43, 0x69, 0x63, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x4e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x42, 0x79, 0x43, 0x69, 0x63, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0xa5, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0xc7, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x5f, 0xb2, 0xd2, 0x2a, 0x30, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0f, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22,
	0x20, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0xc7, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0xb2, 0xd2, 0x2a, 0x30,
	0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x0f, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x32, 0x20, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0xee, 0x01, 0x0a, 0x0e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x32,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0xb2, 0xd2, 0x2a, 0x30, 0x0a, 0x1d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0f, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x4a, 0x3a, 0x01, 0x2a, 0x22, 0x45, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x75, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0xee, 0x01, 0x0a,
	0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12,
	0x32, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0xb2, 0xd2, 0x2a, 0x30, 0x0a, 0x1d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0f, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x4a, 0x3a, 0x01, 0x2a, 0x22, 0x45, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x95, 0x01,
	0x0a, 0x0a, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2e, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x34, 0xb2, 0xd2, 0x2a, 0x30, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x0f, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x34, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x34, 0xb2, 0xd2, 0x2a, 0x30, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0f, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x80, 0x02, 0x0a, 0x14, 0x41, 0x64,
	0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x8a, 0x01, 0xb2, 0xd2, 0x2a, 0x30, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0f, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x50, 0x3a, 0x01, 0x2a, 0x22,
	0x4b, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x61, 0x64, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x89, 0x02, 0x0a,
	0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0xb2, 0xd2, 0x2a, 0x30, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0f,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x53, 0x3a, 0x01, 0x2a, 0x22, 0x4e, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d,
	0x3a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xe0, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x78, 0xb2, 0xd2, 0x2a, 0x36, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x38, 0x2a, 0x36, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xe2, 0x01, 0x0a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x42, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x12, 0x41, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x6e, 0x0a, 0x1f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescData = file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDesc
)

func file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescData)
	})
	return file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDescData
}

var file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_goTypes = []any{
	(*GetRoutingInstanceRequest)(nil),                         // 0: yandex.cloud.cloudrouter.v1.GetRoutingInstanceRequest
	(*GetRoutingInstanceByCicPrivateConnectionIdRequest)(nil), // 1: yandex.cloud.cloudrouter.v1.GetRoutingInstanceByCicPrivateConnectionIdRequest
	(*GetRoutingInstanceByVpcNetworkIdRequest)(nil),           // 2: yandex.cloud.cloudrouter.v1.GetRoutingInstanceByVpcNetworkIdRequest
	(*ListRoutingInstancesRequest)(nil),                       // 3: yandex.cloud.cloudrouter.v1.ListRoutingInstancesRequest
	(*ListRoutingInstancesResponse)(nil),                      // 4: yandex.cloud.cloudrouter.v1.ListRoutingInstancesResponse
	(*CreateRoutingInstanceRequest)(nil),                      // 5: yandex.cloud.cloudrouter.v1.CreateRoutingInstanceRequest
	(*CreateRoutingInstanceMetadata)(nil),                     // 6: yandex.cloud.cloudrouter.v1.CreateRoutingInstanceMetadata
	(*UpdateRoutingInstanceRequest)(nil),                      // 7: yandex.cloud.cloudrouter.v1.UpdateRoutingInstanceRequest
	(*UpdateRoutingInstanceMetadata)(nil),                     // 8: yandex.cloud.cloudrouter.v1.UpdateRoutingInstanceMetadata
	(*UpsertPrefixesRequest)(nil),                             // 9: yandex.cloud.cloudrouter.v1.UpsertPrefixesRequest
	(*RemovePrefixesRequest)(nil),                             // 10: yandex.cloud.cloudrouter.v1.RemovePrefixesRequest
	(*VpcAzInfoPrefixes)(nil),                                 // 11: yandex.cloud.cloudrouter.v1.VpcAzInfoPrefixes
	(*MovePrefixRequest)(nil),                                 // 12: yandex.cloud.cloudrouter.v1.MovePrefixRequest
	(*UpdatePrefixMaskRequest)(nil),                           // 13: yandex.cloud.cloudrouter.v1.UpdatePrefixMaskRequest
	(*AddPrivateConnectionRequest)(nil),                       // 14: yandex.cloud.cloudrouter.v1.AddPrivateConnectionRequest
	(*RemovePrivateConnectionRequest)(nil),                    // 15: yandex.cloud.cloudrouter.v1.RemovePrivateConnectionRequest
	(*DeleteRoutingInstanceRequest)(nil),                      // 16: yandex.cloud.cloudrouter.v1.DeleteRoutingInstanceRequest
	(*DeleteRoutingInstanceMetadata)(nil),                     // 17: yandex.cloud.cloudrouter.v1.DeleteRoutingInstanceMetadata
	(*ListRoutingInstanceOperationsRequest)(nil),              // 18: yandex.cloud.cloudrouter.v1.ListRoutingInstanceOperationsRequest
	(*ListRoutingInstanceOperationsResponse)(nil),             // 19: yandex.cloud.cloudrouter.v1.ListRoutingInstanceOperationsResponse
	nil,                             // 20: yandex.cloud.cloudrouter.v1.CreateRoutingInstanceRequest.LabelsEntry
	nil,                             // 21: yandex.cloud.cloudrouter.v1.UpdateRoutingInstanceRequest.LabelsEntry
	(*RoutingInstance)(nil),         // 22: yandex.cloud.cloudrouter.v1.RoutingInstance
	(*RoutingInstance_VpcInfo)(nil), // 23: yandex.cloud.cloudrouter.v1.RoutingInstance.VpcInfo
	(*RoutingInstance_CicPrivateConnectionInfo)(nil), // 24: yandex.cloud.cloudrouter.v1.RoutingInstance.CicPrivateConnectionInfo
	(*fieldmaskpb.FieldMask)(nil),                    // 25: google.protobuf.FieldMask
	(*operation.Operation)(nil),                      // 26: yandex.cloud.operation.Operation
}
var file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_depIdxs = []int32{
	22, // 0: yandex.cloud.cloudrouter.v1.ListRoutingInstancesResponse.routing_instances:type_name -> yandex.cloud.cloudrouter.v1.RoutingInstance
	23, // 1: yandex.cloud.cloudrouter.v1.CreateRoutingInstanceRequest.vpc_info:type_name -> yandex.cloud.cloudrouter.v1.RoutingInstance.VpcInfo
	24, // 2: yandex.cloud.cloudrouter.v1.CreateRoutingInstanceRequest.cic_private_connection_info:type_name -> yandex.cloud.cloudrouter.v1.RoutingInstance.CicPrivateConnectionInfo
	20, // 3: yandex.cloud.cloudrouter.v1.CreateRoutingInstanceRequest.labels:type_name -> yandex.cloud.cloudrouter.v1.CreateRoutingInstanceRequest.LabelsEntry
	25, // 4: yandex.cloud.cloudrouter.v1.UpdateRoutingInstanceRequest.update_mask:type_name -> google.protobuf.FieldMask
	23, // 5: yandex.cloud.cloudrouter.v1.UpdateRoutingInstanceRequest.vpc_info:type_name -> yandex.cloud.cloudrouter.v1.RoutingInstance.VpcInfo
	24, // 6: yandex.cloud.cloudrouter.v1.UpdateRoutingInstanceRequest.cic_private_connection_info:type_name -> yandex.cloud.cloudrouter.v1.RoutingInstance.CicPrivateConnectionInfo
	21, // 7: yandex.cloud.cloudrouter.v1.UpdateRoutingInstanceRequest.labels:type_name -> yandex.cloud.cloudrouter.v1.UpdateRoutingInstanceRequest.LabelsEntry
	11, // 8: yandex.cloud.cloudrouter.v1.UpsertPrefixesRequest.vpc_az_info_prefixes:type_name -> yandex.cloud.cloudrouter.v1.VpcAzInfoPrefixes
	11, // 9: yandex.cloud.cloudrouter.v1.RemovePrefixesRequest.vpc_az_info_prefixes:type_name -> yandex.cloud.cloudrouter.v1.VpcAzInfoPrefixes
	26, // 10: yandex.cloud.cloudrouter.v1.ListRoutingInstanceOperationsResponse.operations:type_name -> yandex.cloud.operation.Operation
	0,  // 11: yandex.cloud.cloudrouter.v1.RoutingInstanceService.Get:input_type -> yandex.cloud.cloudrouter.v1.GetRoutingInstanceRequest
	2,  // 12: yandex.cloud.cloudrouter.v1.RoutingInstanceService.GetByVpcNetworkId:input_type -> yandex.cloud.cloudrouter.v1.GetRoutingInstanceByVpcNetworkIdRequest
	1,  // 13: yandex.cloud.cloudrouter.v1.RoutingInstanceService.GetByCicPrivateConnectionId:input_type -> yandex.cloud.cloudrouter.v1.GetRoutingInstanceByCicPrivateConnectionIdRequest
	3,  // 14: yandex.cloud.cloudrouter.v1.RoutingInstanceService.List:input_type -> yandex.cloud.cloudrouter.v1.ListRoutingInstancesRequest
	5,  // 15: yandex.cloud.cloudrouter.v1.RoutingInstanceService.Create:input_type -> yandex.cloud.cloudrouter.v1.CreateRoutingInstanceRequest
	7,  // 16: yandex.cloud.cloudrouter.v1.RoutingInstanceService.Update:input_type -> yandex.cloud.cloudrouter.v1.UpdateRoutingInstanceRequest
	9,  // 17: yandex.cloud.cloudrouter.v1.RoutingInstanceService.UpsertPrefixes:input_type -> yandex.cloud.cloudrouter.v1.UpsertPrefixesRequest
	10, // 18: yandex.cloud.cloudrouter.v1.RoutingInstanceService.RemovePrefixes:input_type -> yandex.cloud.cloudrouter.v1.RemovePrefixesRequest
	12, // 19: yandex.cloud.cloudrouter.v1.RoutingInstanceService.MovePrefix:input_type -> yandex.cloud.cloudrouter.v1.MovePrefixRequest
	13, // 20: yandex.cloud.cloudrouter.v1.RoutingInstanceService.UpdatePrefixMask:input_type -> yandex.cloud.cloudrouter.v1.UpdatePrefixMaskRequest
	14, // 21: yandex.cloud.cloudrouter.v1.RoutingInstanceService.AddPrivateConnection:input_type -> yandex.cloud.cloudrouter.v1.AddPrivateConnectionRequest
	15, // 22: yandex.cloud.cloudrouter.v1.RoutingInstanceService.RemovePrivateConnection:input_type -> yandex.cloud.cloudrouter.v1.RemovePrivateConnectionRequest
	16, // 23: yandex.cloud.cloudrouter.v1.RoutingInstanceService.Delete:input_type -> yandex.cloud.cloudrouter.v1.DeleteRoutingInstanceRequest
	18, // 24: yandex.cloud.cloudrouter.v1.RoutingInstanceService.ListOperations:input_type -> yandex.cloud.cloudrouter.v1.ListRoutingInstanceOperationsRequest
	22, // 25: yandex.cloud.cloudrouter.v1.RoutingInstanceService.Get:output_type -> yandex.cloud.cloudrouter.v1.RoutingInstance
	22, // 26: yandex.cloud.cloudrouter.v1.RoutingInstanceService.GetByVpcNetworkId:output_type -> yandex.cloud.cloudrouter.v1.RoutingInstance
	22, // 27: yandex.cloud.cloudrouter.v1.RoutingInstanceService.GetByCicPrivateConnectionId:output_type -> yandex.cloud.cloudrouter.v1.RoutingInstance
	4,  // 28: yandex.cloud.cloudrouter.v1.RoutingInstanceService.List:output_type -> yandex.cloud.cloudrouter.v1.ListRoutingInstancesResponse
	26, // 29: yandex.cloud.cloudrouter.v1.RoutingInstanceService.Create:output_type -> yandex.cloud.operation.Operation
	26, // 30: yandex.cloud.cloudrouter.v1.RoutingInstanceService.Update:output_type -> yandex.cloud.operation.Operation
	26, // 31: yandex.cloud.cloudrouter.v1.RoutingInstanceService.UpsertPrefixes:output_type -> yandex.cloud.operation.Operation
	26, // 32: yandex.cloud.cloudrouter.v1.RoutingInstanceService.RemovePrefixes:output_type -> yandex.cloud.operation.Operation
	26, // 33: yandex.cloud.cloudrouter.v1.RoutingInstanceService.MovePrefix:output_type -> yandex.cloud.operation.Operation
	26, // 34: yandex.cloud.cloudrouter.v1.RoutingInstanceService.UpdatePrefixMask:output_type -> yandex.cloud.operation.Operation
	26, // 35: yandex.cloud.cloudrouter.v1.RoutingInstanceService.AddPrivateConnection:output_type -> yandex.cloud.operation.Operation
	26, // 36: yandex.cloud.cloudrouter.v1.RoutingInstanceService.RemovePrivateConnection:output_type -> yandex.cloud.operation.Operation
	26, // 37: yandex.cloud.cloudrouter.v1.RoutingInstanceService.Delete:output_type -> yandex.cloud.operation.Operation
	19, // 38: yandex.cloud.cloudrouter.v1.RoutingInstanceService.ListOperations:output_type -> yandex.cloud.cloudrouter.v1.ListRoutingInstanceOperationsResponse
	25, // [25:39] is the sub-list for method output_type
	11, // [11:25] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_init() }
func file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_init() {
	if File_yandex_cloud_cloudrouter_v1_routing_instance_service_proto != nil {
		return
	}
	file_yandex_cloud_cloudrouter_v1_routing_instance_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetRoutingInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetRoutingInstanceByCicPrivateConnectionIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetRoutingInstanceByVpcNetworkIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ListRoutingInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ListRoutingInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CreateRoutingInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CreateRoutingInstanceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateRoutingInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateRoutingInstanceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*UpsertPrefixesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*RemovePrefixesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*VpcAzInfoPrefixes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*MovePrefixRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePrefixMaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*AddPrivateConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*RemovePrivateConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteRoutingInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteRoutingInstanceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ListRoutingInstanceOperationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ListRoutingInstanceOperationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_cloudrouter_v1_routing_instance_service_proto = out.File
	file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_rawDesc = nil
	file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_goTypes = nil
	file_yandex_cloud_cloudrouter_v1_routing_instance_service_proto_depIdxs = nil
}

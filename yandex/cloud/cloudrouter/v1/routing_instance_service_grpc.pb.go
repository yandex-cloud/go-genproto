// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: yandex/cloud/cloudrouter/v1/routing_instance_service.proto

package cloudrouter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoutingInstanceService_Get_FullMethodName                         = "/yandex.cloud.cloudrouter.v1.RoutingInstanceService/Get"
	RoutingInstanceService_GetByVpcNetworkId_FullMethodName           = "/yandex.cloud.cloudrouter.v1.RoutingInstanceService/GetByVpcNetworkId"
	RoutingInstanceService_GetByCicPrivateConnectionId_FullMethodName = "/yandex.cloud.cloudrouter.v1.RoutingInstanceService/GetByCicPrivateConnectionId"
	RoutingInstanceService_List_FullMethodName                        = "/yandex.cloud.cloudrouter.v1.RoutingInstanceService/List"
)

// RoutingInstanceServiceClient is the client API for RoutingInstanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A set of methods for managing RoutingInstance resources.
type RoutingInstanceServiceClient interface {
	// Returns the specified RoutingInstance resource.
	//
	// To get the list of available RoutingInstance resources, make a [List] request.
	Get(ctx context.Context, in *GetRoutingInstanceRequest, opts ...grpc.CallOption) (*RoutingInstance, error)
	// Returns the RoutingInstance resource by vpcNetworkId
	//
	// To get the list of available RoutingInstance resources, make a [List] request.
	GetByVpcNetworkId(ctx context.Context, in *GetRoutingInstanceByVpcNetworkIdRequest, opts ...grpc.CallOption) (*RoutingInstance, error)
	// Returns the RoutingInstance resource by cicPrivateConnectionId
	//
	// To get the list of available RoutingInstance resources, make a [List] request.
	GetByCicPrivateConnectionId(ctx context.Context, in *GetRoutingInstanceByCicPrivateConnectionIdRequest, opts ...grpc.CallOption) (*RoutingInstance, error)
	// Retrieves the list of RoutingInstance resources in the specified folder.
	List(ctx context.Context, in *ListRoutingInstancesRequest, opts ...grpc.CallOption) (*ListRoutingInstancesResponse, error)
}

type routingInstanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutingInstanceServiceClient(cc grpc.ClientConnInterface) RoutingInstanceServiceClient {
	return &routingInstanceServiceClient{cc}
}

func (c *routingInstanceServiceClient) Get(ctx context.Context, in *GetRoutingInstanceRequest, opts ...grpc.CallOption) (*RoutingInstance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoutingInstance)
	err := c.cc.Invoke(ctx, RoutingInstanceService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingInstanceServiceClient) GetByVpcNetworkId(ctx context.Context, in *GetRoutingInstanceByVpcNetworkIdRequest, opts ...grpc.CallOption) (*RoutingInstance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoutingInstance)
	err := c.cc.Invoke(ctx, RoutingInstanceService_GetByVpcNetworkId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingInstanceServiceClient) GetByCicPrivateConnectionId(ctx context.Context, in *GetRoutingInstanceByCicPrivateConnectionIdRequest, opts ...grpc.CallOption) (*RoutingInstance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoutingInstance)
	err := c.cc.Invoke(ctx, RoutingInstanceService_GetByCicPrivateConnectionId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingInstanceServiceClient) List(ctx context.Context, in *ListRoutingInstancesRequest, opts ...grpc.CallOption) (*ListRoutingInstancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRoutingInstancesResponse)
	err := c.cc.Invoke(ctx, RoutingInstanceService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutingInstanceServiceServer is the server API for RoutingInstanceService service.
// All implementations should embed UnimplementedRoutingInstanceServiceServer
// for forward compatibility.
//
// A set of methods for managing RoutingInstance resources.
type RoutingInstanceServiceServer interface {
	// Returns the specified RoutingInstance resource.
	//
	// To get the list of available RoutingInstance resources, make a [List] request.
	Get(context.Context, *GetRoutingInstanceRequest) (*RoutingInstance, error)
	// Returns the RoutingInstance resource by vpcNetworkId
	//
	// To get the list of available RoutingInstance resources, make a [List] request.
	GetByVpcNetworkId(context.Context, *GetRoutingInstanceByVpcNetworkIdRequest) (*RoutingInstance, error)
	// Returns the RoutingInstance resource by cicPrivateConnectionId
	//
	// To get the list of available RoutingInstance resources, make a [List] request.
	GetByCicPrivateConnectionId(context.Context, *GetRoutingInstanceByCicPrivateConnectionIdRequest) (*RoutingInstance, error)
	// Retrieves the list of RoutingInstance resources in the specified folder.
	List(context.Context, *ListRoutingInstancesRequest) (*ListRoutingInstancesResponse, error)
}

// UnimplementedRoutingInstanceServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoutingInstanceServiceServer struct{}

func (UnimplementedRoutingInstanceServiceServer) Get(context.Context, *GetRoutingInstanceRequest) (*RoutingInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRoutingInstanceServiceServer) GetByVpcNetworkId(context.Context, *GetRoutingInstanceByVpcNetworkIdRequest) (*RoutingInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByVpcNetworkId not implemented")
}
func (UnimplementedRoutingInstanceServiceServer) GetByCicPrivateConnectionId(context.Context, *GetRoutingInstanceByCicPrivateConnectionIdRequest) (*RoutingInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByCicPrivateConnectionId not implemented")
}
func (UnimplementedRoutingInstanceServiceServer) List(context.Context, *ListRoutingInstancesRequest) (*ListRoutingInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRoutingInstanceServiceServer) testEmbeddedByValue() {}

// UnsafeRoutingInstanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutingInstanceServiceServer will
// result in compilation errors.
type UnsafeRoutingInstanceServiceServer interface {
	mustEmbedUnimplementedRoutingInstanceServiceServer()
}

func RegisterRoutingInstanceServiceServer(s grpc.ServiceRegistrar, srv RoutingInstanceServiceServer) {
	// If the following call pancis, it indicates UnimplementedRoutingInstanceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoutingInstanceService_ServiceDesc, srv)
}

func _RoutingInstanceService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoutingInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingInstanceServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingInstanceService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingInstanceServiceServer).Get(ctx, req.(*GetRoutingInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingInstanceService_GetByVpcNetworkId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoutingInstanceByVpcNetworkIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingInstanceServiceServer).GetByVpcNetworkId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingInstanceService_GetByVpcNetworkId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingInstanceServiceServer).GetByVpcNetworkId(ctx, req.(*GetRoutingInstanceByVpcNetworkIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingInstanceService_GetByCicPrivateConnectionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoutingInstanceByCicPrivateConnectionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingInstanceServiceServer).GetByCicPrivateConnectionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingInstanceService_GetByCicPrivateConnectionId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingInstanceServiceServer).GetByCicPrivateConnectionId(ctx, req.(*GetRoutingInstanceByCicPrivateConnectionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingInstanceService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutingInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingInstanceServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingInstanceService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingInstanceServiceServer).List(ctx, req.(*ListRoutingInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoutingInstanceService_ServiceDesc is the grpc.ServiceDesc for RoutingInstanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoutingInstanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.cloudrouter.v1.RoutingInstanceService",
	HandlerType: (*RoutingInstanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _RoutingInstanceService_Get_Handler,
		},
		{
			MethodName: "GetByVpcNetworkId",
			Handler:    _RoutingInstanceService_GetByVpcNetworkId_Handler,
		},
		{
			MethodName: "GetByCicPrivateConnectionId",
			Handler:    _RoutingInstanceService_GetByCicPrivateConnectionId_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RoutingInstanceService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/cloudrouter/v1/routing_instance_service.proto",
}

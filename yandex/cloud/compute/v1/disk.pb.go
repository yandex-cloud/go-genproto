// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/compute/v1/disk.proto

package compute

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Disk_Status int32

const (
	Disk_STATUS_UNSPECIFIED Disk_Status = 0
	// Disk is being created.
	Disk_CREATING Disk_Status = 1
	// Disk is ready to use.
	Disk_READY Disk_Status = 2
	// Disk encountered a problem and cannot operate.
	Disk_ERROR Disk_Status = 3
	// Disk is being deleted.
	Disk_DELETING Disk_Status = 4
)

// Enum value maps for Disk_Status.
var (
	Disk_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "CREATING",
		2: "READY",
		3: "ERROR",
		4: "DELETING",
	}
	Disk_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"CREATING":           1,
		"READY":              2,
		"ERROR":              3,
		"DELETING":           4,
	}
)

func (x Disk_Status) Enum() *Disk_Status {
	p := new(Disk_Status)
	*p = x
	return p
}

func (x Disk_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Disk_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_compute_v1_disk_proto_enumTypes[0].Descriptor()
}

func (Disk_Status) Type() protoreflect.EnumType {
	return &file_yandex_cloud_compute_v1_disk_proto_enumTypes[0]
}

func (x Disk_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Disk_Status.Descriptor instead.
func (Disk_Status) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_disk_proto_rawDescGZIP(), []int{0, 0}
}

// A Disk resource. For more information, see [Disks](/docs/compute/concepts/disk).
type Disk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the disk.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the folder that the disk belongs to.
	FolderId  string                 `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Name of the disk. 1-63 characters long.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the disk. 0-256 characters long.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels as `key:value` pairs. Maximum of 64 per resource.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// ID of the disk type.
	TypeId string `protobuf:"bytes,7,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	// ID of the availability zone where the disk resides.
	ZoneId string `protobuf:"bytes,8,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// Size of the disk, specified in bytes.
	Size int64 `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	// Block size of the disk, specified in bytes.
	BlockSize int64 `protobuf:"varint,15,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	// License IDs that indicate which licenses are attached to this resource.
	// License IDs are used to calculate additional charges for the use of the virtual machine.
	//
	// The correct license ID is generated by the platform. IDs are inherited by new resources created from this resource.
	//
	// If you know the license IDs, specify them when you create the image.
	// For example, if you create a disk image using a third-party utility and load it into Object Storage, the license IDs will be lost.
	// You can specify them in the [yandex.cloud.compute.v1.ImageService.Create] request.
	ProductIds []string `protobuf:"bytes,10,rep,name=product_ids,json=productIds,proto3" json:"product_ids,omitempty"`
	// Current status of the disk.
	Status Disk_Status `protobuf:"varint,11,opt,name=status,proto3,enum=yandex.cloud.compute.v1.Disk_Status" json:"status,omitempty"`
	// Types that are valid to be assigned to Source:
	//
	//	*Disk_SourceImageId
	//	*Disk_SourceSnapshotId
	Source isDisk_Source `protobuf_oneof:"source"`
	// Array of instances to which the disk is attached.
	InstanceIds []string `protobuf:"bytes,14,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
	// Placement policy configuration.
	DiskPlacementPolicy *DiskPlacementPolicy `protobuf:"bytes,16,opt,name=disk_placement_policy,json=diskPlacementPolicy,proto3" json:"disk_placement_policy,omitempty"`
	// If specified, forces the same HardwareGeneration features to be applied to the instance
	// created using this disk as a boot one. Otherwise the current default will be used.
	HardwareGeneration *HardwareGeneration `protobuf:"bytes,17,opt,name=hardware_generation,json=hardwareGeneration,proto3" json:"hardware_generation,omitempty"`
	// Key encryption key info.
	KmsKey        *KMSKey `protobuf:"bytes,18,opt,name=kms_key,json=kmsKey,proto3" json:"kms_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Disk) Reset() {
	*x = Disk{}
	mi := &file_yandex_cloud_compute_v1_disk_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disk) ProtoMessage() {}

func (x *Disk) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_disk_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disk.ProtoReflect.Descriptor instead.
func (*Disk) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_disk_proto_rawDescGZIP(), []int{0}
}

func (x *Disk) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Disk) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *Disk) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Disk) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Disk) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Disk) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Disk) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

func (x *Disk) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *Disk) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Disk) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *Disk) GetProductIds() []string {
	if x != nil {
		return x.ProductIds
	}
	return nil
}

func (x *Disk) GetStatus() Disk_Status {
	if x != nil {
		return x.Status
	}
	return Disk_STATUS_UNSPECIFIED
}

func (x *Disk) GetSource() isDisk_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Disk) GetSourceImageId() string {
	if x != nil {
		if x, ok := x.Source.(*Disk_SourceImageId); ok {
			return x.SourceImageId
		}
	}
	return ""
}

func (x *Disk) GetSourceSnapshotId() string {
	if x != nil {
		if x, ok := x.Source.(*Disk_SourceSnapshotId); ok {
			return x.SourceSnapshotId
		}
	}
	return ""
}

func (x *Disk) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

func (x *Disk) GetDiskPlacementPolicy() *DiskPlacementPolicy {
	if x != nil {
		return x.DiskPlacementPolicy
	}
	return nil
}

func (x *Disk) GetHardwareGeneration() *HardwareGeneration {
	if x != nil {
		return x.HardwareGeneration
	}
	return nil
}

func (x *Disk) GetKmsKey() *KMSKey {
	if x != nil {
		return x.KmsKey
	}
	return nil
}

type isDisk_Source interface {
	isDisk_Source()
}

type Disk_SourceImageId struct {
	// ID of the image that was used for disk creation.
	SourceImageId string `protobuf:"bytes,12,opt,name=source_image_id,json=sourceImageId,proto3,oneof"`
}

type Disk_SourceSnapshotId struct {
	// ID of the snapshot that was used for disk creation.
	SourceSnapshotId string `protobuf:"bytes,13,opt,name=source_snapshot_id,json=sourceSnapshotId,proto3,oneof"`
}

func (*Disk_SourceImageId) isDisk_Source() {}

func (*Disk_SourceSnapshotId) isDisk_Source() {}

type DiskPlacementPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Placement group ID.
	PlacementGroupId        string `protobuf:"bytes,1,opt,name=placement_group_id,json=placementGroupId,proto3" json:"placement_group_id,omitempty"`
	PlacementGroupPartition int64  `protobuf:"varint,2,opt,name=placement_group_partition,json=placementGroupPartition,proto3" json:"placement_group_partition,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *DiskPlacementPolicy) Reset() {
	*x = DiskPlacementPolicy{}
	mi := &file_yandex_cloud_compute_v1_disk_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskPlacementPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskPlacementPolicy) ProtoMessage() {}

func (x *DiskPlacementPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_disk_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskPlacementPolicy.ProtoReflect.Descriptor instead.
func (*DiskPlacementPolicy) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_disk_proto_rawDescGZIP(), []int{1}
}

func (x *DiskPlacementPolicy) GetPlacementGroupId() string {
	if x != nil {
		return x.PlacementGroupId
	}
	return ""
}

func (x *DiskPlacementPolicy) GetPlacementGroupPartition() int64 {
	if x != nil {
		return x.PlacementGroupPartition
	}
	return 0
}

type DiskPlacementPolicyChange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disk ID.
	DiskId string `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	// Placement policy configuration for given disk.
	DiskPlacementPolicy *DiskPlacementPolicy `protobuf:"bytes,2,opt,name=disk_placement_policy,json=diskPlacementPolicy,proto3" json:"disk_placement_policy,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DiskPlacementPolicyChange) Reset() {
	*x = DiskPlacementPolicyChange{}
	mi := &file_yandex_cloud_compute_v1_disk_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskPlacementPolicyChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskPlacementPolicyChange) ProtoMessage() {}

func (x *DiskPlacementPolicyChange) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_disk_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskPlacementPolicyChange.ProtoReflect.Descriptor instead.
func (*DiskPlacementPolicyChange) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_disk_proto_rawDescGZIP(), []int{2}
}

func (x *DiskPlacementPolicyChange) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *DiskPlacementPolicyChange) GetDiskPlacementPolicy() *DiskPlacementPolicy {
	if x != nil {
		return x.DiskPlacementPolicy
	}
	return nil
}

var File_yandex_cloud_compute_v1_disk_proto protoreflect.FileDescriptor

const file_yandex_cloud_compute_v1_disk_proto_rawDesc = "" +
	"\n" +
	"\"yandex/cloud/compute/v1/disk.proto\x12\x17yandex.cloud.compute.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a!yandex/cloud/compute/v1/kek.proto\x1a1yandex/cloud/compute/v1/hardware_generation.proto\"\xbb\a\n" +
	"\x04Disk\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tfolder_id\x18\x02 \x01(\tR\bfolderId\x129\n" +
	"\n" +
	"created_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12A\n" +
	"\x06labels\x18\x06 \x03(\v2).yandex.cloud.compute.v1.Disk.LabelsEntryR\x06labels\x12\x17\n" +
	"\atype_id\x18\a \x01(\tR\x06typeId\x12\x17\n" +
	"\azone_id\x18\b \x01(\tR\x06zoneId\x12\x12\n" +
	"\x04size\x18\t \x01(\x03R\x04size\x12\x1d\n" +
	"\n" +
	"block_size\x18\x0f \x01(\x03R\tblockSize\x12\x1f\n" +
	"\vproduct_ids\x18\n" +
	" \x03(\tR\n" +
	"productIds\x12<\n" +
	"\x06status\x18\v \x01(\x0e2$.yandex.cloud.compute.v1.Disk.StatusR\x06status\x12(\n" +
	"\x0fsource_image_id\x18\f \x01(\tH\x00R\rsourceImageId\x12.\n" +
	"\x12source_snapshot_id\x18\r \x01(\tH\x00R\x10sourceSnapshotId\x12!\n" +
	"\finstance_ids\x18\x0e \x03(\tR\vinstanceIds\x12`\n" +
	"\x15disk_placement_policy\x18\x10 \x01(\v2,.yandex.cloud.compute.v1.DiskPlacementPolicyR\x13diskPlacementPolicy\x12\\\n" +
	"\x13hardware_generation\x18\x11 \x01(\v2+.yandex.cloud.compute.v1.HardwareGenerationR\x12hardwareGeneration\x128\n" +
	"\akms_key\x18\x12 \x01(\v2\x1f.yandex.cloud.compute.v1.KMSKeyR\x06kmsKey\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"R\n" +
	"\x06Status\x12\x16\n" +
	"\x12STATUS_UNSPECIFIED\x10\x00\x12\f\n" +
	"\bCREATING\x10\x01\x12\t\n" +
	"\x05READY\x10\x02\x12\t\n" +
	"\x05ERROR\x10\x03\x12\f\n" +
	"\bDELETING\x10\x04B\b\n" +
	"\x06source\"\x7f\n" +
	"\x13DiskPlacementPolicy\x12,\n" +
	"\x12placement_group_id\x18\x01 \x01(\tR\x10placementGroupId\x12:\n" +
	"\x19placement_group_partition\x18\x02 \x01(\x03R\x17placementGroupPartition\"\x96\x01\n" +
	"\x19DiskPlacementPolicyChange\x12\x17\n" +
	"\adisk_id\x18\x01 \x01(\tR\x06diskId\x12`\n" +
	"\x15disk_placement_policy\x18\x02 \x01(\v2,.yandex.cloud.compute.v1.DiskPlacementPolicyR\x13diskPlacementPolicyBb\n" +
	"\x1byandex.cloud.api.compute.v1ZCgithub.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1;computeb\x06proto3"

var (
	file_yandex_cloud_compute_v1_disk_proto_rawDescOnce sync.Once
	file_yandex_cloud_compute_v1_disk_proto_rawDescData []byte
)

func file_yandex_cloud_compute_v1_disk_proto_rawDescGZIP() []byte {
	file_yandex_cloud_compute_v1_disk_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_compute_v1_disk_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_compute_v1_disk_proto_rawDesc), len(file_yandex_cloud_compute_v1_disk_proto_rawDesc)))
	})
	return file_yandex_cloud_compute_v1_disk_proto_rawDescData
}

var file_yandex_cloud_compute_v1_disk_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yandex_cloud_compute_v1_disk_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_yandex_cloud_compute_v1_disk_proto_goTypes = []any{
	(Disk_Status)(0),                  // 0: yandex.cloud.compute.v1.Disk.Status
	(*Disk)(nil),                      // 1: yandex.cloud.compute.v1.Disk
	(*DiskPlacementPolicy)(nil),       // 2: yandex.cloud.compute.v1.DiskPlacementPolicy
	(*DiskPlacementPolicyChange)(nil), // 3: yandex.cloud.compute.v1.DiskPlacementPolicyChange
	nil,                               // 4: yandex.cloud.compute.v1.Disk.LabelsEntry
	(*timestamppb.Timestamp)(nil),     // 5: google.protobuf.Timestamp
	(*HardwareGeneration)(nil),        // 6: yandex.cloud.compute.v1.HardwareGeneration
	(*KMSKey)(nil),                    // 7: yandex.cloud.compute.v1.KMSKey
}
var file_yandex_cloud_compute_v1_disk_proto_depIdxs = []int32{
	5, // 0: yandex.cloud.compute.v1.Disk.created_at:type_name -> google.protobuf.Timestamp
	4, // 1: yandex.cloud.compute.v1.Disk.labels:type_name -> yandex.cloud.compute.v1.Disk.LabelsEntry
	0, // 2: yandex.cloud.compute.v1.Disk.status:type_name -> yandex.cloud.compute.v1.Disk.Status
	2, // 3: yandex.cloud.compute.v1.Disk.disk_placement_policy:type_name -> yandex.cloud.compute.v1.DiskPlacementPolicy
	6, // 4: yandex.cloud.compute.v1.Disk.hardware_generation:type_name -> yandex.cloud.compute.v1.HardwareGeneration
	7, // 5: yandex.cloud.compute.v1.Disk.kms_key:type_name -> yandex.cloud.compute.v1.KMSKey
	2, // 6: yandex.cloud.compute.v1.DiskPlacementPolicyChange.disk_placement_policy:type_name -> yandex.cloud.compute.v1.DiskPlacementPolicy
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_yandex_cloud_compute_v1_disk_proto_init() }
func file_yandex_cloud_compute_v1_disk_proto_init() {
	if File_yandex_cloud_compute_v1_disk_proto != nil {
		return
	}
	file_yandex_cloud_compute_v1_kek_proto_init()
	file_yandex_cloud_compute_v1_hardware_generation_proto_init()
	file_yandex_cloud_compute_v1_disk_proto_msgTypes[0].OneofWrappers = []any{
		(*Disk_SourceImageId)(nil),
		(*Disk_SourceSnapshotId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_compute_v1_disk_proto_rawDesc), len(file_yandex_cloud_compute_v1_disk_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_compute_v1_disk_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_compute_v1_disk_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_compute_v1_disk_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_compute_v1_disk_proto_msgTypes,
	}.Build()
	File_yandex_cloud_compute_v1_disk_proto = out.File
	file_yandex_cloud_compute_v1_disk_proto_goTypes = nil
	file_yandex_cloud_compute_v1_disk_proto_depIdxs = nil
}

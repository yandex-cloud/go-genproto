// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/compute/v1/disk_service.proto

package compute

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetDiskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Disk resource to return.
	// To get the disk ID use a [DiskService.List] request.
	DiskId        string `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDiskRequest) Reset() {
	*x = GetDiskRequest{}
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiskRequest) ProtoMessage() {}

func (x *GetDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiskRequest.ProtoReflect.Descriptor instead.
func (*GetDiskRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_disk_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetDiskRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

type ListDisksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to list disks in.
	// To get the folder ID use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size],
	// the service returns a [ListDisksResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListDisksResponse.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression consists of one or more conditions united by `AND` operator: `<condition1> [AND <condition2> [<...> AND <conditionN>]]`.
	//
	// Each condition has the form `<field> <operator> <value>`, where:
	// 1. `<field>` is the field name. Currently you can use filtering only on the limited number of fields.
	// 2. `<operator>` is a logical operator, one of `=`, `!=`, `IN`, `NOT IN`.
	// 3. `<value>` represents a value.
	// String values should be written in double (`"`) or single (`'`) quotes. C-style escape sequences are supported (`\"` turns to `"`, `\'` to `'`, `\\` to backslash).
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// By which column the listing should be ordered and in which direction,
	// format is "createdAt desc". "id asc" if omitted.
	// The default sorting order is ascending
	OrderBy       string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDisksRequest) Reset() {
	*x = ListDisksRequest{}
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDisksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDisksRequest) ProtoMessage() {}

func (x *ListDisksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDisksRequest.ProtoReflect.Descriptor instead.
func (*ListDisksRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_disk_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListDisksRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListDisksRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDisksRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDisksRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListDisksRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListDisksResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of Disk resources.
	Disks []*Disk `protobuf:"bytes,1,rep,name=disks,proto3" json:"disks,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListDisksRequest.page_size], use
	// the [next_page_token] as the value
	// for the [ListDisksRequest.page_token] query parameter
	// in the next list request. Each subsequent list request will have its own
	// [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDisksResponse) Reset() {
	*x = ListDisksResponse{}
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDisksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDisksResponse) ProtoMessage() {}

func (x *ListDisksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDisksResponse.ProtoReflect.Descriptor instead.
func (*ListDisksResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_disk_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListDisksResponse) GetDisks() []*Disk {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *ListDisksResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateDiskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to create a disk in.
	// To get the folder ID use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the disk.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the disk.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels as `key:value` pairs.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// ID of the disk type.
	// To get a list of available disk types use the [yandex.cloud.compute.v1.DiskTypeService.List] request.
	TypeId string `protobuf:"bytes,5,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	// ID of the availability zone where the disk resides.
	// To get a list of available zones use the [yandex.cloud.compute.v1.ZoneService.List] request.
	ZoneId string `protobuf:"bytes,6,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// Size of the disk, specified in bytes.
	// If the disk was created from a image, this value should be more than the
	// [yandex.cloud.compute.v1.Image.min_disk_size] value.
	Size int64 `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
	// Types that are valid to be assigned to Source:
	//
	//	*CreateDiskRequest_ImageId
	//	*CreateDiskRequest_SnapshotId
	Source isCreateDiskRequest_Source `protobuf_oneof:"source"`
	// Block size used for disk, specified in bytes. The default is 4096.
	BlockSize int64 `protobuf:"varint,10,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`
	// Placement policy configuration.
	DiskPlacementPolicy *DiskPlacementPolicy `protobuf:"bytes,11,opt,name=disk_placement_policy,json=diskPlacementPolicy,proto3" json:"disk_placement_policy,omitempty"`
	// List of IDs of the snapshot schedules to attach the disk to.
	SnapshotScheduleIds []string `protobuf:"bytes,12,rep,name=snapshot_schedule_ids,json=snapshotScheduleIds,proto3" json:"snapshot_schedule_ids,omitempty"`
	// Specify the overrides to hardware_generation of a source disk, image or snapshot,
	// or to the default values if the source does not define it.
	HardwareGeneration *HardwareGeneration `protobuf:"bytes,13,opt,name=hardware_generation,json=hardwareGeneration,proto3" json:"hardware_generation,omitempty"`
	// ID of KMS key for disk encryption.
	KmsKeyId      string `protobuf:"bytes,14,opt,name=kms_key_id,json=kmsKeyId,proto3" json:"kms_key_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDiskRequest) Reset() {
	*x = CreateDiskRequest{}
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDiskRequest) ProtoMessage() {}

func (x *CreateDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDiskRequest.ProtoReflect.Descriptor instead.
func (*CreateDiskRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_disk_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateDiskRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateDiskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDiskRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateDiskRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateDiskRequest) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

func (x *CreateDiskRequest) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *CreateDiskRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CreateDiskRequest) GetSource() isCreateDiskRequest_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *CreateDiskRequest) GetImageId() string {
	if x != nil {
		if x, ok := x.Source.(*CreateDiskRequest_ImageId); ok {
			return x.ImageId
		}
	}
	return ""
}

func (x *CreateDiskRequest) GetSnapshotId() string {
	if x != nil {
		if x, ok := x.Source.(*CreateDiskRequest_SnapshotId); ok {
			return x.SnapshotId
		}
	}
	return ""
}

func (x *CreateDiskRequest) GetBlockSize() int64 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *CreateDiskRequest) GetDiskPlacementPolicy() *DiskPlacementPolicy {
	if x != nil {
		return x.DiskPlacementPolicy
	}
	return nil
}

func (x *CreateDiskRequest) GetSnapshotScheduleIds() []string {
	if x != nil {
		return x.SnapshotScheduleIds
	}
	return nil
}

func (x *CreateDiskRequest) GetHardwareGeneration() *HardwareGeneration {
	if x != nil {
		return x.HardwareGeneration
	}
	return nil
}

func (x *CreateDiskRequest) GetKmsKeyId() string {
	if x != nil {
		return x.KmsKeyId
	}
	return ""
}

type isCreateDiskRequest_Source interface {
	isCreateDiskRequest_Source()
}

type CreateDiskRequest_ImageId struct {
	// ID of the image to create the disk from.
	ImageId string `protobuf:"bytes,8,opt,name=image_id,json=imageId,proto3,oneof"`
}

type CreateDiskRequest_SnapshotId struct {
	// ID of the snapshot to restore the disk from.
	SnapshotId string `protobuf:"bytes,9,opt,name=snapshot_id,json=snapshotId,proto3,oneof"`
}

func (*CreateDiskRequest_ImageId) isCreateDiskRequest_Source() {}

func (*CreateDiskRequest_SnapshotId) isCreateDiskRequest_Source() {}

type CreateDiskMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the disk that is being created.
	DiskId        string `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDiskMetadata) Reset() {
	*x = CreateDiskMetadata{}
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDiskMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDiskMetadata) ProtoMessage() {}

func (x *CreateDiskMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDiskMetadata.ProtoReflect.Descriptor instead.
func (*CreateDiskMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_disk_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateDiskMetadata) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

type UpdateDiskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Disk resource to update.
	// To get the disk ID use a [DiskService.List] request.
	DiskId string `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	// Field mask that specifies which fields of the Disk resource are going to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Name of the disk.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the disk.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels as `key:value` pairs.
	//
	// Existing set of `labels` is completely replaced by the provided set.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Size of the disk, specified in bytes.
	Size int64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	// Placement policy configuration.
	DiskPlacementPolicy *DiskPlacementPolicy `protobuf:"bytes,7,opt,name=disk_placement_policy,json=diskPlacementPolicy,proto3" json:"disk_placement_policy,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *UpdateDiskRequest) Reset() {
	*x = UpdateDiskRequest{}
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDiskRequest) ProtoMessage() {}

func (x *UpdateDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDiskRequest.ProtoReflect.Descriptor instead.
func (*UpdateDiskRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_disk_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateDiskRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *UpdateDiskRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateDiskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDiskRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateDiskRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateDiskRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *UpdateDiskRequest) GetDiskPlacementPolicy() *DiskPlacementPolicy {
	if x != nil {
		return x.DiskPlacementPolicy
	}
	return nil
}

type UpdateDiskMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Disk resource that is being updated.
	DiskId        string `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDiskMetadata) Reset() {
	*x = UpdateDiskMetadata{}
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDiskMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDiskMetadata) ProtoMessage() {}

func (x *UpdateDiskMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDiskMetadata.ProtoReflect.Descriptor instead.
func (*UpdateDiskMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_disk_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateDiskMetadata) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

type DeleteDiskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the disk to delete.
	// To get the disk ID use a [DiskService.List] request.
	DiskId        string `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDiskRequest) Reset() {
	*x = DeleteDiskRequest{}
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDiskRequest) ProtoMessage() {}

func (x *DeleteDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDiskRequest.ProtoReflect.Descriptor instead.
func (*DeleteDiskRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_disk_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteDiskRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

type DeleteDiskMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the disk that is being deleted.
	DiskId        string `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDiskMetadata) Reset() {
	*x = DeleteDiskMetadata{}
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDiskMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDiskMetadata) ProtoMessage() {}

func (x *DeleteDiskMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDiskMetadata.ProtoReflect.Descriptor instead.
func (*DeleteDiskMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_disk_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteDiskMetadata) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

type ListDiskOperationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Disk resource to list operations for.
	DiskId string `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListDiskOperationsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListDiskOperationsResponse.next_page_token] returned by a previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDiskOperationsRequest) Reset() {
	*x = ListDiskOperationsRequest{}
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDiskOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiskOperationsRequest) ProtoMessage() {}

func (x *ListDiskOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiskOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListDiskOperationsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_disk_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListDiskOperationsRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *ListDiskOperationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDiskOperationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListDiskOperationsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of operations for the specified disk.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListDiskOperationsRequest.page_size], use the [next_page_token] as the value
	// for the [ListDiskOperationsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDiskOperationsResponse) Reset() {
	*x = ListDiskOperationsResponse{}
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDiskOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiskOperationsResponse) ProtoMessage() {}

func (x *ListDiskOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiskOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListDiskOperationsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_disk_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListDiskOperationsResponse) GetOperations() []*operation.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListDiskOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type MoveDiskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the disk to move.
	//
	// To get the disk ID, make a [DiskService.List] request.
	DiskId string `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	// ID of the folder to move the disk to.
	//
	// To get the folder ID, make a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	DestinationFolderId string `protobuf:"bytes,2,opt,name=destination_folder_id,json=destinationFolderId,proto3" json:"destination_folder_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MoveDiskRequest) Reset() {
	*x = MoveDiskRequest{}
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveDiskRequest) ProtoMessage() {}

func (x *MoveDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveDiskRequest.ProtoReflect.Descriptor instead.
func (*MoveDiskRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_disk_service_proto_rawDescGZIP(), []int{11}
}

func (x *MoveDiskRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *MoveDiskRequest) GetDestinationFolderId() string {
	if x != nil {
		return x.DestinationFolderId
	}
	return ""
}

type MoveDiskMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the disk that is being moved.
	DiskId string `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	// ID of the folder that the disk is being moved from.
	SourceFolderId string `protobuf:"bytes,2,opt,name=source_folder_id,json=sourceFolderId,proto3" json:"source_folder_id,omitempty"`
	// ID of the folder that the disk is being moved to.
	DestinationFolderId string `protobuf:"bytes,3,opt,name=destination_folder_id,json=destinationFolderId,proto3" json:"destination_folder_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MoveDiskMetadata) Reset() {
	*x = MoveDiskMetadata{}
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveDiskMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveDiskMetadata) ProtoMessage() {}

func (x *MoveDiskMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveDiskMetadata.ProtoReflect.Descriptor instead.
func (*MoveDiskMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_disk_service_proto_rawDescGZIP(), []int{12}
}

func (x *MoveDiskMetadata) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *MoveDiskMetadata) GetSourceFolderId() string {
	if x != nil {
		return x.SourceFolderId
	}
	return ""
}

func (x *MoveDiskMetadata) GetDestinationFolderId() string {
	if x != nil {
		return x.DestinationFolderId
	}
	return ""
}

type RelocateDiskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the disk to move.
	//
	// To get the disk ID, make a [DiskService.List] request.
	DiskId string `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	// ID of the availability zone to move the disk to.
	//
	// To get the zone ID, make a [ZoneService.List] request.
	DestinationZoneId string `protobuf:"bytes,2,opt,name=destination_zone_id,json=destinationZoneId,proto3" json:"destination_zone_id,omitempty"`
	// Placement policy configuration in target zone. Must be specified if disk has placement policy.
	DiskPlacementPolicy *DiskPlacementPolicy `protobuf:"bytes,3,opt,name=disk_placement_policy,json=diskPlacementPolicy,proto3" json:"disk_placement_policy,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RelocateDiskRequest) Reset() {
	*x = RelocateDiskRequest{}
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelocateDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelocateDiskRequest) ProtoMessage() {}

func (x *RelocateDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelocateDiskRequest.ProtoReflect.Descriptor instead.
func (*RelocateDiskRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_disk_service_proto_rawDescGZIP(), []int{13}
}

func (x *RelocateDiskRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *RelocateDiskRequest) GetDestinationZoneId() string {
	if x != nil {
		return x.DestinationZoneId
	}
	return ""
}

func (x *RelocateDiskRequest) GetDiskPlacementPolicy() *DiskPlacementPolicy {
	if x != nil {
		return x.DiskPlacementPolicy
	}
	return nil
}

type RelocateDiskMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the disk that is being moved.
	DiskId string `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	// ID of the availability zone that the disk is being moved from.
	SourceZoneId string `protobuf:"bytes,2,opt,name=source_zone_id,json=sourceZoneId,proto3" json:"source_zone_id,omitempty"`
	// ID of the availability zone that the disk is being moved to.
	DestinationZoneId string `protobuf:"bytes,3,opt,name=destination_zone_id,json=destinationZoneId,proto3" json:"destination_zone_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RelocateDiskMetadata) Reset() {
	*x = RelocateDiskMetadata{}
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelocateDiskMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelocateDiskMetadata) ProtoMessage() {}

func (x *RelocateDiskMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelocateDiskMetadata.ProtoReflect.Descriptor instead.
func (*RelocateDiskMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_disk_service_proto_rawDescGZIP(), []int{14}
}

func (x *RelocateDiskMetadata) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *RelocateDiskMetadata) GetSourceZoneId() string {
	if x != nil {
		return x.SourceZoneId
	}
	return ""
}

func (x *RelocateDiskMetadata) GetDestinationZoneId() string {
	if x != nil {
		return x.DestinationZoneId
	}
	return ""
}

type ListDiskSnapshotSchedulesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the disk to list snapshot schedules for.
	DiskId string `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than `page_size`, the service returns a [ListDiskSnapshotSchedulesResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	//
	// Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set `page_token` to the
	// [ListDiskSnapshotSchedulesResponse.next_page_token] returned by a previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDiskSnapshotSchedulesRequest) Reset() {
	*x = ListDiskSnapshotSchedulesRequest{}
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDiskSnapshotSchedulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiskSnapshotSchedulesRequest) ProtoMessage() {}

func (x *ListDiskSnapshotSchedulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiskSnapshotSchedulesRequest.ProtoReflect.Descriptor instead.
func (*ListDiskSnapshotSchedulesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_disk_service_proto_rawDescGZIP(), []int{15}
}

func (x *ListDiskSnapshotSchedulesRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *ListDiskSnapshotSchedulesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDiskSnapshotSchedulesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListDiskSnapshotSchedulesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of snapshot schedules the specified disk is attached to.
	SnapshotSchedules []*SnapshotSchedule `protobuf:"bytes,1,rep,name=snapshot_schedules,json=snapshotSchedules,proto3" json:"snapshot_schedules,omitempty"`
	// Token for getting the next page of the list. If the number of results is greater than
	// the specified [ListDiskSnapshotSchedulesRequest.page_size], use `next_page_token` as the value
	// for the [ListDiskSnapshotSchedulesRequest.page_token] parameter in the next list request.
	//
	// Each subsequent page will have its own `next_page_token` to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDiskSnapshotSchedulesResponse) Reset() {
	*x = ListDiskSnapshotSchedulesResponse{}
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDiskSnapshotSchedulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiskSnapshotSchedulesResponse) ProtoMessage() {}

func (x *ListDiskSnapshotSchedulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiskSnapshotSchedulesResponse.ProtoReflect.Descriptor instead.
func (*ListDiskSnapshotSchedulesResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_compute_v1_disk_service_proto_rawDescGZIP(), []int{16}
}

func (x *ListDiskSnapshotSchedulesResponse) GetSnapshotSchedules() []*SnapshotSchedule {
	if x != nil {
		return x.SnapshotSchedules
	}
	return nil
}

func (x *ListDiskSnapshotSchedulesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_yandex_cloud_compute_v1_disk_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_compute_v1_disk_service_proto_rawDesc = "" +
	"\n" +
	"*yandex/cloud/compute/v1/disk_service.proto\x12\x17yandex.cloud.compute.v1\x1a\x1cgoogle/api/annotations.proto\x1a google/protobuf/field_mask.proto\x1a yandex/cloud/access/access.proto\x1a yandex/cloud/api/operation.proto\x1a\"yandex/cloud/compute/v1/disk.proto\x1a1yandex/cloud/compute/v1/hardware_generation.proto\x1a/yandex/cloud/compute/v1/snapshot_schedule.proto\x1a&yandex/cloud/operation/operation.proto\x1a\x1dyandex/cloud/validation.proto\"7\n" +
	"\x0eGetDiskRequest\x12%\n" +
	"\adisk_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x06diskId\"\xda\x01\n" +
	"\x10ListDisksRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\x12\"\n" +
	"\x06filter\x18\x04 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\x12$\n" +
	"\border_by\x18\x05 \x01(\tB\t\x8a\xc81\x05<=100R\aorderBy\"p\n" +
	"\x11ListDisksResponse\x123\n" +
	"\x05disks\x18\x01 \x03(\v2\x1d.yandex.cloud.compute.v1.DiskR\x05disks\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x8e\a\n" +
	"\x11CreateDiskRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x129\n" +
	"\x04name\x18\x02 \x01(\tB%\xf2\xc71!|[a-z]([-_a-z0-9]{0,61}[a-z0-9])?R\x04name\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x93\x01\n" +
	"\x06labels\x18\x04 \x03(\v26.yandex.cloud.compute.v1.CreateDiskRequest.LabelsEntryBC\xf2\xc71\x0f[-_./\\@0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x1c\x12\x14[a-z][-_./\\@0-9a-z]*\x1a\x041-63R\x06labels\x12!\n" +
	"\atype_id\x18\x05 \x01(\tB\b\x8a\xc81\x04<=50R\x06typeId\x12%\n" +
	"\azone_id\x18\x06 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x06zoneId\x122\n" +
	"\x04size\x18\a \x01(\x03B\x1e\xe8\xc71\x01\xfa\xc71\x164194304-28587302322176R\x04size\x12%\n" +
	"\bimage_id\x18\b \x01(\tB\b\x8a\xc81\x04<=50H\x00R\aimageId\x12+\n" +
	"\vsnapshot_id\x18\t \x01(\tB\b\x8a\xc81\x04<=50H\x00R\n" +
	"snapshotId\x12\x1d\n" +
	"\n" +
	"block_size\x18\n" +
	" \x01(\x03R\tblockSize\x12`\n" +
	"\x15disk_placement_policy\x18\v \x01(\v2,.yandex.cloud.compute.v1.DiskPlacementPolicyR\x13diskPlacementPolicy\x122\n" +
	"\x15snapshot_schedule_ids\x18\f \x03(\tR\x13snapshotScheduleIds\x12\\\n" +
	"\x13hardware_generation\x18\r \x01(\v2+.yandex.cloud.compute.v1.HardwareGenerationR\x12hardwareGeneration\x12&\n" +
	"\n" +
	"kms_key_id\x18\x0e \x01(\tB\b\x8a\xc81\x04<=50R\bkmsKeyId\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\b\n" +
	"\x06source\"-\n" +
	"\x12CreateDiskMetadata\x12\x17\n" +
	"\adisk_id\x18\x01 \x01(\tR\x06diskId\"\xc1\x04\n" +
	"\x11UpdateDiskRequest\x12%\n" +
	"\adisk_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x06diskId\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x129\n" +
	"\x04name\x18\x03 \x01(\tB%\xf2\xc71!|[a-z]([-_a-z0-9]{0,61}[a-z0-9])?R\x04name\x12+\n" +
	"\vdescription\x18\x04 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x93\x01\n" +
	"\x06labels\x18\x05 \x03(\v26.yandex.cloud.compute.v1.UpdateDiskRequest.LabelsEntryBC\xf2\xc71\x0f[-_./\\@0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x1c\x12\x14[a-z][-_./\\@0-9a-z]*\x1a\x041-63R\x06labels\x12-\n" +
	"\x04size\x18\x06 \x01(\x03B\x19\xfa\xc71\x154194304-4398046511104R\x04size\x12`\n" +
	"\x15disk_placement_policy\x18\a \x01(\v2,.yandex.cloud.compute.v1.DiskPlacementPolicyR\x13diskPlacementPolicy\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"-\n" +
	"\x12UpdateDiskMetadata\x12\x17\n" +
	"\adisk_id\x18\x01 \x01(\tR\x06diskId\":\n" +
	"\x11DeleteDiskRequest\x12%\n" +
	"\adisk_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x06diskId\"-\n" +
	"\x12DeleteDiskMetadata\x12\x17\n" +
	"\adisk_id\x18\x01 \x01(\tR\x06diskId\"\x95\x01\n" +
	"\x19ListDiskOperationsRequest\x12%\n" +
	"\adisk_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x06diskId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x87\x01\n" +
	"\x1aListDiskOperationsResponse\x12A\n" +
	"\n" +
	"operations\x18\x01 \x03(\v2!.yandex.cloud.operation.OperationR\n" +
	"operations\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"z\n" +
	"\x0fMoveDiskRequest\x12%\n" +
	"\adisk_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x06diskId\x12@\n" +
	"\x15destination_folder_id\x18\x02 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x13destinationFolderId\"\x89\x01\n" +
	"\x10MoveDiskMetadata\x12\x17\n" +
	"\adisk_id\x18\x01 \x01(\tR\x06diskId\x12(\n" +
	"\x10source_folder_id\x18\x02 \x01(\tR\x0esourceFolderId\x122\n" +
	"\x15destination_folder_id\x18\x03 \x01(\tR\x13destinationFolderId\"\xdc\x01\n" +
	"\x13RelocateDiskRequest\x12%\n" +
	"\adisk_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x06diskId\x12<\n" +
	"\x13destination_zone_id\x18\x02 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x11destinationZoneId\x12`\n" +
	"\x15disk_placement_policy\x18\x03 \x01(\v2,.yandex.cloud.compute.v1.DiskPlacementPolicyR\x13diskPlacementPolicy\"\x85\x01\n" +
	"\x14RelocateDiskMetadata\x12\x17\n" +
	"\adisk_id\x18\x01 \x01(\tR\x06diskId\x12$\n" +
	"\x0esource_zone_id\x18\x02 \x01(\tR\fsourceZoneId\x12.\n" +
	"\x13destination_zone_id\x18\x03 \x01(\tR\x11destinationZoneId\"w\n" +
	" ListDiskSnapshotSchedulesRequest\x12\x17\n" +
	"\adisk_id\x18\x01 \x01(\tR\x06diskId\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x03R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\"\xa5\x01\n" +
	"!ListDiskSnapshotSchedulesResponse\x12X\n" +
	"\x12snapshot_schedules\x18\x01 \x03(\v2).yandex.cloud.compute.v1.SnapshotScheduleR\x11snapshotSchedules\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken2\x90\x10\n" +
	"\vDiskService\x12r\n" +
	"\x03Get\x12'.yandex.cloud.compute.v1.GetDiskRequest\x1a\x1d.yandex.cloud.compute.v1.Disk\"#\x82\xd3\xe4\x93\x02\x1d\x12\x1b/compute/v1/disks/{disk_id}\x12x\n" +
	"\x04List\x12).yandex.cloud.compute.v1.ListDisksRequest\x1a*.yandex.cloud.compute.v1.ListDisksResponse\"\x19\x82\xd3\xe4\x93\x02\x13\x12\x11/compute/v1/disks\x12\x93\x01\n" +
	"\x06Create\x12*.yandex.cloud.compute.v1.CreateDiskRequest\x1a!.yandex.cloud.operation.Operation\":\xb2\xd2*\x1a\n" +
	"\x12CreateDiskMetadata\x12\x04Disk\x82\xd3\xe4\x93\x02\x16:\x01*\"\x11/compute/v1/disks\x12\x9d\x01\n" +
	"\x06Update\x12*.yandex.cloud.compute.v1.UpdateDiskRequest\x1a!.yandex.cloud.operation.Operation\"D\xb2\xd2*\x1a\n" +
	"\x12UpdateDiskMetadata\x12\x04Disk\x82\xd3\xe4\x93\x02 :\x01*2\x1b/compute/v1/disks/{disk_id}\x12\xab\x01\n" +
	"\x06Delete\x12*.yandex.cloud.compute.v1.DeleteDiskRequest\x1a!.yandex.cloud.operation.Operation\"R\xb2\xd2*+\n" +
	"\x12DeleteDiskMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02\x1d*\x1b/compute/v1/disks/{disk_id}\x12\xa9\x01\n" +
	"\x0eListOperations\x122.yandex.cloud.compute.v1.ListDiskOperationsRequest\x1a3.yandex.cloud.compute.v1.ListDiskOperationsResponse\".\x82\xd3\xe4\x93\x02(\x12&/compute/v1/disks/{disk_id}/operations\x12\x9c\x01\n" +
	"\x04Move\x12(.yandex.cloud.compute.v1.MoveDiskRequest\x1a!.yandex.cloud.operation.Operation\"G\xb2\xd2*\x18\n" +
	"\x10MoveDiskMetadata\x12\x04Disk\x82\xd3\xe4\x93\x02%:\x01*\" /compute/v1/disks/{disk_id}:move\x12\xac\x01\n" +
	"\bRelocate\x12,.yandex.cloud.compute.v1.RelocateDiskRequest\x1a!.yandex.cloud.operation.Operation\"O\xb2\xd2*\x1c\n" +
	"\x14RelocateDiskMetadata\x12\x04Disk\x82\xd3\xe4\x93\x02):\x01*\"$/compute/v1/disks/{disk_id}:relocate\x12\x8e\x01\n" +
	"\x15ListSnapshotSchedules\x129.yandex.cloud.compute.v1.ListDiskSnapshotSchedulesRequest\x1a:.yandex.cloud.compute.v1.ListDiskSnapshotSchedulesResponse\x12\xb1\x01\n" +
	"\x12ListAccessBindings\x12..yandex.cloud.access.ListAccessBindingsRequest\x1a/.yandex.cloud.access.ListAccessBindingsResponse\":\x82\xd3\xe4\x93\x024\x122/compute/v1/disks/{resource_id}:listAccessBindings\x12\xf0\x01\n" +
	"\x11SetAccessBindings\x12-.yandex.cloud.access.SetAccessBindingsRequest\x1a!.yandex.cloud.operation.Operation\"\x88\x01\xb2\xd2*H\n" +
	" access.SetAccessBindingsMetadata\x12$access.AccessBindingsOperationResult\x82\xd3\xe4\x93\x026:\x01*\"1/compute/v1/disks/{resource_id}:setAccessBindings\x12\xfc\x01\n" +
	"\x14UpdateAccessBindings\x120.yandex.cloud.access.UpdateAccessBindingsRequest\x1a!.yandex.cloud.operation.Operation\"\x8e\x01\xb2\xd2*K\n" +
	"#access.UpdateAccessBindingsMetadata\x12$access.AccessBindingsOperationResult\x82\xd3\xe4\x93\x029:\x01*\"4/compute/v1/disks/{resource_id}:updateAccessBindingsBb\n" +
	"\x1byandex.cloud.api.compute.v1ZCgithub.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1;computeb\x06proto3"

var (
	file_yandex_cloud_compute_v1_disk_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_compute_v1_disk_service_proto_rawDescData []byte
)

func file_yandex_cloud_compute_v1_disk_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_compute_v1_disk_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_compute_v1_disk_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_compute_v1_disk_service_proto_rawDesc), len(file_yandex_cloud_compute_v1_disk_service_proto_rawDesc)))
	})
	return file_yandex_cloud_compute_v1_disk_service_proto_rawDescData
}

var file_yandex_cloud_compute_v1_disk_service_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_yandex_cloud_compute_v1_disk_service_proto_goTypes = []any{
	(*GetDiskRequest)(nil),                    // 0: yandex.cloud.compute.v1.GetDiskRequest
	(*ListDisksRequest)(nil),                  // 1: yandex.cloud.compute.v1.ListDisksRequest
	(*ListDisksResponse)(nil),                 // 2: yandex.cloud.compute.v1.ListDisksResponse
	(*CreateDiskRequest)(nil),                 // 3: yandex.cloud.compute.v1.CreateDiskRequest
	(*CreateDiskMetadata)(nil),                // 4: yandex.cloud.compute.v1.CreateDiskMetadata
	(*UpdateDiskRequest)(nil),                 // 5: yandex.cloud.compute.v1.UpdateDiskRequest
	(*UpdateDiskMetadata)(nil),                // 6: yandex.cloud.compute.v1.UpdateDiskMetadata
	(*DeleteDiskRequest)(nil),                 // 7: yandex.cloud.compute.v1.DeleteDiskRequest
	(*DeleteDiskMetadata)(nil),                // 8: yandex.cloud.compute.v1.DeleteDiskMetadata
	(*ListDiskOperationsRequest)(nil),         // 9: yandex.cloud.compute.v1.ListDiskOperationsRequest
	(*ListDiskOperationsResponse)(nil),        // 10: yandex.cloud.compute.v1.ListDiskOperationsResponse
	(*MoveDiskRequest)(nil),                   // 11: yandex.cloud.compute.v1.MoveDiskRequest
	(*MoveDiskMetadata)(nil),                  // 12: yandex.cloud.compute.v1.MoveDiskMetadata
	(*RelocateDiskRequest)(nil),               // 13: yandex.cloud.compute.v1.RelocateDiskRequest
	(*RelocateDiskMetadata)(nil),              // 14: yandex.cloud.compute.v1.RelocateDiskMetadata
	(*ListDiskSnapshotSchedulesRequest)(nil),  // 15: yandex.cloud.compute.v1.ListDiskSnapshotSchedulesRequest
	(*ListDiskSnapshotSchedulesResponse)(nil), // 16: yandex.cloud.compute.v1.ListDiskSnapshotSchedulesResponse
	nil,                                        // 17: yandex.cloud.compute.v1.CreateDiskRequest.LabelsEntry
	nil,                                        // 18: yandex.cloud.compute.v1.UpdateDiskRequest.LabelsEntry
	(*Disk)(nil),                               // 19: yandex.cloud.compute.v1.Disk
	(*DiskPlacementPolicy)(nil),                // 20: yandex.cloud.compute.v1.DiskPlacementPolicy
	(*HardwareGeneration)(nil),                 // 21: yandex.cloud.compute.v1.HardwareGeneration
	(*fieldmaskpb.FieldMask)(nil),              // 22: google.protobuf.FieldMask
	(*operation.Operation)(nil),                // 23: yandex.cloud.operation.Operation
	(*SnapshotSchedule)(nil),                   // 24: yandex.cloud.compute.v1.SnapshotSchedule
	(*access.ListAccessBindingsRequest)(nil),   // 25: yandex.cloud.access.ListAccessBindingsRequest
	(*access.SetAccessBindingsRequest)(nil),    // 26: yandex.cloud.access.SetAccessBindingsRequest
	(*access.UpdateAccessBindingsRequest)(nil), // 27: yandex.cloud.access.UpdateAccessBindingsRequest
	(*access.ListAccessBindingsResponse)(nil),  // 28: yandex.cloud.access.ListAccessBindingsResponse
}
var file_yandex_cloud_compute_v1_disk_service_proto_depIdxs = []int32{
	19, // 0: yandex.cloud.compute.v1.ListDisksResponse.disks:type_name -> yandex.cloud.compute.v1.Disk
	17, // 1: yandex.cloud.compute.v1.CreateDiskRequest.labels:type_name -> yandex.cloud.compute.v1.CreateDiskRequest.LabelsEntry
	20, // 2: yandex.cloud.compute.v1.CreateDiskRequest.disk_placement_policy:type_name -> yandex.cloud.compute.v1.DiskPlacementPolicy
	21, // 3: yandex.cloud.compute.v1.CreateDiskRequest.hardware_generation:type_name -> yandex.cloud.compute.v1.HardwareGeneration
	22, // 4: yandex.cloud.compute.v1.UpdateDiskRequest.update_mask:type_name -> google.protobuf.FieldMask
	18, // 5: yandex.cloud.compute.v1.UpdateDiskRequest.labels:type_name -> yandex.cloud.compute.v1.UpdateDiskRequest.LabelsEntry
	20, // 6: yandex.cloud.compute.v1.UpdateDiskRequest.disk_placement_policy:type_name -> yandex.cloud.compute.v1.DiskPlacementPolicy
	23, // 7: yandex.cloud.compute.v1.ListDiskOperationsResponse.operations:type_name -> yandex.cloud.operation.Operation
	20, // 8: yandex.cloud.compute.v1.RelocateDiskRequest.disk_placement_policy:type_name -> yandex.cloud.compute.v1.DiskPlacementPolicy
	24, // 9: yandex.cloud.compute.v1.ListDiskSnapshotSchedulesResponse.snapshot_schedules:type_name -> yandex.cloud.compute.v1.SnapshotSchedule
	0,  // 10: yandex.cloud.compute.v1.DiskService.Get:input_type -> yandex.cloud.compute.v1.GetDiskRequest
	1,  // 11: yandex.cloud.compute.v1.DiskService.List:input_type -> yandex.cloud.compute.v1.ListDisksRequest
	3,  // 12: yandex.cloud.compute.v1.DiskService.Create:input_type -> yandex.cloud.compute.v1.CreateDiskRequest
	5,  // 13: yandex.cloud.compute.v1.DiskService.Update:input_type -> yandex.cloud.compute.v1.UpdateDiskRequest
	7,  // 14: yandex.cloud.compute.v1.DiskService.Delete:input_type -> yandex.cloud.compute.v1.DeleteDiskRequest
	9,  // 15: yandex.cloud.compute.v1.DiskService.ListOperations:input_type -> yandex.cloud.compute.v1.ListDiskOperationsRequest
	11, // 16: yandex.cloud.compute.v1.DiskService.Move:input_type -> yandex.cloud.compute.v1.MoveDiskRequest
	13, // 17: yandex.cloud.compute.v1.DiskService.Relocate:input_type -> yandex.cloud.compute.v1.RelocateDiskRequest
	15, // 18: yandex.cloud.compute.v1.DiskService.ListSnapshotSchedules:input_type -> yandex.cloud.compute.v1.ListDiskSnapshotSchedulesRequest
	25, // 19: yandex.cloud.compute.v1.DiskService.ListAccessBindings:input_type -> yandex.cloud.access.ListAccessBindingsRequest
	26, // 20: yandex.cloud.compute.v1.DiskService.SetAccessBindings:input_type -> yandex.cloud.access.SetAccessBindingsRequest
	27, // 21: yandex.cloud.compute.v1.DiskService.UpdateAccessBindings:input_type -> yandex.cloud.access.UpdateAccessBindingsRequest
	19, // 22: yandex.cloud.compute.v1.DiskService.Get:output_type -> yandex.cloud.compute.v1.Disk
	2,  // 23: yandex.cloud.compute.v1.DiskService.List:output_type -> yandex.cloud.compute.v1.ListDisksResponse
	23, // 24: yandex.cloud.compute.v1.DiskService.Create:output_type -> yandex.cloud.operation.Operation
	23, // 25: yandex.cloud.compute.v1.DiskService.Update:output_type -> yandex.cloud.operation.Operation
	23, // 26: yandex.cloud.compute.v1.DiskService.Delete:output_type -> yandex.cloud.operation.Operation
	10, // 27: yandex.cloud.compute.v1.DiskService.ListOperations:output_type -> yandex.cloud.compute.v1.ListDiskOperationsResponse
	23, // 28: yandex.cloud.compute.v1.DiskService.Move:output_type -> yandex.cloud.operation.Operation
	23, // 29: yandex.cloud.compute.v1.DiskService.Relocate:output_type -> yandex.cloud.operation.Operation
	16, // 30: yandex.cloud.compute.v1.DiskService.ListSnapshotSchedules:output_type -> yandex.cloud.compute.v1.ListDiskSnapshotSchedulesResponse
	28, // 31: yandex.cloud.compute.v1.DiskService.ListAccessBindings:output_type -> yandex.cloud.access.ListAccessBindingsResponse
	23, // 32: yandex.cloud.compute.v1.DiskService.SetAccessBindings:output_type -> yandex.cloud.operation.Operation
	23, // 33: yandex.cloud.compute.v1.DiskService.UpdateAccessBindings:output_type -> yandex.cloud.operation.Operation
	22, // [22:34] is the sub-list for method output_type
	10, // [10:22] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_yandex_cloud_compute_v1_disk_service_proto_init() }
func file_yandex_cloud_compute_v1_disk_service_proto_init() {
	if File_yandex_cloud_compute_v1_disk_service_proto != nil {
		return
	}
	file_yandex_cloud_compute_v1_disk_proto_init()
	file_yandex_cloud_compute_v1_hardware_generation_proto_init()
	file_yandex_cloud_compute_v1_snapshot_schedule_proto_init()
	file_yandex_cloud_compute_v1_disk_service_proto_msgTypes[3].OneofWrappers = []any{
		(*CreateDiskRequest_ImageId)(nil),
		(*CreateDiskRequest_SnapshotId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_compute_v1_disk_service_proto_rawDesc), len(file_yandex_cloud_compute_v1_disk_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_compute_v1_disk_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_compute_v1_disk_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_compute_v1_disk_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_compute_v1_disk_service_proto = out.File
	file_yandex_cloud_compute_v1_disk_service_proto_goTypes = nil
	file_yandex_cloud_compute_v1_disk_service_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: yandex/cloud/datasphere/v2/jobs/project_job_service.proto

package datasphere

import (
	context "context"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProjectJobService_Create_FullMethodName           = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/Create"
	ProjectJobService_Clone_FullMethodName            = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/Clone"
	ProjectJobService_Execute_FullMethodName          = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/Execute"
	ProjectJobService_Cancel_FullMethodName           = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/Cancel"
	ProjectJobService_ReadStdLogs_FullMethodName      = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/ReadStdLogs"
	ProjectJobService_ReadLogs_FullMethodName         = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/ReadLogs"
	ProjectJobService_DownloadJobFiles_FullMethodName = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/DownloadJobFiles"
	ProjectJobService_List_FullMethodName             = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/List"
	ProjectJobService_Get_FullMethodName              = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/Get"
	ProjectJobService_Delete_FullMethodName           = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/Delete"
	ProjectJobService_DeleteData_FullMethodName       = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/DeleteData"
	ProjectJobService_DeleteAllData_FullMethodName    = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/DeleteAllData"
	ProjectJobService_SetDataTtl_FullMethodName       = "/yandex.cloud.datasphere.v2.jobs.ProjectJobService/SetDataTtl"
)

// ProjectJobServiceClient is the client API for ProjectJobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A set of methods for managing Project Jobs. Do not use these methods manually.
// For working with DataSphere Jobs, install DataSphere CLI via `pip install datasphere`.
type ProjectJobServiceClient interface {
	// Creates job.
	Create(ctx context.Context, in *CreateProjectJobRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Clone job.
	Clone(ctx context.Context, in *CloneProjectJobRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Runs job execution.
	Execute(ctx context.Context, in *ExecuteProjectJobRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Cancels running job.
	Cancel(ctx context.Context, in *CancelProjectJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// Returns stream of job logs.
	ReadStdLogs(ctx context.Context, in *ReadProjectJobStdLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadProjectJobStdLogsResponse], error)
	// Returns stream of job logs.
	ReadLogs(ctx context.Context, in *ReadProjectJobLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadProjectJobLogsResponse], error)
	// Returns download urls for job files.
	DownloadJobFiles(ctx context.Context, in *DownloadProjectJobFilesRequest, opts ...grpc.CallOption) (*DownloadProjectJobFilesResponse, error)
	// Lists jobs.
	List(ctx context.Context, in *ListProjectJobRequest, opts ...grpc.CallOption) (*ListProjectJobResponse, error)
	// Returns job by id.
	Get(ctx context.Context, in *GetProjectJobRequest, opts ...grpc.CallOption) (*Job, error)
	// Deletes specified job.
	Delete(ctx context.Context, in *DeleteProjectJobRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Delete job data.
	DeleteData(ctx context.Context, in *DeleteProjectJobDataRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Delete all jobs data.
	DeleteAllData(ctx context.Context, in *DeleteAllProjectJobDataRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Update job data ttl.
	SetDataTtl(ctx context.Context, in *SetProjectJobDataTtlRequest, opts ...grpc.CallOption) (*SetProjectJobDataTtlResponse, error)
}

type projectJobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectJobServiceClient(cc grpc.ClientConnInterface) ProjectJobServiceClient {
	return &projectJobServiceClient{cc}
}

func (c *projectJobServiceClient) Create(ctx context.Context, in *CreateProjectJobRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, ProjectJobService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectJobServiceClient) Clone(ctx context.Context, in *CloneProjectJobRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, ProjectJobService_Clone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectJobServiceClient) Execute(ctx context.Context, in *ExecuteProjectJobRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, ProjectJobService_Execute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectJobServiceClient) Cancel(ctx context.Context, in *CancelProjectJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProjectJobService_Cancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *projectJobServiceClient) ReadStdLogs(ctx context.Context, in *ReadProjectJobStdLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadProjectJobStdLogsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProjectJobService_ServiceDesc.Streams[0], ProjectJobService_ReadStdLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadProjectJobStdLogsRequest, ReadProjectJobStdLogsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProjectJobService_ReadStdLogsClient = grpc.ServerStreamingClient[ReadProjectJobStdLogsResponse]

func (c *projectJobServiceClient) ReadLogs(ctx context.Context, in *ReadProjectJobLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadProjectJobLogsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProjectJobService_ServiceDesc.Streams[1], ProjectJobService_ReadLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadProjectJobLogsRequest, ReadProjectJobLogsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProjectJobService_ReadLogsClient = grpc.ServerStreamingClient[ReadProjectJobLogsResponse]

func (c *projectJobServiceClient) DownloadJobFiles(ctx context.Context, in *DownloadProjectJobFilesRequest, opts ...grpc.CallOption) (*DownloadProjectJobFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadProjectJobFilesResponse)
	err := c.cc.Invoke(ctx, ProjectJobService_DownloadJobFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectJobServiceClient) List(ctx context.Context, in *ListProjectJobRequest, opts ...grpc.CallOption) (*ListProjectJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProjectJobResponse)
	err := c.cc.Invoke(ctx, ProjectJobService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectJobServiceClient) Get(ctx context.Context, in *GetProjectJobRequest, opts ...grpc.CallOption) (*Job, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Job)
	err := c.cc.Invoke(ctx, ProjectJobService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectJobServiceClient) Delete(ctx context.Context, in *DeleteProjectJobRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, ProjectJobService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectJobServiceClient) DeleteData(ctx context.Context, in *DeleteProjectJobDataRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, ProjectJobService_DeleteData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectJobServiceClient) DeleteAllData(ctx context.Context, in *DeleteAllProjectJobDataRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, ProjectJobService_DeleteAllData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectJobServiceClient) SetDataTtl(ctx context.Context, in *SetProjectJobDataTtlRequest, opts ...grpc.CallOption) (*SetProjectJobDataTtlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetProjectJobDataTtlResponse)
	err := c.cc.Invoke(ctx, ProjectJobService_SetDataTtl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectJobServiceServer is the server API for ProjectJobService service.
// All implementations should embed UnimplementedProjectJobServiceServer
// for forward compatibility.
//
// A set of methods for managing Project Jobs. Do not use these methods manually.
// For working with DataSphere Jobs, install DataSphere CLI via `pip install datasphere`.
type ProjectJobServiceServer interface {
	// Creates job.
	Create(context.Context, *CreateProjectJobRequest) (*operation.Operation, error)
	// Clone job.
	Clone(context.Context, *CloneProjectJobRequest) (*operation.Operation, error)
	// Runs job execution.
	Execute(context.Context, *ExecuteProjectJobRequest) (*operation.Operation, error)
	// Cancels running job.
	Cancel(context.Context, *CancelProjectJobRequest) (*emptypb.Empty, error)
	// Deprecated: Do not use.
	// Returns stream of job logs.
	ReadStdLogs(*ReadProjectJobStdLogsRequest, grpc.ServerStreamingServer[ReadProjectJobStdLogsResponse]) error
	// Returns stream of job logs.
	ReadLogs(*ReadProjectJobLogsRequest, grpc.ServerStreamingServer[ReadProjectJobLogsResponse]) error
	// Returns download urls for job files.
	DownloadJobFiles(context.Context, *DownloadProjectJobFilesRequest) (*DownloadProjectJobFilesResponse, error)
	// Lists jobs.
	List(context.Context, *ListProjectJobRequest) (*ListProjectJobResponse, error)
	// Returns job by id.
	Get(context.Context, *GetProjectJobRequest) (*Job, error)
	// Deletes specified job.
	Delete(context.Context, *DeleteProjectJobRequest) (*operation.Operation, error)
	// Delete job data.
	DeleteData(context.Context, *DeleteProjectJobDataRequest) (*operation.Operation, error)
	// Delete all jobs data.
	DeleteAllData(context.Context, *DeleteAllProjectJobDataRequest) (*operation.Operation, error)
	// Update job data ttl.
	SetDataTtl(context.Context, *SetProjectJobDataTtlRequest) (*SetProjectJobDataTtlResponse, error)
}

// UnimplementedProjectJobServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProjectJobServiceServer struct{}

func (UnimplementedProjectJobServiceServer) Create(context.Context, *CreateProjectJobRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProjectJobServiceServer) Clone(context.Context, *CloneProjectJobRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clone not implemented")
}
func (UnimplementedProjectJobServiceServer) Execute(context.Context, *ExecuteProjectJobRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedProjectJobServiceServer) Cancel(context.Context, *CancelProjectJobRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedProjectJobServiceServer) ReadStdLogs(*ReadProjectJobStdLogsRequest, grpc.ServerStreamingServer[ReadProjectJobStdLogsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadStdLogs not implemented")
}
func (UnimplementedProjectJobServiceServer) ReadLogs(*ReadProjectJobLogsRequest, grpc.ServerStreamingServer[ReadProjectJobLogsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadLogs not implemented")
}
func (UnimplementedProjectJobServiceServer) DownloadJobFiles(context.Context, *DownloadProjectJobFilesRequest) (*DownloadProjectJobFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadJobFiles not implemented")
}
func (UnimplementedProjectJobServiceServer) List(context.Context, *ListProjectJobRequest) (*ListProjectJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProjectJobServiceServer) Get(context.Context, *GetProjectJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProjectJobServiceServer) Delete(context.Context, *DeleteProjectJobRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProjectJobServiceServer) DeleteData(context.Context, *DeleteProjectJobDataRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteData not implemented")
}
func (UnimplementedProjectJobServiceServer) DeleteAllData(context.Context, *DeleteAllProjectJobDataRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllData not implemented")
}
func (UnimplementedProjectJobServiceServer) SetDataTtl(context.Context, *SetProjectJobDataTtlRequest) (*SetProjectJobDataTtlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDataTtl not implemented")
}
func (UnimplementedProjectJobServiceServer) testEmbeddedByValue() {}

// UnsafeProjectJobServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectJobServiceServer will
// result in compilation errors.
type UnsafeProjectJobServiceServer interface {
	mustEmbedUnimplementedProjectJobServiceServer()
}

func RegisterProjectJobServiceServer(s grpc.ServiceRegistrar, srv ProjectJobServiceServer) {
	// If the following call pancis, it indicates UnimplementedProjectJobServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProjectJobService_ServiceDesc, srv)
}

func _ProjectJobService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectJobServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectJobService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectJobServiceServer).Create(ctx, req.(*CreateProjectJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectJobService_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneProjectJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectJobServiceServer).Clone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectJobService_Clone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectJobServiceServer).Clone(ctx, req.(*CloneProjectJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectJobService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteProjectJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectJobServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectJobService_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectJobServiceServer).Execute(ctx, req.(*ExecuteProjectJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectJobService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelProjectJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectJobServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectJobService_Cancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectJobServiceServer).Cancel(ctx, req.(*CancelProjectJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectJobService_ReadStdLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadProjectJobStdLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectJobServiceServer).ReadStdLogs(m, &grpc.GenericServerStream[ReadProjectJobStdLogsRequest, ReadProjectJobStdLogsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProjectJobService_ReadStdLogsServer = grpc.ServerStreamingServer[ReadProjectJobStdLogsResponse]

func _ProjectJobService_ReadLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadProjectJobLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectJobServiceServer).ReadLogs(m, &grpc.GenericServerStream[ReadProjectJobLogsRequest, ReadProjectJobLogsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProjectJobService_ReadLogsServer = grpc.ServerStreamingServer[ReadProjectJobLogsResponse]

func _ProjectJobService_DownloadJobFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadProjectJobFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectJobServiceServer).DownloadJobFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectJobService_DownloadJobFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectJobServiceServer).DownloadJobFiles(ctx, req.(*DownloadProjectJobFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectJobService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectJobServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectJobService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectJobServiceServer).List(ctx, req.(*ListProjectJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectJobService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectJobServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectJobService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectJobServiceServer).Get(ctx, req.(*GetProjectJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectJobService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectJobServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectJobService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectJobServiceServer).Delete(ctx, req.(*DeleteProjectJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectJobService_DeleteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectJobDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectJobServiceServer).DeleteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectJobService_DeleteData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectJobServiceServer).DeleteData(ctx, req.(*DeleteProjectJobDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectJobService_DeleteAllData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllProjectJobDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectJobServiceServer).DeleteAllData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectJobService_DeleteAllData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectJobServiceServer).DeleteAllData(ctx, req.(*DeleteAllProjectJobDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectJobService_SetDataTtl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProjectJobDataTtlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectJobServiceServer).SetDataTtl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectJobService_SetDataTtl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectJobServiceServer).SetDataTtl(ctx, req.(*SetProjectJobDataTtlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectJobService_ServiceDesc is the grpc.ServiceDesc for ProjectJobService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectJobService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.datasphere.v2.jobs.ProjectJobService",
	HandlerType: (*ProjectJobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ProjectJobService_Create_Handler,
		},
		{
			MethodName: "Clone",
			Handler:    _ProjectJobService_Clone_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _ProjectJobService_Execute_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _ProjectJobService_Cancel_Handler,
		},
		{
			MethodName: "DownloadJobFiles",
			Handler:    _ProjectJobService_DownloadJobFiles_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ProjectJobService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ProjectJobService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ProjectJobService_Delete_Handler,
		},
		{
			MethodName: "DeleteData",
			Handler:    _ProjectJobService_DeleteData_Handler,
		},
		{
			MethodName: "DeleteAllData",
			Handler:    _ProjectJobService_DeleteAllData_Handler,
		},
		{
			MethodName: "SetDataTtl",
			Handler:    _ProjectJobService_SetDataTtl_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadStdLogs",
			Handler:       _ProjectJobService_ReadStdLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadLogs",
			Handler:       _ProjectJobService_ReadLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "yandex/cloud/datasphere/v2/jobs/project_job_service.proto",
}

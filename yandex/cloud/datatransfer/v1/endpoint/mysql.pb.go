// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/datatransfer/v1/endpoint/mysql.proto

package endpoint

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OnPremiseMysql struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Database port
	Port int64 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Network interface for endpoint. If none will assume public ipv4
	SubnetId string   `protobuf:"bytes,4,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	Hosts    []string `protobuf:"bytes,5,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// TLS settings for server connection. Disabled by default.
	TlsMode       *TLSMode `protobuf:"bytes,6,opt,name=tls_mode,json=tlsMode,proto3" json:"tls_mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnPremiseMysql) Reset() {
	*x = OnPremiseMysql{}
	mi := &file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnPremiseMysql) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnPremiseMysql) ProtoMessage() {}

func (x *OnPremiseMysql) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnPremiseMysql.ProtoReflect.Descriptor instead.
func (*OnPremiseMysql) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_rawDescGZIP(), []int{0}
}

func (x *OnPremiseMysql) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *OnPremiseMysql) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *OnPremiseMysql) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *OnPremiseMysql) GetTlsMode() *TLSMode {
	if x != nil {
		return x.TlsMode
	}
	return nil
}

type MysqlConnection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Connection:
	//
	//	*MysqlConnection_MdbClusterId
	//	*MysqlConnection_OnPremise
	//	*MysqlConnection_ConnectionManagerConnection
	Connection    isMysqlConnection_Connection `protobuf_oneof:"connection"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MysqlConnection) Reset() {
	*x = MysqlConnection{}
	mi := &file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MysqlConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlConnection) ProtoMessage() {}

func (x *MysqlConnection) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlConnection.ProtoReflect.Descriptor instead.
func (*MysqlConnection) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_rawDescGZIP(), []int{1}
}

func (x *MysqlConnection) GetConnection() isMysqlConnection_Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *MysqlConnection) GetMdbClusterId() string {
	if x != nil {
		if x, ok := x.Connection.(*MysqlConnection_MdbClusterId); ok {
			return x.MdbClusterId
		}
	}
	return ""
}

func (x *MysqlConnection) GetOnPremise() *OnPremiseMysql {
	if x != nil {
		if x, ok := x.Connection.(*MysqlConnection_OnPremise); ok {
			return x.OnPremise
		}
	}
	return nil
}

func (x *MysqlConnection) GetConnectionManagerConnection() *ConnectionManagerConnection {
	if x != nil {
		if x, ok := x.Connection.(*MysqlConnection_ConnectionManagerConnection); ok {
			return x.ConnectionManagerConnection
		}
	}
	return nil
}

type isMysqlConnection_Connection interface {
	isMysqlConnection_Connection()
}

type MysqlConnection_MdbClusterId struct {
	// Managed Service for MySQL cluster ID
	MdbClusterId string `protobuf:"bytes,1,opt,name=mdb_cluster_id,json=mdbClusterId,proto3,oneof"`
}

type MysqlConnection_OnPremise struct {
	// Connection options for on-premise MySQL
	OnPremise *OnPremiseMysql `protobuf:"bytes,2,opt,name=on_premise,json=onPremise,proto3,oneof"`
}

type MysqlConnection_ConnectionManagerConnection struct {
	ConnectionManagerConnection *ConnectionManagerConnection `protobuf:"bytes,3,opt,name=connection_manager_connection,json=connectionManagerConnection,proto3,oneof"`
}

func (*MysqlConnection_MdbClusterId) isMysqlConnection_Connection() {}

func (*MysqlConnection_OnPremise) isMysqlConnection_Connection() {}

func (*MysqlConnection_ConnectionManagerConnection) isMysqlConnection_Connection() {}

type MysqlObjectTransferSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Views
	//
	// CREATE VIEW ...
	View ObjectTransferStage `protobuf:"varint,1,opt,name=view,proto3,enum=yandex.cloud.datatransfer.v1.endpoint.ObjectTransferStage" json:"view,omitempty"`
	// Routines
	//
	// CREATE PROCEDURE ... ; CREATE FUNCTION ... ;
	Routine ObjectTransferStage `protobuf:"varint,2,opt,name=routine,proto3,enum=yandex.cloud.datatransfer.v1.endpoint.ObjectTransferStage" json:"routine,omitempty"`
	// Triggers
	//
	// CREATE TRIGGER ...
	Trigger       ObjectTransferStage `protobuf:"varint,3,opt,name=trigger,proto3,enum=yandex.cloud.datatransfer.v1.endpoint.ObjectTransferStage" json:"trigger,omitempty"`
	Tables        ObjectTransferStage `protobuf:"varint,4,opt,name=tables,proto3,enum=yandex.cloud.datatransfer.v1.endpoint.ObjectTransferStage" json:"tables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MysqlObjectTransferSettings) Reset() {
	*x = MysqlObjectTransferSettings{}
	mi := &file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MysqlObjectTransferSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlObjectTransferSettings) ProtoMessage() {}

func (x *MysqlObjectTransferSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlObjectTransferSettings.ProtoReflect.Descriptor instead.
func (*MysqlObjectTransferSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_rawDescGZIP(), []int{2}
}

func (x *MysqlObjectTransferSettings) GetView() ObjectTransferStage {
	if x != nil {
		return x.View
	}
	return ObjectTransferStage_OBJECT_TRANSFER_STAGE_UNSPECIFIED
}

func (x *MysqlObjectTransferSettings) GetRoutine() ObjectTransferStage {
	if x != nil {
		return x.Routine
	}
	return ObjectTransferStage_OBJECT_TRANSFER_STAGE_UNSPECIFIED
}

func (x *MysqlObjectTransferSettings) GetTrigger() ObjectTransferStage {
	if x != nil {
		return x.Trigger
	}
	return ObjectTransferStage_OBJECT_TRANSFER_STAGE_UNSPECIFIED
}

func (x *MysqlObjectTransferSettings) GetTables() ObjectTransferStage {
	if x != nil {
		return x.Tables
	}
	return ObjectTransferStage_OBJECT_TRANSFER_STAGE_UNSPECIFIED
}

type MysqlSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Database connection settings
	Connection *MysqlConnection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
	// Database name
	//
	// You can leave it empty, then it will be possible to transfer tables from several
	// databases at the same time from this source.
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	// User for database access. not required as may be in connection
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// Password for database access.
	Password *Secret `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// Database timezone
	//
	// Is used for parsing timestamps for saving source timezones. Accepts values from
	// IANA timezone database. Default: local timezone.
	Timezone string `protobuf:"bytes,8,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// Schema migration
	//
	// Select database objects to be transferred during activation or deactivation.
	ObjectTransferSettings *MysqlObjectTransferSettings `protobuf:"bytes,11,opt,name=object_transfer_settings,json=objectTransferSettings,proto3" json:"object_transfer_settings,omitempty"`
	IncludeTablesRegex     []string                     `protobuf:"bytes,12,rep,name=include_tables_regex,json=includeTablesRegex,proto3" json:"include_tables_regex,omitempty"`
	ExcludeTablesRegex     []string                     `protobuf:"bytes,13,rep,name=exclude_tables_regex,json=excludeTablesRegex,proto3" json:"exclude_tables_regex,omitempty"`
	// Security groups
	SecurityGroups []string `protobuf:"bytes,14,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
	// Database for service tables
	//
	// Default: data source database. Here created technical tables (__tm_keeper,
	// __tm_gtid_keeper).
	ServiceDatabase string `protobuf:"bytes,15,opt,name=service_database,json=serviceDatabase,proto3" json:"service_database,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MysqlSource) Reset() {
	*x = MysqlSource{}
	mi := &file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MysqlSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlSource) ProtoMessage() {}

func (x *MysqlSource) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlSource.ProtoReflect.Descriptor instead.
func (*MysqlSource) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_rawDescGZIP(), []int{3}
}

func (x *MysqlSource) GetConnection() *MysqlConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *MysqlSource) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *MysqlSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *MysqlSource) GetPassword() *Secret {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *MysqlSource) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *MysqlSource) GetObjectTransferSettings() *MysqlObjectTransferSettings {
	if x != nil {
		return x.ObjectTransferSettings
	}
	return nil
}

func (x *MysqlSource) GetIncludeTablesRegex() []string {
	if x != nil {
		return x.IncludeTablesRegex
	}
	return nil
}

func (x *MysqlSource) GetExcludeTablesRegex() []string {
	if x != nil {
		return x.ExcludeTablesRegex
	}
	return nil
}

func (x *MysqlSource) GetSecurityGroups() []string {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *MysqlSource) GetServiceDatabase() string {
	if x != nil {
		return x.ServiceDatabase
	}
	return ""
}

type MysqlTarget struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Database connection settings
	Connection *MysqlConnection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
	// Database name
	//
	// Allowed to leave it empty, then the tables will be created in databases with the
	// same names as on the source. If this field is empty, then you must fill below db
	// schema for service table.
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	// User for database access. not required as may be in connection
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// Password for database access.
	Password *Secret `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// Default: NO_AUTO_VALUE_ON_ZERO,NO_DIR_IN_CREATE,NO_ENGINE_SUBSTITUTION.
	SqlMode string `protobuf:"bytes,5,opt,name=sql_mode,json=sqlMode,proto3" json:"sql_mode,omitempty"`
	// Disable constraints checks
	//
	// Recommend to disable for increase replication speed, but if schema contain
	// cascading operations we don't recommend to disable. This option set
	// FOREIGN_KEY_CHECKS=0 and UNIQUE_CHECKS=0.
	SkipConstraintChecks bool `protobuf:"varint,6,opt,name=skip_constraint_checks,json=skipConstraintChecks,proto3" json:"skip_constraint_checks,omitempty"`
	// Database timezone
	//
	// Is used for parsing timestamps for saving source timezones. Accepts values from
	// IANA timezone database. Default: local timezone.
	Timezone string `protobuf:"bytes,7,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// Cleanup policy
	//
	// Cleanup policy for activate, reactivate and reupload processes. Default is
	// DISABLED.
	CleanupPolicy CleanupPolicy `protobuf:"varint,8,opt,name=cleanup_policy,json=cleanupPolicy,proto3,enum=yandex.cloud.datatransfer.v1.endpoint.CleanupPolicy" json:"cleanup_policy,omitempty"`
	// Database schema for service table
	//
	// Default: db name. Here created technical tables (__tm_keeper, __tm_gtid_keeper).
	ServiceDatabase string `protobuf:"bytes,15,opt,name=service_database,json=serviceDatabase,proto3" json:"service_database,omitempty"`
	// Security groups
	SecurityGroups            []string `protobuf:"bytes,16,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
	IsSchemaMigrationDisabled bool     `protobuf:"varint,17,opt,name=is_schema_migration_disabled,json=isSchemaMigrationDisabled,proto3" json:"is_schema_migration_disabled,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *MysqlTarget) Reset() {
	*x = MysqlTarget{}
	mi := &file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MysqlTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlTarget) ProtoMessage() {}

func (x *MysqlTarget) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlTarget.ProtoReflect.Descriptor instead.
func (*MysqlTarget) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_rawDescGZIP(), []int{4}
}

func (x *MysqlTarget) GetConnection() *MysqlConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *MysqlTarget) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *MysqlTarget) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *MysqlTarget) GetPassword() *Secret {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *MysqlTarget) GetSqlMode() string {
	if x != nil {
		return x.SqlMode
	}
	return ""
}

func (x *MysqlTarget) GetSkipConstraintChecks() bool {
	if x != nil {
		return x.SkipConstraintChecks
	}
	return false
}

func (x *MysqlTarget) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *MysqlTarget) GetCleanupPolicy() CleanupPolicy {
	if x != nil {
		return x.CleanupPolicy
	}
	return CleanupPolicy_CLEANUP_POLICY_UNSPECIFIED
}

func (x *MysqlTarget) GetServiceDatabase() string {
	if x != nil {
		return x.ServiceDatabase
	}
	return ""
}

func (x *MysqlTarget) GetSecurityGroups() []string {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

func (x *MysqlTarget) GetIsSchemaMigrationDisabled() bool {
	if x != nil {
		return x.IsSchemaMigrationDisabled
	}
	return false
}

var File_yandex_cloud_datatransfer_v1_endpoint_mysql_proto protoreflect.FileDescriptor

const file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_rawDesc = "" +
	"\n" +
	"1yandex/cloud/datatransfer/v1/endpoint/mysql.proto\x12%yandex.cloud.datatransfer.v1.endpoint\x1a2yandex/cloud/datatransfer/v1/endpoint/common.proto\"\xae\x01\n" +
	"\x0eOnPremiseMysql\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x03R\x04port\x12\x1b\n" +
	"\tsubnet_id\x18\x04 \x01(\tR\bsubnetId\x12\x14\n" +
	"\x05hosts\x18\x05 \x03(\tR\x05hosts\x12I\n" +
	"\btls_mode\x18\x06 \x01(\v2..yandex.cloud.datatransfer.v1.endpoint.TLSModeR\atlsModeJ\x04\b\x01\x10\x02J\x04\b\x03\x10\x04\"\xaa\x02\n" +
	"\x0fMysqlConnection\x12&\n" +
	"\x0emdb_cluster_id\x18\x01 \x01(\tH\x00R\fmdbClusterId\x12V\n" +
	"\n" +
	"on_premise\x18\x02 \x01(\v25.yandex.cloud.datatransfer.v1.endpoint.OnPremiseMysqlH\x00R\tonPremise\x12\x88\x01\n" +
	"\x1dconnection_manager_connection\x18\x03 \x01(\v2B.yandex.cloud.datatransfer.v1.endpoint.ConnectionManagerConnectionH\x00R\x1bconnectionManagerConnectionB\f\n" +
	"\n" +
	"connection\"\xed\x02\n" +
	"\x1bMysqlObjectTransferSettings\x12N\n" +
	"\x04view\x18\x01 \x01(\x0e2:.yandex.cloud.datatransfer.v1.endpoint.ObjectTransferStageR\x04view\x12T\n" +
	"\aroutine\x18\x02 \x01(\x0e2:.yandex.cloud.datatransfer.v1.endpoint.ObjectTransferStageR\aroutine\x12T\n" +
	"\atrigger\x18\x03 \x01(\x0e2:.yandex.cloud.datatransfer.v1.endpoint.ObjectTransferStageR\atrigger\x12R\n" +
	"\x06tables\x18\x04 \x01(\x0e2:.yandex.cloud.datatransfer.v1.endpoint.ObjectTransferStageR\x06tables\"\xbe\x04\n" +
	"\vMysqlSource\x12V\n" +
	"\n" +
	"connection\x18\x01 \x01(\v26.yandex.cloud.datatransfer.v1.endpoint.MysqlConnectionR\n" +
	"connection\x12\x1a\n" +
	"\bdatabase\x18\x02 \x01(\tR\bdatabase\x12\x12\n" +
	"\x04user\x18\x03 \x01(\tR\x04user\x12I\n" +
	"\bpassword\x18\x04 \x01(\v2-.yandex.cloud.datatransfer.v1.endpoint.SecretR\bpassword\x12\x1a\n" +
	"\btimezone\x18\b \x01(\tR\btimezone\x12|\n" +
	"\x18object_transfer_settings\x18\v \x01(\v2B.yandex.cloud.datatransfer.v1.endpoint.MysqlObjectTransferSettingsR\x16objectTransferSettings\x120\n" +
	"\x14include_tables_regex\x18\f \x03(\tR\x12includeTablesRegex\x120\n" +
	"\x14exclude_tables_regex\x18\r \x03(\tR\x12excludeTablesRegex\x12'\n" +
	"\x0fsecurity_groups\x18\x0e \x03(\tR\x0esecurityGroups\x12)\n" +
	"\x10service_database\x18\x0f \x01(\tR\x0fserviceDatabaseJ\x04\b\x05\x10\bJ\x04\b\t\x10\v\"\xc5\x04\n" +
	"\vMysqlTarget\x12V\n" +
	"\n" +
	"connection\x18\x01 \x01(\v26.yandex.cloud.datatransfer.v1.endpoint.MysqlConnectionR\n" +
	"connection\x12\x1a\n" +
	"\bdatabase\x18\x02 \x01(\tR\bdatabase\x12\x12\n" +
	"\x04user\x18\x03 \x01(\tR\x04user\x12I\n" +
	"\bpassword\x18\x04 \x01(\v2-.yandex.cloud.datatransfer.v1.endpoint.SecretR\bpassword\x12\x19\n" +
	"\bsql_mode\x18\x05 \x01(\tR\asqlMode\x124\n" +
	"\x16skip_constraint_checks\x18\x06 \x01(\bR\x14skipConstraintChecks\x12\x1a\n" +
	"\btimezone\x18\a \x01(\tR\btimezone\x12[\n" +
	"\x0ecleanup_policy\x18\b \x01(\x0e24.yandex.cloud.datatransfer.v1.endpoint.CleanupPolicyR\rcleanupPolicy\x12)\n" +
	"\x10service_database\x18\x0f \x01(\tR\x0fserviceDatabase\x12'\n" +
	"\x0fsecurity_groups\x18\x10 \x03(\tR\x0esecurityGroups\x12?\n" +
	"\x1cis_schema_migration_disabled\x18\x11 \x01(\bR\x19isSchemaMigrationDisabledJ\x04\b\t\x10\x0fB\xa7\x01\n" +
	")yandex.cloud.api.datatransfer.v1.endpointZRgithub.com/yandex-cloud/go-genproto/yandex/cloud/datatransfer/v1/endpoint;endpoint\xaa\x02%Yandex.Cloud.Datatransfer.V1.EndPointb\x06proto3"

var (
	file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_rawDescOnce sync.Once
	file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_rawDescData []byte
)

func file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_rawDescGZIP() []byte {
	file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_rawDesc), len(file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_rawDesc)))
	})
	return file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_rawDescData
}

var file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_goTypes = []any{
	(*OnPremiseMysql)(nil),              // 0: yandex.cloud.datatransfer.v1.endpoint.OnPremiseMysql
	(*MysqlConnection)(nil),             // 1: yandex.cloud.datatransfer.v1.endpoint.MysqlConnection
	(*MysqlObjectTransferSettings)(nil), // 2: yandex.cloud.datatransfer.v1.endpoint.MysqlObjectTransferSettings
	(*MysqlSource)(nil),                 // 3: yandex.cloud.datatransfer.v1.endpoint.MysqlSource
	(*MysqlTarget)(nil),                 // 4: yandex.cloud.datatransfer.v1.endpoint.MysqlTarget
	(*TLSMode)(nil),                     // 5: yandex.cloud.datatransfer.v1.endpoint.TLSMode
	(*ConnectionManagerConnection)(nil), // 6: yandex.cloud.datatransfer.v1.endpoint.ConnectionManagerConnection
	(ObjectTransferStage)(0),            // 7: yandex.cloud.datatransfer.v1.endpoint.ObjectTransferStage
	(*Secret)(nil),                      // 8: yandex.cloud.datatransfer.v1.endpoint.Secret
	(CleanupPolicy)(0),                  // 9: yandex.cloud.datatransfer.v1.endpoint.CleanupPolicy
}
var file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_depIdxs = []int32{
	5,  // 0: yandex.cloud.datatransfer.v1.endpoint.OnPremiseMysql.tls_mode:type_name -> yandex.cloud.datatransfer.v1.endpoint.TLSMode
	0,  // 1: yandex.cloud.datatransfer.v1.endpoint.MysqlConnection.on_premise:type_name -> yandex.cloud.datatransfer.v1.endpoint.OnPremiseMysql
	6,  // 2: yandex.cloud.datatransfer.v1.endpoint.MysqlConnection.connection_manager_connection:type_name -> yandex.cloud.datatransfer.v1.endpoint.ConnectionManagerConnection
	7,  // 3: yandex.cloud.datatransfer.v1.endpoint.MysqlObjectTransferSettings.view:type_name -> yandex.cloud.datatransfer.v1.endpoint.ObjectTransferStage
	7,  // 4: yandex.cloud.datatransfer.v1.endpoint.MysqlObjectTransferSettings.routine:type_name -> yandex.cloud.datatransfer.v1.endpoint.ObjectTransferStage
	7,  // 5: yandex.cloud.datatransfer.v1.endpoint.MysqlObjectTransferSettings.trigger:type_name -> yandex.cloud.datatransfer.v1.endpoint.ObjectTransferStage
	7,  // 6: yandex.cloud.datatransfer.v1.endpoint.MysqlObjectTransferSettings.tables:type_name -> yandex.cloud.datatransfer.v1.endpoint.ObjectTransferStage
	1,  // 7: yandex.cloud.datatransfer.v1.endpoint.MysqlSource.connection:type_name -> yandex.cloud.datatransfer.v1.endpoint.MysqlConnection
	8,  // 8: yandex.cloud.datatransfer.v1.endpoint.MysqlSource.password:type_name -> yandex.cloud.datatransfer.v1.endpoint.Secret
	2,  // 9: yandex.cloud.datatransfer.v1.endpoint.MysqlSource.object_transfer_settings:type_name -> yandex.cloud.datatransfer.v1.endpoint.MysqlObjectTransferSettings
	1,  // 10: yandex.cloud.datatransfer.v1.endpoint.MysqlTarget.connection:type_name -> yandex.cloud.datatransfer.v1.endpoint.MysqlConnection
	8,  // 11: yandex.cloud.datatransfer.v1.endpoint.MysqlTarget.password:type_name -> yandex.cloud.datatransfer.v1.endpoint.Secret
	9,  // 12: yandex.cloud.datatransfer.v1.endpoint.MysqlTarget.cleanup_policy:type_name -> yandex.cloud.datatransfer.v1.endpoint.CleanupPolicy
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_init() }
func file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_init() {
	if File_yandex_cloud_datatransfer_v1_endpoint_mysql_proto != nil {
		return
	}
	file_yandex_cloud_datatransfer_v1_endpoint_common_proto_init()
	file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_msgTypes[1].OneofWrappers = []any{
		(*MysqlConnection_MdbClusterId)(nil),
		(*MysqlConnection_OnPremise)(nil),
		(*MysqlConnection_ConnectionManagerConnection)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_rawDesc), len(file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_msgTypes,
	}.Build()
	File_yandex_cloud_datatransfer_v1_endpoint_mysql_proto = out.File
	file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_goTypes = nil
	file_yandex_cloud_datatransfer_v1_endpoint_mysql_proto_depIdxs = nil
}

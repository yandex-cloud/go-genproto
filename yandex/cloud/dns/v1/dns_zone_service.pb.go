// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/dns/v1/dns_zone_service.proto

package dns

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateDnsZonePrivateNetworksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the DNS zone which private networks will be updated
	DnsZoneId string `protobuf:"bytes,1,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	// Network IDs to remove
	PrivateNetworkIdAdditions []string `protobuf:"bytes,2,rep,name=private_network_id_additions,json=privateNetworkIdAdditions,proto3" json:"private_network_id_additions,omitempty"`
	// Network IDs to add
	PrivateNetworkIdDeletions []string `protobuf:"bytes,3,rep,name=private_network_id_deletions,json=privateNetworkIdDeletions,proto3" json:"private_network_id_deletions,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *UpdateDnsZonePrivateNetworksRequest) Reset() {
	*x = UpdateDnsZonePrivateNetworksRequest{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDnsZonePrivateNetworksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDnsZonePrivateNetworksRequest) ProtoMessage() {}

func (x *UpdateDnsZonePrivateNetworksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDnsZonePrivateNetworksRequest.ProtoReflect.Descriptor instead.
func (*UpdateDnsZonePrivateNetworksRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateDnsZonePrivateNetworksRequest) GetDnsZoneId() string {
	if x != nil {
		return x.DnsZoneId
	}
	return ""
}

func (x *UpdateDnsZonePrivateNetworksRequest) GetPrivateNetworkIdAdditions() []string {
	if x != nil {
		return x.PrivateNetworkIdAdditions
	}
	return nil
}

func (x *UpdateDnsZonePrivateNetworksRequest) GetPrivateNetworkIdDeletions() []string {
	if x != nil {
		return x.PrivateNetworkIdDeletions
	}
	return nil
}

type UpdateDnsZonePrivateNetworksMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the DNS zone which private networks was updated
	DnsZoneId     string `protobuf:"bytes,1,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDnsZonePrivateNetworksMetadata) Reset() {
	*x = UpdateDnsZonePrivateNetworksMetadata{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDnsZonePrivateNetworksMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDnsZonePrivateNetworksMetadata) ProtoMessage() {}

func (x *UpdateDnsZonePrivateNetworksMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDnsZonePrivateNetworksMetadata.ProtoReflect.Descriptor instead.
func (*UpdateDnsZonePrivateNetworksMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateDnsZonePrivateNetworksMetadata) GetDnsZoneId() string {
	if x != nil {
		return x.DnsZoneId
	}
	return ""
}

type GetDnsZoneRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the DNS zone to return.
	//
	// To get a DNS zone ID, make a [DnsZoneService.List] request.
	DnsZoneId     string `protobuf:"bytes,1,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDnsZoneRequest) Reset() {
	*x = GetDnsZoneRequest{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDnsZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDnsZoneRequest) ProtoMessage() {}

func (x *GetDnsZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDnsZoneRequest.ProtoReflect.Descriptor instead.
func (*GetDnsZoneRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetDnsZoneRequest) GetDnsZoneId() string {
	if x != nil {
		return x.DnsZoneId
	}
	return ""
}

type ListDnsZonesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to list DNS zones in.
	//
	// To get the folder ID use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than `page_size`, the service returns a [ListDnsZonesResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set `page_token` to the
	// [ListDnsZonesResponse.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters DNS zones listed in the response.
	//
	// The expression must specify:
	// 1. The field name. Currently you can use filtering only on the [DnsZone.name] field.
	// 2. An `=` operator.
	// 3. The value in double quotes (`"`). Must be 3-63 characters long and match the regular expression `[a-z][-a-z0-9]{1,61}[a-z0-9]`.
	// Example of a filter: `name=my-dns-zone`.
	Filter        string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDnsZonesRequest) Reset() {
	*x = ListDnsZonesRequest{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDnsZonesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDnsZonesRequest) ProtoMessage() {}

func (x *ListDnsZonesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDnsZonesRequest.ProtoReflect.Descriptor instead.
func (*ListDnsZonesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListDnsZonesRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListDnsZonesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDnsZonesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDnsZonesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListDnsZonesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of DNS zones in the specified folder.
	DnsZones []*DnsZone `protobuf:"bytes,1,rep,name=dns_zones,json=dnsZones,proto3" json:"dns_zones,omitempty"`
	// Token for getting the next page of the list. If the number of results is greater than
	// the specified [ListDnsZonesRequest.page_size], use `next_page_token` as the value
	// for the [ListDnsZonesRequest.page_token] parameter in the next list request.
	//
	// Each subsequent page will have its own `next_page_token` to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDnsZonesResponse) Reset() {
	*x = ListDnsZonesResponse{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDnsZonesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDnsZonesResponse) ProtoMessage() {}

func (x *ListDnsZonesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDnsZonesResponse.ProtoReflect.Descriptor instead.
func (*ListDnsZonesResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListDnsZonesResponse) GetDnsZones() []*DnsZone {
	if x != nil {
		return x.DnsZones
	}
	return nil
}

func (x *ListDnsZonesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateDnsZoneRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to create DNS zones in.
	//
	// To get a folder ID, make a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the DNS zone.
	// The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the DNS zone.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// DNS zone labels as `key:value` pairs.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// DNS zone suffix.
	Zone string `protobuf:"bytes,5,opt,name=zone,proto3" json:"zone,omitempty"`
	// Privately visible zone settings.
	// At least one of two visibility fields must be set.
	PrivateVisibility *PrivateVisibility `protobuf:"bytes,6,opt,name=private_visibility,json=privateVisibility,proto3" json:"private_visibility,omitempty"`
	// Publicly visible zone settings.
	// At least one of two visibility fields must be set.
	PublicVisibility *PublicVisibility `protobuf:"bytes,7,opt,name=public_visibility,json=publicVisibility,proto3" json:"public_visibility,omitempty"`
	// Prevents accidental zone removal.
	DeletionProtection bool `protobuf:"varint,8,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CreateDnsZoneRequest) Reset() {
	*x = CreateDnsZoneRequest{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDnsZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDnsZoneRequest) ProtoMessage() {}

func (x *CreateDnsZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDnsZoneRequest.ProtoReflect.Descriptor instead.
func (*CreateDnsZoneRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateDnsZoneRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateDnsZoneRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDnsZoneRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateDnsZoneRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateDnsZoneRequest) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *CreateDnsZoneRequest) GetPrivateVisibility() *PrivateVisibility {
	if x != nil {
		return x.PrivateVisibility
	}
	return nil
}

func (x *CreateDnsZoneRequest) GetPublicVisibility() *PublicVisibility {
	if x != nil {
		return x.PublicVisibility
	}
	return nil
}

func (x *CreateDnsZoneRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

type CreateDnsZoneMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the DNS zone that is being created.
	DnsZoneId     string `protobuf:"bytes,1,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDnsZoneMetadata) Reset() {
	*x = CreateDnsZoneMetadata{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDnsZoneMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDnsZoneMetadata) ProtoMessage() {}

func (x *CreateDnsZoneMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDnsZoneMetadata.ProtoReflect.Descriptor instead.
func (*CreateDnsZoneMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{6}
}

func (x *CreateDnsZoneMetadata) GetDnsZoneId() string {
	if x != nil {
		return x.DnsZoneId
	}
	return ""
}

type UpdateDnsZoneRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the DNS zone to update.
	//
	// To get the DNS zone ID, make a [DnsZoneService.List] request.
	DnsZoneId string `protobuf:"bytes,1,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	// Field mask specifying which fields of the DNS zone resource are going to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// New name for the DNS zone.
	// The name must be unique within the folder.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// New description of the DNS zone.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// DNS zone labels as `key:value` pairs.
	//
	// Existing set of labels is completely replaced by the provided set, so if you just want
	// to add or remove a label:
	// 1. Get the current set of labels with a [DnsZoneService.Get] request.
	// 2. Add or remove a label in this set.
	// 3. Send the new set in this field.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Change network IDs for private visibility.
	PrivateVisibility *PrivateVisibility `protobuf:"bytes,6,opt,name=private_visibility,json=privateVisibility,proto3" json:"private_visibility,omitempty"`
	// Public visibility configuration.
	PublicVisibility *PublicVisibility `protobuf:"bytes,7,opt,name=public_visibility,json=publicVisibility,proto3" json:"public_visibility,omitempty"`
	// Prevents accidental zone removal.
	DeletionProtection bool `protobuf:"varint,8,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateDnsZoneRequest) Reset() {
	*x = UpdateDnsZoneRequest{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDnsZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDnsZoneRequest) ProtoMessage() {}

func (x *UpdateDnsZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDnsZoneRequest.ProtoReflect.Descriptor instead.
func (*UpdateDnsZoneRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateDnsZoneRequest) GetDnsZoneId() string {
	if x != nil {
		return x.DnsZoneId
	}
	return ""
}

func (x *UpdateDnsZoneRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateDnsZoneRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDnsZoneRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateDnsZoneRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateDnsZoneRequest) GetPrivateVisibility() *PrivateVisibility {
	if x != nil {
		return x.PrivateVisibility
	}
	return nil
}

func (x *UpdateDnsZoneRequest) GetPublicVisibility() *PublicVisibility {
	if x != nil {
		return x.PublicVisibility
	}
	return nil
}

func (x *UpdateDnsZoneRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

type UpdateDnsZoneMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the DNS zone that is being updated.
	DnsZoneId     string `protobuf:"bytes,1,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDnsZoneMetadata) Reset() {
	*x = UpdateDnsZoneMetadata{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDnsZoneMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDnsZoneMetadata) ProtoMessage() {}

func (x *UpdateDnsZoneMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDnsZoneMetadata.ProtoReflect.Descriptor instead.
func (*UpdateDnsZoneMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateDnsZoneMetadata) GetDnsZoneId() string {
	if x != nil {
		return x.DnsZoneId
	}
	return ""
}

type MoveDnsZoneRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the DNS zone to move.
	//
	// To get the DNS zone ID, make a [DnsZoneService.List] request.
	DnsZoneId string `protobuf:"bytes,1,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	// ID of the folder to move the zone to.
	//
	// To get the folder ID, make a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	DestinationFolderId string `protobuf:"bytes,2,opt,name=destination_folder_id,json=destinationFolderId,proto3" json:"destination_folder_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MoveDnsZoneRequest) Reset() {
	*x = MoveDnsZoneRequest{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveDnsZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveDnsZoneRequest) ProtoMessage() {}

func (x *MoveDnsZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveDnsZoneRequest.ProtoReflect.Descriptor instead.
func (*MoveDnsZoneRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{9}
}

func (x *MoveDnsZoneRequest) GetDnsZoneId() string {
	if x != nil {
		return x.DnsZoneId
	}
	return ""
}

func (x *MoveDnsZoneRequest) GetDestinationFolderId() string {
	if x != nil {
		return x.DestinationFolderId
	}
	return ""
}

type MoveDnsZoneMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the DNS zone that is being moved.
	DnsZoneId     string `protobuf:"bytes,1,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveDnsZoneMetadata) Reset() {
	*x = MoveDnsZoneMetadata{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveDnsZoneMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveDnsZoneMetadata) ProtoMessage() {}

func (x *MoveDnsZoneMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveDnsZoneMetadata.ProtoReflect.Descriptor instead.
func (*MoveDnsZoneMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{10}
}

func (x *MoveDnsZoneMetadata) GetDnsZoneId() string {
	if x != nil {
		return x.DnsZoneId
	}
	return ""
}

type DeleteDnsZoneRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the DNS zone to delete.
	//
	// To get a DNS zone ID, make a [DnsZoneService.List] request.
	DnsZoneId     string `protobuf:"bytes,1,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDnsZoneRequest) Reset() {
	*x = DeleteDnsZoneRequest{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDnsZoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDnsZoneRequest) ProtoMessage() {}

func (x *DeleteDnsZoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDnsZoneRequest.ProtoReflect.Descriptor instead.
func (*DeleteDnsZoneRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteDnsZoneRequest) GetDnsZoneId() string {
	if x != nil {
		return x.DnsZoneId
	}
	return ""
}

type DeleteDnsZoneMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the DNS zone that is being deleted.
	DnsZoneId     string `protobuf:"bytes,1,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDnsZoneMetadata) Reset() {
	*x = DeleteDnsZoneMetadata{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDnsZoneMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDnsZoneMetadata) ProtoMessage() {}

func (x *DeleteDnsZoneMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDnsZoneMetadata.ProtoReflect.Descriptor instead.
func (*DeleteDnsZoneMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteDnsZoneMetadata) GetDnsZoneId() string {
	if x != nil {
		return x.DnsZoneId
	}
	return ""
}

type GetDnsZoneRecordSetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the DNS zone to get record set from.
	//
	// To get a DNS zone ID, make a [DnsZoneService.List] request.
	DnsZoneId string `protobuf:"bytes,1,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	// Name of the record set.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Type of the record set.
	Type          string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDnsZoneRecordSetRequest) Reset() {
	*x = GetDnsZoneRecordSetRequest{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDnsZoneRecordSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDnsZoneRecordSetRequest) ProtoMessage() {}

func (x *GetDnsZoneRecordSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDnsZoneRecordSetRequest.ProtoReflect.Descriptor instead.
func (*GetDnsZoneRecordSetRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetDnsZoneRecordSetRequest) GetDnsZoneId() string {
	if x != nil {
		return x.DnsZoneId
	}
	return ""
}

func (x *GetDnsZoneRecordSetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDnsZoneRecordSetRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ListDnsZoneRecordSetsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the DNS zone to list record sets in.
	//
	// To get a DNS zone ID, make a [DnsZoneService.List] request.
	DnsZoneId string `protobuf:"bytes,1,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than `page_size`, the service returns a [ListDnsZoneRecordSetsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set `page_token` to the
	// [ListDnsZoneRecordSetsResponse.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters record sets listed in the response. The expression consists of one or more conditions united by `AND` operator: `<condition1> [AND <condition2> [<...> AND <conditionN>]]`.
	//
	// Each condition has the form `<field> <operator> <value>`, where:
	// 1. `<field>` is the field name. Currently you can use filtering only on the [RecordSet.name] and [RecordSet.type] fields.
	// 2. `<operator>` is a logical operator, one of `=`, `!=`, `IN`, `NOT IN`.
	// 3. `<value>` represents a value.
	// 3.1. In case of single value condition (`=` or `!=`), the value is a string in double (`"`) or single (`'`) quotes. C-style escape sequences are supported (`\"` turns to `"`, `\'` to `'`, `\\` to backslash).
	// 3.2. In case of a list of values condition (`IN` or `NOT IN`), the value is `(<string1>, <string2>, .., <stringN>)`, where `<string>` is a string in double (`"`) or single (`'`) quotes.
	//
	// Examples of a filter: `name="my-record-set"`, `type IN ("MX","A") AND name="works.on.my.machine."`.
	Filter        string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDnsZoneRecordSetsRequest) Reset() {
	*x = ListDnsZoneRecordSetsRequest{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDnsZoneRecordSetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDnsZoneRecordSetsRequest) ProtoMessage() {}

func (x *ListDnsZoneRecordSetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDnsZoneRecordSetsRequest.ProtoReflect.Descriptor instead.
func (*ListDnsZoneRecordSetsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListDnsZoneRecordSetsRequest) GetDnsZoneId() string {
	if x != nil {
		return x.DnsZoneId
	}
	return ""
}

func (x *ListDnsZoneRecordSetsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDnsZoneRecordSetsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDnsZoneRecordSetsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListDnsZoneRecordSetsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of record sets in the specified DNS zone.
	RecordSets []*RecordSet `protobuf:"bytes,1,rep,name=record_sets,json=recordSets,proto3" json:"record_sets,omitempty"`
	// Token for getting the next page of the list. If the number of results is greater than
	// the specified [ListDnsZoneRecordSetsRequest.page_size], use `next_page_token` as the value
	// for the [ListDnsZoneRecordSetsRequest.page_token] parameter in the next list request.
	//
	// Each subsequent page will have its own `next_page_token` to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDnsZoneRecordSetsResponse) Reset() {
	*x = ListDnsZoneRecordSetsResponse{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDnsZoneRecordSetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDnsZoneRecordSetsResponse) ProtoMessage() {}

func (x *ListDnsZoneRecordSetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDnsZoneRecordSetsResponse.ProtoReflect.Descriptor instead.
func (*ListDnsZoneRecordSetsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{15}
}

func (x *ListDnsZoneRecordSetsResponse) GetRecordSets() []*RecordSet {
	if x != nil {
		return x.RecordSets
	}
	return nil
}

func (x *ListDnsZoneRecordSetsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateRecordSetsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the DNS zone to update record sets in.
	//
	// To get a DNS zone ID, make a [DnsZoneService.List] request.
	DnsZoneId string `protobuf:"bytes,1,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	// List of record sets to delete.
	Deletions []*RecordSet `protobuf:"bytes,2,rep,name=deletions,proto3" json:"deletions,omitempty"`
	// List of record sets to add.
	Additions     []*RecordSet `protobuf:"bytes,3,rep,name=additions,proto3" json:"additions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRecordSetsRequest) Reset() {
	*x = UpdateRecordSetsRequest{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecordSetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecordSetsRequest) ProtoMessage() {}

func (x *UpdateRecordSetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecordSetsRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecordSetsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateRecordSetsRequest) GetDnsZoneId() string {
	if x != nil {
		return x.DnsZoneId
	}
	return ""
}

func (x *UpdateRecordSetsRequest) GetDeletions() []*RecordSet {
	if x != nil {
		return x.Deletions
	}
	return nil
}

func (x *UpdateRecordSetsRequest) GetAdditions() []*RecordSet {
	if x != nil {
		return x.Additions
	}
	return nil
}

type UpdateRecordSetsMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRecordSetsMetadata) Reset() {
	*x = UpdateRecordSetsMetadata{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecordSetsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecordSetsMetadata) ProtoMessage() {}

func (x *UpdateRecordSetsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecordSetsMetadata.ProtoReflect.Descriptor instead.
func (*UpdateRecordSetsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{17}
}

type UpsertRecordSetsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the DNS zone to upsert record sets to.
	//
	// To get a DNS zone ID, make a [DnsZoneService.List] request.
	DnsZoneId string `protobuf:"bytes,1,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	// Delete only specified records from corresponding record sets.
	Deletions []*RecordSet `protobuf:"bytes,2,rep,name=deletions,proto3" json:"deletions,omitempty"`
	// Entirely replace specified record sets.
	Replacements []*RecordSet `protobuf:"bytes,3,rep,name=replacements,proto3" json:"replacements,omitempty"`
	// Replace specified records or add new ones if no such record sets exists.
	Merges        []*RecordSet `protobuf:"bytes,4,rep,name=merges,proto3" json:"merges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertRecordSetsRequest) Reset() {
	*x = UpsertRecordSetsRequest{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertRecordSetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRecordSetsRequest) ProtoMessage() {}

func (x *UpsertRecordSetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRecordSetsRequest.ProtoReflect.Descriptor instead.
func (*UpsertRecordSetsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{18}
}

func (x *UpsertRecordSetsRequest) GetDnsZoneId() string {
	if x != nil {
		return x.DnsZoneId
	}
	return ""
}

func (x *UpsertRecordSetsRequest) GetDeletions() []*RecordSet {
	if x != nil {
		return x.Deletions
	}
	return nil
}

func (x *UpsertRecordSetsRequest) GetReplacements() []*RecordSet {
	if x != nil {
		return x.Replacements
	}
	return nil
}

func (x *UpsertRecordSetsRequest) GetMerges() []*RecordSet {
	if x != nil {
		return x.Merges
	}
	return nil
}

type UpsertRecordSetsMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertRecordSetsMetadata) Reset() {
	*x = UpsertRecordSetsMetadata{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertRecordSetsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertRecordSetsMetadata) ProtoMessage() {}

func (x *UpsertRecordSetsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertRecordSetsMetadata.ProtoReflect.Descriptor instead.
func (*UpsertRecordSetsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{19}
}

type RecordSetDiff struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of record sets that were added
	Additions []*RecordSet `protobuf:"bytes,1,rep,name=additions,proto3" json:"additions,omitempty"`
	// List of record sets that were deleted
	Deletions     []*RecordSet `protobuf:"bytes,2,rep,name=deletions,proto3" json:"deletions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordSetDiff) Reset() {
	*x = RecordSetDiff{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordSetDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordSetDiff) ProtoMessage() {}

func (x *RecordSetDiff) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordSetDiff.ProtoReflect.Descriptor instead.
func (*RecordSetDiff) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{20}
}

func (x *RecordSetDiff) GetAdditions() []*RecordSet {
	if x != nil {
		return x.Additions
	}
	return nil
}

func (x *RecordSetDiff) GetDeletions() []*RecordSet {
	if x != nil {
		return x.Deletions
	}
	return nil
}

type ListDnsZoneOperationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the DNS zone to list operations for.
	//
	// To get a DNS zone ID, make a [DnsZoneService.List] request.
	DnsZoneId string `protobuf:"bytes,1,opt,name=dns_zone_id,json=dnsZoneId,proto3" json:"dns_zone_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListDnsZoneOperationsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListDnsZoneOperationsResponse.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters DNS zones listed in the response.
	//
	// The expression must specify:
	// 1. The field name. Currently you can use filtering only on the [DnsZone.name] field.
	// 2. An `=` operator.
	// 3. The value in double quotes (`"`). Must be 3-63 characters long and match the regular expression `[a-z][-a-z0-9]{1,61}[a-z0-9]`.
	// Example of a filter: `name=my-dns-zone`.
	Filter        string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDnsZoneOperationsRequest) Reset() {
	*x = ListDnsZoneOperationsRequest{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDnsZoneOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDnsZoneOperationsRequest) ProtoMessage() {}

func (x *ListDnsZoneOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDnsZoneOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListDnsZoneOperationsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{21}
}

func (x *ListDnsZoneOperationsRequest) GetDnsZoneId() string {
	if x != nil {
		return x.DnsZoneId
	}
	return ""
}

func (x *ListDnsZoneOperationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDnsZoneOperationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDnsZoneOperationsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListDnsZoneOperationsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of operations for the specified DNS zone.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// Token for getting the next page of the list. If the number of results is greater than
	// the specified [ListDnsZoneOperationsRequest.page_size], use `next_page_token` as the value
	// for the [ListDnsZoneOperationsRequest.page_token] parameter in the next list request.
	//
	// Each subsequent page will have its own `next_page_token` to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDnsZoneOperationsResponse) Reset() {
	*x = ListDnsZoneOperationsResponse{}
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDnsZoneOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDnsZoneOperationsResponse) ProtoMessage() {}

func (x *ListDnsZoneOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDnsZoneOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListDnsZoneOperationsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP(), []int{22}
}

func (x *ListDnsZoneOperationsResponse) GetOperations() []*operation.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListDnsZoneOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_yandex_cloud_dns_v1_dns_zone_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDesc = "" +
	"\n" +
	"*yandex/cloud/dns/v1/dns_zone_service.proto\x12\x13yandex.cloud.dns.v1\x1a\x1cgoogle/api/annotations.proto\x1a google/protobuf/field_mask.proto\x1a yandex/cloud/access/access.proto\x1a yandex/cloud/api/operation.proto\x1a\"yandex/cloud/dns/v1/dns_zone.proto\x1a&yandex/cloud/operation/operation.proto\x1a\x1dyandex/cloud/validation.proto\"\xc7\x01\n" +
	"#UpdateDnsZonePrivateNetworksRequest\x12\x1e\n" +
	"\vdns_zone_id\x18\x01 \x01(\tR\tdnsZoneId\x12?\n" +
	"\x1cprivate_network_id_additions\x18\x02 \x03(\tR\x19privateNetworkIdAdditions\x12?\n" +
	"\x1cprivate_network_id_deletions\x18\x03 \x03(\tR\x19privateNetworkIdDeletions\"F\n" +
	"$UpdateDnsZonePrivateNetworksMetadata\x12\x1e\n" +
	"\vdns_zone_id\x18\x01 \x01(\tR\tdnsZoneId\"9\n" +
	"\x11GetDnsZoneRequest\x12$\n" +
	"\vdns_zone_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\tdnsZoneId\"\xb0\x01\n" +
	"\x13ListDnsZonesRequest\x12!\n" +
	"\tfolder_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\bfolderId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12)\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\tpageToken\x12\"\n" +
	"\x06filter\x18\x04 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"y\n" +
	"\x14ListDnsZonesResponse\x129\n" +
	"\tdns_zones\x18\x01 \x03(\v2\x1c.yandex.cloud.dns.v1.DnsZoneR\bdnsZones\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x94\x05\n" +
	"\x14CreateDnsZoneRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x128\n" +
	"\x04name\x18\x02 \x01(\tB$\xf2\xc71 |[a-z]([-a-z0-9]{0,61}[a-z0-9])?R\x04name\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x92\x01\n" +
	"\x06labels\x18\x04 \x03(\v25.yandex.cloud.dns.v1.CreateDnsZoneRequest.LabelsEntryBC\xf2\xc71\x0f[-_./\\@0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x1c\x12\x14[a-z][-_./\\@0-9a-z]*\x1a\x041-63R\x06labels\x12>\n" +
	"\x04zone\x18\x05 \x01(\tB*\xe8\xc71\x01\xf2\xc71\x19[.]|[a-z0-9][-a-z0-9.]*\\.\x8a\xc81\x05<=255R\x04zone\x12U\n" +
	"\x12private_visibility\x18\x06 \x01(\v2&.yandex.cloud.dns.v1.PrivateVisibilityR\x11privateVisibility\x12R\n" +
	"\x11public_visibility\x18\a \x01(\v2%.yandex.cloud.dns.v1.PublicVisibilityR\x10publicVisibility\x12/\n" +
	"\x13deletion_protection\x18\b \x01(\bR\x12deletionProtection\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"7\n" +
	"\x15CreateDnsZoneMetadata\x12\x1e\n" +
	"\vdns_zone_id\x18\x01 \x01(\tR\tdnsZoneId\"\x8e\x05\n" +
	"\x14UpdateDnsZoneRequest\x12&\n" +
	"\vdns_zone_id\x18\x01 \x01(\tB\x06\x8a\xc81\x0220R\tdnsZoneId\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x128\n" +
	"\x04name\x18\x03 \x01(\tB$\xf2\xc71 |[a-z]([-a-z0-9]{0,61}[a-z0-9])?R\x04name\x12+\n" +
	"\vdescription\x18\x04 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x92\x01\n" +
	"\x06labels\x18\x05 \x03(\v25.yandex.cloud.dns.v1.UpdateDnsZoneRequest.LabelsEntryBC\xf2\xc71\x0f[-_./\\@0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x1c\x12\x14[a-z][-_./\\@0-9a-z]*\x1a\x041-63R\x06labels\x12U\n" +
	"\x12private_visibility\x18\x06 \x01(\v2&.yandex.cloud.dns.v1.PrivateVisibilityR\x11privateVisibility\x12R\n" +
	"\x11public_visibility\x18\a \x01(\v2%.yandex.cloud.dns.v1.PublicVisibilityR\x10publicVisibility\x12/\n" +
	"\x13deletion_protection\x18\b \x01(\bR\x12deletionProtection\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"7\n" +
	"\x15UpdateDnsZoneMetadata\x12\x1e\n" +
	"\vdns_zone_id\x18\x01 \x01(\tR\tdnsZoneId\"\x82\x01\n" +
	"\x12MoveDnsZoneRequest\x12*\n" +
	"\vdns_zone_id\x18\x01 \x01(\tB\n" +
	"\xe8\xc71\x01\x8a\xc81\x0220R\tdnsZoneId\x12@\n" +
	"\x15destination_folder_id\x18\x02 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x13destinationFolderId\"5\n" +
	"\x13MoveDnsZoneMetadata\x12\x1e\n" +
	"\vdns_zone_id\x18\x01 \x01(\tR\tdnsZoneId\">\n" +
	"\x14DeleteDnsZoneRequest\x12&\n" +
	"\vdns_zone_id\x18\x01 \x01(\tB\x06\x8a\xc81\x0220R\tdnsZoneId\"7\n" +
	"\x15DeleteDnsZoneMetadata\x12\x1e\n" +
	"\vdns_zone_id\x18\x01 \x01(\tR\tdnsZoneId\"\x89\x01\n" +
	"\x1aGetDnsZoneRecordSetRequest\x12&\n" +
	"\vdns_zone_id\x18\x01 \x01(\tB\x06\x8a\xc81\x0220R\tdnsZoneId\x12!\n" +
	"\x04name\x18\x02 \x01(\tB\r\xe8\xc71\x01\x8a\xc81\x05<=255R\x04name\x12 \n" +
	"\x04type\x18\x03 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=10R\x04type\"\xbe\x01\n" +
	"\x1cListDnsZoneRecordSetsRequest\x12&\n" +
	"\vdns_zone_id\x18\x01 \x01(\tB\x06\x8a\xc81\x0220R\tdnsZoneId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12)\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\tpageToken\x12\"\n" +
	"\x06filter\x18\x04 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"\x88\x01\n" +
	"\x1dListDnsZoneRecordSetsResponse\x12?\n" +
	"\vrecord_sets\x18\x01 \x03(\v2\x1e.yandex.cloud.dns.v1.RecordSetR\n" +
	"recordSets\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xd5\x01\n" +
	"\x17UpdateRecordSetsRequest\x12&\n" +
	"\vdns_zone_id\x18\x01 \x01(\tB\x06\x8a\xc81\x0220R\tdnsZoneId\x12H\n" +
	"\tdeletions\x18\x02 \x03(\v2\x1e.yandex.cloud.dns.v1.RecordSetB\n" +
	"\x82\xc81\x06<=1000R\tdeletions\x12H\n" +
	"\tadditions\x18\x03 \x03(\v2\x1e.yandex.cloud.dns.v1.RecordSetB\n" +
	"\x82\xc81\x06<=1000R\tadditions\"\x1a\n" +
	"\x18UpdateRecordSetsMetadata\"\x9f\x02\n" +
	"\x17UpsertRecordSetsRequest\x12&\n" +
	"\vdns_zone_id\x18\x01 \x01(\tB\x06\x8a\xc81\x0220R\tdnsZoneId\x12H\n" +
	"\tdeletions\x18\x02 \x03(\v2\x1e.yandex.cloud.dns.v1.RecordSetB\n" +
	"\x82\xc81\x06<=1000R\tdeletions\x12N\n" +
	"\freplacements\x18\x03 \x03(\v2\x1e.yandex.cloud.dns.v1.RecordSetB\n" +
	"\x82\xc81\x06<=1000R\freplacements\x12B\n" +
	"\x06merges\x18\x04 \x03(\v2\x1e.yandex.cloud.dns.v1.RecordSetB\n" +
	"\x82\xc81\x06<=1000R\x06merges\"\x1a\n" +
	"\x18UpsertRecordSetsMetadata\"\x8b\x01\n" +
	"\rRecordSetDiff\x12<\n" +
	"\tadditions\x18\x01 \x03(\v2\x1e.yandex.cloud.dns.v1.RecordSetR\tadditions\x12<\n" +
	"\tdeletions\x18\x02 \x03(\v2\x1e.yandex.cloud.dns.v1.RecordSetR\tdeletions\"\xbe\x01\n" +
	"\x1cListDnsZoneOperationsRequest\x12&\n" +
	"\vdns_zone_id\x18\x01 \x01(\tB\x06\x8a\xc81\x0220R\tdnsZoneId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12)\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\tpageToken\x12\"\n" +
	"\x06filter\x18\x04 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"\x8a\x01\n" +
	"\x1dListDnsZoneOperationsResponse\x12A\n" +
	"\n" +
	"operations\x18\x01 \x03(\v2!.yandex.cloud.operation.OperationR\n" +
	"operations\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken2\xec\x14\n" +
	"\x0eDnsZoneService\x12p\n" +
	"\x03Get\x12&.yandex.cloud.dns.v1.GetDnsZoneRequest\x1a\x1c.yandex.cloud.dns.v1.DnsZone\"#\x82\xd3\xe4\x93\x02\x1d\x12\x1b/dns/v1/zones/{dns_zone_id}\x12r\n" +
	"\x04List\x12(.yandex.cloud.dns.v1.ListDnsZonesRequest\x1a).yandex.cloud.dns.v1.ListDnsZonesResponse\"\x15\x82\xd3\xe4\x93\x02\x0f\x12\r/dns/v1/zones\x12\x94\x01\n" +
	"\x06Create\x12).yandex.cloud.dns.v1.CreateDnsZoneRequest\x1a!.yandex.cloud.operation.Operation\"<\xb2\xd2* \n" +
	"\x15CreateDnsZoneMetadata\x12\aDnsZone\x82\xd3\xe4\x93\x02\x12:\x01*\"\r/dns/v1/zones\x12\xa2\x01\n" +
	"\x06Update\x12).yandex.cloud.dns.v1.UpdateDnsZoneRequest\x1a!.yandex.cloud.operation.Operation\"J\xb2\xd2* \n" +
	"\x15UpdateDnsZoneMetadata\x12\aDnsZone\x82\xd3\xe4\x93\x02 :\x01*2\x1b/dns/v1/zones/{dns_zone_id}\x12\xa1\x01\n" +
	"\x04Move\x12'.yandex.cloud.dns.v1.MoveDnsZoneRequest\x1a!.yandex.cloud.operation.Operation\"M\xb2\xd2*\x1e\n" +
	"\x13MoveDnsZoneMetadata\x12\aDnsZone\x82\xd3\xe4\x93\x02%:\x01*\" /dns/v1/zones/{dns_zone_id}:move\x12\xad\x01\n" +
	"\x06Delete\x12).yandex.cloud.dns.v1.DeleteDnsZoneRequest\x1a!.yandex.cloud.operation.Operation\"U\xb2\xd2*.\n" +
	"\x15DeleteDnsZoneMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02\x1d*\x1b/dns/v1/zones/{dns_zone_id}\x12\x91\x01\n" +
	"\fGetRecordSet\x12/.yandex.cloud.dns.v1.GetDnsZoneRecordSetRequest\x1a\x1e.yandex.cloud.dns.v1.RecordSet\"0\x82\xd3\xe4\x93\x02*\x12(/dns/v1/zones/{dns_zone_id}:getRecordSet\x12\xab\x01\n" +
	"\x0eListRecordSets\x121.yandex.cloud.dns.v1.ListDnsZoneRecordSetsRequest\x1a2.yandex.cloud.dns.v1.ListDnsZoneRecordSetsResponse\"2\x82\xd3\xe4\x93\x02,\x12*/dns/v1/zones/{dns_zone_id}:listRecordSets\x12\xc9\x01\n" +
	"\x10UpdateRecordSets\x12,.yandex.cloud.dns.v1.UpdateRecordSetsRequest\x1a!.yandex.cloud.operation.Operation\"d\xb2\xd2*)\n" +
	"\x18UpdateRecordSetsMetadata\x12\rRecordSetDiff\x82\xd3\xe4\x93\x021:\x01*\",/dns/v1/zones/{dns_zone_id}:updateRecordSets\x12\xc9\x01\n" +
	"\x10UpsertRecordSets\x12,.yandex.cloud.dns.v1.UpsertRecordSetsRequest\x1a!.yandex.cloud.operation.Operation\"d\xb2\xd2*)\n" +
	"\x18UpsertRecordSetsMetadata\x12\rRecordSetDiff\x82\xd3\xe4\x93\x021:\x01*\",/dns/v1/zones/{dns_zone_id}:upsertRecordSets\x12\xa7\x01\n" +
	"\x0eListOperations\x121.yandex.cloud.dns.v1.ListDnsZoneOperationsRequest\x1a2.yandex.cloud.dns.v1.ListDnsZoneOperationsResponse\".\x82\xd3\xe4\x93\x02(\x12&/dns/v1/zones/{dns_zone_id}/operations\x12\xad\x01\n" +
	"\x12ListAccessBindings\x12..yandex.cloud.access.ListAccessBindingsRequest\x1a/.yandex.cloud.access.ListAccessBindingsResponse\"6\x82\xd3\xe4\x93\x020\x12./dns/v1/zones/{resource_id}:listAccessBindings\x12\xdc\x01\n" +
	"\x11SetAccessBindings\x12-.yandex.cloud.access.SetAccessBindingsRequest\x1a!.yandex.cloud.operation.Operation\"u\xb2\xd2*9\n" +
	" access.SetAccessBindingsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x022:\x01*\"-/dns/v1/zones/{resource_id}:setAccessBindings\x12\xe8\x01\n" +
	"\x14UpdateAccessBindings\x120.yandex.cloud.access.UpdateAccessBindingsRequest\x1a!.yandex.cloud.operation.Operation\"{\xb2\xd2*<\n" +
	"#access.UpdateAccessBindingsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x025:\x01*\"0/dns/v1/zones/{resource_id}:updateAccessBindings\x12\xe5\x01\n" +
	"\x15UpdatePrivateNetworks\x128.yandex.cloud.dns.v1.UpdateDnsZonePrivateNetworksRequest\x1a!.yandex.cloud.operation.Operation\"o\xb2\xd2*/\n" +
	"$UpdateDnsZonePrivateNetworksMetadata\x12\aDnsZone\x82\xd3\xe4\x93\x026:\x01*21/dns/v1/zones/{dns_zone_id}:updatePrivateNetworksBV\n" +
	"\x17yandex.cloud.api.dns.v1Z;github.com/yandex-cloud/go-genproto/yandex/cloud/dns/v1;dnsb\x06proto3"

var (
	file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescData []byte
)

func file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDesc), len(file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDesc)))
	})
	return file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDescData
}

var file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_yandex_cloud_dns_v1_dns_zone_service_proto_goTypes = []any{
	(*UpdateDnsZonePrivateNetworksRequest)(nil),  // 0: yandex.cloud.dns.v1.UpdateDnsZonePrivateNetworksRequest
	(*UpdateDnsZonePrivateNetworksMetadata)(nil), // 1: yandex.cloud.dns.v1.UpdateDnsZonePrivateNetworksMetadata
	(*GetDnsZoneRequest)(nil),                    // 2: yandex.cloud.dns.v1.GetDnsZoneRequest
	(*ListDnsZonesRequest)(nil),                  // 3: yandex.cloud.dns.v1.ListDnsZonesRequest
	(*ListDnsZonesResponse)(nil),                 // 4: yandex.cloud.dns.v1.ListDnsZonesResponse
	(*CreateDnsZoneRequest)(nil),                 // 5: yandex.cloud.dns.v1.CreateDnsZoneRequest
	(*CreateDnsZoneMetadata)(nil),                // 6: yandex.cloud.dns.v1.CreateDnsZoneMetadata
	(*UpdateDnsZoneRequest)(nil),                 // 7: yandex.cloud.dns.v1.UpdateDnsZoneRequest
	(*UpdateDnsZoneMetadata)(nil),                // 8: yandex.cloud.dns.v1.UpdateDnsZoneMetadata
	(*MoveDnsZoneRequest)(nil),                   // 9: yandex.cloud.dns.v1.MoveDnsZoneRequest
	(*MoveDnsZoneMetadata)(nil),                  // 10: yandex.cloud.dns.v1.MoveDnsZoneMetadata
	(*DeleteDnsZoneRequest)(nil),                 // 11: yandex.cloud.dns.v1.DeleteDnsZoneRequest
	(*DeleteDnsZoneMetadata)(nil),                // 12: yandex.cloud.dns.v1.DeleteDnsZoneMetadata
	(*GetDnsZoneRecordSetRequest)(nil),           // 13: yandex.cloud.dns.v1.GetDnsZoneRecordSetRequest
	(*ListDnsZoneRecordSetsRequest)(nil),         // 14: yandex.cloud.dns.v1.ListDnsZoneRecordSetsRequest
	(*ListDnsZoneRecordSetsResponse)(nil),        // 15: yandex.cloud.dns.v1.ListDnsZoneRecordSetsResponse
	(*UpdateRecordSetsRequest)(nil),              // 16: yandex.cloud.dns.v1.UpdateRecordSetsRequest
	(*UpdateRecordSetsMetadata)(nil),             // 17: yandex.cloud.dns.v1.UpdateRecordSetsMetadata
	(*UpsertRecordSetsRequest)(nil),              // 18: yandex.cloud.dns.v1.UpsertRecordSetsRequest
	(*UpsertRecordSetsMetadata)(nil),             // 19: yandex.cloud.dns.v1.UpsertRecordSetsMetadata
	(*RecordSetDiff)(nil),                        // 20: yandex.cloud.dns.v1.RecordSetDiff
	(*ListDnsZoneOperationsRequest)(nil),         // 21: yandex.cloud.dns.v1.ListDnsZoneOperationsRequest
	(*ListDnsZoneOperationsResponse)(nil),        // 22: yandex.cloud.dns.v1.ListDnsZoneOperationsResponse
	nil,                                          // 23: yandex.cloud.dns.v1.CreateDnsZoneRequest.LabelsEntry
	nil,                                          // 24: yandex.cloud.dns.v1.UpdateDnsZoneRequest.LabelsEntry
	(*DnsZone)(nil),                              // 25: yandex.cloud.dns.v1.DnsZone
	(*PrivateVisibility)(nil),                    // 26: yandex.cloud.dns.v1.PrivateVisibility
	(*PublicVisibility)(nil),                     // 27: yandex.cloud.dns.v1.PublicVisibility
	(*fieldmaskpb.FieldMask)(nil),                // 28: google.protobuf.FieldMask
	(*RecordSet)(nil),                            // 29: yandex.cloud.dns.v1.RecordSet
	(*operation.Operation)(nil),                  // 30: yandex.cloud.operation.Operation
	(*access.ListAccessBindingsRequest)(nil),     // 31: yandex.cloud.access.ListAccessBindingsRequest
	(*access.SetAccessBindingsRequest)(nil),      // 32: yandex.cloud.access.SetAccessBindingsRequest
	(*access.UpdateAccessBindingsRequest)(nil),   // 33: yandex.cloud.access.UpdateAccessBindingsRequest
	(*access.ListAccessBindingsResponse)(nil),    // 34: yandex.cloud.access.ListAccessBindingsResponse
}
var file_yandex_cloud_dns_v1_dns_zone_service_proto_depIdxs = []int32{
	25, // 0: yandex.cloud.dns.v1.ListDnsZonesResponse.dns_zones:type_name -> yandex.cloud.dns.v1.DnsZone
	23, // 1: yandex.cloud.dns.v1.CreateDnsZoneRequest.labels:type_name -> yandex.cloud.dns.v1.CreateDnsZoneRequest.LabelsEntry
	26, // 2: yandex.cloud.dns.v1.CreateDnsZoneRequest.private_visibility:type_name -> yandex.cloud.dns.v1.PrivateVisibility
	27, // 3: yandex.cloud.dns.v1.CreateDnsZoneRequest.public_visibility:type_name -> yandex.cloud.dns.v1.PublicVisibility
	28, // 4: yandex.cloud.dns.v1.UpdateDnsZoneRequest.update_mask:type_name -> google.protobuf.FieldMask
	24, // 5: yandex.cloud.dns.v1.UpdateDnsZoneRequest.labels:type_name -> yandex.cloud.dns.v1.UpdateDnsZoneRequest.LabelsEntry
	26, // 6: yandex.cloud.dns.v1.UpdateDnsZoneRequest.private_visibility:type_name -> yandex.cloud.dns.v1.PrivateVisibility
	27, // 7: yandex.cloud.dns.v1.UpdateDnsZoneRequest.public_visibility:type_name -> yandex.cloud.dns.v1.PublicVisibility
	29, // 8: yandex.cloud.dns.v1.ListDnsZoneRecordSetsResponse.record_sets:type_name -> yandex.cloud.dns.v1.RecordSet
	29, // 9: yandex.cloud.dns.v1.UpdateRecordSetsRequest.deletions:type_name -> yandex.cloud.dns.v1.RecordSet
	29, // 10: yandex.cloud.dns.v1.UpdateRecordSetsRequest.additions:type_name -> yandex.cloud.dns.v1.RecordSet
	29, // 11: yandex.cloud.dns.v1.UpsertRecordSetsRequest.deletions:type_name -> yandex.cloud.dns.v1.RecordSet
	29, // 12: yandex.cloud.dns.v1.UpsertRecordSetsRequest.replacements:type_name -> yandex.cloud.dns.v1.RecordSet
	29, // 13: yandex.cloud.dns.v1.UpsertRecordSetsRequest.merges:type_name -> yandex.cloud.dns.v1.RecordSet
	29, // 14: yandex.cloud.dns.v1.RecordSetDiff.additions:type_name -> yandex.cloud.dns.v1.RecordSet
	29, // 15: yandex.cloud.dns.v1.RecordSetDiff.deletions:type_name -> yandex.cloud.dns.v1.RecordSet
	30, // 16: yandex.cloud.dns.v1.ListDnsZoneOperationsResponse.operations:type_name -> yandex.cloud.operation.Operation
	2,  // 17: yandex.cloud.dns.v1.DnsZoneService.Get:input_type -> yandex.cloud.dns.v1.GetDnsZoneRequest
	3,  // 18: yandex.cloud.dns.v1.DnsZoneService.List:input_type -> yandex.cloud.dns.v1.ListDnsZonesRequest
	5,  // 19: yandex.cloud.dns.v1.DnsZoneService.Create:input_type -> yandex.cloud.dns.v1.CreateDnsZoneRequest
	7,  // 20: yandex.cloud.dns.v1.DnsZoneService.Update:input_type -> yandex.cloud.dns.v1.UpdateDnsZoneRequest
	9,  // 21: yandex.cloud.dns.v1.DnsZoneService.Move:input_type -> yandex.cloud.dns.v1.MoveDnsZoneRequest
	11, // 22: yandex.cloud.dns.v1.DnsZoneService.Delete:input_type -> yandex.cloud.dns.v1.DeleteDnsZoneRequest
	13, // 23: yandex.cloud.dns.v1.DnsZoneService.GetRecordSet:input_type -> yandex.cloud.dns.v1.GetDnsZoneRecordSetRequest
	14, // 24: yandex.cloud.dns.v1.DnsZoneService.ListRecordSets:input_type -> yandex.cloud.dns.v1.ListDnsZoneRecordSetsRequest
	16, // 25: yandex.cloud.dns.v1.DnsZoneService.UpdateRecordSets:input_type -> yandex.cloud.dns.v1.UpdateRecordSetsRequest
	18, // 26: yandex.cloud.dns.v1.DnsZoneService.UpsertRecordSets:input_type -> yandex.cloud.dns.v1.UpsertRecordSetsRequest
	21, // 27: yandex.cloud.dns.v1.DnsZoneService.ListOperations:input_type -> yandex.cloud.dns.v1.ListDnsZoneOperationsRequest
	31, // 28: yandex.cloud.dns.v1.DnsZoneService.ListAccessBindings:input_type -> yandex.cloud.access.ListAccessBindingsRequest
	32, // 29: yandex.cloud.dns.v1.DnsZoneService.SetAccessBindings:input_type -> yandex.cloud.access.SetAccessBindingsRequest
	33, // 30: yandex.cloud.dns.v1.DnsZoneService.UpdateAccessBindings:input_type -> yandex.cloud.access.UpdateAccessBindingsRequest
	0,  // 31: yandex.cloud.dns.v1.DnsZoneService.UpdatePrivateNetworks:input_type -> yandex.cloud.dns.v1.UpdateDnsZonePrivateNetworksRequest
	25, // 32: yandex.cloud.dns.v1.DnsZoneService.Get:output_type -> yandex.cloud.dns.v1.DnsZone
	4,  // 33: yandex.cloud.dns.v1.DnsZoneService.List:output_type -> yandex.cloud.dns.v1.ListDnsZonesResponse
	30, // 34: yandex.cloud.dns.v1.DnsZoneService.Create:output_type -> yandex.cloud.operation.Operation
	30, // 35: yandex.cloud.dns.v1.DnsZoneService.Update:output_type -> yandex.cloud.operation.Operation
	30, // 36: yandex.cloud.dns.v1.DnsZoneService.Move:output_type -> yandex.cloud.operation.Operation
	30, // 37: yandex.cloud.dns.v1.DnsZoneService.Delete:output_type -> yandex.cloud.operation.Operation
	29, // 38: yandex.cloud.dns.v1.DnsZoneService.GetRecordSet:output_type -> yandex.cloud.dns.v1.RecordSet
	15, // 39: yandex.cloud.dns.v1.DnsZoneService.ListRecordSets:output_type -> yandex.cloud.dns.v1.ListDnsZoneRecordSetsResponse
	30, // 40: yandex.cloud.dns.v1.DnsZoneService.UpdateRecordSets:output_type -> yandex.cloud.operation.Operation
	30, // 41: yandex.cloud.dns.v1.DnsZoneService.UpsertRecordSets:output_type -> yandex.cloud.operation.Operation
	22, // 42: yandex.cloud.dns.v1.DnsZoneService.ListOperations:output_type -> yandex.cloud.dns.v1.ListDnsZoneOperationsResponse
	34, // 43: yandex.cloud.dns.v1.DnsZoneService.ListAccessBindings:output_type -> yandex.cloud.access.ListAccessBindingsResponse
	30, // 44: yandex.cloud.dns.v1.DnsZoneService.SetAccessBindings:output_type -> yandex.cloud.operation.Operation
	30, // 45: yandex.cloud.dns.v1.DnsZoneService.UpdateAccessBindings:output_type -> yandex.cloud.operation.Operation
	30, // 46: yandex.cloud.dns.v1.DnsZoneService.UpdatePrivateNetworks:output_type -> yandex.cloud.operation.Operation
	32, // [32:47] is the sub-list for method output_type
	17, // [17:32] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_yandex_cloud_dns_v1_dns_zone_service_proto_init() }
func file_yandex_cloud_dns_v1_dns_zone_service_proto_init() {
	if File_yandex_cloud_dns_v1_dns_zone_service_proto != nil {
		return
	}
	file_yandex_cloud_dns_v1_dns_zone_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDesc), len(file_yandex_cloud_dns_v1_dns_zone_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_dns_v1_dns_zone_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_dns_v1_dns_zone_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_dns_v1_dns_zone_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_dns_v1_dns_zone_service_proto = out.File
	file_yandex_cloud_dns_v1_dns_zone_service_proto_goTypes = nil
	file_yandex_cloud_dns_v1_dns_zone_service_proto_depIdxs = nil
}

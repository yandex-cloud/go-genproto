// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/gitlab/v1/instance_service.proto

package gitlab

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for InstanceService.Get
type GetInstanceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the GitLab instance to return
	InstanceId    string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInstanceRequest) Reset() {
	*x = GetInstanceRequest{}
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstanceRequest) ProtoMessage() {}

func (x *GetInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstanceRequest.ProtoReflect.Descriptor instead.
func (*GetInstanceRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_gitlab_v1_instance_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetInstanceRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

// Request message for InstanceService.List.
type ListInstancesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to list instances in.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListInstancesRequest.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the [ListInstancesRequest.next_page_token]
	// returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListInstancesRequest) Reset() {
	*x = ListInstancesRequest{}
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesRequest) ProtoMessage() {}

func (x *ListInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesRequest.ProtoReflect.Descriptor instead.
func (*ListInstancesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_gitlab_v1_instance_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListInstancesRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListInstancesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListInstancesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// Response message for InstanceService.List.
type ListInstancesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of GitLab instances.
	Instances []*Instance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListInstancesRequest.page_size], use the [next_page_token] as the value
	// for the [ListInstancesRequest.page_token] parameter in the next list request. Each subsequent
	// list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListInstancesResponse) Reset() {
	*x = ListInstancesResponse{}
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse) ProtoMessage() {}

func (x *ListInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_gitlab_v1_instance_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListInstancesResponse) GetInstances() []*Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *ListInstancesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request message for InstanceService.Create.
type CreateInstanceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to create instance in.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the instance (must be unique within the folder).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the instance.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the instance as “ key:value “ pairs. For example, "env": "prod".
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// ID of the resource preset for computational resources.
	ResourcePresetId string `protobuf:"bytes,5,opt,name=resource_preset_id,json=resourcePresetId,proto3" json:"resource_preset_id,omitempty"`
	// Disk size in bytes.
	DiskSize int64 `protobuf:"varint,6,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	// Admin user login.
	AdminLogin string `protobuf:"bytes,7,opt,name=admin_login,json=adminLogin,proto3" json:"admin_login,omitempty"`
	// Admin user email.
	AdminEmail string `protobuf:"bytes,8,opt,name=admin_email,json=adminEmail,proto3" json:"admin_email,omitempty"`
	// Domain prefix for the GitLab instance.
	DomainPrefix string `protobuf:"bytes,9,opt,name=domain_prefix,json=domainPrefix,proto3" json:"domain_prefix,omitempty"`
	// ID of the subnet where instance will be created.
	SubnetId string `protobuf:"bytes,10,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// Number of days to retain backups.
	BackupRetainPeriodDays int64 `protobuf:"varint,12,opt,name=backup_retain_period_days,json=backupRetainPeriodDays,proto3" json:"backup_retain_period_days,omitempty"`
	// Whether to delete untagged resources during maintenance.
	MaintenanceDeleteUntagged bool `protobuf:"varint,14,opt,name=maintenance_delete_untagged,json=maintenanceDeleteUntagged,proto3" json:"maintenance_delete_untagged,omitempty"`
	// Whether deletion protection is enabled.
	DeletionProtection bool `protobuf:"varint,15,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// ID of approval rules for the instance.
	ApprovalRulesId string `protobuf:"bytes,19,opt,name=approval_rules_id,json=approvalRulesId,proto3" json:"approval_rules_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateInstanceRequest) Reset() {
	*x = CreateInstanceRequest{}
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstanceRequest) ProtoMessage() {}

func (x *CreateInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstanceRequest.ProtoReflect.Descriptor instead.
func (*CreateInstanceRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_gitlab_v1_instance_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateInstanceRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateInstanceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateInstanceRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateInstanceRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateInstanceRequest) GetResourcePresetId() string {
	if x != nil {
		return x.ResourcePresetId
	}
	return ""
}

func (x *CreateInstanceRequest) GetDiskSize() int64 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

func (x *CreateInstanceRequest) GetAdminLogin() string {
	if x != nil {
		return x.AdminLogin
	}
	return ""
}

func (x *CreateInstanceRequest) GetAdminEmail() string {
	if x != nil {
		return x.AdminEmail
	}
	return ""
}

func (x *CreateInstanceRequest) GetDomainPrefix() string {
	if x != nil {
		return x.DomainPrefix
	}
	return ""
}

func (x *CreateInstanceRequest) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *CreateInstanceRequest) GetBackupRetainPeriodDays() int64 {
	if x != nil {
		return x.BackupRetainPeriodDays
	}
	return 0
}

func (x *CreateInstanceRequest) GetMaintenanceDeleteUntagged() bool {
	if x != nil {
		return x.MaintenanceDeleteUntagged
	}
	return false
}

func (x *CreateInstanceRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *CreateInstanceRequest) GetApprovalRulesId() string {
	if x != nil {
		return x.ApprovalRulesId
	}
	return ""
}

// Metadata message for InstanceService.Create.
type CreateInstanceMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the GitLab instance being created.
	InstanceId    string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateInstanceMetadata) Reset() {
	*x = CreateInstanceMetadata{}
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateInstanceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstanceMetadata) ProtoMessage() {}

func (x *CreateInstanceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstanceMetadata.ProtoReflect.Descriptor instead.
func (*CreateInstanceMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_gitlab_v1_instance_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateInstanceMetadata) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

// Request message for InstanceService.Delete.
type DeleteInstanceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the GitLab instance to delete.
	InstanceId    string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteInstanceRequest) Reset() {
	*x = DeleteInstanceRequest{}
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceRequest) ProtoMessage() {}

func (x *DeleteInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceRequest.ProtoReflect.Descriptor instead.
func (*DeleteInstanceRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_gitlab_v1_instance_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteInstanceRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

// Metadata message for InstanceService.Delete.
type DeleteInstanceMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the GitLab instance being deleted.
	InstanceId    string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteInstanceMetadata) Reset() {
	*x = DeleteInstanceMetadata{}
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteInstanceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceMetadata) ProtoMessage() {}

func (x *DeleteInstanceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceMetadata.ProtoReflect.Descriptor instead.
func (*DeleteInstanceMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_gitlab_v1_instance_service_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteInstanceMetadata) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

// Request message for InstanceService.Start.
type StartInstanceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the GitLab instance to start.
	InstanceId    string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartInstanceRequest) Reset() {
	*x = StartInstanceRequest{}
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartInstanceRequest) ProtoMessage() {}

func (x *StartInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartInstanceRequest.ProtoReflect.Descriptor instead.
func (*StartInstanceRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_gitlab_v1_instance_service_proto_rawDescGZIP(), []int{7}
}

func (x *StartInstanceRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

// Metadata message for InstanceService.Start.
type StartInstanceMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the GitLab instance being started.
	InstanceId    string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartInstanceMetadata) Reset() {
	*x = StartInstanceMetadata{}
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartInstanceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartInstanceMetadata) ProtoMessage() {}

func (x *StartInstanceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartInstanceMetadata.ProtoReflect.Descriptor instead.
func (*StartInstanceMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_gitlab_v1_instance_service_proto_rawDescGZIP(), []int{8}
}

func (x *StartInstanceMetadata) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

// Request message for InstanceService.Stop.
type StopInstanceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstanceId    string                 `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopInstanceRequest) Reset() {
	*x = StopInstanceRequest{}
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopInstanceRequest) ProtoMessage() {}

func (x *StopInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopInstanceRequest.ProtoReflect.Descriptor instead.
func (*StopInstanceRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_gitlab_v1_instance_service_proto_rawDescGZIP(), []int{9}
}

func (x *StopInstanceRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

// Metadata message for InstanceService.Stop.
type StopInstanceMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the GitLab instance being stoped.
	InstanceId    string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopInstanceMetadata) Reset() {
	*x = StopInstanceMetadata{}
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopInstanceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopInstanceMetadata) ProtoMessage() {}

func (x *StopInstanceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopInstanceMetadata.ProtoReflect.Descriptor instead.
func (*StopInstanceMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_gitlab_v1_instance_service_proto_rawDescGZIP(), []int{10}
}

func (x *StopInstanceMetadata) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

var File_yandex_cloud_gitlab_v1_instance_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_gitlab_v1_instance_service_proto_rawDesc = "" +
	"\n" +
	"-yandex/cloud/gitlab/v1/instance_service.proto\x12\x16yandex.cloud.gitlab.v1\x1a\x1cgoogle/api/annotations.proto\x1a yandex/cloud/api/operation.proto\x1a&yandex/cloud/operation/operation.proto\x1a\x1dyandex/cloud/validation.proto\x1a%yandex/cloud/gitlab/v1/instance.proto\"C\n" +
	"\x12GetInstanceRequest\x12-\n" +
	"\vinstance_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\n" +
	"instanceId\"\x94\x01\n" +
	"\x14ListInstancesRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x7f\n" +
	"\x15ListInstancesResponse\x12>\n" +
	"\tinstances\x18\x01 \x03(\v2 .yandex.cloud.gitlab.v1.InstanceR\tinstances\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xa4\a\n" +
	"\x15CreateInstanceRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x129\n" +
	"\x04name\x18\x02 \x01(\tB%\xe8\xc71\x01\xf2\xc71\x1d|[a-z][-a-z0-9]{1,61}[a-z0-9]R\x04name\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x8e\x01\n" +
	"\x06labels\x18\x04 \x03(\v29.yandex.cloud.gitlab.v1.CreateInstanceRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x041-63R\x06labels\x12:\n" +
	"\x12resource_preset_id\x18\x05 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x10resourcePresetId\x12\x1b\n" +
	"\tdisk_size\x18\x06 \x01(\x03R\bdiskSize\x12-\n" +
	"\vadmin_login\x18\a \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\n" +
	"adminLogin\x12%\n" +
	"\vadmin_email\x18\b \x01(\tB\x04\xe8\xc71\x01R\n" +
	"adminEmail\x12T\n" +
	"\rdomain_prefix\x18\t \x01(\tB/\xe8\xc71\x01\xf2\xc71\x1f[a-z0-9][a-z0-9-]{3,48}[a-z0-9]\x8a\xc81\x04<=50R\fdomainPrefix\x12)\n" +
	"\tsubnet_id\x18\n" +
	" \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bsubnetId\x12?\n" +
	"\x19backup_retain_period_days\x18\f \x01(\x03B\x04\xe8\xc71\x00R\x16backupRetainPeriodDays\x12>\n" +
	"\x1bmaintenance_delete_untagged\x18\x0e \x01(\bR\x19maintenanceDeleteUntagged\x12/\n" +
	"\x13deletion_protection\x18\x0f \x01(\bR\x12deletionProtection\x128\n" +
	"\x11approval_rules_id\x18\x13 \x01(\tB\f\xe8\xc71\x00\x8a\xc81\x04<=30R\x0fapprovalRulesId\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01J\x04\b\v\x10\fJ\x04\b\r\x10\x0eJ\x04\b\x10\x10\x13\"9\n" +
	"\x16CreateInstanceMetadata\x12\x1f\n" +
	"\vinstance_id\x18\x01 \x01(\tR\n" +
	"instanceId\"8\n" +
	"\x15DeleteInstanceRequest\x12\x1f\n" +
	"\vinstance_id\x18\x01 \x01(\tR\n" +
	"instanceId\"9\n" +
	"\x16DeleteInstanceMetadata\x12\x1f\n" +
	"\vinstance_id\x18\x01 \x01(\tR\n" +
	"instanceId\"7\n" +
	"\x14StartInstanceRequest\x12\x1f\n" +
	"\vinstance_id\x18\x01 \x01(\tR\n" +
	"instanceId\"8\n" +
	"\x15StartInstanceMetadata\x12\x1f\n" +
	"\vinstance_id\x18\x01 \x01(\tR\n" +
	"instanceId\"6\n" +
	"\x13StopInstanceRequest\x12\x1f\n" +
	"\vinstance_id\x18\x01 \x01(\tR\n" +
	"instanceId\"7\n" +
	"\x14StopInstanceMetadata\x12\x1f\n" +
	"\vinstance_id\x18\x01 \x01(\tR\n" +
	"instanceId2\xd6\a\n" +
	"\x0fInstanceService\x12\x7f\n" +
	"\x03Get\x12*.yandex.cloud.gitlab.v1.GetInstanceRequest\x1a .yandex.cloud.gitlab.v1.Instance\"*\x82\xd3\xe4\x93\x02$\x12\"/gitlab/v1/instances/{instance_id}\x12\x81\x01\n" +
	"\x04List\x12,.yandex.cloud.gitlab.v1.ListInstancesRequest\x1a-.yandex.cloud.gitlab.v1.ListInstancesResponse\"\x1c\x82\xd3\xe4\x93\x02\x16\x12\x14/gitlab/v1/instances\x12\xa1\x01\n" +
	"\x06Create\x12-.yandex.cloud.gitlab.v1.CreateInstanceRequest\x1a!.yandex.cloud.operation.Operation\"E\xb2\xd2*\"\n" +
	"\x16CreateInstanceMetadata\x12\bInstance\x82\xd3\xe4\x93\x02\x19:\x01*\"\x14/gitlab/v1/instances\x12\xb9\x01\n" +
	"\x06Delete\x12-.yandex.cloud.gitlab.v1.DeleteInstanceRequest\x1a!.yandex.cloud.operation.Operation\"]\xb2\xd2*/\n" +
	"\x16DeleteInstanceMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02$*\"/gitlab/v1/instances/{instance_id}\x12\xaf\x01\n" +
	"\x05Start\x12,.yandex.cloud.gitlab.v1.StartInstanceRequest\x1a!.yandex.cloud.operation.Operation\"U\xb2\xd2*!\n" +
	"\x15StartInstanceMetadata\x12\bInstance\x82\xd3\xe4\x93\x02*\"(/gitlab/v1/instances/{instance_id}:start\x12\xab\x01\n" +
	"\x04Stop\x12+.yandex.cloud.gitlab.v1.StopInstanceRequest\x1a!.yandex.cloud.operation.Operation\"S\xb2\xd2* \n" +
	"\x14StopInstanceMetadata\x12\bInstance\x82\xd3\xe4\x93\x02)\"'/gitlab/v1/instances/{instance_id}:stopBd\n" +
	"\x1ayandex.cloud.api.gitlab.v1B\x03GISZAgithub.com/yandex-cloud/go-genproto/yandex/cloud/gitlab/v1;gitlabb\x06proto3"

var (
	file_yandex_cloud_gitlab_v1_instance_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_gitlab_v1_instance_service_proto_rawDescData []byte
)

func file_yandex_cloud_gitlab_v1_instance_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_gitlab_v1_instance_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_gitlab_v1_instance_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_gitlab_v1_instance_service_proto_rawDesc), len(file_yandex_cloud_gitlab_v1_instance_service_proto_rawDesc)))
	})
	return file_yandex_cloud_gitlab_v1_instance_service_proto_rawDescData
}

var file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_yandex_cloud_gitlab_v1_instance_service_proto_goTypes = []any{
	(*GetInstanceRequest)(nil),     // 0: yandex.cloud.gitlab.v1.GetInstanceRequest
	(*ListInstancesRequest)(nil),   // 1: yandex.cloud.gitlab.v1.ListInstancesRequest
	(*ListInstancesResponse)(nil),  // 2: yandex.cloud.gitlab.v1.ListInstancesResponse
	(*CreateInstanceRequest)(nil),  // 3: yandex.cloud.gitlab.v1.CreateInstanceRequest
	(*CreateInstanceMetadata)(nil), // 4: yandex.cloud.gitlab.v1.CreateInstanceMetadata
	(*DeleteInstanceRequest)(nil),  // 5: yandex.cloud.gitlab.v1.DeleteInstanceRequest
	(*DeleteInstanceMetadata)(nil), // 6: yandex.cloud.gitlab.v1.DeleteInstanceMetadata
	(*StartInstanceRequest)(nil),   // 7: yandex.cloud.gitlab.v1.StartInstanceRequest
	(*StartInstanceMetadata)(nil),  // 8: yandex.cloud.gitlab.v1.StartInstanceMetadata
	(*StopInstanceRequest)(nil),    // 9: yandex.cloud.gitlab.v1.StopInstanceRequest
	(*StopInstanceMetadata)(nil),   // 10: yandex.cloud.gitlab.v1.StopInstanceMetadata
	nil,                            // 11: yandex.cloud.gitlab.v1.CreateInstanceRequest.LabelsEntry
	(*Instance)(nil),               // 12: yandex.cloud.gitlab.v1.Instance
	(*operation.Operation)(nil),    // 13: yandex.cloud.operation.Operation
}
var file_yandex_cloud_gitlab_v1_instance_service_proto_depIdxs = []int32{
	12, // 0: yandex.cloud.gitlab.v1.ListInstancesResponse.instances:type_name -> yandex.cloud.gitlab.v1.Instance
	11, // 1: yandex.cloud.gitlab.v1.CreateInstanceRequest.labels:type_name -> yandex.cloud.gitlab.v1.CreateInstanceRequest.LabelsEntry
	0,  // 2: yandex.cloud.gitlab.v1.InstanceService.Get:input_type -> yandex.cloud.gitlab.v1.GetInstanceRequest
	1,  // 3: yandex.cloud.gitlab.v1.InstanceService.List:input_type -> yandex.cloud.gitlab.v1.ListInstancesRequest
	3,  // 4: yandex.cloud.gitlab.v1.InstanceService.Create:input_type -> yandex.cloud.gitlab.v1.CreateInstanceRequest
	5,  // 5: yandex.cloud.gitlab.v1.InstanceService.Delete:input_type -> yandex.cloud.gitlab.v1.DeleteInstanceRequest
	7,  // 6: yandex.cloud.gitlab.v1.InstanceService.Start:input_type -> yandex.cloud.gitlab.v1.StartInstanceRequest
	9,  // 7: yandex.cloud.gitlab.v1.InstanceService.Stop:input_type -> yandex.cloud.gitlab.v1.StopInstanceRequest
	12, // 8: yandex.cloud.gitlab.v1.InstanceService.Get:output_type -> yandex.cloud.gitlab.v1.Instance
	2,  // 9: yandex.cloud.gitlab.v1.InstanceService.List:output_type -> yandex.cloud.gitlab.v1.ListInstancesResponse
	13, // 10: yandex.cloud.gitlab.v1.InstanceService.Create:output_type -> yandex.cloud.operation.Operation
	13, // 11: yandex.cloud.gitlab.v1.InstanceService.Delete:output_type -> yandex.cloud.operation.Operation
	13, // 12: yandex.cloud.gitlab.v1.InstanceService.Start:output_type -> yandex.cloud.operation.Operation
	13, // 13: yandex.cloud.gitlab.v1.InstanceService.Stop:output_type -> yandex.cloud.operation.Operation
	8,  // [8:14] is the sub-list for method output_type
	2,  // [2:8] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_yandex_cloud_gitlab_v1_instance_service_proto_init() }
func file_yandex_cloud_gitlab_v1_instance_service_proto_init() {
	if File_yandex_cloud_gitlab_v1_instance_service_proto != nil {
		return
	}
	file_yandex_cloud_gitlab_v1_instance_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_gitlab_v1_instance_service_proto_rawDesc), len(file_yandex_cloud_gitlab_v1_instance_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_gitlab_v1_instance_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_gitlab_v1_instance_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_gitlab_v1_instance_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_gitlab_v1_instance_service_proto = out.File
	file_yandex_cloud_gitlab_v1_instance_service_proto_goTypes = nil
	file_yandex_cloud_gitlab_v1_instance_service_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: yandex/cloud/iam/v1/oauth_client_service.proto

package iam

import (
	context "context"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OAuthClientService_Get_FullMethodName    = "/yandex.cloud.iam.v1.OAuthClientService/Get"
	OAuthClientService_List_FullMethodName   = "/yandex.cloud.iam.v1.OAuthClientService/List"
	OAuthClientService_Create_FullMethodName = "/yandex.cloud.iam.v1.OAuthClientService/Create"
	OAuthClientService_Update_FullMethodName = "/yandex.cloud.iam.v1.OAuthClientService/Update"
	OAuthClientService_Delete_FullMethodName = "/yandex.cloud.iam.v1.OAuthClientService/Delete"
)

// OAuthClientServiceClient is the client API for OAuthClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A set of methods for managing OAuthClient resources.
type OAuthClientServiceClient interface {
	// Returns the sepcified OAuthClient resource.
	//
	// To get the list of available OAuthClient resources, make a [List] request.
	Get(ctx context.Context, in *GetOAuthClientRequest, opts ...grpc.CallOption) (*OAuthClient, error)
	// Retrieves the list of OAuthClient resources views in the specified folder
	List(ctx context.Context, in *ListOAuthClientsRequest, opts ...grpc.CallOption) (*ListOAuthClientsResponse, error)
	// Creates an oauth client in the specified folder.
	Create(ctx context.Context, in *CreateOAuthClientRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Updates the specified oauth client.
	Update(ctx context.Context, in *UpdateOAuthClientRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified oauth client with all its secrets.
	Delete(ctx context.Context, in *DeleteOAuthClientRequest, opts ...grpc.CallOption) (*operation.Operation, error)
}

type oAuthClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOAuthClientServiceClient(cc grpc.ClientConnInterface) OAuthClientServiceClient {
	return &oAuthClientServiceClient{cc}
}

func (c *oAuthClientServiceClient) Get(ctx context.Context, in *GetOAuthClientRequest, opts ...grpc.CallOption) (*OAuthClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OAuthClient)
	err := c.cc.Invoke(ctx, OAuthClientService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthClientServiceClient) List(ctx context.Context, in *ListOAuthClientsRequest, opts ...grpc.CallOption) (*ListOAuthClientsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOAuthClientsResponse)
	err := c.cc.Invoke(ctx, OAuthClientService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthClientServiceClient) Create(ctx context.Context, in *CreateOAuthClientRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, OAuthClientService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthClientServiceClient) Update(ctx context.Context, in *UpdateOAuthClientRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, OAuthClientService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthClientServiceClient) Delete(ctx context.Context, in *DeleteOAuthClientRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, OAuthClientService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OAuthClientServiceServer is the server API for OAuthClientService service.
// All implementations should embed UnimplementedOAuthClientServiceServer
// for forward compatibility.
//
// A set of methods for managing OAuthClient resources.
type OAuthClientServiceServer interface {
	// Returns the sepcified OAuthClient resource.
	//
	// To get the list of available OAuthClient resources, make a [List] request.
	Get(context.Context, *GetOAuthClientRequest) (*OAuthClient, error)
	// Retrieves the list of OAuthClient resources views in the specified folder
	List(context.Context, *ListOAuthClientsRequest) (*ListOAuthClientsResponse, error)
	// Creates an oauth client in the specified folder.
	Create(context.Context, *CreateOAuthClientRequest) (*operation.Operation, error)
	// Updates the specified oauth client.
	Update(context.Context, *UpdateOAuthClientRequest) (*operation.Operation, error)
	// Deletes the specified oauth client with all its secrets.
	Delete(context.Context, *DeleteOAuthClientRequest) (*operation.Operation, error)
}

// UnimplementedOAuthClientServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOAuthClientServiceServer struct{}

func (UnimplementedOAuthClientServiceServer) Get(context.Context, *GetOAuthClientRequest) (*OAuthClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedOAuthClientServiceServer) List(context.Context, *ListOAuthClientsRequest) (*ListOAuthClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedOAuthClientServiceServer) Create(context.Context, *CreateOAuthClientRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOAuthClientServiceServer) Update(context.Context, *UpdateOAuthClientRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOAuthClientServiceServer) Delete(context.Context, *DeleteOAuthClientRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOAuthClientServiceServer) testEmbeddedByValue() {}

// UnsafeOAuthClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OAuthClientServiceServer will
// result in compilation errors.
type UnsafeOAuthClientServiceServer interface {
	mustEmbedUnimplementedOAuthClientServiceServer()
}

func RegisterOAuthClientServiceServer(s grpc.ServiceRegistrar, srv OAuthClientServiceServer) {
	// If the following call pancis, it indicates UnimplementedOAuthClientServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OAuthClientService_ServiceDesc, srv)
}

func _OAuthClientService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOAuthClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthClientServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthClientService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthClientServiceServer).Get(ctx, req.(*GetOAuthClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthClientService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOAuthClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthClientServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthClientService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthClientServiceServer).List(ctx, req.(*ListOAuthClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthClientService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOAuthClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthClientServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthClientService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthClientServiceServer).Create(ctx, req.(*CreateOAuthClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthClientService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOAuthClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthClientServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthClientService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthClientServiceServer).Update(ctx, req.(*UpdateOAuthClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthClientService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOAuthClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthClientServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuthClientService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthClientServiceServer).Delete(ctx, req.(*DeleteOAuthClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OAuthClientService_ServiceDesc is the grpc.ServiceDesc for OAuthClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OAuthClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.iam.v1.OAuthClientService",
	HandlerType: (*OAuthClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _OAuthClientService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _OAuthClientService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _OAuthClientService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OAuthClientService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OAuthClientService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/iam/v1/oauth_client_service.proto",
}

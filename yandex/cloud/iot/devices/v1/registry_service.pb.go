// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/iot/devices/v1/registry_service.proto

package devices

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetRegistryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry to return.
	//
	// To get a registry ID make a [RegistryService.List] request.
	RegistryId    string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRegistryRequest) Reset() {
	*x = GetRegistryRequest{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRegistryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistryRequest) ProtoMessage() {}

func (x *GetRegistryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistryRequest.ProtoReflect.Descriptor instead.
func (*GetRegistryRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetRegistryRequest) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

type GetByNameRegistryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to list registries in.
	//
	// To get a folder ID make a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the registry to return.
	//
	// To get a registry Name make a [RegistryService.List] request.
	RegistryName  string `protobuf:"bytes,2,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetByNameRegistryRequest) Reset() {
	*x = GetByNameRegistryRequest{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetByNameRegistryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByNameRegistryRequest) ProtoMessage() {}

func (x *GetByNameRegistryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByNameRegistryRequest.ProtoReflect.Descriptor instead.
func (*GetByNameRegistryRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetByNameRegistryRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *GetByNameRegistryRequest) GetRegistryName() string {
	if x != nil {
		return x.RegistryName
	}
	return ""
}

type ListRegistriesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to list registries in.
	//
	// To get a folder ID make a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page that should be returned. If the number of available
	// results is larger than `page_size`, the service returns a [ListRegistriesResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set `page_token` to the
	// [ListRegistriesResponse.next_page_token] returned by a previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRegistriesRequest) Reset() {
	*x = ListRegistriesRequest{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRegistriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegistriesRequest) ProtoMessage() {}

func (x *ListRegistriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegistriesRequest.ProtoReflect.Descriptor instead.
func (*ListRegistriesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListRegistriesRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListRegistriesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRegistriesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListRegistriesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of registries.
	Registries []*Registry `protobuf:"bytes,1,rep,name=registries,proto3" json:"registries,omitempty"`
	// Token for getting the next page of the list. If the number of results is greater than
	// the specified [ListRegistriesRequest.page_size], use `next_page_token` as the value
	// for the [ListRegistriesRequest.page_token] parameter in the next list request.
	//
	// Each subsequent page will have its own `next_page_token` to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRegistriesResponse) Reset() {
	*x = ListRegistriesResponse{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRegistriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegistriesResponse) ProtoMessage() {}

func (x *ListRegistriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegistriesResponse.ProtoReflect.Descriptor instead.
func (*ListRegistriesResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListRegistriesResponse) GetRegistries() []*Registry {
	if x != nil {
		return x.Registries
	}
	return nil
}

func (x *ListRegistriesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateRegistryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to create a registry in.
	//
	// To get a folder ID, make a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the registry. The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the registry.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels as `key:value` pairs.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Registry certificates.
	Certificates []*CreateRegistryRequest_Certificate `protobuf:"bytes,5,rep,name=certificates,proto3" json:"certificates,omitempty"`
	// Registry passwords.
	//
	// The password must contain at least three character categories among the following: upper case latin, lower case latin, numbers and special symbols.
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	// Options for logging registry events
	LogOptions    *LogOptions `protobuf:"bytes,7,opt,name=log_options,json=logOptions,proto3" json:"log_options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRegistryRequest) Reset() {
	*x = CreateRegistryRequest{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRegistryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegistryRequest) ProtoMessage() {}

func (x *CreateRegistryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegistryRequest.ProtoReflect.Descriptor instead.
func (*CreateRegistryRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateRegistryRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateRegistryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRegistryRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateRegistryRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateRegistryRequest) GetCertificates() []*CreateRegistryRequest_Certificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *CreateRegistryRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateRegistryRequest) GetLogOptions() *LogOptions {
	if x != nil {
		return x.LogOptions
	}
	return nil
}

type CreateRegistryMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry that is being created.
	RegistryId    string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRegistryMetadata) Reset() {
	*x = CreateRegistryMetadata{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRegistryMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegistryMetadata) ProtoMessage() {}

func (x *CreateRegistryMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegistryMetadata.ProtoReflect.Descriptor instead.
func (*CreateRegistryMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateRegistryMetadata) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

type UpdateRegistryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry to update.
	//
	// To get a registry ID make a [RegistryService.List] request.
	RegistryId string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	// Field mask that specifies which fields of the registry are going to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Name of the registry. The name must be unique within the folder.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the registry.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels as `key:value` pairs.
	//
	// Existing set of `labels` is completely replaced by the provided set.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Options for logging registry events
	LogOptions    *LogOptions `protobuf:"bytes,6,opt,name=log_options,json=logOptions,proto3" json:"log_options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRegistryRequest) Reset() {
	*x = UpdateRegistryRequest{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRegistryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRegistryRequest) ProtoMessage() {}

func (x *UpdateRegistryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRegistryRequest.ProtoReflect.Descriptor instead.
func (*UpdateRegistryRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateRegistryRequest) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *UpdateRegistryRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateRegistryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateRegistryRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateRegistryRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateRegistryRequest) GetLogOptions() *LogOptions {
	if x != nil {
		return x.LogOptions
	}
	return nil
}

type UpdateRegistryMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry that is being updated.
	RegistryId    string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRegistryMetadata) Reset() {
	*x = UpdateRegistryMetadata{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRegistryMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRegistryMetadata) ProtoMessage() {}

func (x *UpdateRegistryMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRegistryMetadata.ProtoReflect.Descriptor instead.
func (*UpdateRegistryMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateRegistryMetadata) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

type DeleteRegistryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry to delete.
	//
	// To get a registry ID make a [RegistryService.List] request.
	RegistryId    string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRegistryRequest) Reset() {
	*x = DeleteRegistryRequest{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRegistryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegistryRequest) ProtoMessage() {}

func (x *DeleteRegistryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegistryRequest.ProtoReflect.Descriptor instead.
func (*DeleteRegistryRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteRegistryRequest) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

type DeleteRegistryMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry that is being deleted.
	RegistryId    string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRegistryMetadata) Reset() {
	*x = DeleteRegistryMetadata{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRegistryMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegistryMetadata) ProtoMessage() {}

func (x *DeleteRegistryMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegistryMetadata.ProtoReflect.Descriptor instead.
func (*DeleteRegistryMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteRegistryMetadata) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

type ListRegistryCertificatesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry to list certificates for.
	RegistryId    string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRegistryCertificatesRequest) Reset() {
	*x = ListRegistryCertificatesRequest{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRegistryCertificatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegistryCertificatesRequest) ProtoMessage() {}

func (x *ListRegistryCertificatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegistryCertificatesRequest.ProtoReflect.Descriptor instead.
func (*ListRegistryCertificatesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListRegistryCertificatesRequest) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

type ListRegistryCertificatesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of certificates for the specified registry.
	Certificates  []*RegistryCertificate `protobuf:"bytes,1,rep,name=certificates,proto3" json:"certificates,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRegistryCertificatesResponse) Reset() {
	*x = ListRegistryCertificatesResponse{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRegistryCertificatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegistryCertificatesResponse) ProtoMessage() {}

func (x *ListRegistryCertificatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegistryCertificatesResponse.ProtoReflect.Descriptor instead.
func (*ListRegistryCertificatesResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{11}
}

func (x *ListRegistryCertificatesResponse) GetCertificates() []*RegistryCertificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

type AddRegistryCertificateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry for which the certificate is being added.
	//
	// To get a registry ID make a [RegistryService.List] request.
	RegistryId string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	// Public part of the certificate that is being added.
	CertificateData string `protobuf:"bytes,3,opt,name=certificate_data,json=certificateData,proto3" json:"certificate_data,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AddRegistryCertificateRequest) Reset() {
	*x = AddRegistryCertificateRequest{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRegistryCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRegistryCertificateRequest) ProtoMessage() {}

func (x *AddRegistryCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRegistryCertificateRequest.ProtoReflect.Descriptor instead.
func (*AddRegistryCertificateRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{12}
}

func (x *AddRegistryCertificateRequest) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *AddRegistryCertificateRequest) GetCertificateData() string {
	if x != nil {
		return x.CertificateData
	}
	return ""
}

type AddRegistryCertificateMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry certificate that is being added.
	RegistryId string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	// Fingerprint of the certificate that is being added.
	Fingerprint   string `protobuf:"bytes,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddRegistryCertificateMetadata) Reset() {
	*x = AddRegistryCertificateMetadata{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRegistryCertificateMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRegistryCertificateMetadata) ProtoMessage() {}

func (x *AddRegistryCertificateMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRegistryCertificateMetadata.ProtoReflect.Descriptor instead.
func (*AddRegistryCertificateMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{13}
}

func (x *AddRegistryCertificateMetadata) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *AddRegistryCertificateMetadata) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

type DeleteRegistryCertificateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry to delete a certificate for.
	//
	// To get a registry ID make a [RegistryService.List] request.
	RegistryId string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	// Fingerprint of the certificate that is being deleted.
	Fingerprint   string `protobuf:"bytes,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRegistryCertificateRequest) Reset() {
	*x = DeleteRegistryCertificateRequest{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRegistryCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegistryCertificateRequest) ProtoMessage() {}

func (x *DeleteRegistryCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegistryCertificateRequest.ProtoReflect.Descriptor instead.
func (*DeleteRegistryCertificateRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteRegistryCertificateRequest) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *DeleteRegistryCertificateRequest) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

type DeleteRegistryCertificateMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of a registry for which the certificate is being delete.
	RegistryId string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	// Fingerprint of the certificate to deleted.
	Fingerprint   string `protobuf:"bytes,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRegistryCertificateMetadata) Reset() {
	*x = DeleteRegistryCertificateMetadata{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRegistryCertificateMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegistryCertificateMetadata) ProtoMessage() {}

func (x *DeleteRegistryCertificateMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegistryCertificateMetadata.ProtoReflect.Descriptor instead.
func (*DeleteRegistryCertificateMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteRegistryCertificateMetadata) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *DeleteRegistryCertificateMetadata) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

type ListRegistryPasswordsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry to list passwords in.
	//
	// To get a registry ID make a [RegistryService.List] request.
	RegistryId    string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRegistryPasswordsRequest) Reset() {
	*x = ListRegistryPasswordsRequest{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRegistryPasswordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegistryPasswordsRequest) ProtoMessage() {}

func (x *ListRegistryPasswordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegistryPasswordsRequest.ProtoReflect.Descriptor instead.
func (*ListRegistryPasswordsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{16}
}

func (x *ListRegistryPasswordsRequest) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

type ListRegistryPasswordsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of passwords for the specified registry.
	Passwords     []*RegistryPassword `protobuf:"bytes,1,rep,name=passwords,proto3" json:"passwords,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRegistryPasswordsResponse) Reset() {
	*x = ListRegistryPasswordsResponse{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRegistryPasswordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegistryPasswordsResponse) ProtoMessage() {}

func (x *ListRegistryPasswordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegistryPasswordsResponse.ProtoReflect.Descriptor instead.
func (*ListRegistryPasswordsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{17}
}

func (x *ListRegistryPasswordsResponse) GetPasswords() []*RegistryPassword {
	if x != nil {
		return x.Passwords
	}
	return nil
}

type AddRegistryPasswordRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry to add a password for.
	//
	// To get a registry ID make a [RegistryService.List] request.
	RegistryId string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	// Passwords for the registry.
	//
	// The password must contain at least three character categories among the following: upper case latin, lower case latin, numbers and special symbols.
	Password      string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddRegistryPasswordRequest) Reset() {
	*x = AddRegistryPasswordRequest{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRegistryPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRegistryPasswordRequest) ProtoMessage() {}

func (x *AddRegistryPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRegistryPasswordRequest.ProtoReflect.Descriptor instead.
func (*AddRegistryPasswordRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{18}
}

func (x *AddRegistryPasswordRequest) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *AddRegistryPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AddRegistryPasswordMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry for which the password is being added.
	RegistryId string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	// ID of a password that is being added.
	PasswordId    string `protobuf:"bytes,2,opt,name=password_id,json=passwordId,proto3" json:"password_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddRegistryPasswordMetadata) Reset() {
	*x = AddRegistryPasswordMetadata{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddRegistryPasswordMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRegistryPasswordMetadata) ProtoMessage() {}

func (x *AddRegistryPasswordMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRegistryPasswordMetadata.ProtoReflect.Descriptor instead.
func (*AddRegistryPasswordMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{19}
}

func (x *AddRegistryPasswordMetadata) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *AddRegistryPasswordMetadata) GetPasswordId() string {
	if x != nil {
		return x.PasswordId
	}
	return ""
}

type DeleteRegistryPasswordRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry to delete a password for.
	//
	// To get a registry ID make a [DeviceService.List] request.
	RegistryId string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	// ID of the password to delete.
	//
	// To get a password ID make a [RegistryService.ListPasswords] request.
	PasswordId    string `protobuf:"bytes,2,opt,name=password_id,json=passwordId,proto3" json:"password_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRegistryPasswordRequest) Reset() {
	*x = DeleteRegistryPasswordRequest{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRegistryPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegistryPasswordRequest) ProtoMessage() {}

func (x *DeleteRegistryPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegistryPasswordRequest.ProtoReflect.Descriptor instead.
func (*DeleteRegistryPasswordRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteRegistryPasswordRequest) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *DeleteRegistryPasswordRequest) GetPasswordId() string {
	if x != nil {
		return x.PasswordId
	}
	return ""
}

type DeleteRegistryPasswordMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of a registry for which the password is being delete.
	RegistryId string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	// ID of the password to delete.
	//
	// To get a password ID make a [RegistryService.ListPasswords] request.
	PasswordId    string `protobuf:"bytes,2,opt,name=password_id,json=passwordId,proto3" json:"password_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRegistryPasswordMetadata) Reset() {
	*x = DeleteRegistryPasswordMetadata{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRegistryPasswordMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegistryPasswordMetadata) ProtoMessage() {}

func (x *DeleteRegistryPasswordMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegistryPasswordMetadata.ProtoReflect.Descriptor instead.
func (*DeleteRegistryPasswordMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteRegistryPasswordMetadata) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *DeleteRegistryPasswordMetadata) GetPasswordId() string {
	if x != nil {
		return x.PasswordId
	}
	return ""
}

type ListDeviceTopicAliasesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry to list aliases for device topic.
	//
	// To get a registry ID make a [RegistryService.List] request.
	RegistryId string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	// The maximum number of results per page that should be returned. If the number of available
	// results is larger than `page_size`, the service returns a [ListDeviceTopicAliasesResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set `page_token` to the
	// [ListDeviceTopicAliasesResponse.next_page_token] returned by a previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDeviceTopicAliasesRequest) Reset() {
	*x = ListDeviceTopicAliasesRequest{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDeviceTopicAliasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceTopicAliasesRequest) ProtoMessage() {}

func (x *ListDeviceTopicAliasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceTopicAliasesRequest.ProtoReflect.Descriptor instead.
func (*ListDeviceTopicAliasesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{22}
}

func (x *ListDeviceTopicAliasesRequest) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *ListDeviceTopicAliasesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDeviceTopicAliasesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListDeviceTopicAliasesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of device aliases for the specified registry.
	Aliases []*DeviceAlias `protobuf:"bytes,1,rep,name=aliases,proto3" json:"aliases,omitempty"`
	// Token for getting the next page of the list. If the number of results is greater than
	// the specified [ListDeviceTopicAliasesRequest.page_size], use `next_page_token` as the value
	// for the [ListDeviceTopicAliasesRequest.page_token] parameter in the next list request.
	//
	// Each subsequent page will have its own `next_page_token` to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDeviceTopicAliasesResponse) Reset() {
	*x = ListDeviceTopicAliasesResponse{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDeviceTopicAliasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceTopicAliasesResponse) ProtoMessage() {}

func (x *ListDeviceTopicAliasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceTopicAliasesResponse.ProtoReflect.Descriptor instead.
func (*ListDeviceTopicAliasesResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{23}
}

func (x *ListDeviceTopicAliasesResponse) GetAliases() []*DeviceAlias {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *ListDeviceTopicAliasesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListRegistryOperationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry to list operations for.
	RegistryId string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	// The maximum number of results per page that should be returned. If the number of available
	// results is larger than `page_size`, the service returns a [ListRegistryOperationsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set `page_token` to the
	// [ListRegistryOperationsResponse.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// Currently you can use filtering only on [Registry.name] field.
	Filter        string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRegistryOperationsRequest) Reset() {
	*x = ListRegistryOperationsRequest{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRegistryOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegistryOperationsRequest) ProtoMessage() {}

func (x *ListRegistryOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegistryOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListRegistryOperationsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{24}
}

func (x *ListRegistryOperationsRequest) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *ListRegistryOperationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRegistryOperationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListRegistryOperationsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListRegistryOperationsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of operations for the specified registry.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// Token for getting the next page of the list. If the number of results is greater than
	// the specified [ListRegistryOperationsRequest.page_size], use `next_page_token` as the value
	// for the [ListRegistryOperationsRequest.page_token] parameter in the next list request.
	//
	// Each subsequent page will have its own `next_page_token` to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRegistryOperationsResponse) Reset() {
	*x = ListRegistryOperationsResponse{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRegistryOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegistryOperationsResponse) ProtoMessage() {}

func (x *ListRegistryOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegistryOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListRegistryOperationsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{25}
}

func (x *ListRegistryOperationsResponse) GetOperations() []*operation.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListRegistryOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type AddDataStreamExportRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the YDS export. The name must be unique within the folder.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ID of the registry to add a YDS export for.
	//
	// To get a registry ID make a [RegistryService.List] request.
	RegistryId string `protobuf:"bytes,2,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	// MQTT topic whose messages export to YDS.
	MqttTopicFilter string `protobuf:"bytes,4,opt,name=mqtt_topic_filter,json=mqttTopicFilter,proto3" json:"mqtt_topic_filter,omitempty"`
	// YDS database.
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty"`
	// YDS stream name.
	Stream string `protobuf:"bytes,6,opt,name=stream,proto3" json:"stream,omitempty"`
	// ID of the service account which has permission to write to data stream.
	ServiceAccountId string `protobuf:"bytes,7,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AddDataStreamExportRequest) Reset() {
	*x = AddDataStreamExportRequest{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddDataStreamExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDataStreamExportRequest) ProtoMessage() {}

func (x *AddDataStreamExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDataStreamExportRequest.ProtoReflect.Descriptor instead.
func (*AddDataStreamExportRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{26}
}

func (x *AddDataStreamExportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddDataStreamExportRequest) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *AddDataStreamExportRequest) GetMqttTopicFilter() string {
	if x != nil {
		return x.MqttTopicFilter
	}
	return ""
}

func (x *AddDataStreamExportRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *AddDataStreamExportRequest) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *AddDataStreamExportRequest) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

type AddDataStreamExportMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry for which the YDS export was added.
	RegistryId string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	// ID of the added YDS export.
	DataStreamExportId string `protobuf:"bytes,2,opt,name=data_stream_export_id,json=dataStreamExportId,proto3" json:"data_stream_export_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AddDataStreamExportMetadata) Reset() {
	*x = AddDataStreamExportMetadata{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddDataStreamExportMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDataStreamExportMetadata) ProtoMessage() {}

func (x *AddDataStreamExportMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDataStreamExportMetadata.ProtoReflect.Descriptor instead.
func (*AddDataStreamExportMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{27}
}

func (x *AddDataStreamExportMetadata) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *AddDataStreamExportMetadata) GetDataStreamExportId() string {
	if x != nil {
		return x.DataStreamExportId
	}
	return ""
}

type DeleteDataStreamExportRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of a registry for which the YDS export is being deleted.
	RegistryId string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	// ID of the YDS export to delete.
	DataStreamExportId string `protobuf:"bytes,2,opt,name=data_stream_export_id,json=dataStreamExportId,proto3" json:"data_stream_export_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DeleteDataStreamExportRequest) Reset() {
	*x = DeleteDataStreamExportRequest{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDataStreamExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataStreamExportRequest) ProtoMessage() {}

func (x *DeleteDataStreamExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataStreamExportRequest.ProtoReflect.Descriptor instead.
func (*DeleteDataStreamExportRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteDataStreamExportRequest) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *DeleteDataStreamExportRequest) GetDataStreamExportId() string {
	if x != nil {
		return x.DataStreamExportId
	}
	return ""
}

type DeleteDataStreamExportMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of a registry for which the YDS export was deleted.
	RegistryId string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	// ID of the deleted YDS export.
	DataStreamExportId string `protobuf:"bytes,2,opt,name=data_stream_export_id,json=dataStreamExportId,proto3" json:"data_stream_export_id,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DeleteDataStreamExportMetadata) Reset() {
	*x = DeleteDataStreamExportMetadata{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDataStreamExportMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataStreamExportMetadata) ProtoMessage() {}

func (x *DeleteDataStreamExportMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataStreamExportMetadata.ProtoReflect.Descriptor instead.
func (*DeleteDataStreamExportMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteDataStreamExportMetadata) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

func (x *DeleteDataStreamExportMetadata) GetDataStreamExportId() string {
	if x != nil {
		return x.DataStreamExportId
	}
	return ""
}

type ListDataStreamExportsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry to list YDS exports in.
	//
	// To get a registry ID make a [RegistryService.List] request.
	RegistryId    string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDataStreamExportsRequest) Reset() {
	*x = ListDataStreamExportsRequest{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDataStreamExportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataStreamExportsRequest) ProtoMessage() {}

func (x *ListDataStreamExportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataStreamExportsRequest.ProtoReflect.Descriptor instead.
func (*ListDataStreamExportsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{30}
}

func (x *ListDataStreamExportsRequest) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

type ListDataStreamExportsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of YDS exports for the specified registry.
	DataStreamExports []*DataStreamExport `protobuf:"bytes,1,rep,name=data_stream_exports,json=dataStreamExports,proto3" json:"data_stream_exports,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListDataStreamExportsResponse) Reset() {
	*x = ListDataStreamExportsResponse{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDataStreamExportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDataStreamExportsResponse) ProtoMessage() {}

func (x *ListDataStreamExportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDataStreamExportsResponse.ProtoReflect.Descriptor instead.
func (*ListDataStreamExportsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{31}
}

func (x *ListDataStreamExportsResponse) GetDataStreamExports() []*DataStreamExport {
	if x != nil {
		return x.DataStreamExports
	}
	return nil
}

type DisableRegistryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry to disable.
	RegistryId    string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableRegistryRequest) Reset() {
	*x = DisableRegistryRequest{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableRegistryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableRegistryRequest) ProtoMessage() {}

func (x *DisableRegistryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableRegistryRequest.ProtoReflect.Descriptor instead.
func (*DisableRegistryRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{32}
}

func (x *DisableRegistryRequest) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

type DisableRegistryMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry that was disabled.
	RegistryId    string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableRegistryMetadata) Reset() {
	*x = DisableRegistryMetadata{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableRegistryMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableRegistryMetadata) ProtoMessage() {}

func (x *DisableRegistryMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableRegistryMetadata.ProtoReflect.Descriptor instead.
func (*DisableRegistryMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{33}
}

func (x *DisableRegistryMetadata) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

type EnableRegistryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry to enable.
	RegistryId    string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableRegistryRequest) Reset() {
	*x = EnableRegistryRequest{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableRegistryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableRegistryRequest) ProtoMessage() {}

func (x *EnableRegistryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableRegistryRequest.ProtoReflect.Descriptor instead.
func (*EnableRegistryRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{34}
}

func (x *EnableRegistryRequest) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

type EnableRegistryMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the registry that was enabled.
	RegistryId    string `protobuf:"bytes,1,opt,name=registry_id,json=registryId,proto3" json:"registry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableRegistryMetadata) Reset() {
	*x = EnableRegistryMetadata{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableRegistryMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableRegistryMetadata) ProtoMessage() {}

func (x *EnableRegistryMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableRegistryMetadata.ProtoReflect.Descriptor instead.
func (*EnableRegistryMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{35}
}

func (x *EnableRegistryMetadata) GetRegistryId() string {
	if x != nil {
		return x.RegistryId
	}
	return ""
}

// Specification of a registry certificate.
type CreateRegistryRequest_Certificate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Public part of the registry certificate.
	CertificateData string `protobuf:"bytes,1,opt,name=certificate_data,json=certificateData,proto3" json:"certificate_data,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateRegistryRequest_Certificate) Reset() {
	*x = CreateRegistryRequest_Certificate{}
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRegistryRequest_Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegistryRequest_Certificate) ProtoMessage() {}

func (x *CreateRegistryRequest_Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegistryRequest_Certificate.ProtoReflect.Descriptor instead.
func (*CreateRegistryRequest_Certificate) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP(), []int{4, 1}
}

func (x *CreateRegistryRequest_Certificate) GetCertificateData() string {
	if x != nil {
		return x.CertificateData
	}
	return ""
}

var File_yandex_cloud_iot_devices_v1_registry_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDesc = "" +
	"\n" +
	"2yandex/cloud/iot/devices/v1/registry_service.proto\x12\x1byandex.cloud.iot.devices.v1\x1a\x1cgoogle/api/annotations.proto\x1a google/protobuf/field_mask.proto\x1a yandex/cloud/api/operation.proto\x1a*yandex/cloud/iot/devices/v1/registry.proto\x1a&yandex/cloud/operation/operation.proto\x1a\x1dyandex/cloud/validation.proto\"C\n" +
	"\x12GetRegistryRequest\x12-\n" +
	"\vregistry_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\n" +
	"registryId\"\x8a\x01\n" +
	"\x18GetByNameRegistryRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x12C\n" +
	"\rregistry_name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=50R\fregistryName\"\x95\x01\n" +
	"\x15ListRegistriesRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x87\x01\n" +
	"\x16ListRegistriesResponse\x12E\n" +
	"\n" +
	"registries\x18\x01 \x03(\v2%.yandex.cloud.iot.devices.v1.RegistryR\n" +
	"registries\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xf4\x04\n" +
	"\x15CreateRegistryRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x12.\n" +
	"\x04name\x18\x02 \x01(\tB\x1a\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=50R\x04name\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x93\x01\n" +
	"\x06labels\x18\x04 \x03(\v2>.yandex.cloud.iot.devices.v1.CreateRegistryRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x041-63R\x06labels\x12b\n" +
	"\fcertificates\x18\x05 \x03(\v2>.yandex.cloud.iot.devices.v1.CreateRegistryRequest.CertificateR\fcertificates\x12\x1a\n" +
	"\bpassword\x18\x06 \x01(\tR\bpassword\x12H\n" +
	"\vlog_options\x18\a \x01(\v2'.yandex.cloud.iot.devices.v1.LogOptionsR\n" +
	"logOptions\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a8\n" +
	"\vCertificate\x12)\n" +
	"\x10certificate_data\x18\x01 \x01(\tR\x0fcertificateData\"9\n" +
	"\x16CreateRegistryMetadata\x12\x1f\n" +
	"\vregistry_id\x18\x01 \x01(\tR\n" +
	"registryId\"\xfb\x03\n" +
	"\x15UpdateRegistryRequest\x12-\n" +
	"\vregistry_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\n" +
	"registryId\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12.\n" +
	"\x04name\x18\x03 \x01(\tB\x1a\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=50R\x04name\x12+\n" +
	"\vdescription\x18\x04 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x93\x01\n" +
	"\x06labels\x18\x05 \x03(\v2>.yandex.cloud.iot.devices.v1.UpdateRegistryRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x041-63R\x06labels\x12H\n" +
	"\vlog_options\x18\x06 \x01(\v2'.yandex.cloud.iot.devices.v1.LogOptionsR\n" +
	"logOptions\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"9\n" +
	"\x16UpdateRegistryMetadata\x12\x1f\n" +
	"\vregistry_id\x18\x01 \x01(\tR\n" +
	"registryId\"F\n" +
	"\x15DeleteRegistryRequest\x12-\n" +
	"\vregistry_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\n" +
	"registryId\"9\n" +
	"\x16DeleteRegistryMetadata\x12\x1f\n" +
	"\vregistry_id\x18\x01 \x01(\tR\n" +
	"registryId\"P\n" +
	"\x1fListRegistryCertificatesRequest\x12-\n" +
	"\vregistry_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\n" +
	"registryId\"x\n" +
	" ListRegistryCertificatesResponse\x12T\n" +
	"\fcertificates\x18\x01 \x03(\v20.yandex.cloud.iot.devices.v1.RegistryCertificateR\fcertificates\"\x7f\n" +
	"\x1dAddRegistryCertificateRequest\x12-\n" +
	"\vregistry_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\n" +
	"registryId\x12)\n" +
	"\x10certificate_data\x18\x03 \x01(\tR\x0fcertificateDataJ\x04\b\x02\x10\x03\"c\n" +
	"\x1eAddRegistryCertificateMetadata\x12\x1f\n" +
	"\vregistry_id\x18\x01 \x01(\tR\n" +
	"registryId\x12 \n" +
	"\vfingerprint\x18\x02 \x01(\tR\vfingerprint\"\x81\x01\n" +
	" DeleteRegistryCertificateRequest\x12-\n" +
	"\vregistry_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\n" +
	"registryId\x12.\n" +
	"\vfingerprint\x18\x02 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\vfingerprint\"\x82\x01\n" +
	"!DeleteRegistryCertificateMetadata\x12-\n" +
	"\vregistry_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\n" +
	"registryId\x12.\n" +
	"\vfingerprint\x18\x02 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\vfingerprint\"M\n" +
	"\x1cListRegistryPasswordsRequest\x12-\n" +
	"\vregistry_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\n" +
	"registryId\"l\n" +
	"\x1dListRegistryPasswordsResponse\x12K\n" +
	"\tpasswords\x18\x01 \x03(\v2-.yandex.cloud.iot.devices.v1.RegistryPasswordR\tpasswords\"q\n" +
	"\x1aAddRegistryPasswordRequest\x12-\n" +
	"\vregistry_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\n" +
	"registryId\x12$\n" +
	"\bpassword\x18\x02 \x01(\tB\b\x8a\xc81\x04>=14R\bpassword\"_\n" +
	"\x1bAddRegistryPasswordMetadata\x12\x1f\n" +
	"\vregistry_id\x18\x01 \x01(\tR\n" +
	"registryId\x12\x1f\n" +
	"\vpassword_id\x18\x02 \x01(\tR\n" +
	"passwordId\"}\n" +
	"\x1dDeleteRegistryPasswordRequest\x12-\n" +
	"\vregistry_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\n" +
	"registryId\x12-\n" +
	"\vpassword_id\x18\x02 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\n" +
	"passwordId\"~\n" +
	"\x1eDeleteRegistryPasswordMetadata\x12-\n" +
	"\vregistry_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\n" +
	"registryId\x12-\n" +
	"\vpassword_id\x18\x02 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\n" +
	"passwordId\"\xa1\x01\n" +
	"\x1dListDeviceTopicAliasesRequest\x12-\n" +
	"\vregistry_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\n" +
	"registryId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x8c\x01\n" +
	"\x1eListDeviceTopicAliasesResponse\x12B\n" +
	"\aaliases\x18\x01 \x03(\v2(.yandex.cloud.iot.devices.v1.DeviceAliasR\aaliases\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xbd\x01\n" +
	"\x1dListRegistryOperationsRequest\x12%\n" +
	"\vregistry_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\n" +
	"registryId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\x12\"\n" +
	"\x06filter\x18\x04 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"\x8b\x01\n" +
	"\x1eListRegistryOperationsResponse\x12A\n" +
	"\n" +
	"operations\x18\x01 \x03(\v2!.yandex.cloud.operation.OperationR\n" +
	"operations\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xc7\x02\n" +
	"\x1aAddDataStreamExportRequest\x12.\n" +
	"\x04name\x18\x01 \x01(\tB\x1a\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=50R\x04name\x12-\n" +
	"\vregistry_id\x18\x02 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\n" +
	"registryId\x126\n" +
	"\x11mqtt_topic_filter\x18\x04 \x01(\tB\n" +
	"\x8a\xc81\x06<=1024R\x0fmqttTopicFilter\x12)\n" +
	"\bdatabase\x18\x05 \x01(\tB\r\xe8\xc71\x01\x8a\xc81\x05<=512R\bdatabase\x12%\n" +
	"\x06stream\x18\x06 \x01(\tB\r\xe8\xc71\x01\x8a\xc81\x05<=512R\x06stream\x12:\n" +
	"\x12service_account_id\x18\a \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x10serviceAccountIdJ\x04\b\x03\x10\x04\"q\n" +
	"\x1bAddDataStreamExportMetadata\x12\x1f\n" +
	"\vregistry_id\x18\x01 \x01(\tR\n" +
	"registryId\x121\n" +
	"\x15data_stream_export_id\x18\x02 \x01(\tR\x12dataStreamExportId\"\x8f\x01\n" +
	"\x1dDeleteDataStreamExportRequest\x12-\n" +
	"\vregistry_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\n" +
	"registryId\x12?\n" +
	"\x15data_stream_export_id\x18\x02 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x12dataStreamExportId\"\x80\x01\n" +
	"\x1eDeleteDataStreamExportMetadata\x12%\n" +
	"\vregistry_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\n" +
	"registryId\x127\n" +
	"\x15data_stream_export_id\x18\x02 \x01(\tB\x04\xe8\xc71\x01R\x12dataStreamExportId\"M\n" +
	"\x1cListDataStreamExportsRequest\x12-\n" +
	"\vregistry_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\n" +
	"registryId\"~\n" +
	"\x1dListDataStreamExportsResponse\x12]\n" +
	"\x13data_stream_exports\x18\x01 \x03(\v2-.yandex.cloud.iot.devices.v1.DataStreamExportR\x11dataStreamExports\"?\n" +
	"\x16DisableRegistryRequest\x12%\n" +
	"\vregistry_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\n" +
	"registryId\"@\n" +
	"\x17DisableRegistryMetadata\x12%\n" +
	"\vregistry_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\n" +
	"registryId\">\n" +
	"\x15EnableRegistryRequest\x12%\n" +
	"\vregistry_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\n" +
	"registryId\"?\n" +
	"\x16EnableRegistryMetadata\x12%\n" +
	"\vregistry_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\n" +
	"registryId2\x80\x1d\n" +
	"\x0fRegistryService\x12\x8f\x01\n" +
	"\x03Get\x12/.yandex.cloud.iot.devices.v1.GetRegistryRequest\x1a%.yandex.cloud.iot.devices.v1.Registry\"0\x82\xd3\xe4\x93\x02*\x12(/iot-devices/v1/registries/{registry_id}\x12\x97\x01\n" +
	"\tGetByName\x125.yandex.cloud.iot.devices.v1.GetByNameRegistryRequest\x1a%.yandex.cloud.iot.devices.v1.Registry\",\x82\xd3\xe4\x93\x02&\x12$/iot-devices/v1/registries:getByName\x12\x93\x01\n" +
	"\x04List\x122.yandex.cloud.iot.devices.v1.ListRegistriesRequest\x1a3.yandex.cloud.iot.devices.v1.ListRegistriesResponse\"\"\x82\xd3\xe4\x93\x02\x1c\x12\x1a/iot-devices/v1/registries\x12\xac\x01\n" +
	"\x06Create\x122.yandex.cloud.iot.devices.v1.CreateRegistryRequest\x1a!.yandex.cloud.operation.Operation\"K\xb2\xd2*\"\n" +
	"\x16CreateRegistryMetadata\x12\bRegistry\x82\xd3\xe4\x93\x02\x1f:\x01*\"\x1a/iot-devices/v1/registries\x12\xba\x01\n" +
	"\x06Update\x122.yandex.cloud.iot.devices.v1.UpdateRegistryRequest\x1a!.yandex.cloud.operation.Operation\"Y\xb2\xd2*\"\n" +
	"\x16UpdateRegistryMetadata\x12\bRegistry\x82\xd3\xe4\x93\x02-:\x01*2(/iot-devices/v1/registries/{registry_id}\x12\xc4\x01\n" +
	"\x06Delete\x122.yandex.cloud.iot.devices.v1.DeleteRegistryRequest\x1a!.yandex.cloud.operation.Operation\"c\xb2\xd2*/\n" +
	"\x16DeleteRegistryMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02**(/iot-devices/v1/registries/{registry_id}\x12\xce\x01\n" +
	"\x10ListCertificates\x12<.yandex.cloud.iot.devices.v1.ListRegistryCertificatesRequest\x1a=.yandex.cloud.iot.devices.v1.ListRegistryCertificatesResponse\"=\x82\xd3\xe4\x93\x027\x125/iot-devices/v1/registries/{registry_id}/certificates\x12\xea\x01\n" +
	"\x0eAddCertificate\x12:.yandex.cloud.iot.devices.v1.AddRegistryCertificateRequest\x1a!.yandex.cloud.operation.Operation\"y\xb2\xd2*5\n" +
	"\x1eAddRegistryCertificateMetadata\x12\x13RegistryCertificate\x82\xd3\xe4\x93\x02::\x01*\"5/iot-devices/v1/registries/{registry_id}/certificates\x12\x81\x02\n" +
	"\x11DeleteCertificate\x12=.yandex.cloud.iot.devices.v1.DeleteRegistryCertificateRequest\x1a!.yandex.cloud.operation.Operation\"\x89\x01\xb2\xd2*:\n" +
	"!DeleteRegistryCertificateMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02E*C/iot-devices/v1/registries/{registry_id}/certificates/{fingerprint}\x12\xc2\x01\n" +
	"\rListPasswords\x129.yandex.cloud.iot.devices.v1.ListRegistryPasswordsRequest\x1a:.yandex.cloud.iot.devices.v1.ListRegistryPasswordsResponse\":\x82\xd3\xe4\x93\x024\x122/iot-devices/v1/registries/{registry_id}/passwords\x12\xdb\x01\n" +
	"\vAddPassword\x127.yandex.cloud.iot.devices.v1.AddRegistryPasswordRequest\x1a!.yandex.cloud.operation.Operation\"p\xb2\xd2*/\n" +
	"\x1bAddRegistryPasswordMetadata\x12\x10RegistryPassword\x82\xd3\xe4\x93\x027:\x01*\"2/iot-devices/v1/registries/{registry_id}/passwords\x12\xf5\x01\n" +
	"\x0eDeletePassword\x12:.yandex.cloud.iot.devices.v1.DeleteRegistryPasswordRequest\x1a!.yandex.cloud.operation.Operation\"\x83\x01\xb2\xd2*7\n" +
	"\x1eDeleteRegistryPasswordMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02B*@/iot-devices/v1/registries/{registry_id}/passwords/{password_id}\x12\xda\x01\n" +
	"\x16ListDeviceTopicAliases\x12:.yandex.cloud.iot.devices.v1.ListDeviceTopicAliasesRequest\x1a;.yandex.cloud.iot.devices.v1.ListDeviceTopicAliasesResponse\"G\x82\xd3\xe4\x93\x02A\x12?/iot-devices/v1/registries/{registry_id}:listDeviceTopicAliases\x12\x8e\x01\n" +
	"\x15ListDataStreamExports\x129.yandex.cloud.iot.devices.v1.ListDataStreamExportsRequest\x1a:.yandex.cloud.iot.devices.v1.ListDataStreamExportsResponse\x12\xa6\x01\n" +
	"\x13AddDataStreamExport\x127.yandex.cloud.iot.devices.v1.AddDataStreamExportRequest\x1a!.yandex.cloud.operation.Operation\"3\xb2\xd2*/\n" +
	"\x1bAddDataStreamExportMetadata\x12\x10DataStreamExport\x12\xb4\x01\n" +
	"\x16DeleteDataStreamExport\x12:.yandex.cloud.iot.devices.v1.DeleteDataStreamExportRequest\x1a!.yandex.cloud.operation.Operation\";\xb2\xd2*7\n" +
	"\x1eDeleteDataStreamExportMetadata\x12\x15google.protobuf.Empty\x12\xc6\x01\n" +
	"\x0eListOperations\x12:.yandex.cloud.iot.devices.v1.ListRegistryOperationsRequest\x1a;.yandex.cloud.iot.devices.v1.ListRegistryOperationsResponse\";\x82\xd3\xe4\x93\x025\x123/iot-devices/v1/registries/{registry_id}/operations\x12\xc2\x01\n" +
	"\aDisable\x123.yandex.cloud.iot.devices.v1.DisableRegistryRequest\x1a!.yandex.cloud.operation.Operation\"_\xb2\xd2*#\n" +
	"\x17DisableRegistryMetadata\x12\bRegistry\x82\xd3\xe4\x93\x022\"0/iot-devices/v1/registries/{registry_id}:disable\x12\xbe\x01\n" +
	"\x06Enable\x122.yandex.cloud.iot.devices.v1.EnableRegistryRequest\x1a!.yandex.cloud.operation.Operation\"]\xb2\xd2*\"\n" +
	"\x16EnableRegistryMetadata\x12\bRegistry\x82\xd3\xe4\x93\x021\"//iot-devices/v1/registries/{registry_id}:enableBj\n" +
	"\x1fyandex.cloud.api.iot.devices.v1ZGgithub.com/yandex-cloud/go-genproto/yandex/cloud/iot/devices/v1;devicesb\x06proto3"

var (
	file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescData []byte
)

func file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDesc), len(file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDesc)))
	})
	return file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDescData
}

var file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_yandex_cloud_iot_devices_v1_registry_service_proto_goTypes = []any{
	(*GetRegistryRequest)(nil),                // 0: yandex.cloud.iot.devices.v1.GetRegistryRequest
	(*GetByNameRegistryRequest)(nil),          // 1: yandex.cloud.iot.devices.v1.GetByNameRegistryRequest
	(*ListRegistriesRequest)(nil),             // 2: yandex.cloud.iot.devices.v1.ListRegistriesRequest
	(*ListRegistriesResponse)(nil),            // 3: yandex.cloud.iot.devices.v1.ListRegistriesResponse
	(*CreateRegistryRequest)(nil),             // 4: yandex.cloud.iot.devices.v1.CreateRegistryRequest
	(*CreateRegistryMetadata)(nil),            // 5: yandex.cloud.iot.devices.v1.CreateRegistryMetadata
	(*UpdateRegistryRequest)(nil),             // 6: yandex.cloud.iot.devices.v1.UpdateRegistryRequest
	(*UpdateRegistryMetadata)(nil),            // 7: yandex.cloud.iot.devices.v1.UpdateRegistryMetadata
	(*DeleteRegistryRequest)(nil),             // 8: yandex.cloud.iot.devices.v1.DeleteRegistryRequest
	(*DeleteRegistryMetadata)(nil),            // 9: yandex.cloud.iot.devices.v1.DeleteRegistryMetadata
	(*ListRegistryCertificatesRequest)(nil),   // 10: yandex.cloud.iot.devices.v1.ListRegistryCertificatesRequest
	(*ListRegistryCertificatesResponse)(nil),  // 11: yandex.cloud.iot.devices.v1.ListRegistryCertificatesResponse
	(*AddRegistryCertificateRequest)(nil),     // 12: yandex.cloud.iot.devices.v1.AddRegistryCertificateRequest
	(*AddRegistryCertificateMetadata)(nil),    // 13: yandex.cloud.iot.devices.v1.AddRegistryCertificateMetadata
	(*DeleteRegistryCertificateRequest)(nil),  // 14: yandex.cloud.iot.devices.v1.DeleteRegistryCertificateRequest
	(*DeleteRegistryCertificateMetadata)(nil), // 15: yandex.cloud.iot.devices.v1.DeleteRegistryCertificateMetadata
	(*ListRegistryPasswordsRequest)(nil),      // 16: yandex.cloud.iot.devices.v1.ListRegistryPasswordsRequest
	(*ListRegistryPasswordsResponse)(nil),     // 17: yandex.cloud.iot.devices.v1.ListRegistryPasswordsResponse
	(*AddRegistryPasswordRequest)(nil),        // 18: yandex.cloud.iot.devices.v1.AddRegistryPasswordRequest
	(*AddRegistryPasswordMetadata)(nil),       // 19: yandex.cloud.iot.devices.v1.AddRegistryPasswordMetadata
	(*DeleteRegistryPasswordRequest)(nil),     // 20: yandex.cloud.iot.devices.v1.DeleteRegistryPasswordRequest
	(*DeleteRegistryPasswordMetadata)(nil),    // 21: yandex.cloud.iot.devices.v1.DeleteRegistryPasswordMetadata
	(*ListDeviceTopicAliasesRequest)(nil),     // 22: yandex.cloud.iot.devices.v1.ListDeviceTopicAliasesRequest
	(*ListDeviceTopicAliasesResponse)(nil),    // 23: yandex.cloud.iot.devices.v1.ListDeviceTopicAliasesResponse
	(*ListRegistryOperationsRequest)(nil),     // 24: yandex.cloud.iot.devices.v1.ListRegistryOperationsRequest
	(*ListRegistryOperationsResponse)(nil),    // 25: yandex.cloud.iot.devices.v1.ListRegistryOperationsResponse
	(*AddDataStreamExportRequest)(nil),        // 26: yandex.cloud.iot.devices.v1.AddDataStreamExportRequest
	(*AddDataStreamExportMetadata)(nil),       // 27: yandex.cloud.iot.devices.v1.AddDataStreamExportMetadata
	(*DeleteDataStreamExportRequest)(nil),     // 28: yandex.cloud.iot.devices.v1.DeleteDataStreamExportRequest
	(*DeleteDataStreamExportMetadata)(nil),    // 29: yandex.cloud.iot.devices.v1.DeleteDataStreamExportMetadata
	(*ListDataStreamExportsRequest)(nil),      // 30: yandex.cloud.iot.devices.v1.ListDataStreamExportsRequest
	(*ListDataStreamExportsResponse)(nil),     // 31: yandex.cloud.iot.devices.v1.ListDataStreamExportsResponse
	(*DisableRegistryRequest)(nil),            // 32: yandex.cloud.iot.devices.v1.DisableRegistryRequest
	(*DisableRegistryMetadata)(nil),           // 33: yandex.cloud.iot.devices.v1.DisableRegistryMetadata
	(*EnableRegistryRequest)(nil),             // 34: yandex.cloud.iot.devices.v1.EnableRegistryRequest
	(*EnableRegistryMetadata)(nil),            // 35: yandex.cloud.iot.devices.v1.EnableRegistryMetadata
	nil,                                       // 36: yandex.cloud.iot.devices.v1.CreateRegistryRequest.LabelsEntry
	(*CreateRegistryRequest_Certificate)(nil), // 37: yandex.cloud.iot.devices.v1.CreateRegistryRequest.Certificate
	nil,                           // 38: yandex.cloud.iot.devices.v1.UpdateRegistryRequest.LabelsEntry
	(*Registry)(nil),              // 39: yandex.cloud.iot.devices.v1.Registry
	(*LogOptions)(nil),            // 40: yandex.cloud.iot.devices.v1.LogOptions
	(*fieldmaskpb.FieldMask)(nil), // 41: google.protobuf.FieldMask
	(*RegistryCertificate)(nil),   // 42: yandex.cloud.iot.devices.v1.RegistryCertificate
	(*RegistryPassword)(nil),      // 43: yandex.cloud.iot.devices.v1.RegistryPassword
	(*DeviceAlias)(nil),           // 44: yandex.cloud.iot.devices.v1.DeviceAlias
	(*operation.Operation)(nil),   // 45: yandex.cloud.operation.Operation
	(*DataStreamExport)(nil),      // 46: yandex.cloud.iot.devices.v1.DataStreamExport
}
var file_yandex_cloud_iot_devices_v1_registry_service_proto_depIdxs = []int32{
	39, // 0: yandex.cloud.iot.devices.v1.ListRegistriesResponse.registries:type_name -> yandex.cloud.iot.devices.v1.Registry
	36, // 1: yandex.cloud.iot.devices.v1.CreateRegistryRequest.labels:type_name -> yandex.cloud.iot.devices.v1.CreateRegistryRequest.LabelsEntry
	37, // 2: yandex.cloud.iot.devices.v1.CreateRegistryRequest.certificates:type_name -> yandex.cloud.iot.devices.v1.CreateRegistryRequest.Certificate
	40, // 3: yandex.cloud.iot.devices.v1.CreateRegistryRequest.log_options:type_name -> yandex.cloud.iot.devices.v1.LogOptions
	41, // 4: yandex.cloud.iot.devices.v1.UpdateRegistryRequest.update_mask:type_name -> google.protobuf.FieldMask
	38, // 5: yandex.cloud.iot.devices.v1.UpdateRegistryRequest.labels:type_name -> yandex.cloud.iot.devices.v1.UpdateRegistryRequest.LabelsEntry
	40, // 6: yandex.cloud.iot.devices.v1.UpdateRegistryRequest.log_options:type_name -> yandex.cloud.iot.devices.v1.LogOptions
	42, // 7: yandex.cloud.iot.devices.v1.ListRegistryCertificatesResponse.certificates:type_name -> yandex.cloud.iot.devices.v1.RegistryCertificate
	43, // 8: yandex.cloud.iot.devices.v1.ListRegistryPasswordsResponse.passwords:type_name -> yandex.cloud.iot.devices.v1.RegistryPassword
	44, // 9: yandex.cloud.iot.devices.v1.ListDeviceTopicAliasesResponse.aliases:type_name -> yandex.cloud.iot.devices.v1.DeviceAlias
	45, // 10: yandex.cloud.iot.devices.v1.ListRegistryOperationsResponse.operations:type_name -> yandex.cloud.operation.Operation
	46, // 11: yandex.cloud.iot.devices.v1.ListDataStreamExportsResponse.data_stream_exports:type_name -> yandex.cloud.iot.devices.v1.DataStreamExport
	0,  // 12: yandex.cloud.iot.devices.v1.RegistryService.Get:input_type -> yandex.cloud.iot.devices.v1.GetRegistryRequest
	1,  // 13: yandex.cloud.iot.devices.v1.RegistryService.GetByName:input_type -> yandex.cloud.iot.devices.v1.GetByNameRegistryRequest
	2,  // 14: yandex.cloud.iot.devices.v1.RegistryService.List:input_type -> yandex.cloud.iot.devices.v1.ListRegistriesRequest
	4,  // 15: yandex.cloud.iot.devices.v1.RegistryService.Create:input_type -> yandex.cloud.iot.devices.v1.CreateRegistryRequest
	6,  // 16: yandex.cloud.iot.devices.v1.RegistryService.Update:input_type -> yandex.cloud.iot.devices.v1.UpdateRegistryRequest
	8,  // 17: yandex.cloud.iot.devices.v1.RegistryService.Delete:input_type -> yandex.cloud.iot.devices.v1.DeleteRegistryRequest
	10, // 18: yandex.cloud.iot.devices.v1.RegistryService.ListCertificates:input_type -> yandex.cloud.iot.devices.v1.ListRegistryCertificatesRequest
	12, // 19: yandex.cloud.iot.devices.v1.RegistryService.AddCertificate:input_type -> yandex.cloud.iot.devices.v1.AddRegistryCertificateRequest
	14, // 20: yandex.cloud.iot.devices.v1.RegistryService.DeleteCertificate:input_type -> yandex.cloud.iot.devices.v1.DeleteRegistryCertificateRequest
	16, // 21: yandex.cloud.iot.devices.v1.RegistryService.ListPasswords:input_type -> yandex.cloud.iot.devices.v1.ListRegistryPasswordsRequest
	18, // 22: yandex.cloud.iot.devices.v1.RegistryService.AddPassword:input_type -> yandex.cloud.iot.devices.v1.AddRegistryPasswordRequest
	20, // 23: yandex.cloud.iot.devices.v1.RegistryService.DeletePassword:input_type -> yandex.cloud.iot.devices.v1.DeleteRegistryPasswordRequest
	22, // 24: yandex.cloud.iot.devices.v1.RegistryService.ListDeviceTopicAliases:input_type -> yandex.cloud.iot.devices.v1.ListDeviceTopicAliasesRequest
	30, // 25: yandex.cloud.iot.devices.v1.RegistryService.ListDataStreamExports:input_type -> yandex.cloud.iot.devices.v1.ListDataStreamExportsRequest
	26, // 26: yandex.cloud.iot.devices.v1.RegistryService.AddDataStreamExport:input_type -> yandex.cloud.iot.devices.v1.AddDataStreamExportRequest
	28, // 27: yandex.cloud.iot.devices.v1.RegistryService.DeleteDataStreamExport:input_type -> yandex.cloud.iot.devices.v1.DeleteDataStreamExportRequest
	24, // 28: yandex.cloud.iot.devices.v1.RegistryService.ListOperations:input_type -> yandex.cloud.iot.devices.v1.ListRegistryOperationsRequest
	32, // 29: yandex.cloud.iot.devices.v1.RegistryService.Disable:input_type -> yandex.cloud.iot.devices.v1.DisableRegistryRequest
	34, // 30: yandex.cloud.iot.devices.v1.RegistryService.Enable:input_type -> yandex.cloud.iot.devices.v1.EnableRegistryRequest
	39, // 31: yandex.cloud.iot.devices.v1.RegistryService.Get:output_type -> yandex.cloud.iot.devices.v1.Registry
	39, // 32: yandex.cloud.iot.devices.v1.RegistryService.GetByName:output_type -> yandex.cloud.iot.devices.v1.Registry
	3,  // 33: yandex.cloud.iot.devices.v1.RegistryService.List:output_type -> yandex.cloud.iot.devices.v1.ListRegistriesResponse
	45, // 34: yandex.cloud.iot.devices.v1.RegistryService.Create:output_type -> yandex.cloud.operation.Operation
	45, // 35: yandex.cloud.iot.devices.v1.RegistryService.Update:output_type -> yandex.cloud.operation.Operation
	45, // 36: yandex.cloud.iot.devices.v1.RegistryService.Delete:output_type -> yandex.cloud.operation.Operation
	11, // 37: yandex.cloud.iot.devices.v1.RegistryService.ListCertificates:output_type -> yandex.cloud.iot.devices.v1.ListRegistryCertificatesResponse
	45, // 38: yandex.cloud.iot.devices.v1.RegistryService.AddCertificate:output_type -> yandex.cloud.operation.Operation
	45, // 39: yandex.cloud.iot.devices.v1.RegistryService.DeleteCertificate:output_type -> yandex.cloud.operation.Operation
	17, // 40: yandex.cloud.iot.devices.v1.RegistryService.ListPasswords:output_type -> yandex.cloud.iot.devices.v1.ListRegistryPasswordsResponse
	45, // 41: yandex.cloud.iot.devices.v1.RegistryService.AddPassword:output_type -> yandex.cloud.operation.Operation
	45, // 42: yandex.cloud.iot.devices.v1.RegistryService.DeletePassword:output_type -> yandex.cloud.operation.Operation
	23, // 43: yandex.cloud.iot.devices.v1.RegistryService.ListDeviceTopicAliases:output_type -> yandex.cloud.iot.devices.v1.ListDeviceTopicAliasesResponse
	31, // 44: yandex.cloud.iot.devices.v1.RegistryService.ListDataStreamExports:output_type -> yandex.cloud.iot.devices.v1.ListDataStreamExportsResponse
	45, // 45: yandex.cloud.iot.devices.v1.RegistryService.AddDataStreamExport:output_type -> yandex.cloud.operation.Operation
	45, // 46: yandex.cloud.iot.devices.v1.RegistryService.DeleteDataStreamExport:output_type -> yandex.cloud.operation.Operation
	25, // 47: yandex.cloud.iot.devices.v1.RegistryService.ListOperations:output_type -> yandex.cloud.iot.devices.v1.ListRegistryOperationsResponse
	45, // 48: yandex.cloud.iot.devices.v1.RegistryService.Disable:output_type -> yandex.cloud.operation.Operation
	45, // 49: yandex.cloud.iot.devices.v1.RegistryService.Enable:output_type -> yandex.cloud.operation.Operation
	31, // [31:50] is the sub-list for method output_type
	12, // [12:31] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_yandex_cloud_iot_devices_v1_registry_service_proto_init() }
func file_yandex_cloud_iot_devices_v1_registry_service_proto_init() {
	if File_yandex_cloud_iot_devices_v1_registry_service_proto != nil {
		return
	}
	file_yandex_cloud_iot_devices_v1_registry_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDesc), len(file_yandex_cloud_iot_devices_v1_registry_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_iot_devices_v1_registry_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_iot_devices_v1_registry_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_iot_devices_v1_registry_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_iot_devices_v1_registry_service_proto = out.File
	file_yandex_cloud_iot_devices_v1_registry_service_proto_goTypes = nil
	file_yandex_cloud_iot_devices_v1_registry_service_proto_depIdxs = nil
}

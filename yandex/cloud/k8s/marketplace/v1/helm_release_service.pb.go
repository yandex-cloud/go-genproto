// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: yandex/cloud/k8s/marketplace/v1/helm_release_service.proto

package k8s_marketplace

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListHelmReleasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Kubernetes cluster to list Helm releases from.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page that should be returned.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token for pagination to retrieve the next page of results.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListHelmReleasesRequest) Reset() {
	*x = ListHelmReleasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHelmReleasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHelmReleasesRequest) ProtoMessage() {}

func (x *ListHelmReleasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHelmReleasesRequest.ProtoReflect.Descriptor instead.
func (*ListHelmReleasesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListHelmReleasesRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListHelmReleasesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListHelmReleasesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListHelmReleasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of Helm releases in the Kubernetes cluster.
	HelmReleases []*HelmRelease `protobuf:"bytes,1,rep,name=helm_releases,json=helmReleases,proto3" json:"helm_releases,omitempty"`
	// Token for retrieving the next page of Helm releases.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListHelmReleasesResponse) Reset() {
	*x = ListHelmReleasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHelmReleasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHelmReleasesResponse) ProtoMessage() {}

func (x *ListHelmReleasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHelmReleasesResponse.ProtoReflect.Descriptor instead.
func (*ListHelmReleasesResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListHelmReleasesResponse) GetHelmReleases() []*HelmRelease {
	if x != nil {
		return x.HelmReleases
	}
	return nil
}

func (x *ListHelmReleasesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetHelmReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Helm release to retrieve.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetHelmReleaseRequest) Reset() {
	*x = GetHelmReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHelmReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHelmReleaseRequest) ProtoMessage() {}

func (x *GetHelmReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHelmReleaseRequest.ProtoReflect.Descriptor instead.
func (*GetHelmReleaseRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetHelmReleaseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type InstallHelmReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Kubernetes cluster where the Helm release is to be installed.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The product version ID to install.
	ProductVersionId string `protobuf:"bytes,2,opt,name=product_version_id,json=productVersionId,proto3" json:"product_version_id,omitempty"`
	// User-defined values for the Helm chart during installation.
	UserValues []*ValueWithKey `protobuf:"bytes,3,rep,name=user_values,json=userValues,proto3" json:"user_values,omitempty"`
}

func (x *InstallHelmReleaseRequest) Reset() {
	*x = InstallHelmReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallHelmReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallHelmReleaseRequest) ProtoMessage() {}

func (x *InstallHelmReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallHelmReleaseRequest.ProtoReflect.Descriptor instead.
func (*InstallHelmReleaseRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDescGZIP(), []int{3}
}

func (x *InstallHelmReleaseRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *InstallHelmReleaseRequest) GetProductVersionId() string {
	if x != nil {
		return x.ProductVersionId
	}
	return ""
}

func (x *InstallHelmReleaseRequest) GetUserValues() []*ValueWithKey {
	if x != nil {
		return x.UserValues
	}
	return nil
}

type InstallHelmReleaseMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Kubernetes cluster where the Helm release is being installed.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The ID of the Helm release being installed.
	HelmReleaseId string `protobuf:"bytes,2,opt,name=helm_release_id,json=helmReleaseId,proto3" json:"helm_release_id,omitempty"`
	// The ID of the product version being deployed.
	ProductVersionId string `protobuf:"bytes,3,opt,name=product_version_id,json=productVersionId,proto3" json:"product_version_id,omitempty"`
}

func (x *InstallHelmReleaseMetadata) Reset() {
	*x = InstallHelmReleaseMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallHelmReleaseMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallHelmReleaseMetadata) ProtoMessage() {}

func (x *InstallHelmReleaseMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallHelmReleaseMetadata.ProtoReflect.Descriptor instead.
func (*InstallHelmReleaseMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDescGZIP(), []int{4}
}

func (x *InstallHelmReleaseMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *InstallHelmReleaseMetadata) GetHelmReleaseId() string {
	if x != nil {
		return x.HelmReleaseId
	}
	return ""
}

func (x *InstallHelmReleaseMetadata) GetProductVersionId() string {
	if x != nil {
		return x.ProductVersionId
	}
	return ""
}

type UpdateHelmReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Helm release to update.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the new product version for the release.
	ProductVersionId string `protobuf:"bytes,2,opt,name=product_version_id,json=productVersionId,proto3" json:"product_version_id,omitempty"`
	// Custom user values to apply during the update.
	UserValues []*ValueWithKey `protobuf:"bytes,3,rep,name=user_values,json=userValues,proto3" json:"user_values,omitempty"`
}

func (x *UpdateHelmReleaseRequest) Reset() {
	*x = UpdateHelmReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHelmReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHelmReleaseRequest) ProtoMessage() {}

func (x *UpdateHelmReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHelmReleaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateHelmReleaseRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateHelmReleaseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateHelmReleaseRequest) GetProductVersionId() string {
	if x != nil {
		return x.ProductVersionId
	}
	return ""
}

func (x *UpdateHelmReleaseRequest) GetUserValues() []*ValueWithKey {
	if x != nil {
		return x.UserValues
	}
	return nil
}

type UpdateHelmReleaseMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Kubernetes cluster where the Helm release is being updated.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The ID of the Helm release being updated.
	HelmReleaseId string `protobuf:"bytes,2,opt,name=helm_release_id,json=helmReleaseId,proto3" json:"helm_release_id,omitempty"`
	// The ID of the new product version to update the Helm release to.
	ProductVersionId string `protobuf:"bytes,3,opt,name=product_version_id,json=productVersionId,proto3" json:"product_version_id,omitempty"`
}

func (x *UpdateHelmReleaseMetadata) Reset() {
	*x = UpdateHelmReleaseMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateHelmReleaseMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHelmReleaseMetadata) ProtoMessage() {}

func (x *UpdateHelmReleaseMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHelmReleaseMetadata.ProtoReflect.Descriptor instead.
func (*UpdateHelmReleaseMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateHelmReleaseMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateHelmReleaseMetadata) GetHelmReleaseId() string {
	if x != nil {
		return x.HelmReleaseId
	}
	return ""
}

func (x *UpdateHelmReleaseMetadata) GetProductVersionId() string {
	if x != nil {
		return x.ProductVersionId
	}
	return ""
}

type UninstallHelmReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Helm release to retrieve.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UninstallHelmReleaseRequest) Reset() {
	*x = UninstallHelmReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UninstallHelmReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UninstallHelmReleaseRequest) ProtoMessage() {}

func (x *UninstallHelmReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UninstallHelmReleaseRequest.ProtoReflect.Descriptor instead.
func (*UninstallHelmReleaseRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDescGZIP(), []int{7}
}

func (x *UninstallHelmReleaseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UninstallHelmReleaseMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Kubernetes cluster where the release is being uninstalled.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The ID of the Helm release being uninstalled.
	HelmReleaseId string `protobuf:"bytes,2,opt,name=helm_release_id,json=helmReleaseId,proto3" json:"helm_release_id,omitempty"`
}

func (x *UninstallHelmReleaseMetadata) Reset() {
	*x = UninstallHelmReleaseMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UninstallHelmReleaseMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UninstallHelmReleaseMetadata) ProtoMessage() {}

func (x *UninstallHelmReleaseMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UninstallHelmReleaseMetadata.ProtoReflect.Descriptor instead.
func (*UninstallHelmReleaseMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDescGZIP(), []int{8}
}

func (x *UninstallHelmReleaseMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UninstallHelmReleaseMetadata) GetHelmReleaseId() string {
	if x != nil {
		return x.HelmReleaseId
	}
	return ""
}

type ValueWithKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key associated with the value.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The value associated with the key.
	Value *Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ValueWithKey) Reset() {
	*x = ValueWithKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueWithKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueWithKey) ProtoMessage() {}

func (x *ValueWithKey) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueWithKey.ProtoReflect.Descriptor instead.
func (*ValueWithKey) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDescGZIP(), []int{9}
}

func (x *ValueWithKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ValueWithKey) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Value_TypedValue
	Value isValue_Value `protobuf_oneof:"value"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDescGZIP(), []int{10}
}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Value) GetTypedValue() string {
	if x, ok := x.GetValue().(*Value_TypedValue); ok {
		return x.TypedValue
	}
	return ""
}

type isValue_Value interface {
	isValue_Value()
}

type Value_TypedValue struct {
	// The typed string value.
	TypedValue string `protobuf:"bytes,1,opt,name=typed_value,json=typedValue,proto3,oneof"`
}

func (*Value_TypedValue) isValue_Value() {}

var File_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6b,
	0x38, 0x73, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0xfa, 0xc7,
	0x31, 0x06, 0x30, 0x2d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30,
	0x30, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x95, 0x01, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x68, 0x65, 0x6c,
	0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6b, 0x38, 0x73, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x0c,
	0x68, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x48, 0x65, 0x6c, 0x6d, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x48,
	0x65, 0x6c, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x65, 0x6c,
	0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38,
	0x73, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x68, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x1b,
	0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x71, 0x0a, 0x1c, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x48, 0x65,
	0x6c, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0f, 0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0d, 0x68, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x33, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32,
	0xac, 0x08, 0x0a, 0x12, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb5, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x38, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b,
	0x38, 0x73, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x2d, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x2d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0xaa,
	0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x36, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x6c, 0x6d,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38,
	0x73, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x2d, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x2d, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xda, 0x01, 0x0a, 0x07,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x3a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x70, 0xb2, 0xd2, 0x2a, 0x29, 0x0a, 0x1a, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0b, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x3a, 0x01, 0x2a, 0x22, 0x38,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x2d, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x2d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x3a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0xd4, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x6c, 0x6d,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x6c, 0xb2, 0xd2, 0x2a, 0x28, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x65, 0x6c, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x0b, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x3a, 0x01, 0x2a, 0x32, 0x35, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x2d, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x65, 0x6c,
	0x6d, 0x2d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0xfc, 0x01, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x3c, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x38, 0x73,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d,
	0x01, 0xb2, 0xd2, 0x2a, 0x35, 0x0a, 0x1c, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x48, 0x65, 0x6c, 0x6d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4e,
	0x3a, 0x01, 0x2a, 0x22, 0x49, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x2d, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x2d, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x75, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x42, 0x7a,
	0x0a, 0x23, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x5a, 0x53, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67,
	0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6b, 0x38, 0x73, 0x2f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x6b, 0x38, 0x73, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDescData = file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDesc
)

func file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDescData)
	})
	return file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDescData
}

var file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_goTypes = []any{
	(*ListHelmReleasesRequest)(nil),      // 0: yandex.cloud.k8s.marketplace.v1.ListHelmReleasesRequest
	(*ListHelmReleasesResponse)(nil),     // 1: yandex.cloud.k8s.marketplace.v1.ListHelmReleasesResponse
	(*GetHelmReleaseRequest)(nil),        // 2: yandex.cloud.k8s.marketplace.v1.GetHelmReleaseRequest
	(*InstallHelmReleaseRequest)(nil),    // 3: yandex.cloud.k8s.marketplace.v1.InstallHelmReleaseRequest
	(*InstallHelmReleaseMetadata)(nil),   // 4: yandex.cloud.k8s.marketplace.v1.InstallHelmReleaseMetadata
	(*UpdateHelmReleaseRequest)(nil),     // 5: yandex.cloud.k8s.marketplace.v1.UpdateHelmReleaseRequest
	(*UpdateHelmReleaseMetadata)(nil),    // 6: yandex.cloud.k8s.marketplace.v1.UpdateHelmReleaseMetadata
	(*UninstallHelmReleaseRequest)(nil),  // 7: yandex.cloud.k8s.marketplace.v1.UninstallHelmReleaseRequest
	(*UninstallHelmReleaseMetadata)(nil), // 8: yandex.cloud.k8s.marketplace.v1.UninstallHelmReleaseMetadata
	(*ValueWithKey)(nil),                 // 9: yandex.cloud.k8s.marketplace.v1.ValueWithKey
	(*Value)(nil),                        // 10: yandex.cloud.k8s.marketplace.v1.Value
	(*HelmRelease)(nil),                  // 11: yandex.cloud.k8s.marketplace.v1.HelmRelease
	(*operation.Operation)(nil),          // 12: yandex.cloud.operation.Operation
}
var file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_depIdxs = []int32{
	11, // 0: yandex.cloud.k8s.marketplace.v1.ListHelmReleasesResponse.helm_releases:type_name -> yandex.cloud.k8s.marketplace.v1.HelmRelease
	9,  // 1: yandex.cloud.k8s.marketplace.v1.InstallHelmReleaseRequest.user_values:type_name -> yandex.cloud.k8s.marketplace.v1.ValueWithKey
	9,  // 2: yandex.cloud.k8s.marketplace.v1.UpdateHelmReleaseRequest.user_values:type_name -> yandex.cloud.k8s.marketplace.v1.ValueWithKey
	10, // 3: yandex.cloud.k8s.marketplace.v1.ValueWithKey.value:type_name -> yandex.cloud.k8s.marketplace.v1.Value
	0,  // 4: yandex.cloud.k8s.marketplace.v1.HelmReleaseService.List:input_type -> yandex.cloud.k8s.marketplace.v1.ListHelmReleasesRequest
	2,  // 5: yandex.cloud.k8s.marketplace.v1.HelmReleaseService.Get:input_type -> yandex.cloud.k8s.marketplace.v1.GetHelmReleaseRequest
	3,  // 6: yandex.cloud.k8s.marketplace.v1.HelmReleaseService.Install:input_type -> yandex.cloud.k8s.marketplace.v1.InstallHelmReleaseRequest
	5,  // 7: yandex.cloud.k8s.marketplace.v1.HelmReleaseService.Update:input_type -> yandex.cloud.k8s.marketplace.v1.UpdateHelmReleaseRequest
	7,  // 8: yandex.cloud.k8s.marketplace.v1.HelmReleaseService.Uninstall:input_type -> yandex.cloud.k8s.marketplace.v1.UninstallHelmReleaseRequest
	1,  // 9: yandex.cloud.k8s.marketplace.v1.HelmReleaseService.List:output_type -> yandex.cloud.k8s.marketplace.v1.ListHelmReleasesResponse
	11, // 10: yandex.cloud.k8s.marketplace.v1.HelmReleaseService.Get:output_type -> yandex.cloud.k8s.marketplace.v1.HelmRelease
	12, // 11: yandex.cloud.k8s.marketplace.v1.HelmReleaseService.Install:output_type -> yandex.cloud.operation.Operation
	12, // 12: yandex.cloud.k8s.marketplace.v1.HelmReleaseService.Update:output_type -> yandex.cloud.operation.Operation
	12, // 13: yandex.cloud.k8s.marketplace.v1.HelmReleaseService.Uninstall:output_type -> yandex.cloud.operation.Operation
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_init() }
func file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_init() {
	if File_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto != nil {
		return
	}
	file_yandex_cloud_k8s_marketplace_v1_helm_release_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ListHelmReleasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListHelmReleasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetHelmReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*InstallHelmReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*InstallHelmReleaseMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateHelmReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateHelmReleaseMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UninstallHelmReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UninstallHelmReleaseMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ValueWithKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes[10].OneofWrappers = []any{
		(*Value_TypedValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto = out.File
	file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_rawDesc = nil
	file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_goTypes = nil
	file_yandex_cloud_k8s_marketplace_v1_helm_release_service_proto_depIdxs = nil
}

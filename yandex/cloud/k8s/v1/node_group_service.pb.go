// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/k8s/v1/node_group_service.proto

package k8s

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetNodeGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the node group to return.
	// To get the node group ID use a [NodeGroupService.List] request.
	NodeGroupId   string `protobuf:"bytes,1,opt,name=node_group_id,json=nodeGroupId,proto3" json:"node_group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNodeGroupRequest) Reset() {
	*x = GetNodeGroupRequest{}
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeGroupRequest) ProtoMessage() {}

func (x *GetNodeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeGroupRequest.ProtoReflect.Descriptor instead.
func (*GetNodeGroupRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_group_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetNodeGroupRequest) GetNodeGroupId() string {
	if x != nil {
		return x.NodeGroupId
	}
	return ""
}

type ListNodeGroupsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to list node groups in.
	// To get the folder ID use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size],
	// the service returns a [ListNodeGroupsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set `page_token` to the
	// [ListNodeGroupsResponse.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression must specify:
	// 1. The field name. Currently you can use filtering only on [NodeGroup.name] field.
	// 2. An `=` operator.
	// 3. The value in double quotes (`"`). Must be 3-63 characters long and match the regular expression `[a-z][-a-z0-9]{1,61}[a-z0-9]`.
	Filter        string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNodeGroupsRequest) Reset() {
	*x = ListNodeGroupsRequest{}
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNodeGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeGroupsRequest) ProtoMessage() {}

func (x *ListNodeGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListNodeGroupsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_group_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListNodeGroupsRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListNodeGroupsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNodeGroupsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListNodeGroupsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListNodeGroupsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of node groups.
	NodeGroups []*NodeGroup `protobuf:"bytes,1,rep,name=node_groups,json=nodeGroups,proto3" json:"node_groups,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListNodeGroupsRequest.page_size], use
	// the `next_page_token` as the value
	// for the [ListNodeGroupsRequest.page_token] query parameter
	// in the next list request. Each subsequent list request will have its own
	// `next_page_token` to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNodeGroupsResponse) Reset() {
	*x = ListNodeGroupsResponse{}
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNodeGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeGroupsResponse) ProtoMessage() {}

func (x *ListNodeGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListNodeGroupsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_group_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListNodeGroupsResponse) GetNodeGroups() []*NodeGroup {
	if x != nil {
		return x.NodeGroups
	}
	return nil
}

func (x *ListNodeGroupsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListNodeGroupNodesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the node group to list.
	// To get the node group ID use a [NodeGroupService.List] request.
	NodeGroupId string `protobuf:"bytes,1,opt,name=node_group_id,json=nodeGroupId,proto3" json:"node_group_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size],
	// the service returns a [ListNodeGroupsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set `page_token` to the
	// [ListNodeGroupNodesResponse.next_page_token] returned by a previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNodeGroupNodesRequest) Reset() {
	*x = ListNodeGroupNodesRequest{}
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNodeGroupNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeGroupNodesRequest) ProtoMessage() {}

func (x *ListNodeGroupNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeGroupNodesRequest.ProtoReflect.Descriptor instead.
func (*ListNodeGroupNodesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_group_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListNodeGroupNodesRequest) GetNodeGroupId() string {
	if x != nil {
		return x.NodeGroupId
	}
	return ""
}

func (x *ListNodeGroupNodesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNodeGroupNodesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListNodeGroupNodesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of nodes.
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListNodeGroupNodesRequest.page_size], use
	// the `next_page_token` as the value
	// for the [ListNodeGroupNodesRequest.page_token] query parameter
	// in the next list request. Each subsequent list request will have its own
	// `next_page_token` to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNodeGroupNodesResponse) Reset() {
	*x = ListNodeGroupNodesResponse{}
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNodeGroupNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeGroupNodesResponse) ProtoMessage() {}

func (x *ListNodeGroupNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeGroupNodesResponse.ProtoReflect.Descriptor instead.
func (*ListNodeGroupNodesResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_group_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListNodeGroupNodesResponse) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ListNodeGroupNodesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type DeleteNodeGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the node group to delete.
	// To get node group ID use a [NodeGroupService.List] request.
	NodeGroupId   string `protobuf:"bytes,1,opt,name=node_group_id,json=nodeGroupId,proto3" json:"node_group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteNodeGroupRequest) Reset() {
	*x = DeleteNodeGroupRequest{}
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNodeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeGroupRequest) ProtoMessage() {}

func (x *DeleteNodeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodeGroupRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_group_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteNodeGroupRequest) GetNodeGroupId() string {
	if x != nil {
		return x.NodeGroupId
	}
	return ""
}

type DeleteNodeGroupMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the node group that is being deleted.
	NodeGroupId   string `protobuf:"bytes,1,opt,name=node_group_id,json=nodeGroupId,proto3" json:"node_group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteNodeGroupMetadata) Reset() {
	*x = DeleteNodeGroupMetadata{}
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNodeGroupMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeGroupMetadata) ProtoMessage() {}

func (x *DeleteNodeGroupMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeGroupMetadata.ProtoReflect.Descriptor instead.
func (*DeleteNodeGroupMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_group_service_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteNodeGroupMetadata) GetNodeGroupId() string {
	if x != nil {
		return x.NodeGroupId
	}
	return ""
}

type UpdateNodeGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the node group to update.
	// To get the node group ID use a [NodeGroupService.List] request.
	NodeGroupId string `protobuf:"bytes,1,opt,name=node_group_id,json=nodeGroupId,proto3" json:"node_group_id,omitempty"`
	// Field mask that specifies which fields of the node group are going to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Name of the node group.
	// The name must be unique within the folder.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the node group.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels as `key:value` pairs.
	//
	// Existing set of `labels` is completely replaced by the provided set.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Node template for the node group.
	// Change may trigger nodes rolling reboot or recreate.
	NodeTemplate *NodeTemplate `protobuf:"bytes,8,opt,name=node_template,json=nodeTemplate,proto3" json:"node_template,omitempty"`
	// Scale policy of the node group.
	ScalePolicy *ScalePolicy `protobuf:"bytes,6,opt,name=scale_policy,json=scalePolicy,proto3" json:"scale_policy,omitempty"`
	// Allocation policy of the node group by the zones and regions.
	AllocationPolicy *NodeGroupAllocationPolicy `protobuf:"bytes,9,opt,name=allocation_policy,json=allocationPolicy,proto3" json:"allocation_policy,omitempty"`
	// Deploy policy according to which the updates are rolled out. If not specified,
	// the default is used.
	DeployPolicy *DeployPolicy `protobuf:"bytes,15,opt,name=deploy_policy,json=deployPolicy,proto3" json:"deploy_policy,omitempty"`
	// Version of Kubernetes components that runs on the nodes.
	Version *UpdateVersionSpec `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
	// Maintenance policy of the node group.
	MaintenancePolicy *NodeGroupMaintenancePolicy `protobuf:"bytes,11,opt,name=maintenance_policy,json=maintenancePolicy,proto3" json:"maintenance_policy,omitempty"`
	// Support for unsafe sysctl parameters. For more details see [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/).
	AllowedUnsafeSysctls []string `protobuf:"bytes,12,rep,name=allowed_unsafe_sysctls,json=allowedUnsafeSysctls,proto3" json:"allowed_unsafe_sysctls,omitempty"`
	// Taints that are applied to the nodes of the node group at creation time.
	NodeTaints []*Taint `protobuf:"bytes,13,rep,name=node_taints,json=nodeTaints,proto3" json:"node_taints,omitempty"`
	// Labels that are assigned to the nodes of the node group at creation time.
	NodeLabels    map[string]string `protobuf:"bytes,14,rep,name=node_labels,json=nodeLabels,proto3" json:"node_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateNodeGroupRequest) Reset() {
	*x = UpdateNodeGroupRequest{}
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNodeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeGroupRequest) ProtoMessage() {}

func (x *UpdateNodeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeGroupRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_group_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateNodeGroupRequest) GetNodeGroupId() string {
	if x != nil {
		return x.NodeGroupId
	}
	return ""
}

func (x *UpdateNodeGroupRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateNodeGroupRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateNodeGroupRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetNodeTemplate() *NodeTemplate {
	if x != nil {
		return x.NodeTemplate
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetScalePolicy() *ScalePolicy {
	if x != nil {
		return x.ScalePolicy
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetAllocationPolicy() *NodeGroupAllocationPolicy {
	if x != nil {
		return x.AllocationPolicy
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetDeployPolicy() *DeployPolicy {
	if x != nil {
		return x.DeployPolicy
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetVersion() *UpdateVersionSpec {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetMaintenancePolicy() *NodeGroupMaintenancePolicy {
	if x != nil {
		return x.MaintenancePolicy
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetAllowedUnsafeSysctls() []string {
	if x != nil {
		return x.AllowedUnsafeSysctls
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetNodeTaints() []*Taint {
	if x != nil {
		return x.NodeTaints
	}
	return nil
}

func (x *UpdateNodeGroupRequest) GetNodeLabels() map[string]string {
	if x != nil {
		return x.NodeLabels
	}
	return nil
}

type UpdateNodeGroupMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Node group that is being updated.
	NodeGroupId   string `protobuf:"bytes,1,opt,name=node_group_id,json=nodeGroupId,proto3" json:"node_group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateNodeGroupMetadata) Reset() {
	*x = UpdateNodeGroupMetadata{}
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNodeGroupMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeGroupMetadata) ProtoMessage() {}

func (x *UpdateNodeGroupMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeGroupMetadata.ProtoReflect.Descriptor instead.
func (*UpdateNodeGroupMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_group_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateNodeGroupMetadata) GetNodeGroupId() string {
	if x != nil {
		return x.NodeGroupId
	}
	return ""
}

type CreateNodeGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Kubernetes cluster to create a node group in.
	// To get the Kubernetes cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the node group.
	// The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the node group.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels as `key:value` pairs.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Node template for creating the node group.
	NodeTemplate *NodeTemplate `protobuf:"bytes,5,opt,name=node_template,json=nodeTemplate,proto3" json:"node_template,omitempty"`
	// Scale policy of the node group.
	ScalePolicy *ScalePolicy `protobuf:"bytes,6,opt,name=scale_policy,json=scalePolicy,proto3" json:"scale_policy,omitempty"`
	// Allocation policy of the node group by the zones and regions.
	AllocationPolicy *NodeGroupAllocationPolicy `protobuf:"bytes,7,opt,name=allocation_policy,json=allocationPolicy,proto3" json:"allocation_policy,omitempty"`
	// Deploy policy according to which the updates are rolled out. If not specified,
	// the default is used.
	DeployPolicy *DeployPolicy `protobuf:"bytes,13,opt,name=deploy_policy,json=deployPolicy,proto3" json:"deploy_policy,omitempty"`
	// Version of Kubernetes components that runs on the nodes.
	Version string `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	// Maintenance policy of the node group.
	MaintenancePolicy *NodeGroupMaintenancePolicy `protobuf:"bytes,9,opt,name=maintenance_policy,json=maintenancePolicy,proto3" json:"maintenance_policy,omitempty"`
	// Support for unsafe sysctl parameters. For more details see [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/).
	AllowedUnsafeSysctls []string `protobuf:"bytes,10,rep,name=allowed_unsafe_sysctls,json=allowedUnsafeSysctls,proto3" json:"allowed_unsafe_sysctls,omitempty"`
	// Taints that are applied to the nodes of the node group at creation time.
	NodeTaints []*Taint `protobuf:"bytes,11,rep,name=node_taints,json=nodeTaints,proto3" json:"node_taints,omitempty"`
	// Labels that are assigned to the nodes of the node group at creation time.
	NodeLabels    map[string]string `protobuf:"bytes,12,rep,name=node_labels,json=nodeLabels,proto3" json:"node_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateNodeGroupRequest) Reset() {
	*x = CreateNodeGroupRequest{}
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNodeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeGroupRequest) ProtoMessage() {}

func (x *CreateNodeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateNodeGroupRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_group_service_proto_rawDescGZIP(), []int{9}
}

func (x *CreateNodeGroupRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateNodeGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNodeGroupRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateNodeGroupRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateNodeGroupRequest) GetNodeTemplate() *NodeTemplate {
	if x != nil {
		return x.NodeTemplate
	}
	return nil
}

func (x *CreateNodeGroupRequest) GetScalePolicy() *ScalePolicy {
	if x != nil {
		return x.ScalePolicy
	}
	return nil
}

func (x *CreateNodeGroupRequest) GetAllocationPolicy() *NodeGroupAllocationPolicy {
	if x != nil {
		return x.AllocationPolicy
	}
	return nil
}

func (x *CreateNodeGroupRequest) GetDeployPolicy() *DeployPolicy {
	if x != nil {
		return x.DeployPolicy
	}
	return nil
}

func (x *CreateNodeGroupRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateNodeGroupRequest) GetMaintenancePolicy() *NodeGroupMaintenancePolicy {
	if x != nil {
		return x.MaintenancePolicy
	}
	return nil
}

func (x *CreateNodeGroupRequest) GetAllowedUnsafeSysctls() []string {
	if x != nil {
		return x.AllowedUnsafeSysctls
	}
	return nil
}

func (x *CreateNodeGroupRequest) GetNodeTaints() []*Taint {
	if x != nil {
		return x.NodeTaints
	}
	return nil
}

func (x *CreateNodeGroupRequest) GetNodeLabels() map[string]string {
	if x != nil {
		return x.NodeLabels
	}
	return nil
}

type CreateNodeGroupMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the node group that is being created.
	NodeGroupId   string `protobuf:"bytes,1,opt,name=node_group_id,json=nodeGroupId,proto3" json:"node_group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateNodeGroupMetadata) Reset() {
	*x = CreateNodeGroupMetadata{}
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNodeGroupMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeGroupMetadata) ProtoMessage() {}

func (x *CreateNodeGroupMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeGroupMetadata.ProtoReflect.Descriptor instead.
func (*CreateNodeGroupMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_group_service_proto_rawDescGZIP(), []int{10}
}

func (x *CreateNodeGroupMetadata) GetNodeGroupId() string {
	if x != nil {
		return x.NodeGroupId
	}
	return ""
}

type AutoUpgradeNodeGroupMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the node group that is being auto upgraded.
	NodeGroupId   string `protobuf:"bytes,1,opt,name=node_group_id,json=nodeGroupId,proto3" json:"node_group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutoUpgradeNodeGroupMetadata) Reset() {
	*x = AutoUpgradeNodeGroupMetadata{}
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoUpgradeNodeGroupMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoUpgradeNodeGroupMetadata) ProtoMessage() {}

func (x *AutoUpgradeNodeGroupMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoUpgradeNodeGroupMetadata.ProtoReflect.Descriptor instead.
func (*AutoUpgradeNodeGroupMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_group_service_proto_rawDescGZIP(), []int{11}
}

func (x *AutoUpgradeNodeGroupMetadata) GetNodeGroupId() string {
	if x != nil {
		return x.NodeGroupId
	}
	return ""
}

type ListNodeGroupOperationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the node group to list operations for.
	NodeGroupId string `protobuf:"bytes,1,opt,name=node_group_id,json=nodeGroupId,proto3" json:"node_group_id,omitempty"`
	// The maximum number of results per page that should be returned. If the number of available
	// results is larger than [page_size], the service returns a [ListNodeGroupOperationsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set `page_token` to the
	// [ListNodeGroupOperationsResponse.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// Currently you can use filtering only on [NodeGroup.name] field.
	Filter        string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNodeGroupOperationsRequest) Reset() {
	*x = ListNodeGroupOperationsRequest{}
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNodeGroupOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeGroupOperationsRequest) ProtoMessage() {}

func (x *ListNodeGroupOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeGroupOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListNodeGroupOperationsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_group_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListNodeGroupOperationsRequest) GetNodeGroupId() string {
	if x != nil {
		return x.NodeGroupId
	}
	return ""
}

func (x *ListNodeGroupOperationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNodeGroupOperationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListNodeGroupOperationsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListNodeGroupOperationsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of operations for the specified node group.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListNodeGroupOperationsRequest.page_size], use the `next_page_token` as the value
	// for the [ListNodeGroupOperationsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own `next_page_token` to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNodeGroupOperationsResponse) Reset() {
	*x = ListNodeGroupOperationsResponse{}
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNodeGroupOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodeGroupOperationsResponse) ProtoMessage() {}

func (x *ListNodeGroupOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodeGroupOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListNodeGroupOperationsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_k8s_v1_node_group_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListNodeGroupOperationsResponse) GetOperations() []*operation.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListNodeGroupOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_yandex_cloud_k8s_v1_node_group_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_k8s_v1_node_group_service_proto_rawDesc = "" +
	"\n" +
	",yandex/cloud/k8s/v1/node_group_service.proto\x12\x13yandex.cloud.k8s.v1\x1a\x1cgoogle/api/annotations.proto\x1a google/protobuf/field_mask.proto\x1a yandex/cloud/api/operation.proto\x1a\x1eyandex/cloud/k8s/v1/node.proto\x1a$yandex/cloud/k8s/v1/node_group.proto\x1a!yandex/cloud/k8s/v1/version.proto\x1a&yandex/cloud/operation/operation.proto\x1a\x1dyandex/cloud/validation.proto\"?\n" +
	"\x13GetNodeGroupRequest\x12(\n" +
	"\rnode_group_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\vnodeGroupId\"\xb1\x01\n" +
	"\x15ListNodeGroupsRequest\x12!\n" +
	"\tfolder_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\bfolderId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\x12\"\n" +
	"\x06filter\x18\x04 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"\x81\x01\n" +
	"\x16ListNodeGroupsResponse\x12?\n" +
	"\vnode_groups\x18\x01 \x03(\v2\x1e.yandex.cloud.k8s.v1.NodeGroupR\n" +
	"nodeGroups\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x98\x01\n" +
	"\x19ListNodeGroupNodesRequest\x12(\n" +
	"\rnode_group_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\vnodeGroupId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"u\n" +
	"\x1aListNodeGroupNodesResponse\x12/\n" +
	"\x05nodes\x18\x01 \x03(\v2\x19.yandex.cloud.k8s.v1.NodeR\x05nodes\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"B\n" +
	"\x16DeleteNodeGroupRequest\x12(\n" +
	"\rnode_group_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\vnodeGroupId\"=\n" +
	"\x17DeleteNodeGroupMetadata\x12\"\n" +
	"\rnode_group_id\x18\x01 \x01(\tR\vnodeGroupId\"\xf4\t\n" +
	"\x16UpdateNodeGroupRequest\x12(\n" +
	"\rnode_group_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\vnodeGroupId\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x128\n" +
	"\x04name\x18\x03 \x01(\tB$\xf2\xc71 |[a-z]([-a-z0-9]{0,61}[a-z0-9])?R\x04name\x12+\n" +
	"\vdescription\x18\x04 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x94\x01\n" +
	"\x06labels\x18\x05 \x03(\v27.yandex.cloud.k8s.v1.UpdateNodeGroupRequest.LabelsEntryBC\xf2\xc71\x0f[-_./\\@0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x1c\x12\x14[a-z][-_./\\@0-9a-z]*\x1a\x041-63R\x06labels\x12F\n" +
	"\rnode_template\x18\b \x01(\v2!.yandex.cloud.k8s.v1.NodeTemplateR\fnodeTemplate\x12C\n" +
	"\fscale_policy\x18\x06 \x01(\v2 .yandex.cloud.k8s.v1.ScalePolicyR\vscalePolicy\x12[\n" +
	"\x11allocation_policy\x18\t \x01(\v2..yandex.cloud.k8s.v1.NodeGroupAllocationPolicyR\x10allocationPolicy\x12F\n" +
	"\rdeploy_policy\x18\x0f \x01(\v2!.yandex.cloud.k8s.v1.DeployPolicyR\fdeployPolicy\x12@\n" +
	"\aversion\x18\n" +
	" \x01(\v2&.yandex.cloud.k8s.v1.UpdateVersionSpecR\aversion\x12^\n" +
	"\x12maintenance_policy\x18\v \x01(\v2/.yandex.cloud.k8s.v1.NodeGroupMaintenancePolicyR\x11maintenancePolicy\x12\x85\x01\n" +
	"\x16allowed_unsafe_sysctls\x18\f \x03(\tBO\xf2\xc71B([a-z0-9]([-_a-z0-9]*[a-z0-9])?\\.)*([a-z0-9][-_a-z0-9]*)?[a-z0-9*]\x8a\xc81\x05<=253R\x14allowedUnsafeSysctls\x12;\n" +
	"\vnode_taints\x18\r \x03(\v2\x1a.yandex.cloud.k8s.v1.TaintR\n" +
	"nodeTaints\x12\\\n" +
	"\vnode_labels\x18\x0e \x03(\v2;.yandex.cloud.k8s.v1.UpdateNodeGroupRequest.NodeLabelsEntryR\n" +
	"nodeLabels\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a=\n" +
	"\x0fNodeLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01J\x04\b\a\x10\b\"C\n" +
	"\x17UpdateNodeGroupMetadata\x12(\n" +
	"\rnode_group_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\vnodeGroupId\"\x90\t\n" +
	"\x16CreateNodeGroupRequest\x12#\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\tclusterId\x128\n" +
	"\x04name\x18\x02 \x01(\tB$\xf2\xc71 |[a-z]([-a-z0-9]{0,61}[a-z0-9])?R\x04name\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x94\x01\n" +
	"\x06labels\x18\x04 \x03(\v27.yandex.cloud.k8s.v1.CreateNodeGroupRequest.LabelsEntryBC\xf2\xc71\x0f[-_./\\@0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x1c\x12\x14[a-z][-_./\\@0-9a-z]*\x1a\x041-63R\x06labels\x12L\n" +
	"\rnode_template\x18\x05 \x01(\v2!.yandex.cloud.k8s.v1.NodeTemplateB\x04\xe8\xc71\x01R\fnodeTemplate\x12I\n" +
	"\fscale_policy\x18\x06 \x01(\v2 .yandex.cloud.k8s.v1.ScalePolicyB\x04\xe8\xc71\x01R\vscalePolicy\x12[\n" +
	"\x11allocation_policy\x18\a \x01(\v2..yandex.cloud.k8s.v1.NodeGroupAllocationPolicyR\x10allocationPolicy\x12F\n" +
	"\rdeploy_policy\x18\r \x01(\v2!.yandex.cloud.k8s.v1.DeployPolicyR\fdeployPolicy\x12\x18\n" +
	"\aversion\x18\b \x01(\tR\aversion\x12^\n" +
	"\x12maintenance_policy\x18\t \x01(\v2/.yandex.cloud.k8s.v1.NodeGroupMaintenancePolicyR\x11maintenancePolicy\x12\x85\x01\n" +
	"\x16allowed_unsafe_sysctls\x18\n" +
	" \x03(\tBO\xf2\xc71B([a-z0-9]([-_a-z0-9]*[a-z0-9])?\\.)*([a-z0-9][-_a-z0-9]*)?[a-z0-9*]\x8a\xc81\x05<=253R\x14allowedUnsafeSysctls\x12;\n" +
	"\vnode_taints\x18\v \x03(\v2\x1a.yandex.cloud.k8s.v1.TaintR\n" +
	"nodeTaints\x12\\\n" +
	"\vnode_labels\x18\f \x03(\v2;.yandex.cloud.k8s.v1.CreateNodeGroupRequest.NodeLabelsEntryR\n" +
	"nodeLabels\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a=\n" +
	"\x0fNodeLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"=\n" +
	"\x17CreateNodeGroupMetadata\x12\"\n" +
	"\rnode_group_id\x18\x01 \x01(\tR\vnodeGroupId\"B\n" +
	"\x1cAutoUpgradeNodeGroupMetadata\x12\"\n" +
	"\rnode_group_id\x18\x01 \x01(\tR\vnodeGroupId\"\xc1\x01\n" +
	"\x1eListNodeGroupOperationsRequest\x12(\n" +
	"\rnode_group_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\vnodeGroupId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\x12\"\n" +
	"\x06filter\x18\x04 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"\x8c\x01\n" +
	"\x1fListNodeGroupOperationsResponse\x12A\n" +
	"\n" +
	"operations\x18\x01 \x03(\v2!.yandex.cloud.operation.OperationR\n" +
	"operations\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken2\xc1\t\n" +
	"\x10NodeGroupService\x12\x8a\x01\n" +
	"\x03Get\x12(.yandex.cloud.k8s.v1.GetNodeGroupRequest\x1a\x1e.yandex.cloud.k8s.v1.NodeGroup\"9\x82\xd3\xe4\x93\x023\x121/managed-kubernetes/v1/nodeGroups/{node_group_id}\x12\x8a\x01\n" +
	"\x04List\x12*.yandex.cloud.k8s.v1.ListNodeGroupsRequest\x1a+.yandex.cloud.k8s.v1.ListNodeGroupsResponse\")\x82\xd3\xe4\x93\x02#\x12!/managed-kubernetes/v1/nodeGroups\x12\xae\x01\n" +
	"\x06Create\x12+.yandex.cloud.k8s.v1.CreateNodeGroupRequest\x1a!.yandex.cloud.operation.Operation\"T\xb2\xd2*$\n" +
	"\x17CreateNodeGroupMetadata\x12\tNodeGroup\x82\xd3\xe4\x93\x02&:\x01*\"!/managed-kubernetes/v1/nodeGroups\x12\xbe\x01\n" +
	"\x06Update\x12+.yandex.cloud.k8s.v1.UpdateNodeGroupRequest\x1a!.yandex.cloud.operation.Operation\"d\xb2\xd2*$\n" +
	"\x17UpdateNodeGroupMetadata\x12\tNodeGroup\x82\xd3\xe4\x93\x026:\x01*21/managed-kubernetes/v1/nodeGroups/{node_group_id}\x12\xc7\x01\n" +
	"\x06Delete\x12+.yandex.cloud.k8s.v1.DeleteNodeGroupRequest\x1a!.yandex.cloud.operation.Operation\"m\xb2\xd2*0\n" +
	"\x17DeleteNodeGroupMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x023*1/managed-kubernetes/v1/nodeGroups/{node_group_id}\x12\xc1\x01\n" +
	"\x0eListOperations\x123.yandex.cloud.k8s.v1.ListNodeGroupOperationsRequest\x1a4.yandex.cloud.k8s.v1.ListNodeGroupOperationsResponse\"D\x82\xd3\xe4\x93\x02>\x12</managed-kubernetes/v1/nodeGroups/{node_group_id}/operations\x12\x92\x01\n" +
	"\tListNodes\x12..yandex.cloud.k8s.v1.ListNodeGroupNodesRequest\x1a/.yandex.cloud.k8s.v1.ListNodeGroupNodesResponse\"$\x82\xd3\xe4\x93\x02\x1e\x12\x1c/managed-kubernetes/v1/nodesBV\n" +
	"\x17yandex.cloud.api.k8s.v1Z;github.com/yandex-cloud/go-genproto/yandex/cloud/k8s/v1;k8sb\x06proto3"

var (
	file_yandex_cloud_k8s_v1_node_group_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_k8s_v1_node_group_service_proto_rawDescData []byte
)

func file_yandex_cloud_k8s_v1_node_group_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_k8s_v1_node_group_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_k8s_v1_node_group_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_k8s_v1_node_group_service_proto_rawDesc), len(file_yandex_cloud_k8s_v1_node_group_service_proto_rawDesc)))
	})
	return file_yandex_cloud_k8s_v1_node_group_service_proto_rawDescData
}

var file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_yandex_cloud_k8s_v1_node_group_service_proto_goTypes = []any{
	(*GetNodeGroupRequest)(nil),             // 0: yandex.cloud.k8s.v1.GetNodeGroupRequest
	(*ListNodeGroupsRequest)(nil),           // 1: yandex.cloud.k8s.v1.ListNodeGroupsRequest
	(*ListNodeGroupsResponse)(nil),          // 2: yandex.cloud.k8s.v1.ListNodeGroupsResponse
	(*ListNodeGroupNodesRequest)(nil),       // 3: yandex.cloud.k8s.v1.ListNodeGroupNodesRequest
	(*ListNodeGroupNodesResponse)(nil),      // 4: yandex.cloud.k8s.v1.ListNodeGroupNodesResponse
	(*DeleteNodeGroupRequest)(nil),          // 5: yandex.cloud.k8s.v1.DeleteNodeGroupRequest
	(*DeleteNodeGroupMetadata)(nil),         // 6: yandex.cloud.k8s.v1.DeleteNodeGroupMetadata
	(*UpdateNodeGroupRequest)(nil),          // 7: yandex.cloud.k8s.v1.UpdateNodeGroupRequest
	(*UpdateNodeGroupMetadata)(nil),         // 8: yandex.cloud.k8s.v1.UpdateNodeGroupMetadata
	(*CreateNodeGroupRequest)(nil),          // 9: yandex.cloud.k8s.v1.CreateNodeGroupRequest
	(*CreateNodeGroupMetadata)(nil),         // 10: yandex.cloud.k8s.v1.CreateNodeGroupMetadata
	(*AutoUpgradeNodeGroupMetadata)(nil),    // 11: yandex.cloud.k8s.v1.AutoUpgradeNodeGroupMetadata
	(*ListNodeGroupOperationsRequest)(nil),  // 12: yandex.cloud.k8s.v1.ListNodeGroupOperationsRequest
	(*ListNodeGroupOperationsResponse)(nil), // 13: yandex.cloud.k8s.v1.ListNodeGroupOperationsResponse
	nil,                                     // 14: yandex.cloud.k8s.v1.UpdateNodeGroupRequest.LabelsEntry
	nil,                                     // 15: yandex.cloud.k8s.v1.UpdateNodeGroupRequest.NodeLabelsEntry
	nil,                                     // 16: yandex.cloud.k8s.v1.CreateNodeGroupRequest.LabelsEntry
	nil,                                     // 17: yandex.cloud.k8s.v1.CreateNodeGroupRequest.NodeLabelsEntry
	(*NodeGroup)(nil),                       // 18: yandex.cloud.k8s.v1.NodeGroup
	(*Node)(nil),                            // 19: yandex.cloud.k8s.v1.Node
	(*fieldmaskpb.FieldMask)(nil),           // 20: google.protobuf.FieldMask
	(*NodeTemplate)(nil),                    // 21: yandex.cloud.k8s.v1.NodeTemplate
	(*ScalePolicy)(nil),                     // 22: yandex.cloud.k8s.v1.ScalePolicy
	(*NodeGroupAllocationPolicy)(nil),       // 23: yandex.cloud.k8s.v1.NodeGroupAllocationPolicy
	(*DeployPolicy)(nil),                    // 24: yandex.cloud.k8s.v1.DeployPolicy
	(*UpdateVersionSpec)(nil),               // 25: yandex.cloud.k8s.v1.UpdateVersionSpec
	(*NodeGroupMaintenancePolicy)(nil),      // 26: yandex.cloud.k8s.v1.NodeGroupMaintenancePolicy
	(*Taint)(nil),                           // 27: yandex.cloud.k8s.v1.Taint
	(*operation.Operation)(nil),             // 28: yandex.cloud.operation.Operation
}
var file_yandex_cloud_k8s_v1_node_group_service_proto_depIdxs = []int32{
	18, // 0: yandex.cloud.k8s.v1.ListNodeGroupsResponse.node_groups:type_name -> yandex.cloud.k8s.v1.NodeGroup
	19, // 1: yandex.cloud.k8s.v1.ListNodeGroupNodesResponse.nodes:type_name -> yandex.cloud.k8s.v1.Node
	20, // 2: yandex.cloud.k8s.v1.UpdateNodeGroupRequest.update_mask:type_name -> google.protobuf.FieldMask
	14, // 3: yandex.cloud.k8s.v1.UpdateNodeGroupRequest.labels:type_name -> yandex.cloud.k8s.v1.UpdateNodeGroupRequest.LabelsEntry
	21, // 4: yandex.cloud.k8s.v1.UpdateNodeGroupRequest.node_template:type_name -> yandex.cloud.k8s.v1.NodeTemplate
	22, // 5: yandex.cloud.k8s.v1.UpdateNodeGroupRequest.scale_policy:type_name -> yandex.cloud.k8s.v1.ScalePolicy
	23, // 6: yandex.cloud.k8s.v1.UpdateNodeGroupRequest.allocation_policy:type_name -> yandex.cloud.k8s.v1.NodeGroupAllocationPolicy
	24, // 7: yandex.cloud.k8s.v1.UpdateNodeGroupRequest.deploy_policy:type_name -> yandex.cloud.k8s.v1.DeployPolicy
	25, // 8: yandex.cloud.k8s.v1.UpdateNodeGroupRequest.version:type_name -> yandex.cloud.k8s.v1.UpdateVersionSpec
	26, // 9: yandex.cloud.k8s.v1.UpdateNodeGroupRequest.maintenance_policy:type_name -> yandex.cloud.k8s.v1.NodeGroupMaintenancePolicy
	27, // 10: yandex.cloud.k8s.v1.UpdateNodeGroupRequest.node_taints:type_name -> yandex.cloud.k8s.v1.Taint
	15, // 11: yandex.cloud.k8s.v1.UpdateNodeGroupRequest.node_labels:type_name -> yandex.cloud.k8s.v1.UpdateNodeGroupRequest.NodeLabelsEntry
	16, // 12: yandex.cloud.k8s.v1.CreateNodeGroupRequest.labels:type_name -> yandex.cloud.k8s.v1.CreateNodeGroupRequest.LabelsEntry
	21, // 13: yandex.cloud.k8s.v1.CreateNodeGroupRequest.node_template:type_name -> yandex.cloud.k8s.v1.NodeTemplate
	22, // 14: yandex.cloud.k8s.v1.CreateNodeGroupRequest.scale_policy:type_name -> yandex.cloud.k8s.v1.ScalePolicy
	23, // 15: yandex.cloud.k8s.v1.CreateNodeGroupRequest.allocation_policy:type_name -> yandex.cloud.k8s.v1.NodeGroupAllocationPolicy
	24, // 16: yandex.cloud.k8s.v1.CreateNodeGroupRequest.deploy_policy:type_name -> yandex.cloud.k8s.v1.DeployPolicy
	26, // 17: yandex.cloud.k8s.v1.CreateNodeGroupRequest.maintenance_policy:type_name -> yandex.cloud.k8s.v1.NodeGroupMaintenancePolicy
	27, // 18: yandex.cloud.k8s.v1.CreateNodeGroupRequest.node_taints:type_name -> yandex.cloud.k8s.v1.Taint
	17, // 19: yandex.cloud.k8s.v1.CreateNodeGroupRequest.node_labels:type_name -> yandex.cloud.k8s.v1.CreateNodeGroupRequest.NodeLabelsEntry
	28, // 20: yandex.cloud.k8s.v1.ListNodeGroupOperationsResponse.operations:type_name -> yandex.cloud.operation.Operation
	0,  // 21: yandex.cloud.k8s.v1.NodeGroupService.Get:input_type -> yandex.cloud.k8s.v1.GetNodeGroupRequest
	1,  // 22: yandex.cloud.k8s.v1.NodeGroupService.List:input_type -> yandex.cloud.k8s.v1.ListNodeGroupsRequest
	9,  // 23: yandex.cloud.k8s.v1.NodeGroupService.Create:input_type -> yandex.cloud.k8s.v1.CreateNodeGroupRequest
	7,  // 24: yandex.cloud.k8s.v1.NodeGroupService.Update:input_type -> yandex.cloud.k8s.v1.UpdateNodeGroupRequest
	5,  // 25: yandex.cloud.k8s.v1.NodeGroupService.Delete:input_type -> yandex.cloud.k8s.v1.DeleteNodeGroupRequest
	12, // 26: yandex.cloud.k8s.v1.NodeGroupService.ListOperations:input_type -> yandex.cloud.k8s.v1.ListNodeGroupOperationsRequest
	3,  // 27: yandex.cloud.k8s.v1.NodeGroupService.ListNodes:input_type -> yandex.cloud.k8s.v1.ListNodeGroupNodesRequest
	18, // 28: yandex.cloud.k8s.v1.NodeGroupService.Get:output_type -> yandex.cloud.k8s.v1.NodeGroup
	2,  // 29: yandex.cloud.k8s.v1.NodeGroupService.List:output_type -> yandex.cloud.k8s.v1.ListNodeGroupsResponse
	28, // 30: yandex.cloud.k8s.v1.NodeGroupService.Create:output_type -> yandex.cloud.operation.Operation
	28, // 31: yandex.cloud.k8s.v1.NodeGroupService.Update:output_type -> yandex.cloud.operation.Operation
	28, // 32: yandex.cloud.k8s.v1.NodeGroupService.Delete:output_type -> yandex.cloud.operation.Operation
	13, // 33: yandex.cloud.k8s.v1.NodeGroupService.ListOperations:output_type -> yandex.cloud.k8s.v1.ListNodeGroupOperationsResponse
	4,  // 34: yandex.cloud.k8s.v1.NodeGroupService.ListNodes:output_type -> yandex.cloud.k8s.v1.ListNodeGroupNodesResponse
	28, // [28:35] is the sub-list for method output_type
	21, // [21:28] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_yandex_cloud_k8s_v1_node_group_service_proto_init() }
func file_yandex_cloud_k8s_v1_node_group_service_proto_init() {
	if File_yandex_cloud_k8s_v1_node_group_service_proto != nil {
		return
	}
	file_yandex_cloud_k8s_v1_node_proto_init()
	file_yandex_cloud_k8s_v1_node_group_proto_init()
	file_yandex_cloud_k8s_v1_version_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_k8s_v1_node_group_service_proto_rawDesc), len(file_yandex_cloud_k8s_v1_node_group_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_k8s_v1_node_group_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_k8s_v1_node_group_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_k8s_v1_node_group_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_k8s_v1_node_group_service_proto = out.File
	file_yandex_cloud_k8s_v1_node_group_service_proto_goTypes = nil
	file_yandex_cloud_k8s_v1_node_group_service_proto_depIdxs = nil
}

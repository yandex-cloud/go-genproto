// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/kms/v1/asymmetricsignature/asymmetric_signature_crypto_service.proto

package kms

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AsymmetricSignRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the asymmetric KMS key to use for signature.
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Message to sign.
	// Should be encoded with base64.
	Message       []byte `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AsymmetricSignRequest) Reset() {
	*x = AsymmetricSignRequest{}
	mi := &file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsymmetricSignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsymmetricSignRequest) ProtoMessage() {}

func (x *AsymmetricSignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsymmetricSignRequest.ProtoReflect.Descriptor instead.
func (*AsymmetricSignRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_rawDescGZIP(), []int{0}
}

func (x *AsymmetricSignRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *AsymmetricSignRequest) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type AsymmetricSignResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the asymmetric KMS key that was used for signature.
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Value of signature.
	// Signature value is produced in accordance with RFC 8017 for RSA
	// and is a DER-encoded object as defined by ANSI X9.62-2005 and RFC 3279 Section 2.2.3 for ECDSA.
	Signature     []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AsymmetricSignResponse) Reset() {
	*x = AsymmetricSignResponse{}
	mi := &file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsymmetricSignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsymmetricSignResponse) ProtoMessage() {}

func (x *AsymmetricSignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsymmetricSignResponse.ProtoReflect.Descriptor instead.
func (*AsymmetricSignResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_rawDescGZIP(), []int{1}
}

func (x *AsymmetricSignResponse) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *AsymmetricSignResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type AsymmetricSignHashRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the asymmetric KMS key to use for signature.
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Hash value to be signed.
	// Should be encoded with base64.
	Hash          []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AsymmetricSignHashRequest) Reset() {
	*x = AsymmetricSignHashRequest{}
	mi := &file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsymmetricSignHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsymmetricSignHashRequest) ProtoMessage() {}

func (x *AsymmetricSignHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsymmetricSignHashRequest.ProtoReflect.Descriptor instead.
func (*AsymmetricSignHashRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_rawDescGZIP(), []int{2}
}

func (x *AsymmetricSignHashRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *AsymmetricSignHashRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type AsymmetricSignHashResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the asymmetric KMS key that was used for signature.
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Value of signature.
	// Signature value is produced in accordance with RFC 8017 for RSA
	// and is a DER-encoded object as defined by ANSI X9.62-2005 and RFC 3279 Section 2.2.3 for ECDSA.
	Signature     []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AsymmetricSignHashResponse) Reset() {
	*x = AsymmetricSignHashResponse{}
	mi := &file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsymmetricSignHashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsymmetricSignHashResponse) ProtoMessage() {}

func (x *AsymmetricSignHashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsymmetricSignHashResponse.ProtoReflect.Descriptor instead.
func (*AsymmetricSignHashResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_rawDescGZIP(), []int{3}
}

func (x *AsymmetricSignHashResponse) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *AsymmetricSignHashResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type AsymmetricGetPublicKeyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the asymmetric KMS key to be used for public key retrieval.
	KeyId         string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AsymmetricGetPublicKeyRequest) Reset() {
	*x = AsymmetricGetPublicKeyRequest{}
	mi := &file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsymmetricGetPublicKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsymmetricGetPublicKeyRequest) ProtoMessage() {}

func (x *AsymmetricGetPublicKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsymmetricGetPublicKeyRequest.ProtoReflect.Descriptor instead.
func (*AsymmetricGetPublicKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_rawDescGZIP(), []int{4}
}

func (x *AsymmetricGetPublicKeyRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type AsymmetricGetPublicKeyResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the asymmetric KMS key to get public key of.
	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// Public key value.
	// The value is a PEM-encoded X.509 public key, also known as SubjectPublicKeyInfo (SPKI),
	// as defined in RFC 5280.
	PublicKey     string `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AsymmetricGetPublicKeyResponse) Reset() {
	*x = AsymmetricGetPublicKeyResponse{}
	mi := &file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AsymmetricGetPublicKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsymmetricGetPublicKeyResponse) ProtoMessage() {}

func (x *AsymmetricGetPublicKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsymmetricGetPublicKeyResponse.ProtoReflect.Descriptor instead.
func (*AsymmetricGetPublicKeyResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_rawDescGZIP(), []int{5}
}

func (x *AsymmetricGetPublicKeyResponse) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *AsymmetricGetPublicKeyResponse) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

var File_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_rawDesc = "" +
	"\n" +
	"Qyandex/cloud/kms/v1/asymmetricsignature/asymmetric_signature_crypto_service.proto\x12'yandex.cloud.kms.v1.asymmetricsignature\x1a\x1cgoogle/api/annotations.proto\x1a\x1dyandex/cloud/validation.proto\"g\n" +
	"\x15AsymmetricSignRequest\x12#\n" +
	"\x06key_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x05keyId\x12)\n" +
	"\amessage\x18\x02 \x01(\fB\x0f\xe8\xc71\x01\x8a\xc81\a<=32768R\amessage\"M\n" +
	"\x16AsymmetricSignResponse\x12\x15\n" +
	"\x06key_id\x18\x01 \x01(\tR\x05keyId\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\"d\n" +
	"\x19AsymmetricSignHashRequest\x12#\n" +
	"\x06key_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x05keyId\x12\"\n" +
	"\x04hash\x18\x02 \x01(\fB\x0e\xe8\xc71\x01\x8a\xc81\x06<=4096R\x04hash\"Q\n" +
	"\x1aAsymmetricSignHashResponse\x12\x15\n" +
	"\x06key_id\x18\x01 \x01(\tR\x05keyId\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\"D\n" +
	"\x1dAsymmetricGetPublicKeyRequest\x12#\n" +
	"\x06key_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x05keyId\"V\n" +
	"\x1eAsymmetricGetPublicKeyResponse\x12\x15\n" +
	"\x06key_id\x18\x01 \x01(\tR\x05keyId\x12\x1d\n" +
	"\n" +
	"public_key\x18\x02 \x01(\tR\tpublicKey2\x98\x05\n" +
	" AsymmetricSignatureCryptoService\x12\xc1\x01\n" +
	"\x04Sign\x12>.yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignRequest\x1a?.yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignResponse\"8\x82\xd3\xe4\x93\x022:\x01*\"-/kms/v1/asymmetricSignatureKeys/{key_id}:sign\x12\xd1\x01\n" +
	"\bSignHash\x12B.yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignHashRequest\x1aC.yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignHashResponse\"<\x82\xd3\xe4\x93\x026:\x01*\"1/kms/v1/asymmetricSignatureKeys/{key_id}:signHash\x12\xdb\x01\n" +
	"\fGetPublicKey\x12F.yandex.cloud.kms.v1.asymmetricsignature.AsymmetricGetPublicKeyRequest\x1aG.yandex.cloud.kms.v1.asymmetricsignature.AsymmetricGetPublicKeyResponse\":\x82\xd3\xe4\x93\x024\x122/kms/v1/asymmetricSignatureKeys/{key_id}/publicKeyBj\n" +
	"\x17yandex.cloud.api.kms.v1ZOgithub.com/yandex-cloud/go-genproto/yandex/cloud/kms/v1/asymmetricsignature;kmsb\x06proto3"

var (
	file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_rawDescData []byte
)

func file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_rawDesc), len(file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_rawDesc)))
	})
	return file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_rawDescData
}

var file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_goTypes = []any{
	(*AsymmetricSignRequest)(nil),          // 0: yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignRequest
	(*AsymmetricSignResponse)(nil),         // 1: yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignResponse
	(*AsymmetricSignHashRequest)(nil),      // 2: yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignHashRequest
	(*AsymmetricSignHashResponse)(nil),     // 3: yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignHashResponse
	(*AsymmetricGetPublicKeyRequest)(nil),  // 4: yandex.cloud.kms.v1.asymmetricsignature.AsymmetricGetPublicKeyRequest
	(*AsymmetricGetPublicKeyResponse)(nil), // 5: yandex.cloud.kms.v1.asymmetricsignature.AsymmetricGetPublicKeyResponse
}
var file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_depIdxs = []int32{
	0, // 0: yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureCryptoService.Sign:input_type -> yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignRequest
	2, // 1: yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureCryptoService.SignHash:input_type -> yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignHashRequest
	4, // 2: yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureCryptoService.GetPublicKey:input_type -> yandex.cloud.kms.v1.asymmetricsignature.AsymmetricGetPublicKeyRequest
	1, // 3: yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureCryptoService.Sign:output_type -> yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignResponse
	3, // 4: yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureCryptoService.SignHash:output_type -> yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignHashResponse
	5, // 5: yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureCryptoService.GetPublicKey:output_type -> yandex.cloud.kms.v1.asymmetricsignature.AsymmetricGetPublicKeyResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() {
	file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_init()
}
func file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_init() {
	if File_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_rawDesc), len(file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto = out.File
	file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_goTypes = nil
	file_yandex_cloud_kms_v1_asymmetricsignature_asymmetric_signature_crypto_service_proto_depIdxs = nil
}

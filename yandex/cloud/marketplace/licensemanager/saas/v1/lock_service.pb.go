// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: yandex/cloud/marketplace/licensemanager/saas/v1/lock_service.proto

package licensemanager

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	v1 "github.com/yandex-cloud/go-genproto/yandex/cloud/marketplace/licensemanager/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnsureLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signed JWT token which contains information about subscription.
	InstanceToken string `protobuf:"bytes,1,opt,name=instance_token,json=instanceToken,proto3" json:"instance_token,omitempty"`
	// ID of the resource to which the subscription will be locked.
	ResourceId string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *EnsureLockRequest) Reset() {
	*x = EnsureLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureLockRequest) ProtoMessage() {}

func (x *EnsureLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureLockRequest.ProtoReflect.Descriptor instead.
func (*EnsureLockRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_rawDescGZIP(), []int{0}
}

func (x *EnsureLockRequest) GetInstanceToken() string {
	if x != nil {
		return x.InstanceToken
	}
	return ""
}

func (x *EnsureLockRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

type EnsureLockMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the subscription lock.
	LockId string `protobuf:"bytes,1,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
}

func (x *EnsureLockMetadata) Reset() {
	*x = EnsureLockMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnsureLockMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnsureLockMetadata) ProtoMessage() {}

func (x *EnsureLockMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnsureLockMetadata.ProtoReflect.Descriptor instead.
func (*EnsureLockMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_rawDescGZIP(), []int{1}
}

func (x *EnsureLockMetadata) GetLockId() string {
	if x != nil {
		return x.LockId
	}
	return ""
}

type GetLockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the subscription lock.
	LockId string `protobuf:"bytes,1,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
}

func (x *GetLockRequest) Reset() {
	*x = GetLockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLockRequest) ProtoMessage() {}

func (x *GetLockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLockRequest.ProtoReflect.Descriptor instead.
func (*GetLockRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetLockRequest) GetLockId() string {
	if x != nil {
		return x.LockId
	}
	return ""
}

var File_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_rawDesc = []byte{
	0x0a, 0x42, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x73, 0x61, 0x61, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x61,
	0x61, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x67, 0x0a, 0x11, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x12,
	0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe8, 0xc7, 0x31, 0x01, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x32, 0xa6, 0x03, 0x0a,
	0x0b, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xdd, 0x01, 0x0a,
	0x06, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x12, 0x42, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65,
	0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6c,
	0xb2, 0xd2, 0x2a, 0x2c, 0x0a, 0x12, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x6b,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x6b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2d,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x73, 0x61, 0x61, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x65, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x12, 0xb6, 0x01, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x3f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73,
	0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12,
	0x34, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x73, 0x61,
	0x61, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0x99, 0x01, 0x0a, 0x33, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x5a, 0x62, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x73, 0x61, 0x61, 0x73, 0x2f,
	0x76, 0x31, 0x3b, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_rawDescData = file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_rawDesc
)

func file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_rawDescData)
	})
	return file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_rawDescData
}

var file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_goTypes = []any{
	(*EnsureLockRequest)(nil),   // 0: yandex.cloud.marketplace.licensemanager.saas.v1.EnsureLockRequest
	(*EnsureLockMetadata)(nil),  // 1: yandex.cloud.marketplace.licensemanager.saas.v1.EnsureLockMetadata
	(*GetLockRequest)(nil),      // 2: yandex.cloud.marketplace.licensemanager.saas.v1.GetLockRequest
	(*operation.Operation)(nil), // 3: yandex.cloud.operation.Operation
	(*v1.Lock)(nil),             // 4: yandex.cloud.marketplace.licensemanager.v1.Lock
}
var file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_depIdxs = []int32{
	0, // 0: yandex.cloud.marketplace.licensemanager.saas.v1.LockService.Ensure:input_type -> yandex.cloud.marketplace.licensemanager.saas.v1.EnsureLockRequest
	2, // 1: yandex.cloud.marketplace.licensemanager.saas.v1.LockService.Get:input_type -> yandex.cloud.marketplace.licensemanager.saas.v1.GetLockRequest
	3, // 2: yandex.cloud.marketplace.licensemanager.saas.v1.LockService.Ensure:output_type -> yandex.cloud.operation.Operation
	4, // 3: yandex.cloud.marketplace.licensemanager.saas.v1.LockService.Get:output_type -> yandex.cloud.marketplace.licensemanager.v1.Lock
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_init() }
func file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_init() {
	if File_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EnsureLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*EnsureLockMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetLockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto = out.File
	file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_rawDesc = nil
	file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_goTypes = nil
	file_yandex_cloud_marketplace_licensemanager_saas_v1_lock_service_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: yandex/cloud/marketplace/pim/v1/saas/product_instance_service.proto

package saas

import (
	context "context"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductInstanceService_Get_FullMethodName   = "/yandex.cloud.marketplace.pim.v1.saas.ProductInstanceService/Get"
	ProductInstanceService_Claim_FullMethodName = "/yandex.cloud.marketplace.pim.v1.saas.ProductInstanceService/Claim"
)

// ProductInstanceServiceClient is the client API for ProductInstanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductInstanceServiceClient interface {
	Get(ctx context.Context, in *GetProductInstanceRequest, opts ...grpc.CallOption) (*ProductInstance, error)
	Claim(ctx context.Context, in *ClaimProductInstanceRequest, opts ...grpc.CallOption) (*operation.Operation, error)
}

type productInstanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductInstanceServiceClient(cc grpc.ClientConnInterface) ProductInstanceServiceClient {
	return &productInstanceServiceClient{cc}
}

func (c *productInstanceServiceClient) Get(ctx context.Context, in *GetProductInstanceRequest, opts ...grpc.CallOption) (*ProductInstance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductInstance)
	err := c.cc.Invoke(ctx, ProductInstanceService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productInstanceServiceClient) Claim(ctx context.Context, in *ClaimProductInstanceRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, ProductInstanceService_Claim_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductInstanceServiceServer is the server API for ProductInstanceService service.
// All implementations should embed UnimplementedProductInstanceServiceServer
// for forward compatibility.
type ProductInstanceServiceServer interface {
	Get(context.Context, *GetProductInstanceRequest) (*ProductInstance, error)
	Claim(context.Context, *ClaimProductInstanceRequest) (*operation.Operation, error)
}

// UnimplementedProductInstanceServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductInstanceServiceServer struct{}

func (UnimplementedProductInstanceServiceServer) Get(context.Context, *GetProductInstanceRequest) (*ProductInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProductInstanceServiceServer) Claim(context.Context, *ClaimProductInstanceRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Claim not implemented")
}
func (UnimplementedProductInstanceServiceServer) testEmbeddedByValue() {}

// UnsafeProductInstanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductInstanceServiceServer will
// result in compilation errors.
type UnsafeProductInstanceServiceServer interface {
	mustEmbedUnimplementedProductInstanceServiceServer()
}

func RegisterProductInstanceServiceServer(s grpc.ServiceRegistrar, srv ProductInstanceServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductInstanceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductInstanceService_ServiceDesc, srv)
}

func _ProductInstanceService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductInstanceServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductInstanceService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductInstanceServiceServer).Get(ctx, req.(*GetProductInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductInstanceService_Claim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimProductInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductInstanceServiceServer).Claim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductInstanceService_Claim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductInstanceServiceServer).Claim(ctx, req.(*ClaimProductInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductInstanceService_ServiceDesc is the grpc.ServiceDesc for ProductInstanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductInstanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.marketplace.pim.v1.saas.ProductInstanceService",
	HandlerType: (*ProductInstanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ProductInstanceService_Get_Handler,
		},
		{
			MethodName: "Claim",
			Handler:    _ProductInstanceService_Claim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/marketplace/pim/v1/saas/product_instance_service.proto",
}

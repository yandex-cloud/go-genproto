// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/mdb/clickhouse/v1/cluster_service.proto

package clickhouse

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	config "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/clickhouse/v1/config"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	timeofday "google.golang.org/genproto/googleapis/type/timeofday"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RescheduleMaintenanceRequest_RescheduleType int32

const (
	RescheduleMaintenanceRequest_RESCHEDULE_TYPE_UNSPECIFIED RescheduleMaintenanceRequest_RescheduleType = 0
	// Start the maintenance operation immediately.
	RescheduleMaintenanceRequest_IMMEDIATE RescheduleMaintenanceRequest_RescheduleType = 1
	// Start the maintenance operation within the next available maintenance window.
	RescheduleMaintenanceRequest_NEXT_AVAILABLE_WINDOW RescheduleMaintenanceRequest_RescheduleType = 2
	// Start the maintenance operation at the specific time.
	RescheduleMaintenanceRequest_SPECIFIC_TIME RescheduleMaintenanceRequest_RescheduleType = 3
)

// Enum value maps for RescheduleMaintenanceRequest_RescheduleType.
var (
	RescheduleMaintenanceRequest_RescheduleType_name = map[int32]string{
		0: "RESCHEDULE_TYPE_UNSPECIFIED",
		1: "IMMEDIATE",
		2: "NEXT_AVAILABLE_WINDOW",
		3: "SPECIFIC_TIME",
	}
	RescheduleMaintenanceRequest_RescheduleType_value = map[string]int32{
		"RESCHEDULE_TYPE_UNSPECIFIED": 0,
		"IMMEDIATE":                   1,
		"NEXT_AVAILABLE_WINDOW":       2,
		"SPECIFIC_TIME":               3,
	}
)

func (x RescheduleMaintenanceRequest_RescheduleType) Enum() *RescheduleMaintenanceRequest_RescheduleType {
	p := new(RescheduleMaintenanceRequest_RescheduleType)
	*p = x
	return p
}

func (x RescheduleMaintenanceRequest_RescheduleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RescheduleMaintenanceRequest_RescheduleType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_enumTypes[0].Descriptor()
}

func (RescheduleMaintenanceRequest_RescheduleType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_enumTypes[0]
}

func (x RescheduleMaintenanceRequest_RescheduleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RescheduleMaintenanceRequest_RescheduleType.Descriptor instead.
func (RescheduleMaintenanceRequest_RescheduleType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{21, 0}
}

type ListClusterLogsRequest_ServiceType int32

const (
	ListClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED ListClusterLogsRequest_ServiceType = 0
	// Logs of ClickHouse activity.
	ListClusterLogsRequest_CLICKHOUSE ListClusterLogsRequest_ServiceType = 1
	// Logs of ClickHouse Keeper activity.
	ListClusterLogsRequest_CLICKHOUSE_KEEPER ListClusterLogsRequest_ServiceType = 2
)

// Enum value maps for ListClusterLogsRequest_ServiceType.
var (
	ListClusterLogsRequest_ServiceType_name = map[int32]string{
		0: "SERVICE_TYPE_UNSPECIFIED",
		1: "CLICKHOUSE",
		2: "CLICKHOUSE_KEEPER",
	}
	ListClusterLogsRequest_ServiceType_value = map[string]int32{
		"SERVICE_TYPE_UNSPECIFIED": 0,
		"CLICKHOUSE":               1,
		"CLICKHOUSE_KEEPER":        2,
	}
)

func (x ListClusterLogsRequest_ServiceType) Enum() *ListClusterLogsRequest_ServiceType {
	p := new(ListClusterLogsRequest_ServiceType)
	*p = x
	return p
}

func (x ListClusterLogsRequest_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListClusterLogsRequest_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_enumTypes[1].Descriptor()
}

func (ListClusterLogsRequest_ServiceType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_enumTypes[1]
}

func (x ListClusterLogsRequest_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListClusterLogsRequest_ServiceType.Descriptor instead.
func (ListClusterLogsRequest_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{24, 0}
}

type StreamClusterLogsRequest_ServiceType int32

const (
	StreamClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED StreamClusterLogsRequest_ServiceType = 0
	// Logs of ClickHouse activity.
	StreamClusterLogsRequest_CLICKHOUSE StreamClusterLogsRequest_ServiceType = 1
	// Logs of ClickHouse Keeper activity.
	StreamClusterLogsRequest_CLICKHOUSE_KEEPER StreamClusterLogsRequest_ServiceType = 2
)

// Enum value maps for StreamClusterLogsRequest_ServiceType.
var (
	StreamClusterLogsRequest_ServiceType_name = map[int32]string{
		0: "SERVICE_TYPE_UNSPECIFIED",
		1: "CLICKHOUSE",
		2: "CLICKHOUSE_KEEPER",
	}
	StreamClusterLogsRequest_ServiceType_value = map[string]int32{
		"SERVICE_TYPE_UNSPECIFIED": 0,
		"CLICKHOUSE":               1,
		"CLICKHOUSE_KEEPER":        2,
	}
)

func (x StreamClusterLogsRequest_ServiceType) Enum() *StreamClusterLogsRequest_ServiceType {
	p := new(StreamClusterLogsRequest_ServiceType)
	*p = x
	return p
}

func (x StreamClusterLogsRequest_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamClusterLogsRequest_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_enumTypes[2].Descriptor()
}

func (StreamClusterLogsRequest_ServiceType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_enumTypes[2]
}

func (x StreamClusterLogsRequest_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamClusterLogsRequest_ServiceType.Descriptor instead.
func (StreamClusterLogsRequest_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{27, 0}
}

type GetClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse Cluster resource to return.
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterRequest) Reset() {
	*x = GetClusterRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterRequest) ProtoMessage() {}

func (x *GetClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterRequest.ProtoReflect.Descriptor instead.
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ListClustersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to list ClickHouse clusters in.
	// To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClustersResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the [ListClustersResponse.next_page_token]
	// returned by the previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression must specify:
	// 1. The field name. Currently you can only use filtering with the [Cluster.name] field.
	// 2. An `=` operator.
	// 3. The value in double quotes (`"`). Must be 1-63 characters long and match the regular expression `[a-zA-Z0-9_-]+`.
	Filter        string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListClustersRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListClustersRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClustersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListClustersRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListClustersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of ClickHouse Cluster resources.
	Clusters []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClustersRequest.page_size], use the [next_page_token] as the value
	// for the [ListClustersRequest.page_token] parameter in the next list request. Each subsequent
	// list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersResponse) Reset() {
	*x = ListClustersResponse{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersResponse) ProtoMessage() {}

func (x *ListClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersResponse.ProtoReflect.Descriptor instead.
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListClustersResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ListClustersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to create the ClickHouse cluster in.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the ClickHouse cluster. The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the ClickHouse cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the ClickHouse cluster as `key:value` pairs. Maximum 64 per resource.
	// For example, "project": "mvp" or "source": "dictionary".
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Deployment environment of the ClickHouse cluster.
	Environment Cluster_Environment `protobuf:"varint,5,opt,name=environment,proto3,enum=yandex.cloud.mdb.clickhouse.v1.Cluster_Environment" json:"environment,omitempty"`
	// Configuration and resources for hosts that should be created for the ClickHouse cluster.
	ConfigSpec *ConfigSpec `protobuf:"bytes,6,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// Descriptions of databases to be created in the ClickHouse cluster.
	DatabaseSpecs []*DatabaseSpec `protobuf:"bytes,7,rep,name=database_specs,json=databaseSpecs,proto3" json:"database_specs,omitempty"`
	// Descriptions of database users to be created in the ClickHouse cluster.
	UserSpecs []*UserSpec `protobuf:"bytes,8,rep,name=user_specs,json=userSpecs,proto3" json:"user_specs,omitempty"`
	// Individual configurations for hosts that should be created for the ClickHouse cluster.
	HostSpecs []*HostSpec `protobuf:"bytes,9,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// ID of the network to create the cluster in.
	NetworkId string `protobuf:"bytes,10,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Name of the first shard in cluster. If not set, defaults to the value 'shard1'.
	ShardName string `protobuf:"bytes,11,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	// ID of the service account used for access to Object Storage.
	ServiceAccountId string `protobuf:"bytes,12,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	// User security groups
	SecurityGroupIds []string `protobuf:"bytes,13,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// Deletion Protection inhibits deletion of the cluster
	DeletionProtection bool `protobuf:"varint,14,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// Window of maintenance operations.
	MaintenanceWindow *MaintenanceWindow `protobuf:"bytes,15,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"`
	// Configuration(s) of the shard(s) to be created.
	ShardSpecs []*ShardSpec `protobuf:"bytes,16,rep,name=shard_specs,json=shardSpecs,proto3" json:"shard_specs,omitempty"`
	// ID of the key to encrypt cluster disks.
	DiskEncryptionKeyId *wrapperspb.StringValue `protobuf:"bytes,18,opt,name=disk_encryption_key_id,json=diskEncryptionKeyId,proto3" json:"disk_encryption_key_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CreateClusterRequest) Reset() {
	*x = CreateClusterRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterRequest) ProtoMessage() {}

func (x *CreateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateClusterRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateClusterRequest) GetEnvironment() Cluster_Environment {
	if x != nil {
		return x.Environment
	}
	return Cluster_ENVIRONMENT_UNSPECIFIED
}

func (x *CreateClusterRequest) GetConfigSpec() *ConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *CreateClusterRequest) GetDatabaseSpecs() []*DatabaseSpec {
	if x != nil {
		return x.DatabaseSpecs
	}
	return nil
}

func (x *CreateClusterRequest) GetUserSpecs() []*UserSpec {
	if x != nil {
		return x.UserSpecs
	}
	return nil
}

func (x *CreateClusterRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

func (x *CreateClusterRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *CreateClusterRequest) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

func (x *CreateClusterRequest) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *CreateClusterRequest) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *CreateClusterRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *CreateClusterRequest) GetMaintenanceWindow() *MaintenanceWindow {
	if x != nil {
		return x.MaintenanceWindow
	}
	return nil
}

func (x *CreateClusterRequest) GetShardSpecs() []*ShardSpec {
	if x != nil {
		return x.ShardSpecs
	}
	return nil
}

func (x *CreateClusterRequest) GetDiskEncryptionKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.DiskEncryptionKeyId
	}
	return nil
}

type CreateClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster that is being created.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClusterMetadata) Reset() {
	*x = CreateClusterMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterMetadata) ProtoMessage() {}

func (x *CreateClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterMetadata.ProtoReflect.Descriptor instead.
func (*CreateClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type UpdateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse Cluster resource to update.
	// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Field mask that specifies which fields of the ClickHouse Cluster resource should be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// New description of the ClickHouse cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the ClickHouse cluster as `key:value` pairs. Maximum 64 per resource.
	// For example, "project": "mvp" or "source": "dictionary".
	//
	// The new set of labels will completely replace the old ones. To add a label, request the current
	// set with the [ClusterService.Get] method, then send an [ClusterService.Update] request with the new label added to the set.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// New configuration and resources for hosts in the cluster.
	ConfigSpec *ConfigSpec `protobuf:"bytes,5,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// New name for the cluster.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// ID of the service account used for access to Object Storage.
	ServiceAccountId string `protobuf:"bytes,7,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	// New maintenance window settings for the cluster.
	MaintenanceWindow *MaintenanceWindow `protobuf:"bytes,8,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"`
	// User security groups
	SecurityGroupIds []string `protobuf:"bytes,9,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// Deletion Protection inhibits deletion of the cluster
	DeletionProtection bool `protobuf:"varint,10,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// ID of the network to move the cluster to.
	NetworkId     string `protobuf:"bytes,11,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterRequest) Reset() {
	*x = UpdateClusterRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterRequest) ProtoMessage() {}

func (x *UpdateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateClusterRequest) GetConfigSpec() *ConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *UpdateClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateClusterRequest) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *UpdateClusterRequest) GetMaintenanceWindow() *MaintenanceWindow {
	if x != nil {
		return x.MaintenanceWindow
	}
	return nil
}

func (x *UpdateClusterRequest) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *UpdateClusterRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *UpdateClusterRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type UpdateClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse Cluster resource that is being updated.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterMetadata) Reset() {
	*x = UpdateClusterMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterMetadata) ProtoMessage() {}

func (x *UpdateClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterMetadata.ProtoReflect.Descriptor instead.
func (*UpdateClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type DeleteClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster to delete.
	// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type DeleteClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster that is being deleted.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterMetadata) Reset() {
	*x = DeleteClusterMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterMetadata) ProtoMessage() {}

func (x *DeleteClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterMetadata.ProtoReflect.Descriptor instead.
func (*DeleteClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StartClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster to start.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterRequest) Reset() {
	*x = StartClusterRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterRequest) ProtoMessage() {}

func (x *StartClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterRequest.ProtoReflect.Descriptor instead.
func (*StartClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{9}
}

func (x *StartClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StartClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster being started.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterMetadata) Reset() {
	*x = StartClusterMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterMetadata) ProtoMessage() {}

func (x *StartClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterMetadata.ProtoReflect.Descriptor instead.
func (*StartClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{10}
}

func (x *StartClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StopClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster to stop.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopClusterRequest) Reset() {
	*x = StopClusterRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClusterRequest) ProtoMessage() {}

func (x *StopClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClusterRequest.ProtoReflect.Descriptor instead.
func (*StopClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{11}
}

func (x *StopClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StopClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster being stopped.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopClusterMetadata) Reset() {
	*x = StopClusterMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClusterMetadata) ProtoMessage() {}

func (x *StopClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClusterMetadata.ProtoReflect.Descriptor instead.
func (*StopClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{12}
}

func (x *StopClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type MoveClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster to move.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the destination folder.
	DestinationFolderId string `protobuf:"bytes,2,opt,name=destination_folder_id,json=destinationFolderId,proto3" json:"destination_folder_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MoveClusterRequest) Reset() {
	*x = MoveClusterRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveClusterRequest) ProtoMessage() {}

func (x *MoveClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveClusterRequest.ProtoReflect.Descriptor instead.
func (*MoveClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{13}
}

func (x *MoveClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *MoveClusterRequest) GetDestinationFolderId() string {
	if x != nil {
		return x.DestinationFolderId
	}
	return ""
}

type MoveClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster being moved.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the source folder.
	SourceFolderId string `protobuf:"bytes,2,opt,name=source_folder_id,json=sourceFolderId,proto3" json:"source_folder_id,omitempty"`
	// ID of the destination folder.
	DestinationFolderId string `protobuf:"bytes,3,opt,name=destination_folder_id,json=destinationFolderId,proto3" json:"destination_folder_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MoveClusterMetadata) Reset() {
	*x = MoveClusterMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveClusterMetadata) ProtoMessage() {}

func (x *MoveClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveClusterMetadata.ProtoReflect.Descriptor instead.
func (*MoveClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{14}
}

func (x *MoveClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *MoveClusterMetadata) GetSourceFolderId() string {
	if x != nil {
		return x.SourceFolderId
	}
	return ""
}

func (x *MoveClusterMetadata) GetDestinationFolderId() string {
	if x != nil {
		return x.DestinationFolderId
	}
	return ""
}

type AddClusterZookeeperRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster to modify.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Resources allocated to Zookeeper hosts.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Configuration of ZooKeeper hosts.
	HostSpecs []*HostSpec `protobuf:"bytes,3,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// Enable automatic convertation of non-replicated MergeTree tables to replicated ones.
	ConvertTablesToReplicated *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=convert_tables_to_replicated,json=convertTablesToReplicated,proto3" json:"convert_tables_to_replicated,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *AddClusterZookeeperRequest) Reset() {
	*x = AddClusterZookeeperRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterZookeeperRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterZookeeperRequest) ProtoMessage() {}

func (x *AddClusterZookeeperRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterZookeeperRequest.ProtoReflect.Descriptor instead.
func (*AddClusterZookeeperRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{15}
}

func (x *AddClusterZookeeperRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterZookeeperRequest) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *AddClusterZookeeperRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

func (x *AddClusterZookeeperRequest) GetConvertTablesToReplicated() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConvertTablesToReplicated
	}
	return nil
}

type AddClusterZookeeperMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterZookeeperMetadata) Reset() {
	*x = AddClusterZookeeperMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterZookeeperMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterZookeeperMetadata) ProtoMessage() {}

func (x *AddClusterZookeeperMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterZookeeperMetadata.ProtoReflect.Descriptor instead.
func (*AddClusterZookeeperMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{16}
}

func (x *AddClusterZookeeperMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type BackupClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster to back up.
	// To get the ClickHouse cluster ID use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupClusterRequest) Reset() {
	*x = BackupClusterRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupClusterRequest) ProtoMessage() {}

func (x *BackupClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupClusterRequest.ProtoReflect.Descriptor instead.
func (*BackupClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{17}
}

func (x *BackupClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type BackupClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster that is being backed up.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupClusterMetadata) Reset() {
	*x = BackupClusterMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupClusterMetadata) ProtoMessage() {}

func (x *BackupClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupClusterMetadata.ProtoReflect.Descriptor instead.
func (*BackupClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{18}
}

func (x *BackupClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type RestoreClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the backup to restore from. This backup will be used to create one cluster shard.
	// To get the backup ID, use a [ClusterService.ListBackups] request.
	BackupId string `protobuf:"bytes,1,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	// Additional IDs of the backups to restore from.
	// Each additional backup is responsible for restoring separate shard.
	// Restored cluster will have len(additional_backup_ids)+1 shards in total.
	// To get the backup ID, use a [ClusterService.ListBackups] request.
	AdditionalBackupIds []string `protobuf:"bytes,13,rep,name=additional_backup_ids,json=additionalBackupIds,proto3" json:"additional_backup_ids,omitempty"`
	// Name of the new ClickHouse cluster. The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the new ClickHouse cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the ClickHouse cluster as `key:value` pairs. Maximum 64 per resource.
	// For example, "project": "mvp" or "source": "dictionary".
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Deployment environment of the new ClickHouse cluster.
	Environment Cluster_Environment `protobuf:"varint,5,opt,name=environment,proto3,enum=yandex.cloud.mdb.clickhouse.v1.Cluster_Environment" json:"environment,omitempty"`
	// Configuration for the ClickHouse cluster to be created.
	ConfigSpec *ConfigSpec `protobuf:"bytes,6,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// Configurations for ClickHouse hosts that should be created for
	// the cluster that is being created from the backup.
	HostSpecs []*HostSpec `protobuf:"bytes,7,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// ID of the network to create the ClickHouse cluster in.
	NetworkId string `protobuf:"bytes,8,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// ID of the folder to create the ClickHouse cluster in.
	FolderId string `protobuf:"bytes,9,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// ID of the service account used for access to Object Storage.
	ServiceAccountId string `protobuf:"bytes,10,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	// User security groups
	SecurityGroupIds []string `protobuf:"bytes,11,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// Deletion Protection inhibits deletion of the cluster
	DeletionProtection bool `protobuf:"varint,14,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// Configuration(s) of the shard(s) in the restored cluster.
	ShardSpecs []*ShardSpec `protobuf:"bytes,15,rep,name=shard_specs,json=shardSpecs,proto3" json:"shard_specs,omitempty"`
	// ID of the key to encrypt cluster disks.
	DiskEncryptionKeyId *wrapperspb.StringValue `protobuf:"bytes,17,opt,name=disk_encryption_key_id,json=diskEncryptionKeyId,proto3" json:"disk_encryption_key_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RestoreClusterRequest) Reset() {
	*x = RestoreClusterRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreClusterRequest) ProtoMessage() {}

func (x *RestoreClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreClusterRequest.ProtoReflect.Descriptor instead.
func (*RestoreClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{19}
}

func (x *RestoreClusterRequest) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

func (x *RestoreClusterRequest) GetAdditionalBackupIds() []string {
	if x != nil {
		return x.AdditionalBackupIds
	}
	return nil
}

func (x *RestoreClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RestoreClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RestoreClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RestoreClusterRequest) GetEnvironment() Cluster_Environment {
	if x != nil {
		return x.Environment
	}
	return Cluster_ENVIRONMENT_UNSPECIFIED
}

func (x *RestoreClusterRequest) GetConfigSpec() *ConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *RestoreClusterRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

func (x *RestoreClusterRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *RestoreClusterRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *RestoreClusterRequest) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *RestoreClusterRequest) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *RestoreClusterRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *RestoreClusterRequest) GetShardSpecs() []*ShardSpec {
	if x != nil {
		return x.ShardSpecs
	}
	return nil
}

func (x *RestoreClusterRequest) GetDiskEncryptionKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.DiskEncryptionKeyId
	}
	return nil
}

type RestoreClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the new ClickHouse cluster that is being created from a backup.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the backup that is being used for creating a cluster.
	BackupId      string `protobuf:"bytes,2,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestoreClusterMetadata) Reset() {
	*x = RestoreClusterMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreClusterMetadata) ProtoMessage() {}

func (x *RestoreClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreClusterMetadata.ProtoReflect.Descriptor instead.
func (*RestoreClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{20}
}

func (x *RestoreClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RestoreClusterMetadata) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

type RescheduleMaintenanceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster to reschedule the maintenance operation for.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The type of reschedule request.
	RescheduleType RescheduleMaintenanceRequest_RescheduleType `protobuf:"varint,2,opt,name=reschedule_type,json=rescheduleType,proto3,enum=yandex.cloud.mdb.clickhouse.v1.RescheduleMaintenanceRequest_RescheduleType" json:"reschedule_type,omitempty"`
	// The time until which this maintenance operation should be delayed. The value should be ahead of the first time when the maintenance operation has been scheduled for no more than two weeks. The value can also point to the past moment of time if [reschedule_type.IMMEDIATE] reschedule type is chosen.
	DelayedUntil  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=delayed_until,json=delayedUntil,proto3" json:"delayed_until,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RescheduleMaintenanceRequest) Reset() {
	*x = RescheduleMaintenanceRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RescheduleMaintenanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RescheduleMaintenanceRequest) ProtoMessage() {}

func (x *RescheduleMaintenanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RescheduleMaintenanceRequest.ProtoReflect.Descriptor instead.
func (*RescheduleMaintenanceRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{21}
}

func (x *RescheduleMaintenanceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RescheduleMaintenanceRequest) GetRescheduleType() RescheduleMaintenanceRequest_RescheduleType {
	if x != nil {
		return x.RescheduleType
	}
	return RescheduleMaintenanceRequest_RESCHEDULE_TYPE_UNSPECIFIED
}

func (x *RescheduleMaintenanceRequest) GetDelayedUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.DelayedUntil
	}
	return nil
}

// Rescheduled maintenance operation metadata.
type RescheduleMaintenanceMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ID of the ClickHouse cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required. The time until which this maintenance operation is to be delayed.
	DelayedUntil  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=delayed_until,json=delayedUntil,proto3" json:"delayed_until,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RescheduleMaintenanceMetadata) Reset() {
	*x = RescheduleMaintenanceMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RescheduleMaintenanceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RescheduleMaintenanceMetadata) ProtoMessage() {}

func (x *RescheduleMaintenanceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RescheduleMaintenanceMetadata.ProtoReflect.Descriptor instead.
func (*RescheduleMaintenanceMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{22}
}

func (x *RescheduleMaintenanceMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RescheduleMaintenanceMetadata) GetDelayedUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.DelayedUntil
	}
	return nil
}

type LogRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Log record timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Contents of the log record.
	Message       map[string]string `protobuf:"bytes,2,rep,name=message,proto3" json:"message,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogRecord) Reset() {
	*x = LogRecord{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRecord) ProtoMessage() {}

func (x *LogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRecord.ProtoReflect.Descriptor instead.
func (*LogRecord) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{23}
}

func (x *LogRecord) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LogRecord) GetMessage() map[string]string {
	if x != nil {
		return x.Message
	}
	return nil
}

type ListClusterLogsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster to request logs for.
	// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Columns from logs table to request.
	// If no columns are specified, entire log records are returned.
	ColumnFilter []string `protobuf:"bytes,2,rep,name=column_filter,json=columnFilter,proto3" json:"column_filter,omitempty"`
	// Type of the service to request logs about.
	ServiceType ListClusterLogsRequest_ServiceType `protobuf:"varint,3,opt,name=service_type,json=serviceType,proto3,enum=yandex.cloud.mdb.clickhouse.v1.ListClusterLogsRequest_ServiceType" json:"service_type,omitempty"`
	// Start timestamp for the logs request, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	FromTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=from_time,json=fromTime,proto3" json:"from_time,omitempty"`
	// End timestamp for the logs request, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	ToTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=to_time,json=toTime,proto3" json:"to_time,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterLogsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token.  To get the next page of results, set [page_token] to the [ListClusterLogsResponse.next_page_token]
	// returned by the previous list request.
	PageToken     string `protobuf:"bytes,7,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterLogsRequest) Reset() {
	*x = ListClusterLogsRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterLogsRequest) ProtoMessage() {}

func (x *ListClusterLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterLogsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterLogsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{24}
}

func (x *ListClusterLogsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterLogsRequest) GetColumnFilter() []string {
	if x != nil {
		return x.ColumnFilter
	}
	return nil
}

func (x *ListClusterLogsRequest) GetServiceType() ListClusterLogsRequest_ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return ListClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED
}

func (x *ListClusterLogsRequest) GetFromTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FromTime
	}
	return nil
}

func (x *ListClusterLogsRequest) GetToTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ToTime
	}
	return nil
}

func (x *ListClusterLogsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterLogsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterLogsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Requested log records.
	Logs []*LogRecord `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterLogsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterLogsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	// This value is interchangeable with the [StreamLogRecord.next_record_token] from StreamLogs method.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterLogsResponse) Reset() {
	*x = ListClusterLogsResponse{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterLogsResponse) ProtoMessage() {}

func (x *ListClusterLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterLogsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterLogsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{25}
}

func (x *ListClusterLogsResponse) GetLogs() []*LogRecord {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *ListClusterLogsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type StreamLogRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// One of the requested log records.
	Record *LogRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	// This token allows you to continue streaming logs starting from the exact
	// same record. To continue streaming, specify value of [next_record_token[
	// as value for the [StreamClusterLogsRequest.record_token] parameter in the next StreamLogs request.
	// This value is interchangeable with the [ListClusterLogsResponse.next_page_token] from ListLogs method.
	NextRecordToken string `protobuf:"bytes,2,opt,name=next_record_token,json=nextRecordToken,proto3" json:"next_record_token,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StreamLogRecord) Reset() {
	*x = StreamLogRecord{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamLogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamLogRecord) ProtoMessage() {}

func (x *StreamLogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamLogRecord.ProtoReflect.Descriptor instead.
func (*StreamLogRecord) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{26}
}

func (x *StreamLogRecord) GetRecord() *LogRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *StreamLogRecord) GetNextRecordToken() string {
	if x != nil {
		return x.NextRecordToken
	}
	return ""
}

type StreamClusterLogsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ID of the ClickHouse cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Columns from logs table to get in the response.
	ColumnFilter []string                             `protobuf:"bytes,2,rep,name=column_filter,json=columnFilter,proto3" json:"column_filter,omitempty"`
	ServiceType  StreamClusterLogsRequest_ServiceType `protobuf:"varint,3,opt,name=service_type,json=serviceType,proto3,enum=yandex.cloud.mdb.clickhouse.v1.StreamClusterLogsRequest_ServiceType" json:"service_type,omitempty"`
	// Start timestamp for the logs request.
	FromTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=from_time,json=fromTime,proto3" json:"from_time,omitempty"`
	// End timestamp for the logs request.
	// If this field is not set, all existing logs will be sent and then the new ones as
	// they appear. In essence it has `tail -f` semantics.
	ToTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=to_time,json=toTime,proto3" json:"to_time,omitempty"`
	// Record token. Set [record_token] to the [StreamLogRecord.next_record_token] returned by a previous StreamLogs
	// request to start streaming from next log record.
	RecordToken string `protobuf:"bytes,6,opt,name=record_token,json=recordToken,proto3" json:"record_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression must specify:
	// 1. The field name. Currently filtering can be applied to the [LogRecord.logs.message.hostname], [LogRecord.logs.message.severity] fields.
	// 2. An `=` operator.
	// 3. The value in double quotes (`"`). Must be 1-63 characters long and match the regular expression `[a-z0-9.-]{1,61}`.
	// Examples of a filter:
	// - `message.hostname='node1.db.cloud.yandex.net'`
	// - `message.severity IN ('Error', 'Fatal') AND message.hostname != 'node2.db.cloud.yandex.net'`.
	Filter        string `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamClusterLogsRequest) Reset() {
	*x = StreamClusterLogsRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamClusterLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamClusterLogsRequest) ProtoMessage() {}

func (x *StreamClusterLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamClusterLogsRequest.ProtoReflect.Descriptor instead.
func (*StreamClusterLogsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{27}
}

func (x *StreamClusterLogsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *StreamClusterLogsRequest) GetColumnFilter() []string {
	if x != nil {
		return x.ColumnFilter
	}
	return nil
}

func (x *StreamClusterLogsRequest) GetServiceType() StreamClusterLogsRequest_ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return StreamClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED
}

func (x *StreamClusterLogsRequest) GetFromTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FromTime
	}
	return nil
}

func (x *StreamClusterLogsRequest) GetToTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ToTime
	}
	return nil
}

func (x *StreamClusterLogsRequest) GetRecordToken() string {
	if x != nil {
		return x.RecordToken
	}
	return ""
}

func (x *StreamClusterLogsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListClusterOperationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse Cluster resource to list operations for.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterOperationsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token.  To get the next page of results, set [page_token] to the [ListClusterOperationsResponse.next_page_token]
	// returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterOperationsRequest) Reset() {
	*x = ListClusterOperationsRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterOperationsRequest) ProtoMessage() {}

func (x *ListClusterOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterOperationsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{28}
}

func (x *ListClusterOperationsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterOperationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterOperationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterOperationsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of Operation resources for the specified ClickHouse cluster.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterOperationsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterOperationsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterOperationsResponse) Reset() {
	*x = ListClusterOperationsResponse{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterOperationsResponse) ProtoMessage() {}

func (x *ListClusterOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterOperationsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{29}
}

func (x *ListClusterOperationsResponse) GetOperations() []*operation.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListClusterOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListClusterBackupsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster.
	// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterBackupsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListClusterBackupsResponse.next_page_token] returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterBackupsRequest) Reset() {
	*x = ListClusterBackupsRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterBackupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterBackupsRequest) ProtoMessage() {}

func (x *ListClusterBackupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterBackupsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterBackupsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{30}
}

func (x *ListClusterBackupsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterBackupsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterBackupsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterBackupsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of ClickHouse Backup resources.
	Backups []*Backup `protobuf:"bytes,1,rep,name=backups,proto3" json:"backups,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterBackupsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterBackupsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterBackupsResponse) Reset() {
	*x = ListClusterBackupsResponse{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterBackupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterBackupsResponse) ProtoMessage() {}

func (x *ListClusterBackupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterBackupsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterBackupsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{31}
}

func (x *ListClusterBackupsResponse) GetBackups() []*Backup {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *ListClusterBackupsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster.
	// To get the ClickHouse cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterHostsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token.  To get the next page of results, set [page_token] to the [ListClusterHostsResponse.next_page_token]
	// returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterHostsRequest) Reset() {
	*x = ListClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterHostsRequest) ProtoMessage() {}

func (x *ListClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{32}
}

func (x *ListClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterHostsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterHostsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterHostsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Requested list of hosts for the cluster.
	Hosts []*Host `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterHostsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterHostsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterHostsResponse) Reset() {
	*x = ListClusterHostsResponse{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterHostsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterHostsResponse) ProtoMessage() {}

func (x *ListClusterHostsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterHostsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterHostsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{33}
}

func (x *ListClusterHostsResponse) GetHosts() []*Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *ListClusterHostsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type AddClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster to add hosts to.
	// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Configurations for ClickHouse hosts that should be added to the cluster.
	HostSpecs []*HostSpec `protobuf:"bytes,2,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// Whether to copy schema to new ClickHouse hosts from replicas.
	CopySchema    *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=copy_schema,json=copySchema,proto3" json:"copy_schema,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterHostsRequest) Reset() {
	*x = AddClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterHostsRequest) ProtoMessage() {}

func (x *AddClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*AddClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{34}
}

func (x *AddClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterHostsRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

func (x *AddClusterHostsRequest) GetCopySchema() *wrapperspb.BoolValue {
	if x != nil {
		return x.CopySchema
	}
	return nil
}

type AddClusterHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster to which the hosts are being added.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts that are being added to the cluster.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterHostsMetadata) Reset() {
	*x = AddClusterHostsMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterHostsMetadata) ProtoMessage() {}

func (x *AddClusterHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterHostsMetadata.ProtoReflect.Descriptor instead.
func (*AddClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{35}
}

func (x *AddClusterHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterHostsMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type UpdateHostSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the host to update.
	// To get the ClickHouse host name, use a [ClusterService.ListHosts] request.
	HostName string `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// Field mask that specifies which fields of the ClickHouse host should be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Whether the host should get a public IP address on creation.
	AssignPublicIp *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=assign_public_ip,json=assignPublicIp,proto3" json:"assign_public_ip,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateHostSpec) Reset() {
	*x = UpdateHostSpec{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHostSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHostSpec) ProtoMessage() {}

func (x *UpdateHostSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHostSpec.ProtoReflect.Descriptor instead.
func (*UpdateHostSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateHostSpec) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *UpdateHostSpec) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateHostSpec) GetAssignPublicIp() *wrapperspb.BoolValue {
	if x != nil {
		return x.AssignPublicIp
	}
	return nil
}

type UpdateClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster to update hosts in.
	// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// New configurations to apply to hosts.
	UpdateHostSpecs []*UpdateHostSpec `protobuf:"bytes,2,rep,name=update_host_specs,json=updateHostSpecs,proto3" json:"update_host_specs,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateClusterHostsRequest) Reset() {
	*x = UpdateClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterHostsRequest) ProtoMessage() {}

func (x *UpdateClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterHostsRequest) GetUpdateHostSpecs() []*UpdateHostSpec {
	if x != nil {
		return x.UpdateHostSpecs
	}
	return nil
}

type UpdateClusterHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster to modify hosts in.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts that are being modified.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterHostsMetadata) Reset() {
	*x = UpdateClusterHostsMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterHostsMetadata) ProtoMessage() {}

func (x *UpdateClusterHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterHostsMetadata.ProtoReflect.Descriptor instead.
func (*UpdateClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateClusterHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterHostsMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type DeleteClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster to remove hosts from.
	// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts to delete.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterHostsRequest) Reset() {
	*x = DeleteClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterHostsRequest) ProtoMessage() {}

func (x *DeleteClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{39}
}

func (x *DeleteClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterHostsRequest) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type DeleteClusterHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster to remove hosts from.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts that are being deleted.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterHostsMetadata) Reset() {
	*x = DeleteClusterHostsMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterHostsMetadata) ProtoMessage() {}

func (x *DeleteClusterHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterHostsMetadata.ProtoReflect.Descriptor instead.
func (*DeleteClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{40}
}

func (x *DeleteClusterHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterHostsMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type RestartClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ID of the Clickhouse cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required. Name of the hosts to restart.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestartClusterHostsRequest) Reset() {
	*x = RestartClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestartClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartClusterHostsRequest) ProtoMessage() {}

func (x *RestartClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*RestartClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{41}
}

func (x *RestartClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RestartClusterHostsRequest) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type RestartClusterHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ID of the ClickHouse cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required. The name of restarting host.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestartClusterHostsMetadata) Reset() {
	*x = RestartClusterHostsMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestartClusterHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartClusterHostsMetadata) ProtoMessage() {}

func (x *RestartClusterHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartClusterHostsMetadata.ProtoReflect.Descriptor instead.
func (*RestartClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{42}
}

func (x *RestartClusterHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RestartClusterHostsMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type GetClusterShardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the cluster that the shard belongs to.
	// To get the cluster ID, use a [ClusterService.List] request.
	// To get the name of the database, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the shard to request information about.
	// To get the name of a shard, use a [ClusterService.ListShards] request.
	ShardName     string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterShardRequest) Reset() {
	*x = GetClusterShardRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterShardRequest) ProtoMessage() {}

func (x *GetClusterShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterShardRequest.ProtoReflect.Descriptor instead.
func (*GetClusterShardRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{43}
}

func (x *GetClusterShardRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetClusterShardRequest) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

type ListClusterShardsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster to list shards in.
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterShardsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token.  to get the next page of results, set [page_token] to the [ListClusterShardsResponse.next_page_token]
	// returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterShardsRequest) Reset() {
	*x = ListClusterShardsRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterShardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterShardsRequest) ProtoMessage() {}

func (x *ListClusterShardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterShardsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterShardsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{44}
}

func (x *ListClusterShardsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterShardsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterShardsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterShardsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of ClickHouse shards.
	Shards []*Shard `protobuf:"bytes,1,rep,name=shards,proto3" json:"shards,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterShardsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterShardsRequest.page_token] parameter in the next list request. Each subsequent
	// list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterShardsResponse) Reset() {
	*x = ListClusterShardsResponse{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterShardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterShardsResponse) ProtoMessage() {}

func (x *ListClusterShardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterShardsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterShardsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{45}
}

func (x *ListClusterShardsResponse) GetShards() []*Shard {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *ListClusterShardsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type AddClusterShardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster to add a shard to.
	// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name for the new shard.
	ShardName string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	// Configuration of the new shard.
	ConfigSpec *ShardConfigSpec `protobuf:"bytes,3,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// Configurations for ClickHouse hosts that should be created with the shard.
	HostSpecs []*HostSpec `protobuf:"bytes,4,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// Whether to copy schema to hosts of the shard to be created. The schema is copied from hosts of an existing shard.
	CopySchema    *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=copy_schema,json=copySchema,proto3" json:"copy_schema,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterShardRequest) Reset() {
	*x = AddClusterShardRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterShardRequest) ProtoMessage() {}

func (x *AddClusterShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterShardRequest.ProtoReflect.Descriptor instead.
func (*AddClusterShardRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{46}
}

func (x *AddClusterShardRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterShardRequest) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

func (x *AddClusterShardRequest) GetConfigSpec() *ShardConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *AddClusterShardRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

func (x *AddClusterShardRequest) GetCopySchema() *wrapperspb.BoolValue {
	if x != nil {
		return x.CopySchema
	}
	return nil
}

type AddClusterShardMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the cluster that a shard is being added to.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the shard being created.
	ShardName     string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterShardMetadata) Reset() {
	*x = AddClusterShardMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterShardMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterShardMetadata) ProtoMessage() {}

func (x *AddClusterShardMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterShardMetadata.ProtoReflect.Descriptor instead.
func (*AddClusterShardMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{47}
}

func (x *AddClusterShardMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterShardMetadata) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

type AddClusterShardsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster to add shards to.
	// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Properties of each shard to be created.
	// If [ShardSpec.config_spec] is not specified for some shard, for this shard
	// it defaults to the configuration of the first shard in the cluster.
	ShardSpecs []*ShardSpec `protobuf:"bytes,2,rep,name=shard_specs,json=shardSpecs,proto3" json:"shard_specs,omitempty"`
	// Individual configurations for hosts that should be created for the shards.
	// Two options are available:
	//  1. If `host_specs` is empty, each shard's number and configurations of hosts will
	//     be copied from those of the first shard in the cluster;
	//  2. Otherwise `host_specs` should contain at least one host per created shard.
	HostSpecs []*HostSpec `protobuf:"bytes,3,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// Whether to copy schema to hosts of the new shards. The schema is copied from hosts of an existing shard.
	CopySchema    *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=copy_schema,json=copySchema,proto3" json:"copy_schema,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterShardsRequest) Reset() {
	*x = AddClusterShardsRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterShardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterShardsRequest) ProtoMessage() {}

func (x *AddClusterShardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterShardsRequest.ProtoReflect.Descriptor instead.
func (*AddClusterShardsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{48}
}

func (x *AddClusterShardsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterShardsRequest) GetShardSpecs() []*ShardSpec {
	if x != nil {
		return x.ShardSpecs
	}
	return nil
}

func (x *AddClusterShardsRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

func (x *AddClusterShardsRequest) GetCopySchema() *wrapperspb.BoolValue {
	if x != nil {
		return x.CopySchema
	}
	return nil
}

type AddClusterShardsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the cluster that the shards are being added to.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of the shards being created.
	ShardNames    []string `protobuf:"bytes,2,rep,name=shard_names,json=shardNames,proto3" json:"shard_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterShardsMetadata) Reset() {
	*x = AddClusterShardsMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterShardsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterShardsMetadata) ProtoMessage() {}

func (x *AddClusterShardsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterShardsMetadata.ProtoReflect.Descriptor instead.
func (*AddClusterShardsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{49}
}

func (x *AddClusterShardsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterShardsMetadata) GetShardNames() []string {
	if x != nil {
		return x.ShardNames
	}
	return nil
}

type UpdateClusterShardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster the shard belongs to.
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the shard to be updated.
	// To get the name of a shard, use a [ClusterService.ListShards] request.
	ShardName string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	// Field mask that specifies which attributes of the ClickHouse shard should be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// New configuration for the specified shard.
	ConfigSpec    *ShardConfigSpec `protobuf:"bytes,4,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterShardRequest) Reset() {
	*x = UpdateClusterShardRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterShardRequest) ProtoMessage() {}

func (x *UpdateClusterShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterShardRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterShardRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{50}
}

func (x *UpdateClusterShardRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterShardRequest) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

func (x *UpdateClusterShardRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateClusterShardRequest) GetConfigSpec() *ShardConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

type UpdateClusterShardMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the cluster that contains the shard being updated.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the shard being updated.
	ShardName     string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterShardMetadata) Reset() {
	*x = UpdateClusterShardMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterShardMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterShardMetadata) ProtoMessage() {}

func (x *UpdateClusterShardMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterShardMetadata.ProtoReflect.Descriptor instead.
func (*UpdateClusterShardMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{51}
}

func (x *UpdateClusterShardMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterShardMetadata) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

type DeleteClusterShardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster the shard belongs to.
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the shard to be deleted.
	// To get the name of a shard, use a [ClusterService.ListShards] request.
	ShardName     string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterShardRequest) Reset() {
	*x = DeleteClusterShardRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterShardRequest) ProtoMessage() {}

func (x *DeleteClusterShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterShardRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterShardRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{52}
}

func (x *DeleteClusterShardRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterShardRequest) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

type DeleteClusterShardMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the cluster that contains the shard being deleted.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the shard being deleted.
	ShardName     string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterShardMetadata) Reset() {
	*x = DeleteClusterShardMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterShardMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterShardMetadata) ProtoMessage() {}

func (x *DeleteClusterShardMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterShardMetadata.ProtoReflect.Descriptor instead.
func (*DeleteClusterShardMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{53}
}

func (x *DeleteClusterShardMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterShardMetadata) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

type DeleteClusterShardsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster the shards belong to.
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of the shards to be deleted.
	// To get the name of a shard, use a [ClusterService.ListShards] request.
	ShardNames    []string `protobuf:"bytes,2,rep,name=shard_names,json=shardNames,proto3" json:"shard_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterShardsRequest) Reset() {
	*x = DeleteClusterShardsRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterShardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterShardsRequest) ProtoMessage() {}

func (x *DeleteClusterShardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterShardsRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterShardsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{54}
}

func (x *DeleteClusterShardsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterShardsRequest) GetShardNames() []string {
	if x != nil {
		return x.ShardNames
	}
	return nil
}

type DeleteClusterShardsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the cluster that contains the shards being deleted.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of the shards being deleted.
	ShardNames    []string `protobuf:"bytes,2,rep,name=shard_names,json=shardNames,proto3" json:"shard_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterShardsMetadata) Reset() {
	*x = DeleteClusterShardsMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterShardsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterShardsMetadata) ProtoMessage() {}

func (x *DeleteClusterShardsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterShardsMetadata.ProtoReflect.Descriptor instead.
func (*DeleteClusterShardsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{55}
}

func (x *DeleteClusterShardsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterShardsMetadata) GetShardNames() []string {
	if x != nil {
		return x.ShardNames
	}
	return nil
}

type GetClusterShardGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the cluster that the shard group belongs to.
	//
	// To get the cluster ID, make a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the shard group to request information about.
	//
	// To get the name of a shard group, make a [ClusterService.ListShardGroups] request.
	ShardGroupName string `protobuf:"bytes,2,opt,name=shard_group_name,json=shardGroupName,proto3" json:"shard_group_name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetClusterShardGroupRequest) Reset() {
	*x = GetClusterShardGroupRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterShardGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterShardGroupRequest) ProtoMessage() {}

func (x *GetClusterShardGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterShardGroupRequest.ProtoReflect.Descriptor instead.
func (*GetClusterShardGroupRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{56}
}

func (x *GetClusterShardGroupRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetClusterShardGroupRequest) GetShardGroupName() string {
	if x != nil {
		return x.ShardGroupName
	}
	return ""
}

type ListClusterShardGroupsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the cluster that the shard group belongs to.
	//
	// To get the cluster ID, make a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return.
	//
	// If the number of available results is larger than [page_size], the service returns a [ListClusterShardGroupsResponse.next_page_token] that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token.
	//
	// To get the next page of results, set [page_token] to the [ListClusterShardGroupsResponse.next_page_token] returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterShardGroupsRequest) Reset() {
	*x = ListClusterShardGroupsRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterShardGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterShardGroupsRequest) ProtoMessage() {}

func (x *ListClusterShardGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterShardGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterShardGroupsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{57}
}

func (x *ListClusterShardGroupsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterShardGroupsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterShardGroupsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterShardGroupsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of ClickHouse cluster's shard groups.
	ShardGroups []*ShardGroup `protobuf:"bytes,1,rep,name=shard_groups,json=shardGroups,proto3" json:"shard_groups,omitempty"`
	// This token allows you to get the next page of results for list requests.
	//
	// If the number of results is larger than [ListClusterShardGroupsRequest.page_size], use the [next_page_token] as the value for the [ListClusterShardGroupsRequest.page_token] parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterShardGroupsResponse) Reset() {
	*x = ListClusterShardGroupsResponse{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterShardGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterShardGroupsResponse) ProtoMessage() {}

func (x *ListClusterShardGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterShardGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterShardGroupsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{58}
}

func (x *ListClusterShardGroupsResponse) GetShardGroups() []*ShardGroup {
	if x != nil {
		return x.ShardGroups
	}
	return nil
}

func (x *ListClusterShardGroupsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateClusterShardGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster to add a shard group to.
	//
	// To get the cluster ID, make a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name for the new shard group.
	ShardGroupName string `protobuf:"bytes,2,opt,name=shard_group_name,json=shardGroupName,proto3" json:"shard_group_name,omitempty"`
	// Description of the new shard group. 0-256 characters long.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// List of shard names that should be put into the new group.
	//
	// To get the list, make a [ClusterService.ListShardGroups] request.
	ShardNames    []string `protobuf:"bytes,4,rep,name=shard_names,json=shardNames,proto3" json:"shard_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClusterShardGroupRequest) Reset() {
	*x = CreateClusterShardGroupRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterShardGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterShardGroupRequest) ProtoMessage() {}

func (x *CreateClusterShardGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterShardGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterShardGroupRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{59}
}

func (x *CreateClusterShardGroupRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateClusterShardGroupRequest) GetShardGroupName() string {
	if x != nil {
		return x.ShardGroupName
	}
	return ""
}

func (x *CreateClusterShardGroupRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateClusterShardGroupRequest) GetShardNames() []string {
	if x != nil {
		return x.ShardNames
	}
	return nil
}

type CreateClusterShardGroupMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the cluster to add a shard group to.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the shard group that is being added.
	ShardGroupName string `protobuf:"bytes,2,opt,name=shard_group_name,json=shardGroupName,proto3" json:"shard_group_name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateClusterShardGroupMetadata) Reset() {
	*x = CreateClusterShardGroupMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterShardGroupMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterShardGroupMetadata) ProtoMessage() {}

func (x *CreateClusterShardGroupMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterShardGroupMetadata.ProtoReflect.Descriptor instead.
func (*CreateClusterShardGroupMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{60}
}

func (x *CreateClusterShardGroupMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateClusterShardGroupMetadata) GetShardGroupName() string {
	if x != nil {
		return x.ShardGroupName
	}
	return ""
}

type UpdateClusterShardGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster that contains the shard group to update.
	//
	// To get the cluster ID, make a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the shard group that should be updated.
	//
	// To get the name, make a [ClusterService.ListShardGroups] request.
	ShardGroupName string                 `protobuf:"bytes,2,opt,name=shard_group_name,json=shardGroupName,proto3" json:"shard_group_name,omitempty"`
	UpdateMask     *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Updated description of the shard group. 0-256 characters long.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Updated list of shard names that belongs to the shard group.
	ShardNames    []string `protobuf:"bytes,5,rep,name=shard_names,json=shardNames,proto3" json:"shard_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterShardGroupRequest) Reset() {
	*x = UpdateClusterShardGroupRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterShardGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterShardGroupRequest) ProtoMessage() {}

func (x *UpdateClusterShardGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterShardGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterShardGroupRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{61}
}

func (x *UpdateClusterShardGroupRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterShardGroupRequest) GetShardGroupName() string {
	if x != nil {
		return x.ShardGroupName
	}
	return ""
}

func (x *UpdateClusterShardGroupRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateClusterShardGroupRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateClusterShardGroupRequest) GetShardNames() []string {
	if x != nil {
		return x.ShardNames
	}
	return nil
}

type UpdateClusterShardGroupMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the cluster that contains the shard group being updated.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the shard group that is being updated.
	ShardGroupName string `protobuf:"bytes,2,opt,name=shard_group_name,json=shardGroupName,proto3" json:"shard_group_name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateClusterShardGroupMetadata) Reset() {
	*x = UpdateClusterShardGroupMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterShardGroupMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterShardGroupMetadata) ProtoMessage() {}

func (x *UpdateClusterShardGroupMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterShardGroupMetadata.ProtoReflect.Descriptor instead.
func (*UpdateClusterShardGroupMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{62}
}

func (x *UpdateClusterShardGroupMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterShardGroupMetadata) GetShardGroupName() string {
	if x != nil {
		return x.ShardGroupName
	}
	return ""
}

type DeleteClusterShardGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster that contains the shard group to delete.
	//
	// To get the cluster ID, make a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the shard group that should be deleted.
	//
	// To get the name, make a [ClusterService.ListShardGroups] request.
	ShardGroupName string `protobuf:"bytes,2,opt,name=shard_group_name,json=shardGroupName,proto3" json:"shard_group_name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DeleteClusterShardGroupRequest) Reset() {
	*x = DeleteClusterShardGroupRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterShardGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterShardGroupRequest) ProtoMessage() {}

func (x *DeleteClusterShardGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterShardGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterShardGroupRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{63}
}

func (x *DeleteClusterShardGroupRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterShardGroupRequest) GetShardGroupName() string {
	if x != nil {
		return x.ShardGroupName
	}
	return ""
}

type DeleteClusterShardGroupMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the cluster that contains the shard group being deleted.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the shard group that is being deleted.
	ShardGroupName string `protobuf:"bytes,2,opt,name=shard_group_name,json=shardGroupName,proto3" json:"shard_group_name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DeleteClusterShardGroupMetadata) Reset() {
	*x = DeleteClusterShardGroupMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterShardGroupMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterShardGroupMetadata) ProtoMessage() {}

func (x *DeleteClusterShardGroupMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterShardGroupMetadata.ProtoReflect.Descriptor instead.
func (*DeleteClusterShardGroupMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{64}
}

func (x *DeleteClusterShardGroupMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterShardGroupMetadata) GetShardGroupName() string {
	if x != nil {
		return x.ShardGroupName
	}
	return ""
}

type ListClusterExternalDictionariesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the cluster that the external dictionaries belong to.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterExternalDictionaryResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the [ListClusterExternalDictionaryResponse.next_page_token]
	// returned by a previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterExternalDictionariesRequest) Reset() {
	*x = ListClusterExternalDictionariesRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterExternalDictionariesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterExternalDictionariesRequest) ProtoMessage() {}

func (x *ListClusterExternalDictionariesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterExternalDictionariesRequest.ProtoReflect.Descriptor instead.
func (*ListClusterExternalDictionariesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{65}
}

func (x *ListClusterExternalDictionariesRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterExternalDictionariesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterExternalDictionariesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterExternalDictionariesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of ClickHouse Cluster external dictionaries.
	ExternalDictionaries []*config.ClickhouseConfig_ExternalDictionary `protobuf:"bytes,1,rep,name=external_dictionaries,json=externalDictionaries,proto3" json:"external_dictionaries,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterExternalDictionaryRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterExternalDictionaryRequest.page_token] parameter in the next list request. Each subsequent
	// list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterExternalDictionariesResponse) Reset() {
	*x = ListClusterExternalDictionariesResponse{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterExternalDictionariesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterExternalDictionariesResponse) ProtoMessage() {}

func (x *ListClusterExternalDictionariesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterExternalDictionariesResponse.ProtoReflect.Descriptor instead.
func (*ListClusterExternalDictionariesResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{66}
}

func (x *ListClusterExternalDictionariesResponse) GetExternalDictionaries() []*config.ClickhouseConfig_ExternalDictionary {
	if x != nil {
		return x.ExternalDictionaries
	}
	return nil
}

func (x *ListClusterExternalDictionariesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateClusterExternalDictionaryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster to create the external dictionary for.
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Configuration of the external dictionary.
	ExternalDictionary *config.ClickhouseConfig_ExternalDictionary `protobuf:"bytes,2,opt,name=external_dictionary,json=externalDictionary,proto3" json:"external_dictionary,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CreateClusterExternalDictionaryRequest) Reset() {
	*x = CreateClusterExternalDictionaryRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterExternalDictionaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterExternalDictionaryRequest) ProtoMessage() {}

func (x *CreateClusterExternalDictionaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterExternalDictionaryRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterExternalDictionaryRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{67}
}

func (x *CreateClusterExternalDictionaryRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateClusterExternalDictionaryRequest) GetExternalDictionary() *config.ClickhouseConfig_ExternalDictionary {
	if x != nil {
		return x.ExternalDictionary
	}
	return nil
}

type CreateClusterExternalDictionaryMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the cluster for which an external dictionary is being created.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClusterExternalDictionaryMetadata) Reset() {
	*x = CreateClusterExternalDictionaryMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterExternalDictionaryMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterExternalDictionaryMetadata) ProtoMessage() {}

func (x *CreateClusterExternalDictionaryMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterExternalDictionaryMetadata.ProtoReflect.Descriptor instead.
func (*CreateClusterExternalDictionaryMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{68}
}

func (x *CreateClusterExternalDictionaryMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type UpdateClusterExternalDictionaryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster to update the external dictionary for.
	// To get the cluster ID, use a [List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Configuration of the external dictionary.
	ExternalDictionary *config.ClickhouseConfig_ExternalDictionary `protobuf:"bytes,2,opt,name=external_dictionary,json=externalDictionary,proto3" json:"external_dictionary,omitempty"`
	// Field mask that specifies which fields of the External Dictionary should be updated.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterExternalDictionaryRequest) Reset() {
	*x = UpdateClusterExternalDictionaryRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterExternalDictionaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterExternalDictionaryRequest) ProtoMessage() {}

func (x *UpdateClusterExternalDictionaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterExternalDictionaryRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterExternalDictionaryRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{69}
}

func (x *UpdateClusterExternalDictionaryRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterExternalDictionaryRequest) GetExternalDictionary() *config.ClickhouseConfig_ExternalDictionary {
	if x != nil {
		return x.ExternalDictionary
	}
	return nil
}

func (x *UpdateClusterExternalDictionaryRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateClusterExternalDictionaryMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the cluster for which an external dictionary is being updated.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the external dictionary.
	ExternalDictionaryName string `protobuf:"bytes,2,opt,name=external_dictionary_name,json=externalDictionaryName,proto3" json:"external_dictionary_name,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateClusterExternalDictionaryMetadata) Reset() {
	*x = UpdateClusterExternalDictionaryMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterExternalDictionaryMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterExternalDictionaryMetadata) ProtoMessage() {}

func (x *UpdateClusterExternalDictionaryMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterExternalDictionaryMetadata.ProtoReflect.Descriptor instead.
func (*UpdateClusterExternalDictionaryMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{70}
}

func (x *UpdateClusterExternalDictionaryMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterExternalDictionaryMetadata) GetExternalDictionaryName() string {
	if x != nil {
		return x.ExternalDictionaryName
	}
	return ""
}

type DeleteClusterExternalDictionaryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the ClickHouse cluster to delete the external dictionary from.
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the external dictionary to delete.
	ExternalDictionaryName string `protobuf:"bytes,2,opt,name=external_dictionary_name,json=externalDictionaryName,proto3" json:"external_dictionary_name,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DeleteClusterExternalDictionaryRequest) Reset() {
	*x = DeleteClusterExternalDictionaryRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterExternalDictionaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterExternalDictionaryRequest) ProtoMessage() {}

func (x *DeleteClusterExternalDictionaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterExternalDictionaryRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterExternalDictionaryRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{71}
}

func (x *DeleteClusterExternalDictionaryRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterExternalDictionaryRequest) GetExternalDictionaryName() string {
	if x != nil {
		return x.ExternalDictionaryName
	}
	return ""
}

type DeleteClusterExternalDictionaryMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the cluster where an external dictionary is being deleted.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterExternalDictionaryMetadata) Reset() {
	*x = DeleteClusterExternalDictionaryMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterExternalDictionaryMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterExternalDictionaryMetadata) ProtoMessage() {}

func (x *DeleteClusterExternalDictionaryMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterExternalDictionaryMetadata.ProtoReflect.Descriptor instead.
func (*DeleteClusterExternalDictionaryMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{72}
}

func (x *DeleteClusterExternalDictionaryMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type HostSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the availability zone where the host resides.
	// To get a list of available zones, use the [yandex.cloud.compute.v1.ZoneService.List] request.
	ZoneId string `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// Type of the host to be deployed.
	Type Host_Type `protobuf:"varint,2,opt,name=type,proto3,enum=yandex.cloud.mdb.clickhouse.v1.Host_Type" json:"type,omitempty"`
	// ID of the subnet that the host should belong to. This subnet should be a part
	// of the network that the cluster belongs to.
	// The ID of the network is set in the [Cluster.network_id] field.
	SubnetId string `protobuf:"bytes,3,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// Whether the host should get a public IP address on creation.
	//
	// After a host has been created, this setting cannot be changed. To remove an assigned public IP, or to assign
	// a public IP to a host without one, recreate the host with [assign_public_ip] set as needed.
	//
	// Possible values:
	// * false - don't assign a public IP to the host.
	// * true - the host should have a public IP address.
	AssignPublicIp bool `protobuf:"varint,4,opt,name=assign_public_ip,json=assignPublicIp,proto3" json:"assign_public_ip,omitempty"`
	// Name of the shard that the host is assigned to.
	ShardName     string `protobuf:"bytes,5,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostSpec) Reset() {
	*x = HostSpec{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostSpec) ProtoMessage() {}

func (x *HostSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostSpec.ProtoReflect.Descriptor instead.
func (*HostSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{73}
}

func (x *HostSpec) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *HostSpec) GetType() Host_Type {
	if x != nil {
		return x.Type
	}
	return Host_TYPE_UNSPECIFIED
}

func (x *HostSpec) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *HostSpec) GetAssignPublicIp() bool {
	if x != nil {
		return x.AssignPublicIp
	}
	return false
}

func (x *HostSpec) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

type ConfigSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version of the ClickHouse server software.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Configuration and resources for a ClickHouse server.
	Clickhouse *ConfigSpec_Clickhouse `protobuf:"bytes,1,opt,name=clickhouse,proto3" json:"clickhouse,omitempty"`
	// Configuration and resources for a ZooKeeper server.
	Zookeeper *ConfigSpec_Zookeeper `protobuf:"bytes,2,opt,name=zookeeper,proto3" json:"zookeeper,omitempty"`
	// Time to start the daily backup, in the UTC timezone.
	BackupWindowStart *timeofday.TimeOfDay `protobuf:"bytes,4,opt,name=backup_window_start,json=backupWindowStart,proto3" json:"backup_window_start,omitempty"`
	// Access policy for external services.
	//
	// If you want a specific service to access the ClickHouse cluster, then set the necessary values in this policy.
	Access       *Access       `protobuf:"bytes,5,opt,name=access,proto3" json:"access,omitempty"`
	CloudStorage *CloudStorage `protobuf:"bytes,6,opt,name=cloud_storage,json=cloudStorage,proto3" json:"cloud_storage,omitempty"`
	// Whether database management through SQL commands is enabled.
	SqlDatabaseManagement *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=sql_database_management,json=sqlDatabaseManagement,proto3" json:"sql_database_management,omitempty"`
	// Whether user management through SQL commands is enabled.
	SqlUserManagement *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=sql_user_management,json=sqlUserManagement,proto3" json:"sql_user_management,omitempty"`
	// Password for user 'admin' that has SQL user management access.
	AdminPassword string `protobuf:"bytes,9,opt,name=admin_password,json=adminPassword,proto3" json:"admin_password,omitempty"`
	// Whether cluster should use embedded Keeper instead of Zookeeper
	EmbeddedKeeper *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=embedded_keeper,json=embeddedKeeper,proto3" json:"embedded_keeper,omitempty"`
	// Retain period of automatically created backup in days
	BackupRetainPeriodDays *wrapperspb.Int64Value `protobuf:"bytes,11,opt,name=backup_retain_period_days,json=backupRetainPeriodDays,proto3" json:"backup_retain_period_days,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ConfigSpec) Reset() {
	*x = ConfigSpec{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSpec) ProtoMessage() {}

func (x *ConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSpec.ProtoReflect.Descriptor instead.
func (*ConfigSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{74}
}

func (x *ConfigSpec) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ConfigSpec) GetClickhouse() *ConfigSpec_Clickhouse {
	if x != nil {
		return x.Clickhouse
	}
	return nil
}

func (x *ConfigSpec) GetZookeeper() *ConfigSpec_Zookeeper {
	if x != nil {
		return x.Zookeeper
	}
	return nil
}

func (x *ConfigSpec) GetBackupWindowStart() *timeofday.TimeOfDay {
	if x != nil {
		return x.BackupWindowStart
	}
	return nil
}

func (x *ConfigSpec) GetAccess() *Access {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *ConfigSpec) GetCloudStorage() *CloudStorage {
	if x != nil {
		return x.CloudStorage
	}
	return nil
}

func (x *ConfigSpec) GetSqlDatabaseManagement() *wrapperspb.BoolValue {
	if x != nil {
		return x.SqlDatabaseManagement
	}
	return nil
}

func (x *ConfigSpec) GetSqlUserManagement() *wrapperspb.BoolValue {
	if x != nil {
		return x.SqlUserManagement
	}
	return nil
}

func (x *ConfigSpec) GetAdminPassword() string {
	if x != nil {
		return x.AdminPassword
	}
	return ""
}

func (x *ConfigSpec) GetEmbeddedKeeper() *wrapperspb.BoolValue {
	if x != nil {
		return x.EmbeddedKeeper
	}
	return nil
}

func (x *ConfigSpec) GetBackupRetainPeriodDays() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackupRetainPeriodDays
	}
	return nil
}

type ShardConfigSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClickHouse configuration for a shard.
	Clickhouse    *ShardConfigSpec_Clickhouse `protobuf:"bytes,1,opt,name=clickhouse,proto3" json:"clickhouse,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShardConfigSpec) Reset() {
	*x = ShardConfigSpec{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardConfigSpec) ProtoMessage() {}

func (x *ShardConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardConfigSpec.ProtoReflect.Descriptor instead.
func (*ShardConfigSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{75}
}

func (x *ShardConfigSpec) GetClickhouse() *ShardConfigSpec_Clickhouse {
	if x != nil {
		return x.Clickhouse
	}
	return nil
}

type ShardSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the shard to be created.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Configuration of the shard to be created.
	ConfigSpec *ShardConfigSpec `protobuf:"bytes,2,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// Shard groups that contain the shard.
	ShardGroupNames []string `protobuf:"bytes,3,rep,name=shard_group_names,json=shardGroupNames,proto3" json:"shard_group_names,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ShardSpec) Reset() {
	*x = ShardSpec{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardSpec) ProtoMessage() {}

func (x *ShardSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardSpec.ProtoReflect.Descriptor instead.
func (*ShardSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{76}
}

func (x *ShardSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShardSpec) GetConfigSpec() *ShardConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *ShardSpec) GetShardGroupNames() []string {
	if x != nil {
		return x.ShardGroupNames
	}
	return nil
}

type ConfigSpec_Clickhouse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for a ClickHouse server.
	Config *config.ClickhouseConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to ClickHouse hosts.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings.
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ConfigSpec_Clickhouse) Reset() {
	*x = ConfigSpec_Clickhouse{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigSpec_Clickhouse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSpec_Clickhouse) ProtoMessage() {}

func (x *ConfigSpec_Clickhouse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSpec_Clickhouse.ProtoReflect.Descriptor instead.
func (*ConfigSpec_Clickhouse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{74, 0}
}

func (x *ConfigSpec_Clickhouse) GetConfig() *config.ClickhouseConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ConfigSpec_Clickhouse) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ConfigSpec_Clickhouse) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type ConfigSpec_Zookeeper struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resources allocated to ZooKeeper hosts. If not set, minimal available resources will be used.
	// All available resource presets can be retrieved with a [ResourcePresetService.List] request.
	Resources *Resources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings.
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,2,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ConfigSpec_Zookeeper) Reset() {
	*x = ConfigSpec_Zookeeper{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigSpec_Zookeeper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSpec_Zookeeper) ProtoMessage() {}

func (x *ConfigSpec_Zookeeper) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSpec_Zookeeper.ProtoReflect.Descriptor instead.
func (*ConfigSpec_Zookeeper) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{74, 1}
}

func (x *ConfigSpec_Zookeeper) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ConfigSpec_Zookeeper) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type ShardConfigSpec_Clickhouse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClickHouse settings for the shard.
	Config *config.ClickhouseConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Computational resources for the shard.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Relative weight of the shard considered when writing data to the cluster.
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/operations/table_engines/distributed/).
	Weight *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=weight,proto3" json:"weight,omitempty"`
	// Disk size autoscaling settings.
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,4,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ShardConfigSpec_Clickhouse) Reset() {
	*x = ShardConfigSpec_Clickhouse{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardConfigSpec_Clickhouse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardConfigSpec_Clickhouse) ProtoMessage() {}

func (x *ShardConfigSpec_Clickhouse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardConfigSpec_Clickhouse.ProtoReflect.Descriptor instead.
func (*ShardConfigSpec_Clickhouse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP(), []int{75, 0}
}

func (x *ShardConfigSpec_Clickhouse) GetConfig() *config.ClickhouseConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ShardConfigSpec_Clickhouse) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ShardConfigSpec_Clickhouse) GetWeight() *wrapperspb.Int64Value {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *ShardConfigSpec_Clickhouse) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

var File_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDesc = "" +
	"\n" +
	"4yandex/cloud/mdb/clickhouse/v1/cluster_service.proto\x12\x1eyandex.cloud.mdb.clickhouse.v1\x1a\x1cgoogle/api/annotations.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1bgoogle/type/timeofday.proto\x1a yandex/cloud/api/operation.proto\x1a+yandex/cloud/mdb/clickhouse/v1/backup.proto\x1a,yandex/cloud/mdb/clickhouse/v1/cluster.proto\x1a6yandex/cloud/mdb/clickhouse/v1/config/clickhouse.proto\x1a-yandex/cloud/mdb/clickhouse/v1/database.proto\x1a0yandex/cloud/mdb/clickhouse/v1/maintenance.proto\x1a)yandex/cloud/mdb/clickhouse/v1/user.proto\x1a&yandex/cloud/operation/operation.proto\x1a\x1dyandex/cloud/validation.proto\"@\n" +
	"\x11GetClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"\xb7\x01\n" +
	"\x13ListClustersRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\x12\"\n" +
	"\x06filter\x18\x04 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"\x83\x01\n" +
	"\x14ListClustersResponse\x12C\n" +
	"\bclusters\x18\x01 \x03(\v2'.yandex.cloud.mdb.clickhouse.v1.ClusterR\bclusters\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xa0\n" +
	"\n" +
	"\x14CreateClusterRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x122\n" +
	"\x04name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x04name\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x95\x01\n" +
	"\x06labels\x18\x04 \x03(\v2@.yandex.cloud.mdb.clickhouse.v1.CreateClusterRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x04<=63R\x06labels\x12[\n" +
	"\venvironment\x18\x05 \x01(\x0e23.yandex.cloud.mdb.clickhouse.v1.Cluster.EnvironmentB\x04\xe8\xc71\x01R\venvironment\x12Q\n" +
	"\vconfig_spec\x18\x06 \x01(\v2*.yandex.cloud.mdb.clickhouse.v1.ConfigSpecB\x04\xe8\xc71\x01R\n" +
	"configSpec\x12[\n" +
	"\x0edatabase_specs\x18\a \x03(\v2,.yandex.cloud.mdb.clickhouse.v1.DatabaseSpecB\x06\x82\xc81\x02>0R\rdatabaseSpecs\x12O\n" +
	"\n" +
	"user_specs\x18\b \x03(\v2(.yandex.cloud.mdb.clickhouse.v1.UserSpecB\x06\x82\xc81\x02>0R\tuserSpecs\x12O\n" +
	"\n" +
	"host_specs\x18\t \x03(\v2(.yandex.cloud.mdb.clickhouse.v1.HostSpecB\x06\x82\xc81\x02>0R\thostSpecs\x12+\n" +
	"\n" +
	"network_id\x18\n" +
	" \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tnetworkId\x129\n" +
	"\n" +
	"shard_name\x18\v \x01(\tB\x1a\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\tshardName\x12,\n" +
	"\x12service_account_id\x18\f \x01(\tR\x10serviceAccountId\x12,\n" +
	"\x12security_group_ids\x18\r \x03(\tR\x10securityGroupIds\x12/\n" +
	"\x13deletion_protection\x18\x0e \x01(\bR\x12deletionProtection\x12`\n" +
	"\x12maintenance_window\x18\x0f \x01(\v21.yandex.cloud.mdb.clickhouse.v1.MaintenanceWindowR\x11maintenanceWindow\x12J\n" +
	"\vshard_specs\x18\x10 \x03(\v2).yandex.cloud.mdb.clickhouse.v1.ShardSpecR\n" +
	"shardSpecs\x12Q\n" +
	"\x16disk_encryption_key_id\x18\x12 \x01(\v2\x1c.google.protobuf.StringValueR\x13diskEncryptionKeyId\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01J\x04\b\x11\x10\x12\"6\n" +
	"\x15CreateClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\x95\x06\n" +
	"\x14UpdateClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x95\x01\n" +
	"\x06labels\x18\x04 \x03(\v2@.yandex.cloud.mdb.clickhouse.v1.UpdateClusterRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x04<=63R\x06labels\x12K\n" +
	"\vconfig_spec\x18\x05 \x01(\v2*.yandex.cloud.mdb.clickhouse.v1.ConfigSpecR\n" +
	"configSpec\x12.\n" +
	"\x04name\x18\x06 \x01(\tB\x1a\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x04name\x12,\n" +
	"\x12service_account_id\x18\a \x01(\tR\x10serviceAccountId\x12`\n" +
	"\x12maintenance_window\x18\b \x01(\v21.yandex.cloud.mdb.clickhouse.v1.MaintenanceWindowR\x11maintenanceWindow\x12,\n" +
	"\x12security_group_ids\x18\t \x03(\tR\x10securityGroupIds\x12/\n" +
	"\x13deletion_protection\x18\n" +
	" \x01(\bR\x12deletionProtection\x12'\n" +
	"\n" +
	"network_id\x18\v \x01(\tB\b\x8a\xc81\x04<=50R\tnetworkId\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"6\n" +
	"\x15UpdateClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"C\n" +
	"\x14DeleteClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"6\n" +
	"\x15DeleteClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"B\n" +
	"\x13StartClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"5\n" +
	"\x14StartClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"A\n" +
	"\x12StopClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"4\n" +
	"\x13StopClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\x83\x01\n" +
	"\x12MoveClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12@\n" +
	"\x15destination_folder_id\x18\x02 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x13destinationFolderId\"\x92\x01\n" +
	"\x13MoveClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12(\n" +
	"\x10source_folder_id\x18\x02 \x01(\tR\x0esourceFolderId\x122\n" +
	"\x15destination_folder_id\x18\x03 \x01(\tR\x13destinationFolderId\"\xb8\x02\n" +
	"\x1aAddClusterZookeeperRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12G\n" +
	"\tresources\x18\x02 \x01(\v2).yandex.cloud.mdb.clickhouse.v1.ResourcesR\tresources\x12G\n" +
	"\n" +
	"host_specs\x18\x03 \x03(\v2(.yandex.cloud.mdb.clickhouse.v1.HostSpecR\thostSpecs\x12[\n" +
	"\x1cconvert_tables_to_replicated\x18\x04 \x01(\v2\x1a.google.protobuf.BoolValueR\x19convertTablesToReplicated\"<\n" +
	"\x1bAddClusterZookeeperMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"C\n" +
	"\x14BackupClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"6\n" +
	"\x15BackupClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\xb0\b\n" +
	"\x15RestoreClusterRequest\x12!\n" +
	"\tbackup_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\bbackupId\x122\n" +
	"\x15additional_backup_ids\x18\r \x03(\tR\x13additionalBackupIds\x122\n" +
	"\x04name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x04name\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x96\x01\n" +
	"\x06labels\x18\x04 \x03(\v2A.yandex.cloud.mdb.clickhouse.v1.RestoreClusterRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x04<=63R\x06labels\x12[\n" +
	"\venvironment\x18\x05 \x01(\x0e23.yandex.cloud.mdb.clickhouse.v1.Cluster.EnvironmentB\x04\xe8\xc71\x01R\venvironment\x12Q\n" +
	"\vconfig_spec\x18\x06 \x01(\v2*.yandex.cloud.mdb.clickhouse.v1.ConfigSpecB\x04\xe8\xc71\x01R\n" +
	"configSpec\x12O\n" +
	"\n" +
	"host_specs\x18\a \x03(\v2(.yandex.cloud.mdb.clickhouse.v1.HostSpecB\x06\x82\xc81\x02>0R\thostSpecs\x12+\n" +
	"\n" +
	"network_id\x18\b \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tnetworkId\x12%\n" +
	"\tfolder_id\x18\t \x01(\tB\b\x8a\xc81\x04<=50R\bfolderId\x12,\n" +
	"\x12service_account_id\x18\n" +
	" \x01(\tR\x10serviceAccountId\x12,\n" +
	"\x12security_group_ids\x18\v \x03(\tR\x10securityGroupIds\x12/\n" +
	"\x13deletion_protection\x18\x0e \x01(\bR\x12deletionProtection\x12J\n" +
	"\vshard_specs\x18\x0f \x03(\v2).yandex.cloud.mdb.clickhouse.v1.ShardSpecR\n" +
	"shardSpecs\x12Q\n" +
	"\x16disk_encryption_key_id\x18\x11 \x01(\v2\x1c.google.protobuf.StringValueR\x13diskEncryptionKeyId\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01J\x04\b\f\x10\rJ\x04\b\x10\x10\x11\"T\n" +
	"\x16RestoreClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1b\n" +
	"\tbackup_id\x18\x02 \x01(\tR\bbackupId\"\xf8\x02\n" +
	"\x1cRescheduleMaintenanceRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12z\n" +
	"\x0freschedule_type\x18\x02 \x01(\x0e2K.yandex.cloud.mdb.clickhouse.v1.RescheduleMaintenanceRequest.RescheduleTypeB\x04\xe8\xc71\x01R\x0erescheduleType\x12?\n" +
	"\rdelayed_until\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\fdelayedUntil\"n\n" +
	"\x0eRescheduleType\x12\x1f\n" +
	"\x1bRESCHEDULE_TYPE_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tIMMEDIATE\x10\x01\x12\x19\n" +
	"\x15NEXT_AVAILABLE_WINDOW\x10\x02\x12\x11\n" +
	"\rSPECIFIC_TIME\x10\x03\"\x85\x01\n" +
	"\x1dRescheduleMaintenanceMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12?\n" +
	"\rdelayed_until\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\fdelayedUntilJ\x04\b\x02\x10\x04\"\xd3\x01\n" +
	"\tLogRecord\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12P\n" +
	"\amessage\x18\x02 \x03(\v26.yandex.cloud.mdb.clickhouse.v1.LogRecord.MessageEntryR\amessage\x1a:\n" +
	"\fMessageEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xec\x03\n" +
	"\x16ListClusterLogsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12#\n" +
	"\rcolumn_filter\x18\x02 \x03(\tR\fcolumnFilter\x12k\n" +
	"\fservice_type\x18\x03 \x01(\x0e2B.yandex.cloud.mdb.clickhouse.v1.ListClusterLogsRequest.ServiceTypeB\x04\xe8\xc71\x01R\vserviceType\x127\n" +
	"\tfrom_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\bfromTime\x123\n" +
	"\ato_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x06toTime\x12'\n" +
	"\tpage_size\x18\x06 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\a \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"R\n" +
	"\vServiceType\x12\x1c\n" +
	"\x18SERVICE_TYPE_UNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"CLICKHOUSE\x10\x01\x12\x15\n" +
	"\x11CLICKHOUSE_KEEPER\x10\x02\"\x80\x01\n" +
	"\x17ListClusterLogsResponse\x12=\n" +
	"\x04logs\x18\x01 \x03(\v2).yandex.cloud.mdb.clickhouse.v1.LogRecordR\x04logs\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x80\x01\n" +
	"\x0fStreamLogRecord\x12A\n" +
	"\x06record\x18\x01 \x01(\v2).yandex.cloud.mdb.clickhouse.v1.LogRecordR\x06record\x12*\n" +
	"\x11next_record_token\x18\x02 \x01(\tR\x0fnextRecordToken\"\xef\x03\n" +
	"\x18StreamClusterLogsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12#\n" +
	"\rcolumn_filter\x18\x02 \x03(\tR\fcolumnFilter\x12m\n" +
	"\fservice_type\x18\x03 \x01(\x0e2D.yandex.cloud.mdb.clickhouse.v1.StreamClusterLogsRequest.ServiceTypeB\x04\xe8\xc71\x01R\vserviceType\x127\n" +
	"\tfrom_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\bfromTime\x123\n" +
	"\ato_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x06toTime\x12,\n" +
	"\frecord_token\x18\x06 \x01(\tB\t\x8a\xc81\x05<=100R\vrecordToken\x12\"\n" +
	"\x06filter\x18\a \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"R\n" +
	"\vServiceType\x12\x1c\n" +
	"\x18SERVICE_TYPE_UNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"CLICKHOUSE\x10\x01\x12\x15\n" +
	"\x11CLICKHOUSE_KEEPER\x10\x02\"\x9e\x01\n" +
	"\x1cListClusterOperationsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x8a\x01\n" +
	"\x1dListClusterOperationsResponse\x12A\n" +
	"\n" +
	"operations\x18\x01 \x03(\v2!.yandex.cloud.operation.OperationR\n" +
	"operations\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x9b\x01\n" +
	"\x19ListClusterBackupsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x86\x01\n" +
	"\x1aListClusterBackupsResponse\x12@\n" +
	"\abackups\x18\x01 \x03(\v2&.yandex.cloud.mdb.clickhouse.v1.BackupR\abackups\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x99\x01\n" +
	"\x17ListClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"~\n" +
	"\x18ListClusterHostsResponse\x12:\n" +
	"\x05hosts\x18\x01 \x03(\v2$.yandex.cloud.mdb.clickhouse.v1.HostR\x05hosts\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xd3\x01\n" +
	"\x16AddClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12O\n" +
	"\n" +
	"host_specs\x18\x02 \x03(\v2(.yandex.cloud.mdb.clickhouse.v1.HostSpecB\x06\x82\xc81\x02>0R\thostSpecs\x12;\n" +
	"\vcopy_schema\x18\x03 \x01(\v2\x1a.google.protobuf.BoolValueR\n" +
	"copySchema\"W\n" +
	"\x17AddClusterHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"\xb6\x01\n" +
	"\x0eUpdateHostSpec\x12!\n" +
	"\thost_name\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\bhostName\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12D\n" +
	"\x10assign_public_ip\x18\x03 \x01(\v2\x1a.google.protobuf.BoolValueR\x0eassignPublicIp\"\xac\x01\n" +
	"\x19UpdateClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12b\n" +
	"\x11update_host_specs\x18\x02 \x03(\v2..yandex.cloud.mdb.clickhouse.v1.UpdateHostSpecB\x06\x82\xc81\x02>0R\x0fupdateHostSpecs\"Z\n" +
	"\x1aUpdateClusterHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"x\n" +
	"\x19DeleteClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12.\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tB\x0f\x82\xc81\x02>0\x8a\xc81\x05<=253R\thostNames\"Z\n" +
	"\x1aDeleteClusterHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"y\n" +
	"\x1aRestartClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12.\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tB\x0f\x82\xc81\x02>0\x8a\xc81\x05<=353R\thostNames\"[\n" +
	"\x1bRestartClusterHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"\x84\x01\n" +
	"\x16GetClusterShardRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12=\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\tshardName\"\x9a\x01\n" +
	"\x18ListClusterShardsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x82\x01\n" +
	"\x19ListClusterShardsResponse\x12=\n" +
	"\x06shards\x18\x01 \x03(\v2%.yandex.cloud.mdb.clickhouse.v1.ShardR\x06shards\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xe4\x02\n" +
	"\x16AddClusterShardRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12=\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\tshardName\x12P\n" +
	"\vconfig_spec\x18\x03 \x01(\v2/.yandex.cloud.mdb.clickhouse.v1.ShardConfigSpecR\n" +
	"configSpec\x12O\n" +
	"\n" +
	"host_specs\x18\x04 \x03(\v2(.yandex.cloud.mdb.clickhouse.v1.HostSpecB\x06\x82\xc81\x02>0R\thostSpecs\x12;\n" +
	"\vcopy_schema\x18\x05 \x01(\v2\x1a.google.protobuf.BoolValueR\n" +
	"copySchema\"W\n" +
	"\x17AddClusterShardMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tR\tshardName\"\xa0\x02\n" +
	"\x17AddClusterShardsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12R\n" +
	"\vshard_specs\x18\x02 \x03(\v2).yandex.cloud.mdb.clickhouse.v1.ShardSpecB\x06\x82\xc81\x02>0R\n" +
	"shardSpecs\x12G\n" +
	"\n" +
	"host_specs\x18\x03 \x03(\v2(.yandex.cloud.mdb.clickhouse.v1.HostSpecR\thostSpecs\x12;\n" +
	"\vcopy_schema\x18\x04 \x01(\v2\x1a.google.protobuf.BoolValueR\n" +
	"copySchema\"Z\n" +
	"\x18AddClusterShardsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1f\n" +
	"\vshard_names\x18\x02 \x03(\tR\n" +
	"shardNames\"\x96\x02\n" +
	"\x19UpdateClusterShardRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12=\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\tshardName\x12;\n" +
	"\vupdate_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12P\n" +
	"\vconfig_spec\x18\x04 \x01(\v2/.yandex.cloud.mdb.clickhouse.v1.ShardConfigSpecR\n" +
	"configSpec\"Z\n" +
	"\x1aUpdateClusterShardMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tR\tshardName\"\x87\x01\n" +
	"\x19DeleteClusterShardRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12=\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\tshardName\"Z\n" +
	"\x1aDeleteClusterShardMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tR\tshardName\"\x8c\x01\n" +
	"\x1aDeleteClusterShardsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12A\n" +
	"\vshard_names\x18\x02 \x03(\tB \xf2\xc71\x0e[a-zA-Z0-9_-]*\x82\xc81\x02>0\x8a\xc81\x04<=63R\n" +
	"shardNames\"]\n" +
	"\x1bDeleteClusterShardsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1f\n" +
	"\vshard_names\x18\x02 \x03(\tR\n" +
	"shardNames\"\x94\x01\n" +
	"\x1bGetClusterShardGroupRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12H\n" +
	"\x10shard_group_name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x0eshardGroupName\"\x9f\x01\n" +
	"\x1dListClusterShardGroupsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x97\x01\n" +
	"\x1eListClusterShardGroupsResponse\x12M\n" +
	"\fshard_groups\x18\x01 \x03(\v2*.yandex.cloud.mdb.clickhouse.v1.ShardGroupR\vshardGroups\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xda\x01\n" +
	"\x1eCreateClusterShardGroupRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12H\n" +
	"\x10shard_group_name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x0eshardGroupName\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1f\n" +
	"\vshard_names\x18\x04 \x03(\tR\n" +
	"shardNames\"j\n" +
	"\x1fCreateClusterShardGroupMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12(\n" +
	"\x10shard_group_name\x18\x02 \x01(\tR\x0eshardGroupName\"\x97\x02\n" +
	"\x1eUpdateClusterShardGroupRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12H\n" +
	"\x10shard_group_name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x0eshardGroupName\x12;\n" +
	"\vupdate_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12\x1f\n" +
	"\vshard_names\x18\x05 \x03(\tR\n" +
	"shardNames\"j\n" +
	"\x1fUpdateClusterShardGroupMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12(\n" +
	"\x10shard_group_name\x18\x02 \x01(\tR\x0eshardGroupName\"\x97\x01\n" +
	"\x1eDeleteClusterShardGroupRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12H\n" +
	"\x10shard_group_name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x0eshardGroupName\"j\n" +
	"\x1fDeleteClusterShardGroupMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12(\n" +
	"\x10shard_group_name\x18\x02 \x01(\tR\x0eshardGroupName\"\xa8\x01\n" +
	"&ListClusterExternalDictionariesRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\xd2\x01\n" +
	"'ListClusterExternalDictionariesResponse\x12\x7f\n" +
	"\x15external_dictionaries\x18\x01 \x03(\v2J.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionaryR\x14externalDictionaries\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xd2\x01\n" +
	"&CreateClusterExternalDictionaryRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12{\n" +
	"\x13external_dictionary\x18\x02 \x01(\v2J.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionaryR\x12externalDictionary\"H\n" +
	"'CreateClusterExternalDictionaryMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\x8f\x02\n" +
	"&UpdateClusterExternalDictionaryRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12{\n" +
	"\x13external_dictionary\x18\x02 \x01(\v2J.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionaryR\x12externalDictionary\x12;\n" +
	"\vupdate_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\"\x82\x01\n" +
	"'UpdateClusterExternalDictionaryMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x128\n" +
	"\x18external_dictionary_name\x18\x02 \x01(\tR\x16externalDictionaryName\"\x8f\x01\n" +
	"&DeleteClusterExternalDictionaryRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x128\n" +
	"\x18external_dictionary_name\x18\x02 \x01(\tR\x16externalDictionaryName\"H\n" +
	"'DeleteClusterExternalDictionaryMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\xfe\x01\n" +
	"\bHostSpec\x12!\n" +
	"\azone_id\x18\x01 \x01(\tB\b\x8a\xc81\x04<=50R\x06zoneId\x12C\n" +
	"\x04type\x18\x02 \x01(\x0e2).yandex.cloud.mdb.clickhouse.v1.Host.TypeB\x04\xe8\xc71\x01R\x04type\x12%\n" +
	"\tsubnet_id\x18\x03 \x01(\tB\b\x8a\xc81\x04<=50R\bsubnetId\x12(\n" +
	"\x10assign_public_ip\x18\x04 \x01(\bR\x0eassignPublicIp\x129\n" +
	"\n" +
	"shard_name\x18\x05 \x01(\tB\x1a\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\tshardName\"\xe2\t\n" +
	"\n" +
	"ConfigSpec\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\x12U\n" +
	"\n" +
	"clickhouse\x18\x01 \x01(\v25.yandex.cloud.mdb.clickhouse.v1.ConfigSpec.ClickhouseR\n" +
	"clickhouse\x12R\n" +
	"\tzookeeper\x18\x02 \x01(\v24.yandex.cloud.mdb.clickhouse.v1.ConfigSpec.ZookeeperR\tzookeeper\x12F\n" +
	"\x13backup_window_start\x18\x04 \x01(\v2\x16.google.type.TimeOfDayR\x11backupWindowStart\x12>\n" +
	"\x06access\x18\x05 \x01(\v2&.yandex.cloud.mdb.clickhouse.v1.AccessR\x06access\x12Q\n" +
	"\rcloud_storage\x18\x06 \x01(\v2,.yandex.cloud.mdb.clickhouse.v1.CloudStorageR\fcloudStorage\x12R\n" +
	"\x17sql_database_management\x18\a \x01(\v2\x1a.google.protobuf.BoolValueR\x15sqlDatabaseManagement\x12J\n" +
	"\x13sql_user_management\x18\b \x01(\v2\x1a.google.protobuf.BoolValueR\x11sqlUserManagement\x12%\n" +
	"\x0eadmin_password\x18\t \x01(\tR\radminPassword\x12C\n" +
	"\x0fembedded_keeper\x18\n" +
	" \x01(\v2\x1a.google.protobuf.BoolValueR\x0eembeddedKeeper\x12V\n" +
	"\x19backup_retain_period_days\x18\v \x01(\v2\x1b.google.protobuf.Int64ValueR\x16backupRetainPeriodDays\x1a\x8f\x02\n" +
	"\n" +
	"Clickhouse\x12O\n" +
	"\x06config\x18\x01 \x01(\v27.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigR\x06config\x12G\n" +
	"\tresources\x18\x02 \x01(\v2).yandex.cloud.mdb.clickhouse.v1.ResourcesR\tresources\x12g\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v23.yandex.cloud.mdb.clickhouse.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\xbd\x01\n" +
	"\tZookeeper\x12G\n" +
	"\tresources\x18\x01 \x01(\v2).yandex.cloud.mdb.clickhouse.v1.ResourcesR\tresources\x12g\n" +
	"\x15disk_size_autoscaling\x18\x02 \x01(\v23.yandex.cloud.mdb.clickhouse.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\"\xb4\x03\n" +
	"\x0fShardConfigSpec\x12Z\n" +
	"\n" +
	"clickhouse\x18\x01 \x01(\v2:.yandex.cloud.mdb.clickhouse.v1.ShardConfigSpec.ClickhouseR\n" +
	"clickhouse\x1a\xc4\x02\n" +
	"\n" +
	"Clickhouse\x12O\n" +
	"\x06config\x18\x01 \x01(\v27.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigR\x06config\x12G\n" +
	"\tresources\x18\x02 \x01(\v2).yandex.cloud.mdb.clickhouse.v1.ResourcesR\tresources\x123\n" +
	"\x06weight\x18\x03 \x01(\v2\x1b.google.protobuf.Int64ValueR\x06weight\x12g\n" +
	"\x15disk_size_autoscaling\x18\x04 \x01(\v23.yandex.cloud.mdb.clickhouse.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\"\xbd\x01\n" +
	"\tShardSpec\x122\n" +
	"\x04name\x18\x01 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x04name\x12P\n" +
	"\vconfig_spec\x18\x02 \x01(\v2/.yandex.cloud.mdb.clickhouse.v1.ShardConfigSpecR\n" +
	"configSpec\x12*\n" +
	"\x11shard_group_names\x18\x03 \x03(\tR\x0fshardGroupNames2\xd8>\n" +
	"\x0eClusterService\x12\x97\x01\n" +
	"\x03Get\x121.yandex.cloud.mdb.clickhouse.v1.GetClusterRequest\x1a'.yandex.cloud.mdb.clickhouse.v1.Cluster\"4\x82\xd3\xe4\x93\x02.\x12,/managed-clickhouse/v1/clusters/{cluster_id}\x12\x9a\x01\n" +
	"\x04List\x123.yandex.cloud.mdb.clickhouse.v1.ListClustersRequest\x1a4.yandex.cloud.mdb.clickhouse.v1.ListClustersResponse\"'\x82\xd3\xe4\x93\x02!\x12\x1f/managed-clickhouse/v1/clusters\x12\xb1\x01\n" +
	"\x06Create\x124.yandex.cloud.mdb.clickhouse.v1.CreateClusterRequest\x1a!.yandex.cloud.operation.Operation\"N\xb2\xd2* \n" +
	"\x15CreateClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02$:\x01*\"\x1f/managed-clickhouse/v1/clusters\x12\xbe\x01\n" +
	"\x06Update\x124.yandex.cloud.mdb.clickhouse.v1.UpdateClusterRequest\x1a!.yandex.cloud.operation.Operation\"[\xb2\xd2* \n" +
	"\x15UpdateClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x021:\x01*2,/managed-clickhouse/v1/clusters/{cluster_id}\x12\xc9\x01\n" +
	"\x06Delete\x124.yandex.cloud.mdb.clickhouse.v1.DeleteClusterRequest\x1a!.yandex.cloud.operation.Operation\"f\xb2\xd2*.\n" +
	"\x15DeleteClusterMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02.*,/managed-clickhouse/v1/clusters/{cluster_id}\x12\xbe\x01\n" +
	"\x05Start\x123.yandex.cloud.mdb.clickhouse.v1.StartClusterRequest\x1a!.yandex.cloud.operation.Operation\"]\xb2\xd2*\x1f\n" +
	"\x14StartClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x024\"2/managed-clickhouse/v1/clusters/{cluster_id}:start\x12\xba\x01\n" +
	"\x04Stop\x122.yandex.cloud.mdb.clickhouse.v1.StopClusterRequest\x1a!.yandex.cloud.operation.Operation\"[\xb2\xd2*\x1e\n" +
	"\x13StopClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x023\"1/managed-clickhouse/v1/clusters/{cluster_id}:stop\x12\xbd\x01\n" +
	"\x04Move\x122.yandex.cloud.mdb.clickhouse.v1.MoveClusterRequest\x1a!.yandex.cloud.operation.Operation\"^\xb2\xd2*\x1e\n" +
	"\x13MoveClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x026:\x01*\"1/managed-clickhouse/v1/clusters/{cluster_id}:move\x12\xdd\x01\n" +
	"\fAddZookeeper\x12:.yandex.cloud.mdb.clickhouse.v1.AddClusterZookeeperRequest\x1a!.yandex.cloud.operation.Operation\"n\xb2\xd2*&\n" +
	"\x1bAddClusterZookeeperMetadata\x12\aCluster\x82\xd3\xe4\x93\x02>:\x01*\"9/managed-clickhouse/v1/clusters/{cluster_id}:addZookeeper\x12\xc2\x01\n" +
	"\x06Backup\x124.yandex.cloud.mdb.clickhouse.v1.BackupClusterRequest\x1a!.yandex.cloud.operation.Operation\"_\xb2\xd2* \n" +
	"\x15BackupClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x025\"3/managed-clickhouse/v1/clusters/{cluster_id}:backup\x12\xbc\x01\n" +
	"\aRestore\x125.yandex.cloud.mdb.clickhouse.v1.RestoreClusterRequest\x1a!.yandex.cloud.operation.Operation\"W\xb2\xd2*!\n" +
	"\x16RestoreClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02,:\x01*\"'/managed-clickhouse/v1/clusters:restore\x12\xf3\x01\n" +
	"\x15RescheduleMaintenance\x12<.yandex.cloud.mdb.clickhouse.v1.RescheduleMaintenanceRequest\x1a!.yandex.cloud.operation.Operation\"y\xb2\xd2*(\n" +
	"\x1dRescheduleMaintenanceMetadata\x12\aCluster\x82\xd3\xe4\x93\x02G:\x01*\"B/managed-clickhouse/v1/clusters/{cluster_id}:rescheduleMaintenance\x12\xb6\x01\n" +
	"\bListLogs\x126.yandex.cloud.mdb.clickhouse.v1.ListClusterLogsRequest\x1a7.yandex.cloud.mdb.clickhouse.v1.ListClusterLogsResponse\"9\x82\xd3\xe4\x93\x023\x121/managed-clickhouse/v1/clusters/{cluster_id}:logs\x12\xbb\x01\n" +
	"\n" +
	"StreamLogs\x128.yandex.cloud.mdb.clickhouse.v1.StreamClusterLogsRequest\x1a/.yandex.cloud.mdb.clickhouse.v1.StreamLogRecord\"@\x82\xd3\xe4\x93\x02:\x128/managed-clickhouse/v1/clusters/{cluster_id}:stream_logs0\x01\x12\xce\x01\n" +
	"\x0eListOperations\x12<.yandex.cloud.mdb.clickhouse.v1.ListClusterOperationsRequest\x1a=.yandex.cloud.mdb.clickhouse.v1.ListClusterOperationsResponse\"?\x82\xd3\xe4\x93\x029\x127/managed-clickhouse/v1/clusters/{cluster_id}/operations\x12\xc2\x01\n" +
	"\vListBackups\x129.yandex.cloud.mdb.clickhouse.v1.ListClusterBackupsRequest\x1a:.yandex.cloud.mdb.clickhouse.v1.ListClusterBackupsResponse\"<\x82\xd3\xe4\x93\x026\x124/managed-clickhouse/v1/clusters/{cluster_id}/backups\x12\xba\x01\n" +
	"\tListHosts\x127.yandex.cloud.mdb.clickhouse.v1.ListClusterHostsRequest\x1a8.yandex.cloud.mdb.clickhouse.v1.ListClusterHostsResponse\":\x82\xd3\xe4\x93\x024\x122/managed-clickhouse/v1/clusters/{cluster_id}/hosts\x12\xe4\x01\n" +
	"\bAddHosts\x126.yandex.cloud.mdb.clickhouse.v1.AddClusterHostsRequest\x1a!.yandex.cloud.operation.Operation\"}\xb2\xd2*0\n" +
	"\x17AddClusterHostsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02C:\x01*\">/managed-clickhouse/v1/clusters/{cluster_id}/hosts:batchCreate\x12\xee\x01\n" +
	"\vUpdateHosts\x129.yandex.cloud.mdb.clickhouse.v1.UpdateClusterHostsRequest\x1a!.yandex.cloud.operation.Operation\"\x80\x01\xb2\xd2*3\n" +
	"\x1aUpdateClusterHostsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02C:\x01*\">/managed-clickhouse/v1/clusters/{cluster_id}/hosts:batchUpdate\x12\xee\x01\n" +
	"\vDeleteHosts\x129.yandex.cloud.mdb.clickhouse.v1.DeleteClusterHostsRequest\x1a!.yandex.cloud.operation.Operation\"\x80\x01\xb2\xd2*3\n" +
	"\x1aDeleteClusterHostsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02C:\x01*\">/managed-clickhouse/v1/clusters/{cluster_id}/hosts:batchDelete\x12\xf2\x01\n" +
	"\fRestartHosts\x12:.yandex.cloud.mdb.clickhouse.v1.RestartClusterHostsRequest\x1a!.yandex.cloud.operation.Operation\"\x82\x01\xb2\xd2*4\n" +
	"\x1bRestartClusterHostsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02D:\x01*\"?/managed-clickhouse/v1/clusters/{cluster_id}/hosts:restartHosts\x12\xb3\x01\n" +
	"\bGetShard\x126.yandex.cloud.mdb.clickhouse.v1.GetClusterShardRequest\x1a%.yandex.cloud.mdb.clickhouse.v1.Shard\"H\x82\xd3\xe4\x93\x02B\x12@/managed-clickhouse/v1/clusters/{cluster_id}/shards/{shard_name}\x12\xbe\x01\n" +
	"\n" +
	"ListShards\x128.yandex.cloud.mdb.clickhouse.v1.ListClusterShardsRequest\x1a9.yandex.cloud.mdb.clickhouse.v1.ListClusterShardsResponse\";\x82\xd3\xe4\x93\x025\x123/managed-clickhouse/v1/clusters/{cluster_id}/shards\x12\xc9\x01\n" +
	"\bAddShard\x126.yandex.cloud.mdb.clickhouse.v1.AddClusterShardRequest\x1a!.yandex.cloud.operation.Operation\"b\xb2\xd2* \n" +
	"\x17AddClusterShardMetadata\x12\x05Shard\x82\xd3\xe4\x93\x028:\x01*\"3/managed-clickhouse/v1/clusters/{cluster_id}/shards\x12\xd9\x01\n" +
	"\tAddShards\x127.yandex.cloud.mdb.clickhouse.v1.AddClusterShardsRequest\x1a!.yandex.cloud.operation.Operation\"p\xb2\xd2*\"\n" +
	"\x18AddClusterShardsMetadata\x12\x06Shards\x82\xd3\xe4\x93\x02D:\x01*\"?/managed-clickhouse/v1/clusters/{cluster_id}/shards:batchCreate\x12\xdf\x01\n" +
	"\vUpdateShard\x129.yandex.cloud.mdb.clickhouse.v1.UpdateClusterShardRequest\x1a!.yandex.cloud.operation.Operation\"r\xb2\xd2*#\n" +
	"\x1aUpdateClusterShardMetadata\x12\x05Shard\x82\xd3\xe4\x93\x02E:\x01*2@/managed-clickhouse/v1/clusters/{cluster_id}/shards/{shard_name}\x12\xec\x01\n" +
	"\vDeleteShard\x129.yandex.cloud.mdb.clickhouse.v1.DeleteClusterShardRequest\x1a!.yandex.cloud.operation.Operation\"\x7f\xb2\xd2*3\n" +
	"\x1aDeleteClusterShardMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02B*@/managed-clickhouse/v1/clusters/{cluster_id}/shards/{shard_name}\x12\xf2\x01\n" +
	"\fDeleteShards\x12:.yandex.cloud.mdb.clickhouse.v1.DeleteClusterShardsRequest\x1a!.yandex.cloud.operation.Operation\"\x82\x01\xb2\xd2*4\n" +
	"\x1bDeleteClusterShardsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02D:\x01*\"?/managed-clickhouse/v1/clusters/{cluster_id}/shards:batchDelete\x12\xcd\x01\n" +
	"\rGetShardGroup\x12;.yandex.cloud.mdb.clickhouse.v1.GetClusterShardGroupRequest\x1a*.yandex.cloud.mdb.clickhouse.v1.ShardGroup\"S\x82\xd3\xe4\x93\x02M\x12K/managed-clickhouse/v1/clusters/{cluster_id}/shardGroups/{shard_group_name}\x12\xd2\x01\n" +
	"\x0fListShardGroups\x12=.yandex.cloud.mdb.clickhouse.v1.ListClusterShardGroupsRequest\x1a>.yandex.cloud.mdb.clickhouse.v1.ListClusterShardGroupsResponse\"@\x82\xd3\xe4\x93\x02:\x128/managed-clickhouse/v1/clusters/{cluster_id}/shardGroups\x12\xeb\x01\n" +
	"\x10CreateShardGroup\x12>.yandex.cloud.mdb.clickhouse.v1.CreateClusterShardGroupRequest\x1a!.yandex.cloud.operation.Operation\"t\xb2\xd2*-\n" +
	"\x1fCreateClusterShardGroupMetadata\x12\n" +
	"ShardGroup\x82\xd3\xe4\x93\x02=:\x01*\"8/managed-clickhouse/v1/clusters/{cluster_id}/shardGroups\x12\xff\x01\n" +
	"\x10UpdateShardGroup\x12>.yandex.cloud.mdb.clickhouse.v1.UpdateClusterShardGroupRequest\x1a!.yandex.cloud.operation.Operation\"\x87\x01\xb2\xd2*-\n" +
	"\x1fUpdateClusterShardGroupMetadata\x12\n" +
	"ShardGroup\x82\xd3\xe4\x93\x02P:\x01*2K/managed-clickhouse/v1/clusters/{cluster_id}/shardGroups/{shard_group_name}\x12\x87\x02\n" +
	"\x10DeleteShardGroup\x12>.yandex.cloud.mdb.clickhouse.v1.DeleteClusterShardGroupRequest\x1a!.yandex.cloud.operation.Operation\"\x8f\x01\xb2\xd2*8\n" +
	"\x1fDeleteClusterShardGroupMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02M*K/managed-clickhouse/v1/clusters/{cluster_id}/shardGroups/{shard_group_name}\x12\xf6\x01\n" +
	"\x18ListExternalDictionaries\x12F.yandex.cloud.mdb.clickhouse.v1.ListClusterExternalDictionariesRequest\x1aG.yandex.cloud.mdb.clickhouse.v1.ListClusterExternalDictionariesResponse\"I\x82\xd3\xe4\x93\x02C\x12A/managed-clickhouse/v1/clusters/{cluster_id}/externalDictionaries\x12\x8e\x02\n" +
	"\x18CreateExternalDictionary\x12F.yandex.cloud.mdb.clickhouse.v1.CreateClusterExternalDictionaryRequest\x1a!.yandex.cloud.operation.Operation\"\x86\x01\xb2\xd2*2\n" +
	"'CreateClusterExternalDictionaryMetadata\x12\aCluster\x82\xd3\xe4\x93\x02J:\x01*\"E/managed-clickhouse/v1/clusters/{cluster_id}:createExternalDictionary\x12\x8e\x02\n" +
	"\x18UpdateExternalDictionary\x12F.yandex.cloud.mdb.clickhouse.v1.UpdateClusterExternalDictionaryRequest\x1a!.yandex.cloud.operation.Operation\"\x86\x01\xb2\xd2*2\n" +
	"'UpdateClusterExternalDictionaryMetadata\x12\aCluster\x82\xd3\xe4\x93\x02J:\x01*\"E/managed-clickhouse/v1/clusters/{cluster_id}:updateExternalDictionary\x12\x8e\x02\n" +
	"\x18DeleteExternalDictionary\x12F.yandex.cloud.mdb.clickhouse.v1.DeleteClusterExternalDictionaryRequest\x1a!.yandex.cloud.operation.Operation\"\x86\x01\xb2\xd2*2\n" +
	"'DeleteClusterExternalDictionaryMetadata\x12\aCluster\x82\xd3\xe4\x93\x02J:\x01*\"E/managed-clickhouse/v1/clusters/{cluster_id}:deleteExternalDictionaryBs\n" +
	"\"yandex.cloud.api.mdb.clickhouse.v1ZMgithub.com/yandex-cloud/go-genproto/yandex/cloud/mdb/clickhouse/v1;clickhouseb\x06proto3"

var (
	file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescData []byte
)

func file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDesc), len(file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDesc)))
	})
	return file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDescData
}

var file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes = make([]protoimpl.MessageInfo, 84)
var file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_goTypes = []any{
	(RescheduleMaintenanceRequest_RescheduleType)(0),   // 0: yandex.cloud.mdb.clickhouse.v1.RescheduleMaintenanceRequest.RescheduleType
	(ListClusterLogsRequest_ServiceType)(0),            // 1: yandex.cloud.mdb.clickhouse.v1.ListClusterLogsRequest.ServiceType
	(StreamClusterLogsRequest_ServiceType)(0),          // 2: yandex.cloud.mdb.clickhouse.v1.StreamClusterLogsRequest.ServiceType
	(*GetClusterRequest)(nil),                          // 3: yandex.cloud.mdb.clickhouse.v1.GetClusterRequest
	(*ListClustersRequest)(nil),                        // 4: yandex.cloud.mdb.clickhouse.v1.ListClustersRequest
	(*ListClustersResponse)(nil),                       // 5: yandex.cloud.mdb.clickhouse.v1.ListClustersResponse
	(*CreateClusterRequest)(nil),                       // 6: yandex.cloud.mdb.clickhouse.v1.CreateClusterRequest
	(*CreateClusterMetadata)(nil),                      // 7: yandex.cloud.mdb.clickhouse.v1.CreateClusterMetadata
	(*UpdateClusterRequest)(nil),                       // 8: yandex.cloud.mdb.clickhouse.v1.UpdateClusterRequest
	(*UpdateClusterMetadata)(nil),                      // 9: yandex.cloud.mdb.clickhouse.v1.UpdateClusterMetadata
	(*DeleteClusterRequest)(nil),                       // 10: yandex.cloud.mdb.clickhouse.v1.DeleteClusterRequest
	(*DeleteClusterMetadata)(nil),                      // 11: yandex.cloud.mdb.clickhouse.v1.DeleteClusterMetadata
	(*StartClusterRequest)(nil),                        // 12: yandex.cloud.mdb.clickhouse.v1.StartClusterRequest
	(*StartClusterMetadata)(nil),                       // 13: yandex.cloud.mdb.clickhouse.v1.StartClusterMetadata
	(*StopClusterRequest)(nil),                         // 14: yandex.cloud.mdb.clickhouse.v1.StopClusterRequest
	(*StopClusterMetadata)(nil),                        // 15: yandex.cloud.mdb.clickhouse.v1.StopClusterMetadata
	(*MoveClusterRequest)(nil),                         // 16: yandex.cloud.mdb.clickhouse.v1.MoveClusterRequest
	(*MoveClusterMetadata)(nil),                        // 17: yandex.cloud.mdb.clickhouse.v1.MoveClusterMetadata
	(*AddClusterZookeeperRequest)(nil),                 // 18: yandex.cloud.mdb.clickhouse.v1.AddClusterZookeeperRequest
	(*AddClusterZookeeperMetadata)(nil),                // 19: yandex.cloud.mdb.clickhouse.v1.AddClusterZookeeperMetadata
	(*BackupClusterRequest)(nil),                       // 20: yandex.cloud.mdb.clickhouse.v1.BackupClusterRequest
	(*BackupClusterMetadata)(nil),                      // 21: yandex.cloud.mdb.clickhouse.v1.BackupClusterMetadata
	(*RestoreClusterRequest)(nil),                      // 22: yandex.cloud.mdb.clickhouse.v1.RestoreClusterRequest
	(*RestoreClusterMetadata)(nil),                     // 23: yandex.cloud.mdb.clickhouse.v1.RestoreClusterMetadata
	(*RescheduleMaintenanceRequest)(nil),               // 24: yandex.cloud.mdb.clickhouse.v1.RescheduleMaintenanceRequest
	(*RescheduleMaintenanceMetadata)(nil),              // 25: yandex.cloud.mdb.clickhouse.v1.RescheduleMaintenanceMetadata
	(*LogRecord)(nil),                                  // 26: yandex.cloud.mdb.clickhouse.v1.LogRecord
	(*ListClusterLogsRequest)(nil),                     // 27: yandex.cloud.mdb.clickhouse.v1.ListClusterLogsRequest
	(*ListClusterLogsResponse)(nil),                    // 28: yandex.cloud.mdb.clickhouse.v1.ListClusterLogsResponse
	(*StreamLogRecord)(nil),                            // 29: yandex.cloud.mdb.clickhouse.v1.StreamLogRecord
	(*StreamClusterLogsRequest)(nil),                   // 30: yandex.cloud.mdb.clickhouse.v1.StreamClusterLogsRequest
	(*ListClusterOperationsRequest)(nil),               // 31: yandex.cloud.mdb.clickhouse.v1.ListClusterOperationsRequest
	(*ListClusterOperationsResponse)(nil),              // 32: yandex.cloud.mdb.clickhouse.v1.ListClusterOperationsResponse
	(*ListClusterBackupsRequest)(nil),                  // 33: yandex.cloud.mdb.clickhouse.v1.ListClusterBackupsRequest
	(*ListClusterBackupsResponse)(nil),                 // 34: yandex.cloud.mdb.clickhouse.v1.ListClusterBackupsResponse
	(*ListClusterHostsRequest)(nil),                    // 35: yandex.cloud.mdb.clickhouse.v1.ListClusterHostsRequest
	(*ListClusterHostsResponse)(nil),                   // 36: yandex.cloud.mdb.clickhouse.v1.ListClusterHostsResponse
	(*AddClusterHostsRequest)(nil),                     // 37: yandex.cloud.mdb.clickhouse.v1.AddClusterHostsRequest
	(*AddClusterHostsMetadata)(nil),                    // 38: yandex.cloud.mdb.clickhouse.v1.AddClusterHostsMetadata
	(*UpdateHostSpec)(nil),                             // 39: yandex.cloud.mdb.clickhouse.v1.UpdateHostSpec
	(*UpdateClusterHostsRequest)(nil),                  // 40: yandex.cloud.mdb.clickhouse.v1.UpdateClusterHostsRequest
	(*UpdateClusterHostsMetadata)(nil),                 // 41: yandex.cloud.mdb.clickhouse.v1.UpdateClusterHostsMetadata
	(*DeleteClusterHostsRequest)(nil),                  // 42: yandex.cloud.mdb.clickhouse.v1.DeleteClusterHostsRequest
	(*DeleteClusterHostsMetadata)(nil),                 // 43: yandex.cloud.mdb.clickhouse.v1.DeleteClusterHostsMetadata
	(*RestartClusterHostsRequest)(nil),                 // 44: yandex.cloud.mdb.clickhouse.v1.RestartClusterHostsRequest
	(*RestartClusterHostsMetadata)(nil),                // 45: yandex.cloud.mdb.clickhouse.v1.RestartClusterHostsMetadata
	(*GetClusterShardRequest)(nil),                     // 46: yandex.cloud.mdb.clickhouse.v1.GetClusterShardRequest
	(*ListClusterShardsRequest)(nil),                   // 47: yandex.cloud.mdb.clickhouse.v1.ListClusterShardsRequest
	(*ListClusterShardsResponse)(nil),                  // 48: yandex.cloud.mdb.clickhouse.v1.ListClusterShardsResponse
	(*AddClusterShardRequest)(nil),                     // 49: yandex.cloud.mdb.clickhouse.v1.AddClusterShardRequest
	(*AddClusterShardMetadata)(nil),                    // 50: yandex.cloud.mdb.clickhouse.v1.AddClusterShardMetadata
	(*AddClusterShardsRequest)(nil),                    // 51: yandex.cloud.mdb.clickhouse.v1.AddClusterShardsRequest
	(*AddClusterShardsMetadata)(nil),                   // 52: yandex.cloud.mdb.clickhouse.v1.AddClusterShardsMetadata
	(*UpdateClusterShardRequest)(nil),                  // 53: yandex.cloud.mdb.clickhouse.v1.UpdateClusterShardRequest
	(*UpdateClusterShardMetadata)(nil),                 // 54: yandex.cloud.mdb.clickhouse.v1.UpdateClusterShardMetadata
	(*DeleteClusterShardRequest)(nil),                  // 55: yandex.cloud.mdb.clickhouse.v1.DeleteClusterShardRequest
	(*DeleteClusterShardMetadata)(nil),                 // 56: yandex.cloud.mdb.clickhouse.v1.DeleteClusterShardMetadata
	(*DeleteClusterShardsRequest)(nil),                 // 57: yandex.cloud.mdb.clickhouse.v1.DeleteClusterShardsRequest
	(*DeleteClusterShardsMetadata)(nil),                // 58: yandex.cloud.mdb.clickhouse.v1.DeleteClusterShardsMetadata
	(*GetClusterShardGroupRequest)(nil),                // 59: yandex.cloud.mdb.clickhouse.v1.GetClusterShardGroupRequest
	(*ListClusterShardGroupsRequest)(nil),              // 60: yandex.cloud.mdb.clickhouse.v1.ListClusterShardGroupsRequest
	(*ListClusterShardGroupsResponse)(nil),             // 61: yandex.cloud.mdb.clickhouse.v1.ListClusterShardGroupsResponse
	(*CreateClusterShardGroupRequest)(nil),             // 62: yandex.cloud.mdb.clickhouse.v1.CreateClusterShardGroupRequest
	(*CreateClusterShardGroupMetadata)(nil),            // 63: yandex.cloud.mdb.clickhouse.v1.CreateClusterShardGroupMetadata
	(*UpdateClusterShardGroupRequest)(nil),             // 64: yandex.cloud.mdb.clickhouse.v1.UpdateClusterShardGroupRequest
	(*UpdateClusterShardGroupMetadata)(nil),            // 65: yandex.cloud.mdb.clickhouse.v1.UpdateClusterShardGroupMetadata
	(*DeleteClusterShardGroupRequest)(nil),             // 66: yandex.cloud.mdb.clickhouse.v1.DeleteClusterShardGroupRequest
	(*DeleteClusterShardGroupMetadata)(nil),            // 67: yandex.cloud.mdb.clickhouse.v1.DeleteClusterShardGroupMetadata
	(*ListClusterExternalDictionariesRequest)(nil),     // 68: yandex.cloud.mdb.clickhouse.v1.ListClusterExternalDictionariesRequest
	(*ListClusterExternalDictionariesResponse)(nil),    // 69: yandex.cloud.mdb.clickhouse.v1.ListClusterExternalDictionariesResponse
	(*CreateClusterExternalDictionaryRequest)(nil),     // 70: yandex.cloud.mdb.clickhouse.v1.CreateClusterExternalDictionaryRequest
	(*CreateClusterExternalDictionaryMetadata)(nil),    // 71: yandex.cloud.mdb.clickhouse.v1.CreateClusterExternalDictionaryMetadata
	(*UpdateClusterExternalDictionaryRequest)(nil),     // 72: yandex.cloud.mdb.clickhouse.v1.UpdateClusterExternalDictionaryRequest
	(*UpdateClusterExternalDictionaryMetadata)(nil),    // 73: yandex.cloud.mdb.clickhouse.v1.UpdateClusterExternalDictionaryMetadata
	(*DeleteClusterExternalDictionaryRequest)(nil),     // 74: yandex.cloud.mdb.clickhouse.v1.DeleteClusterExternalDictionaryRequest
	(*DeleteClusterExternalDictionaryMetadata)(nil),    // 75: yandex.cloud.mdb.clickhouse.v1.DeleteClusterExternalDictionaryMetadata
	(*HostSpec)(nil),                                   // 76: yandex.cloud.mdb.clickhouse.v1.HostSpec
	(*ConfigSpec)(nil),                                 // 77: yandex.cloud.mdb.clickhouse.v1.ConfigSpec
	(*ShardConfigSpec)(nil),                            // 78: yandex.cloud.mdb.clickhouse.v1.ShardConfigSpec
	(*ShardSpec)(nil),                                  // 79: yandex.cloud.mdb.clickhouse.v1.ShardSpec
	nil,                                                // 80: yandex.cloud.mdb.clickhouse.v1.CreateClusterRequest.LabelsEntry
	nil,                                                // 81: yandex.cloud.mdb.clickhouse.v1.UpdateClusterRequest.LabelsEntry
	nil,                                                // 82: yandex.cloud.mdb.clickhouse.v1.RestoreClusterRequest.LabelsEntry
	nil,                                                // 83: yandex.cloud.mdb.clickhouse.v1.LogRecord.MessageEntry
	(*ConfigSpec_Clickhouse)(nil),                      // 84: yandex.cloud.mdb.clickhouse.v1.ConfigSpec.Clickhouse
	(*ConfigSpec_Zookeeper)(nil),                       // 85: yandex.cloud.mdb.clickhouse.v1.ConfigSpec.Zookeeper
	(*ShardConfigSpec_Clickhouse)(nil),                 // 86: yandex.cloud.mdb.clickhouse.v1.ShardConfigSpec.Clickhouse
	(*Cluster)(nil),                                    // 87: yandex.cloud.mdb.clickhouse.v1.Cluster
	(Cluster_Environment)(0),                           // 88: yandex.cloud.mdb.clickhouse.v1.Cluster.Environment
	(*DatabaseSpec)(nil),                               // 89: yandex.cloud.mdb.clickhouse.v1.DatabaseSpec
	(*UserSpec)(nil),                                   // 90: yandex.cloud.mdb.clickhouse.v1.UserSpec
	(*MaintenanceWindow)(nil),                          // 91: yandex.cloud.mdb.clickhouse.v1.MaintenanceWindow
	(*wrapperspb.StringValue)(nil),                     // 92: google.protobuf.StringValue
	(*fieldmaskpb.FieldMask)(nil),                      // 93: google.protobuf.FieldMask
	(*Resources)(nil),                                  // 94: yandex.cloud.mdb.clickhouse.v1.Resources
	(*wrapperspb.BoolValue)(nil),                       // 95: google.protobuf.BoolValue
	(*timestamppb.Timestamp)(nil),                      // 96: google.protobuf.Timestamp
	(*operation.Operation)(nil),                        // 97: yandex.cloud.operation.Operation
	(*Backup)(nil),                                     // 98: yandex.cloud.mdb.clickhouse.v1.Backup
	(*Host)(nil),                                       // 99: yandex.cloud.mdb.clickhouse.v1.Host
	(*Shard)(nil),                                      // 100: yandex.cloud.mdb.clickhouse.v1.Shard
	(*ShardGroup)(nil),                                 // 101: yandex.cloud.mdb.clickhouse.v1.ShardGroup
	(*config.ClickhouseConfig_ExternalDictionary)(nil), // 102: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary
	(Host_Type)(0),                                     // 103: yandex.cloud.mdb.clickhouse.v1.Host.Type
	(*timeofday.TimeOfDay)(nil),                        // 104: google.type.TimeOfDay
	(*Access)(nil),                                     // 105: yandex.cloud.mdb.clickhouse.v1.Access
	(*CloudStorage)(nil),                               // 106: yandex.cloud.mdb.clickhouse.v1.CloudStorage
	(*wrapperspb.Int64Value)(nil),                      // 107: google.protobuf.Int64Value
	(*config.ClickhouseConfig)(nil),                    // 108: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig
	(*DiskSizeAutoscaling)(nil),                        // 109: yandex.cloud.mdb.clickhouse.v1.DiskSizeAutoscaling
}
var file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_depIdxs = []int32{
	87,  // 0: yandex.cloud.mdb.clickhouse.v1.ListClustersResponse.clusters:type_name -> yandex.cloud.mdb.clickhouse.v1.Cluster
	80,  // 1: yandex.cloud.mdb.clickhouse.v1.CreateClusterRequest.labels:type_name -> yandex.cloud.mdb.clickhouse.v1.CreateClusterRequest.LabelsEntry
	88,  // 2: yandex.cloud.mdb.clickhouse.v1.CreateClusterRequest.environment:type_name -> yandex.cloud.mdb.clickhouse.v1.Cluster.Environment
	77,  // 3: yandex.cloud.mdb.clickhouse.v1.CreateClusterRequest.config_spec:type_name -> yandex.cloud.mdb.clickhouse.v1.ConfigSpec
	89,  // 4: yandex.cloud.mdb.clickhouse.v1.CreateClusterRequest.database_specs:type_name -> yandex.cloud.mdb.clickhouse.v1.DatabaseSpec
	90,  // 5: yandex.cloud.mdb.clickhouse.v1.CreateClusterRequest.user_specs:type_name -> yandex.cloud.mdb.clickhouse.v1.UserSpec
	76,  // 6: yandex.cloud.mdb.clickhouse.v1.CreateClusterRequest.host_specs:type_name -> yandex.cloud.mdb.clickhouse.v1.HostSpec
	91,  // 7: yandex.cloud.mdb.clickhouse.v1.CreateClusterRequest.maintenance_window:type_name -> yandex.cloud.mdb.clickhouse.v1.MaintenanceWindow
	79,  // 8: yandex.cloud.mdb.clickhouse.v1.CreateClusterRequest.shard_specs:type_name -> yandex.cloud.mdb.clickhouse.v1.ShardSpec
	92,  // 9: yandex.cloud.mdb.clickhouse.v1.CreateClusterRequest.disk_encryption_key_id:type_name -> google.protobuf.StringValue
	93,  // 10: yandex.cloud.mdb.clickhouse.v1.UpdateClusterRequest.update_mask:type_name -> google.protobuf.FieldMask
	81,  // 11: yandex.cloud.mdb.clickhouse.v1.UpdateClusterRequest.labels:type_name -> yandex.cloud.mdb.clickhouse.v1.UpdateClusterRequest.LabelsEntry
	77,  // 12: yandex.cloud.mdb.clickhouse.v1.UpdateClusterRequest.config_spec:type_name -> yandex.cloud.mdb.clickhouse.v1.ConfigSpec
	91,  // 13: yandex.cloud.mdb.clickhouse.v1.UpdateClusterRequest.maintenance_window:type_name -> yandex.cloud.mdb.clickhouse.v1.MaintenanceWindow
	94,  // 14: yandex.cloud.mdb.clickhouse.v1.AddClusterZookeeperRequest.resources:type_name -> yandex.cloud.mdb.clickhouse.v1.Resources
	76,  // 15: yandex.cloud.mdb.clickhouse.v1.AddClusterZookeeperRequest.host_specs:type_name -> yandex.cloud.mdb.clickhouse.v1.HostSpec
	95,  // 16: yandex.cloud.mdb.clickhouse.v1.AddClusterZookeeperRequest.convert_tables_to_replicated:type_name -> google.protobuf.BoolValue
	82,  // 17: yandex.cloud.mdb.clickhouse.v1.RestoreClusterRequest.labels:type_name -> yandex.cloud.mdb.clickhouse.v1.RestoreClusterRequest.LabelsEntry
	88,  // 18: yandex.cloud.mdb.clickhouse.v1.RestoreClusterRequest.environment:type_name -> yandex.cloud.mdb.clickhouse.v1.Cluster.Environment
	77,  // 19: yandex.cloud.mdb.clickhouse.v1.RestoreClusterRequest.config_spec:type_name -> yandex.cloud.mdb.clickhouse.v1.ConfigSpec
	76,  // 20: yandex.cloud.mdb.clickhouse.v1.RestoreClusterRequest.host_specs:type_name -> yandex.cloud.mdb.clickhouse.v1.HostSpec
	79,  // 21: yandex.cloud.mdb.clickhouse.v1.RestoreClusterRequest.shard_specs:type_name -> yandex.cloud.mdb.clickhouse.v1.ShardSpec
	92,  // 22: yandex.cloud.mdb.clickhouse.v1.RestoreClusterRequest.disk_encryption_key_id:type_name -> google.protobuf.StringValue
	0,   // 23: yandex.cloud.mdb.clickhouse.v1.RescheduleMaintenanceRequest.reschedule_type:type_name -> yandex.cloud.mdb.clickhouse.v1.RescheduleMaintenanceRequest.RescheduleType
	96,  // 24: yandex.cloud.mdb.clickhouse.v1.RescheduleMaintenanceRequest.delayed_until:type_name -> google.protobuf.Timestamp
	96,  // 25: yandex.cloud.mdb.clickhouse.v1.RescheduleMaintenanceMetadata.delayed_until:type_name -> google.protobuf.Timestamp
	96,  // 26: yandex.cloud.mdb.clickhouse.v1.LogRecord.timestamp:type_name -> google.protobuf.Timestamp
	83,  // 27: yandex.cloud.mdb.clickhouse.v1.LogRecord.message:type_name -> yandex.cloud.mdb.clickhouse.v1.LogRecord.MessageEntry
	1,   // 28: yandex.cloud.mdb.clickhouse.v1.ListClusterLogsRequest.service_type:type_name -> yandex.cloud.mdb.clickhouse.v1.ListClusterLogsRequest.ServiceType
	96,  // 29: yandex.cloud.mdb.clickhouse.v1.ListClusterLogsRequest.from_time:type_name -> google.protobuf.Timestamp
	96,  // 30: yandex.cloud.mdb.clickhouse.v1.ListClusterLogsRequest.to_time:type_name -> google.protobuf.Timestamp
	26,  // 31: yandex.cloud.mdb.clickhouse.v1.ListClusterLogsResponse.logs:type_name -> yandex.cloud.mdb.clickhouse.v1.LogRecord
	26,  // 32: yandex.cloud.mdb.clickhouse.v1.StreamLogRecord.record:type_name -> yandex.cloud.mdb.clickhouse.v1.LogRecord
	2,   // 33: yandex.cloud.mdb.clickhouse.v1.StreamClusterLogsRequest.service_type:type_name -> yandex.cloud.mdb.clickhouse.v1.StreamClusterLogsRequest.ServiceType
	96,  // 34: yandex.cloud.mdb.clickhouse.v1.StreamClusterLogsRequest.from_time:type_name -> google.protobuf.Timestamp
	96,  // 35: yandex.cloud.mdb.clickhouse.v1.StreamClusterLogsRequest.to_time:type_name -> google.protobuf.Timestamp
	97,  // 36: yandex.cloud.mdb.clickhouse.v1.ListClusterOperationsResponse.operations:type_name -> yandex.cloud.operation.Operation
	98,  // 37: yandex.cloud.mdb.clickhouse.v1.ListClusterBackupsResponse.backups:type_name -> yandex.cloud.mdb.clickhouse.v1.Backup
	99,  // 38: yandex.cloud.mdb.clickhouse.v1.ListClusterHostsResponse.hosts:type_name -> yandex.cloud.mdb.clickhouse.v1.Host
	76,  // 39: yandex.cloud.mdb.clickhouse.v1.AddClusterHostsRequest.host_specs:type_name -> yandex.cloud.mdb.clickhouse.v1.HostSpec
	95,  // 40: yandex.cloud.mdb.clickhouse.v1.AddClusterHostsRequest.copy_schema:type_name -> google.protobuf.BoolValue
	93,  // 41: yandex.cloud.mdb.clickhouse.v1.UpdateHostSpec.update_mask:type_name -> google.protobuf.FieldMask
	95,  // 42: yandex.cloud.mdb.clickhouse.v1.UpdateHostSpec.assign_public_ip:type_name -> google.protobuf.BoolValue
	39,  // 43: yandex.cloud.mdb.clickhouse.v1.UpdateClusterHostsRequest.update_host_specs:type_name -> yandex.cloud.mdb.clickhouse.v1.UpdateHostSpec
	100, // 44: yandex.cloud.mdb.clickhouse.v1.ListClusterShardsResponse.shards:type_name -> yandex.cloud.mdb.clickhouse.v1.Shard
	78,  // 45: yandex.cloud.mdb.clickhouse.v1.AddClusterShardRequest.config_spec:type_name -> yandex.cloud.mdb.clickhouse.v1.ShardConfigSpec
	76,  // 46: yandex.cloud.mdb.clickhouse.v1.AddClusterShardRequest.host_specs:type_name -> yandex.cloud.mdb.clickhouse.v1.HostSpec
	95,  // 47: yandex.cloud.mdb.clickhouse.v1.AddClusterShardRequest.copy_schema:type_name -> google.protobuf.BoolValue
	79,  // 48: yandex.cloud.mdb.clickhouse.v1.AddClusterShardsRequest.shard_specs:type_name -> yandex.cloud.mdb.clickhouse.v1.ShardSpec
	76,  // 49: yandex.cloud.mdb.clickhouse.v1.AddClusterShardsRequest.host_specs:type_name -> yandex.cloud.mdb.clickhouse.v1.HostSpec
	95,  // 50: yandex.cloud.mdb.clickhouse.v1.AddClusterShardsRequest.copy_schema:type_name -> google.protobuf.BoolValue
	93,  // 51: yandex.cloud.mdb.clickhouse.v1.UpdateClusterShardRequest.update_mask:type_name -> google.protobuf.FieldMask
	78,  // 52: yandex.cloud.mdb.clickhouse.v1.UpdateClusterShardRequest.config_spec:type_name -> yandex.cloud.mdb.clickhouse.v1.ShardConfigSpec
	101, // 53: yandex.cloud.mdb.clickhouse.v1.ListClusterShardGroupsResponse.shard_groups:type_name -> yandex.cloud.mdb.clickhouse.v1.ShardGroup
	93,  // 54: yandex.cloud.mdb.clickhouse.v1.UpdateClusterShardGroupRequest.update_mask:type_name -> google.protobuf.FieldMask
	102, // 55: yandex.cloud.mdb.clickhouse.v1.ListClusterExternalDictionariesResponse.external_dictionaries:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary
	102, // 56: yandex.cloud.mdb.clickhouse.v1.CreateClusterExternalDictionaryRequest.external_dictionary:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary
	102, // 57: yandex.cloud.mdb.clickhouse.v1.UpdateClusterExternalDictionaryRequest.external_dictionary:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary
	93,  // 58: yandex.cloud.mdb.clickhouse.v1.UpdateClusterExternalDictionaryRequest.update_mask:type_name -> google.protobuf.FieldMask
	103, // 59: yandex.cloud.mdb.clickhouse.v1.HostSpec.type:type_name -> yandex.cloud.mdb.clickhouse.v1.Host.Type
	84,  // 60: yandex.cloud.mdb.clickhouse.v1.ConfigSpec.clickhouse:type_name -> yandex.cloud.mdb.clickhouse.v1.ConfigSpec.Clickhouse
	85,  // 61: yandex.cloud.mdb.clickhouse.v1.ConfigSpec.zookeeper:type_name -> yandex.cloud.mdb.clickhouse.v1.ConfigSpec.Zookeeper
	104, // 62: yandex.cloud.mdb.clickhouse.v1.ConfigSpec.backup_window_start:type_name -> google.type.TimeOfDay
	105, // 63: yandex.cloud.mdb.clickhouse.v1.ConfigSpec.access:type_name -> yandex.cloud.mdb.clickhouse.v1.Access
	106, // 64: yandex.cloud.mdb.clickhouse.v1.ConfigSpec.cloud_storage:type_name -> yandex.cloud.mdb.clickhouse.v1.CloudStorage
	95,  // 65: yandex.cloud.mdb.clickhouse.v1.ConfigSpec.sql_database_management:type_name -> google.protobuf.BoolValue
	95,  // 66: yandex.cloud.mdb.clickhouse.v1.ConfigSpec.sql_user_management:type_name -> google.protobuf.BoolValue
	95,  // 67: yandex.cloud.mdb.clickhouse.v1.ConfigSpec.embedded_keeper:type_name -> google.protobuf.BoolValue
	107, // 68: yandex.cloud.mdb.clickhouse.v1.ConfigSpec.backup_retain_period_days:type_name -> google.protobuf.Int64Value
	86,  // 69: yandex.cloud.mdb.clickhouse.v1.ShardConfigSpec.clickhouse:type_name -> yandex.cloud.mdb.clickhouse.v1.ShardConfigSpec.Clickhouse
	78,  // 70: yandex.cloud.mdb.clickhouse.v1.ShardSpec.config_spec:type_name -> yandex.cloud.mdb.clickhouse.v1.ShardConfigSpec
	108, // 71: yandex.cloud.mdb.clickhouse.v1.ConfigSpec.Clickhouse.config:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig
	94,  // 72: yandex.cloud.mdb.clickhouse.v1.ConfigSpec.Clickhouse.resources:type_name -> yandex.cloud.mdb.clickhouse.v1.Resources
	109, // 73: yandex.cloud.mdb.clickhouse.v1.ConfigSpec.Clickhouse.disk_size_autoscaling:type_name -> yandex.cloud.mdb.clickhouse.v1.DiskSizeAutoscaling
	94,  // 74: yandex.cloud.mdb.clickhouse.v1.ConfigSpec.Zookeeper.resources:type_name -> yandex.cloud.mdb.clickhouse.v1.Resources
	109, // 75: yandex.cloud.mdb.clickhouse.v1.ConfigSpec.Zookeeper.disk_size_autoscaling:type_name -> yandex.cloud.mdb.clickhouse.v1.DiskSizeAutoscaling
	108, // 76: yandex.cloud.mdb.clickhouse.v1.ShardConfigSpec.Clickhouse.config:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig
	94,  // 77: yandex.cloud.mdb.clickhouse.v1.ShardConfigSpec.Clickhouse.resources:type_name -> yandex.cloud.mdb.clickhouse.v1.Resources
	107, // 78: yandex.cloud.mdb.clickhouse.v1.ShardConfigSpec.Clickhouse.weight:type_name -> google.protobuf.Int64Value
	109, // 79: yandex.cloud.mdb.clickhouse.v1.ShardConfigSpec.Clickhouse.disk_size_autoscaling:type_name -> yandex.cloud.mdb.clickhouse.v1.DiskSizeAutoscaling
	3,   // 80: yandex.cloud.mdb.clickhouse.v1.ClusterService.Get:input_type -> yandex.cloud.mdb.clickhouse.v1.GetClusterRequest
	4,   // 81: yandex.cloud.mdb.clickhouse.v1.ClusterService.List:input_type -> yandex.cloud.mdb.clickhouse.v1.ListClustersRequest
	6,   // 82: yandex.cloud.mdb.clickhouse.v1.ClusterService.Create:input_type -> yandex.cloud.mdb.clickhouse.v1.CreateClusterRequest
	8,   // 83: yandex.cloud.mdb.clickhouse.v1.ClusterService.Update:input_type -> yandex.cloud.mdb.clickhouse.v1.UpdateClusterRequest
	10,  // 84: yandex.cloud.mdb.clickhouse.v1.ClusterService.Delete:input_type -> yandex.cloud.mdb.clickhouse.v1.DeleteClusterRequest
	12,  // 85: yandex.cloud.mdb.clickhouse.v1.ClusterService.Start:input_type -> yandex.cloud.mdb.clickhouse.v1.StartClusterRequest
	14,  // 86: yandex.cloud.mdb.clickhouse.v1.ClusterService.Stop:input_type -> yandex.cloud.mdb.clickhouse.v1.StopClusterRequest
	16,  // 87: yandex.cloud.mdb.clickhouse.v1.ClusterService.Move:input_type -> yandex.cloud.mdb.clickhouse.v1.MoveClusterRequest
	18,  // 88: yandex.cloud.mdb.clickhouse.v1.ClusterService.AddZookeeper:input_type -> yandex.cloud.mdb.clickhouse.v1.AddClusterZookeeperRequest
	20,  // 89: yandex.cloud.mdb.clickhouse.v1.ClusterService.Backup:input_type -> yandex.cloud.mdb.clickhouse.v1.BackupClusterRequest
	22,  // 90: yandex.cloud.mdb.clickhouse.v1.ClusterService.Restore:input_type -> yandex.cloud.mdb.clickhouse.v1.RestoreClusterRequest
	24,  // 91: yandex.cloud.mdb.clickhouse.v1.ClusterService.RescheduleMaintenance:input_type -> yandex.cloud.mdb.clickhouse.v1.RescheduleMaintenanceRequest
	27,  // 92: yandex.cloud.mdb.clickhouse.v1.ClusterService.ListLogs:input_type -> yandex.cloud.mdb.clickhouse.v1.ListClusterLogsRequest
	30,  // 93: yandex.cloud.mdb.clickhouse.v1.ClusterService.StreamLogs:input_type -> yandex.cloud.mdb.clickhouse.v1.StreamClusterLogsRequest
	31,  // 94: yandex.cloud.mdb.clickhouse.v1.ClusterService.ListOperations:input_type -> yandex.cloud.mdb.clickhouse.v1.ListClusterOperationsRequest
	33,  // 95: yandex.cloud.mdb.clickhouse.v1.ClusterService.ListBackups:input_type -> yandex.cloud.mdb.clickhouse.v1.ListClusterBackupsRequest
	35,  // 96: yandex.cloud.mdb.clickhouse.v1.ClusterService.ListHosts:input_type -> yandex.cloud.mdb.clickhouse.v1.ListClusterHostsRequest
	37,  // 97: yandex.cloud.mdb.clickhouse.v1.ClusterService.AddHosts:input_type -> yandex.cloud.mdb.clickhouse.v1.AddClusterHostsRequest
	40,  // 98: yandex.cloud.mdb.clickhouse.v1.ClusterService.UpdateHosts:input_type -> yandex.cloud.mdb.clickhouse.v1.UpdateClusterHostsRequest
	42,  // 99: yandex.cloud.mdb.clickhouse.v1.ClusterService.DeleteHosts:input_type -> yandex.cloud.mdb.clickhouse.v1.DeleteClusterHostsRequest
	44,  // 100: yandex.cloud.mdb.clickhouse.v1.ClusterService.RestartHosts:input_type -> yandex.cloud.mdb.clickhouse.v1.RestartClusterHostsRequest
	46,  // 101: yandex.cloud.mdb.clickhouse.v1.ClusterService.GetShard:input_type -> yandex.cloud.mdb.clickhouse.v1.GetClusterShardRequest
	47,  // 102: yandex.cloud.mdb.clickhouse.v1.ClusterService.ListShards:input_type -> yandex.cloud.mdb.clickhouse.v1.ListClusterShardsRequest
	49,  // 103: yandex.cloud.mdb.clickhouse.v1.ClusterService.AddShard:input_type -> yandex.cloud.mdb.clickhouse.v1.AddClusterShardRequest
	51,  // 104: yandex.cloud.mdb.clickhouse.v1.ClusterService.AddShards:input_type -> yandex.cloud.mdb.clickhouse.v1.AddClusterShardsRequest
	53,  // 105: yandex.cloud.mdb.clickhouse.v1.ClusterService.UpdateShard:input_type -> yandex.cloud.mdb.clickhouse.v1.UpdateClusterShardRequest
	55,  // 106: yandex.cloud.mdb.clickhouse.v1.ClusterService.DeleteShard:input_type -> yandex.cloud.mdb.clickhouse.v1.DeleteClusterShardRequest
	57,  // 107: yandex.cloud.mdb.clickhouse.v1.ClusterService.DeleteShards:input_type -> yandex.cloud.mdb.clickhouse.v1.DeleteClusterShardsRequest
	59,  // 108: yandex.cloud.mdb.clickhouse.v1.ClusterService.GetShardGroup:input_type -> yandex.cloud.mdb.clickhouse.v1.GetClusterShardGroupRequest
	60,  // 109: yandex.cloud.mdb.clickhouse.v1.ClusterService.ListShardGroups:input_type -> yandex.cloud.mdb.clickhouse.v1.ListClusterShardGroupsRequest
	62,  // 110: yandex.cloud.mdb.clickhouse.v1.ClusterService.CreateShardGroup:input_type -> yandex.cloud.mdb.clickhouse.v1.CreateClusterShardGroupRequest
	64,  // 111: yandex.cloud.mdb.clickhouse.v1.ClusterService.UpdateShardGroup:input_type -> yandex.cloud.mdb.clickhouse.v1.UpdateClusterShardGroupRequest
	66,  // 112: yandex.cloud.mdb.clickhouse.v1.ClusterService.DeleteShardGroup:input_type -> yandex.cloud.mdb.clickhouse.v1.DeleteClusterShardGroupRequest
	68,  // 113: yandex.cloud.mdb.clickhouse.v1.ClusterService.ListExternalDictionaries:input_type -> yandex.cloud.mdb.clickhouse.v1.ListClusterExternalDictionariesRequest
	70,  // 114: yandex.cloud.mdb.clickhouse.v1.ClusterService.CreateExternalDictionary:input_type -> yandex.cloud.mdb.clickhouse.v1.CreateClusterExternalDictionaryRequest
	72,  // 115: yandex.cloud.mdb.clickhouse.v1.ClusterService.UpdateExternalDictionary:input_type -> yandex.cloud.mdb.clickhouse.v1.UpdateClusterExternalDictionaryRequest
	74,  // 116: yandex.cloud.mdb.clickhouse.v1.ClusterService.DeleteExternalDictionary:input_type -> yandex.cloud.mdb.clickhouse.v1.DeleteClusterExternalDictionaryRequest
	87,  // 117: yandex.cloud.mdb.clickhouse.v1.ClusterService.Get:output_type -> yandex.cloud.mdb.clickhouse.v1.Cluster
	5,   // 118: yandex.cloud.mdb.clickhouse.v1.ClusterService.List:output_type -> yandex.cloud.mdb.clickhouse.v1.ListClustersResponse
	97,  // 119: yandex.cloud.mdb.clickhouse.v1.ClusterService.Create:output_type -> yandex.cloud.operation.Operation
	97,  // 120: yandex.cloud.mdb.clickhouse.v1.ClusterService.Update:output_type -> yandex.cloud.operation.Operation
	97,  // 121: yandex.cloud.mdb.clickhouse.v1.ClusterService.Delete:output_type -> yandex.cloud.operation.Operation
	97,  // 122: yandex.cloud.mdb.clickhouse.v1.ClusterService.Start:output_type -> yandex.cloud.operation.Operation
	97,  // 123: yandex.cloud.mdb.clickhouse.v1.ClusterService.Stop:output_type -> yandex.cloud.operation.Operation
	97,  // 124: yandex.cloud.mdb.clickhouse.v1.ClusterService.Move:output_type -> yandex.cloud.operation.Operation
	97,  // 125: yandex.cloud.mdb.clickhouse.v1.ClusterService.AddZookeeper:output_type -> yandex.cloud.operation.Operation
	97,  // 126: yandex.cloud.mdb.clickhouse.v1.ClusterService.Backup:output_type -> yandex.cloud.operation.Operation
	97,  // 127: yandex.cloud.mdb.clickhouse.v1.ClusterService.Restore:output_type -> yandex.cloud.operation.Operation
	97,  // 128: yandex.cloud.mdb.clickhouse.v1.ClusterService.RescheduleMaintenance:output_type -> yandex.cloud.operation.Operation
	28,  // 129: yandex.cloud.mdb.clickhouse.v1.ClusterService.ListLogs:output_type -> yandex.cloud.mdb.clickhouse.v1.ListClusterLogsResponse
	29,  // 130: yandex.cloud.mdb.clickhouse.v1.ClusterService.StreamLogs:output_type -> yandex.cloud.mdb.clickhouse.v1.StreamLogRecord
	32,  // 131: yandex.cloud.mdb.clickhouse.v1.ClusterService.ListOperations:output_type -> yandex.cloud.mdb.clickhouse.v1.ListClusterOperationsResponse
	34,  // 132: yandex.cloud.mdb.clickhouse.v1.ClusterService.ListBackups:output_type -> yandex.cloud.mdb.clickhouse.v1.ListClusterBackupsResponse
	36,  // 133: yandex.cloud.mdb.clickhouse.v1.ClusterService.ListHosts:output_type -> yandex.cloud.mdb.clickhouse.v1.ListClusterHostsResponse
	97,  // 134: yandex.cloud.mdb.clickhouse.v1.ClusterService.AddHosts:output_type -> yandex.cloud.operation.Operation
	97,  // 135: yandex.cloud.mdb.clickhouse.v1.ClusterService.UpdateHosts:output_type -> yandex.cloud.operation.Operation
	97,  // 136: yandex.cloud.mdb.clickhouse.v1.ClusterService.DeleteHosts:output_type -> yandex.cloud.operation.Operation
	97,  // 137: yandex.cloud.mdb.clickhouse.v1.ClusterService.RestartHosts:output_type -> yandex.cloud.operation.Operation
	100, // 138: yandex.cloud.mdb.clickhouse.v1.ClusterService.GetShard:output_type -> yandex.cloud.mdb.clickhouse.v1.Shard
	48,  // 139: yandex.cloud.mdb.clickhouse.v1.ClusterService.ListShards:output_type -> yandex.cloud.mdb.clickhouse.v1.ListClusterShardsResponse
	97,  // 140: yandex.cloud.mdb.clickhouse.v1.ClusterService.AddShard:output_type -> yandex.cloud.operation.Operation
	97,  // 141: yandex.cloud.mdb.clickhouse.v1.ClusterService.AddShards:output_type -> yandex.cloud.operation.Operation
	97,  // 142: yandex.cloud.mdb.clickhouse.v1.ClusterService.UpdateShard:output_type -> yandex.cloud.operation.Operation
	97,  // 143: yandex.cloud.mdb.clickhouse.v1.ClusterService.DeleteShard:output_type -> yandex.cloud.operation.Operation
	97,  // 144: yandex.cloud.mdb.clickhouse.v1.ClusterService.DeleteShards:output_type -> yandex.cloud.operation.Operation
	101, // 145: yandex.cloud.mdb.clickhouse.v1.ClusterService.GetShardGroup:output_type -> yandex.cloud.mdb.clickhouse.v1.ShardGroup
	61,  // 146: yandex.cloud.mdb.clickhouse.v1.ClusterService.ListShardGroups:output_type -> yandex.cloud.mdb.clickhouse.v1.ListClusterShardGroupsResponse
	97,  // 147: yandex.cloud.mdb.clickhouse.v1.ClusterService.CreateShardGroup:output_type -> yandex.cloud.operation.Operation
	97,  // 148: yandex.cloud.mdb.clickhouse.v1.ClusterService.UpdateShardGroup:output_type -> yandex.cloud.operation.Operation
	97,  // 149: yandex.cloud.mdb.clickhouse.v1.ClusterService.DeleteShardGroup:output_type -> yandex.cloud.operation.Operation
	69,  // 150: yandex.cloud.mdb.clickhouse.v1.ClusterService.ListExternalDictionaries:output_type -> yandex.cloud.mdb.clickhouse.v1.ListClusterExternalDictionariesResponse
	97,  // 151: yandex.cloud.mdb.clickhouse.v1.ClusterService.CreateExternalDictionary:output_type -> yandex.cloud.operation.Operation
	97,  // 152: yandex.cloud.mdb.clickhouse.v1.ClusterService.UpdateExternalDictionary:output_type -> yandex.cloud.operation.Operation
	97,  // 153: yandex.cloud.mdb.clickhouse.v1.ClusterService.DeleteExternalDictionary:output_type -> yandex.cloud.operation.Operation
	117, // [117:154] is the sub-list for method output_type
	80,  // [80:117] is the sub-list for method input_type
	80,  // [80:80] is the sub-list for extension type_name
	80,  // [80:80] is the sub-list for extension extendee
	0,   // [0:80] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_init() }
func file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_init() {
	if File_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto != nil {
		return
	}
	file_yandex_cloud_mdb_clickhouse_v1_backup_proto_init()
	file_yandex_cloud_mdb_clickhouse_v1_cluster_proto_init()
	file_yandex_cloud_mdb_clickhouse_v1_database_proto_init()
	file_yandex_cloud_mdb_clickhouse_v1_maintenance_proto_init()
	file_yandex_cloud_mdb_clickhouse_v1_user_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDesc), len(file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   84,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto = out.File
	file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_goTypes = nil
	file_yandex_cloud_mdb_clickhouse_v1_cluster_service_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/mdb/clickhouse/v1/config/clickhouse.proto

package clickhouse

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClickhouseConfig_LogLevel int32

const (
	ClickhouseConfig_LOG_LEVEL_UNSPECIFIED ClickhouseConfig_LogLevel = 0
	ClickhouseConfig_TRACE                 ClickhouseConfig_LogLevel = 1
	ClickhouseConfig_DEBUG                 ClickhouseConfig_LogLevel = 2
	ClickhouseConfig_INFORMATION           ClickhouseConfig_LogLevel = 3
	ClickhouseConfig_WARNING               ClickhouseConfig_LogLevel = 4
	ClickhouseConfig_ERROR                 ClickhouseConfig_LogLevel = 5
)

// Enum value maps for ClickhouseConfig_LogLevel.
var (
	ClickhouseConfig_LogLevel_name = map[int32]string{
		0: "LOG_LEVEL_UNSPECIFIED",
		1: "TRACE",
		2: "DEBUG",
		3: "INFORMATION",
		4: "WARNING",
		5: "ERROR",
	}
	ClickhouseConfig_LogLevel_value = map[string]int32{
		"LOG_LEVEL_UNSPECIFIED": 0,
		"TRACE":                 1,
		"DEBUG":                 2,
		"INFORMATION":           3,
		"WARNING":               4,
		"ERROR":                 5,
	}
)

func (x ClickhouseConfig_LogLevel) Enum() *ClickhouseConfig_LogLevel {
	p := new(ClickhouseConfig_LogLevel)
	*p = x
	return p
}

func (x ClickhouseConfig_LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickhouseConfig_LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[0].Descriptor()
}

func (ClickhouseConfig_LogLevel) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[0]
}

func (x ClickhouseConfig_LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickhouseConfig_LogLevel.Descriptor instead.
func (ClickhouseConfig_LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 0}
}

// Determines the behavior of background merges for MergeTree tables with projections.
// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#deduplicate_merge_projection_mode).
type ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode int32

const (
	ClickhouseConfig_MergeTree_DEDUPLICATE_MERGE_PROJECTION_MODE_UNSPECIFIED ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode = 0
	ClickhouseConfig_MergeTree_DEDUPLICATE_MERGE_PROJECTION_MODE_IGNORE      ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode = 1
	ClickhouseConfig_MergeTree_DEDUPLICATE_MERGE_PROJECTION_MODE_THROW       ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode = 2
	ClickhouseConfig_MergeTree_DEDUPLICATE_MERGE_PROJECTION_MODE_DROP        ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode = 3
	ClickhouseConfig_MergeTree_DEDUPLICATE_MERGE_PROJECTION_MODE_REBUILD     ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode = 4
)

// Enum value maps for ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode.
var (
	ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode_name = map[int32]string{
		0: "DEDUPLICATE_MERGE_PROJECTION_MODE_UNSPECIFIED",
		1: "DEDUPLICATE_MERGE_PROJECTION_MODE_IGNORE",
		2: "DEDUPLICATE_MERGE_PROJECTION_MODE_THROW",
		3: "DEDUPLICATE_MERGE_PROJECTION_MODE_DROP",
		4: "DEDUPLICATE_MERGE_PROJECTION_MODE_REBUILD",
	}
	ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode_value = map[string]int32{
		"DEDUPLICATE_MERGE_PROJECTION_MODE_UNSPECIFIED": 0,
		"DEDUPLICATE_MERGE_PROJECTION_MODE_IGNORE":      1,
		"DEDUPLICATE_MERGE_PROJECTION_MODE_THROW":       2,
		"DEDUPLICATE_MERGE_PROJECTION_MODE_DROP":        3,
		"DEDUPLICATE_MERGE_PROJECTION_MODE_REBUILD":     4,
	}
)

func (x ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode) Enum() *ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode {
	p := new(ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode)
	*p = x
	return p
}

func (x ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[1].Descriptor()
}

func (ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[1]
}

func (x ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode.Descriptor instead.
func (ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 1, 0}
}

// Determines the behavior of lightweight deletes for MergeTree tables with projections.
type ClickhouseConfig_MergeTree_LightweightMutationProjectionMode int32

const (
	ClickhouseConfig_MergeTree_LIGHTWEIGHT_MUTATION_PROJECTION_MODE_UNSPECIFIED ClickhouseConfig_MergeTree_LightweightMutationProjectionMode = 0
	ClickhouseConfig_MergeTree_LIGHTWEIGHT_MUTATION_PROJECTION_MODE_THROW       ClickhouseConfig_MergeTree_LightweightMutationProjectionMode = 1
	ClickhouseConfig_MergeTree_LIGHTWEIGHT_MUTATION_PROJECTION_MODE_DROP        ClickhouseConfig_MergeTree_LightweightMutationProjectionMode = 2
	ClickhouseConfig_MergeTree_LIGHTWEIGHT_MUTATION_PROJECTION_MODE_REBUILD     ClickhouseConfig_MergeTree_LightweightMutationProjectionMode = 3
)

// Enum value maps for ClickhouseConfig_MergeTree_LightweightMutationProjectionMode.
var (
	ClickhouseConfig_MergeTree_LightweightMutationProjectionMode_name = map[int32]string{
		0: "LIGHTWEIGHT_MUTATION_PROJECTION_MODE_UNSPECIFIED",
		1: "LIGHTWEIGHT_MUTATION_PROJECTION_MODE_THROW",
		2: "LIGHTWEIGHT_MUTATION_PROJECTION_MODE_DROP",
		3: "LIGHTWEIGHT_MUTATION_PROJECTION_MODE_REBUILD",
	}
	ClickhouseConfig_MergeTree_LightweightMutationProjectionMode_value = map[string]int32{
		"LIGHTWEIGHT_MUTATION_PROJECTION_MODE_UNSPECIFIED": 0,
		"LIGHTWEIGHT_MUTATION_PROJECTION_MODE_THROW":       1,
		"LIGHTWEIGHT_MUTATION_PROJECTION_MODE_DROP":        2,
		"LIGHTWEIGHT_MUTATION_PROJECTION_MODE_REBUILD":     3,
	}
)

func (x ClickhouseConfig_MergeTree_LightweightMutationProjectionMode) Enum() *ClickhouseConfig_MergeTree_LightweightMutationProjectionMode {
	p := new(ClickhouseConfig_MergeTree_LightweightMutationProjectionMode)
	*p = x
	return p
}

func (x ClickhouseConfig_MergeTree_LightweightMutationProjectionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickhouseConfig_MergeTree_LightweightMutationProjectionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[2].Descriptor()
}

func (ClickhouseConfig_MergeTree_LightweightMutationProjectionMode) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[2]
}

func (x ClickhouseConfig_MergeTree_LightweightMutationProjectionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickhouseConfig_MergeTree_LightweightMutationProjectionMode.Descriptor instead.
func (ClickhouseConfig_MergeTree_LightweightMutationProjectionMode) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 1, 1}
}

type ClickhouseConfig_Compression_Method int32

const (
	ClickhouseConfig_Compression_METHOD_UNSPECIFIED ClickhouseConfig_Compression_Method = 0
	// [LZ4 compression algorithm](https://lz4.github.io/lz4).
	ClickhouseConfig_Compression_LZ4 ClickhouseConfig_Compression_Method = 1
	// [ZSTD compression algorithm](https://facebook.github.io/zstd).
	ClickhouseConfig_Compression_ZSTD ClickhouseConfig_Compression_Method = 2
	// [LZ4 HC (high compression) algorithm](https://clickhouse.com/docs/sql-reference/statements/create/table#lz4hc).
	ClickhouseConfig_Compression_LZ4HC ClickhouseConfig_Compression_Method = 3
)

// Enum value maps for ClickhouseConfig_Compression_Method.
var (
	ClickhouseConfig_Compression_Method_name = map[int32]string{
		0: "METHOD_UNSPECIFIED",
		1: "LZ4",
		2: "ZSTD",
		3: "LZ4HC",
	}
	ClickhouseConfig_Compression_Method_value = map[string]int32{
		"METHOD_UNSPECIFIED": 0,
		"LZ4":                1,
		"ZSTD":               2,
		"LZ4HC":              3,
	}
)

func (x ClickhouseConfig_Compression_Method) Enum() *ClickhouseConfig_Compression_Method {
	p := new(ClickhouseConfig_Compression_Method)
	*p = x
	return p
}

func (x ClickhouseConfig_Compression_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickhouseConfig_Compression_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[3].Descriptor()
}

func (ClickhouseConfig_Compression_Method) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[3]
}

func (x ClickhouseConfig_Compression_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickhouseConfig_Compression_Method.Descriptor instead.
func (ClickhouseConfig_Compression_Method) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 2, 0}
}

// Layout type.
// For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/dictionaries#ways-to-store-dictionaries-in-memory).
type ClickhouseConfig_ExternalDictionary_Layout_Type int32

const (
	ClickhouseConfig_ExternalDictionary_Layout_TYPE_UNSPECIFIED ClickhouseConfig_ExternalDictionary_Layout_Type = 0
	// The dictionary is completely stored in memory in the form of flat arrays.
	// Applicable only for dictionaries with numeric keys of the UInt64 type.
	ClickhouseConfig_ExternalDictionary_Layout_FLAT ClickhouseConfig_ExternalDictionary_Layout_Type = 1
	// The dictionary is completely stored in memory in the form of a hash table.
	// Applicable only for dictionaries with numeric keys of the UInt64 type.
	ClickhouseConfig_ExternalDictionary_Layout_HASHED ClickhouseConfig_ExternalDictionary_Layout_Type = 2
	// The dictionary is completely stored in memory in the form of a hash table.
	// Applicable for dictionaries with composite keys of arbitrary type.
	ClickhouseConfig_ExternalDictionary_Layout_COMPLEX_KEY_HASHED ClickhouseConfig_ExternalDictionary_Layout_Type = 3
	// The dictionary is stored in memory in the form of a hash table with an ordered array of ranges and their corresponding values.
	// Applicable only for dictionaries with numeric keys of the UInt64 type.
	ClickhouseConfig_ExternalDictionary_Layout_RANGE_HASHED ClickhouseConfig_ExternalDictionary_Layout_Type = 4
	// The dictionary is stored in a cache that has a fixed number of cells. These cells contain frequently used elements.
	// Applicable only for dictionaries with numeric keys of the UInt64 type.
	ClickhouseConfig_ExternalDictionary_Layout_CACHE ClickhouseConfig_ExternalDictionary_Layout_Type = 5
	// The dictionary is stored in a cache that has a fixed number of cells. These cells contain frequently used elements.
	// Applicable for dictionaries with composite keys of arbitrary type.
	ClickhouseConfig_ExternalDictionary_Layout_COMPLEX_KEY_CACHE ClickhouseConfig_ExternalDictionary_Layout_Type = 6
	// The dictionary is completely stored in memory in the form of a hash table.
	// It's similar to HASHED layout type but uses less memory in favor of more CPU usage.
	// Applicable only for dictionaries with numeric keys of the UInt64 type.
	ClickhouseConfig_ExternalDictionary_Layout_SPARSE_HASHED ClickhouseConfig_ExternalDictionary_Layout_Type = 7
	// The dictionary is completely stored in memory in the form of a hash table.
	// It's similar to COMPLEX_KEY_HASHED layout type but uses less memory in favor of more CPU usage.
	// Applicable for dictionaries with composite keys of arbitrary type.
	ClickhouseConfig_ExternalDictionary_Layout_COMPLEX_KEY_SPARSE_HASHED ClickhouseConfig_ExternalDictionary_Layout_Type = 8
	// The dictionary is stored in memory in the form of a hash table with an ordered array of ranges and their corresponding values.
	// Applicable for dictionaries with composite keys of arbitrary type.
	ClickhouseConfig_ExternalDictionary_Layout_COMPLEX_KEY_RANGE_HASHED ClickhouseConfig_ExternalDictionary_Layout_Type = 9
	// The dictionary is not stored in memory and directly goes to the source during the processing of a request.
	// Applicable only for dictionaries with numeric keys of the UInt64 type.
	ClickhouseConfig_ExternalDictionary_Layout_DIRECT ClickhouseConfig_ExternalDictionary_Layout_Type = 10
	// The dictionary is not stored in memory and directly goes to the source during the processing of a request.
	// Applicable for dictionaries with composite keys of arbitrary type.
	ClickhouseConfig_ExternalDictionary_Layout_COMPLEX_KEY_DIRECT ClickhouseConfig_ExternalDictionary_Layout_Type = 11
	// The specialized layout type for mapping network prefixes (IP addresses) to metadata such as ASN.
	ClickhouseConfig_ExternalDictionary_Layout_IP_TRIE ClickhouseConfig_ExternalDictionary_Layout_Type = 12
)

// Enum value maps for ClickhouseConfig_ExternalDictionary_Layout_Type.
var (
	ClickhouseConfig_ExternalDictionary_Layout_Type_name = map[int32]string{
		0:  "TYPE_UNSPECIFIED",
		1:  "FLAT",
		2:  "HASHED",
		3:  "COMPLEX_KEY_HASHED",
		4:  "RANGE_HASHED",
		5:  "CACHE",
		6:  "COMPLEX_KEY_CACHE",
		7:  "SPARSE_HASHED",
		8:  "COMPLEX_KEY_SPARSE_HASHED",
		9:  "COMPLEX_KEY_RANGE_HASHED",
		10: "DIRECT",
		11: "COMPLEX_KEY_DIRECT",
		12: "IP_TRIE",
	}
	ClickhouseConfig_ExternalDictionary_Layout_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":          0,
		"FLAT":                      1,
		"HASHED":                    2,
		"COMPLEX_KEY_HASHED":        3,
		"RANGE_HASHED":              4,
		"CACHE":                     5,
		"COMPLEX_KEY_CACHE":         6,
		"SPARSE_HASHED":             7,
		"COMPLEX_KEY_SPARSE_HASHED": 8,
		"COMPLEX_KEY_RANGE_HASHED":  9,
		"DIRECT":                    10,
		"COMPLEX_KEY_DIRECT":        11,
		"IP_TRIE":                   12,
	}
)

func (x ClickhouseConfig_ExternalDictionary_Layout_Type) Enum() *ClickhouseConfig_ExternalDictionary_Layout_Type {
	p := new(ClickhouseConfig_ExternalDictionary_Layout_Type)
	*p = x
	return p
}

func (x ClickhouseConfig_ExternalDictionary_Layout_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickhouseConfig_ExternalDictionary_Layout_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[4].Descriptor()
}

func (ClickhouseConfig_ExternalDictionary_Layout_Type) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[4]
}

func (x ClickhouseConfig_ExternalDictionary_Layout_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_Layout_Type.Descriptor instead.
func (ClickhouseConfig_ExternalDictionary_Layout_Type) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 3, 1, 0}
}

// Mode of SSL TCP/IP connection to a PostgreSQL host.
// For details, see [PostgreSQL documentation](https://www.postgresql.org/docs/current/libpq-ssl.html).
type ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode int32

const (
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_SSL_MODE_UNSPECIFIED ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode = 0
	// Only try a non-SSL connection.
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_DISABLE ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode = 1
	// First try a non-SSL connection; if that fails, try an SSL connection.
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_ALLOW ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode = 2
	// First try an SSL connection; if that fails, try a non-SSL connection.
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_PREFER ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode = 3
	// Only try an SSL connection, and verify that the server certificate is issued by a trusted certificate authority (CA).
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_VERIFY_CA ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode = 4
	// Only try an SSL connection, verify that the server certificate is issued by a trusted CA and that the requested server host name matches that in the certificate.
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_VERIFY_FULL ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode = 5
)

// Enum value maps for ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode.
var (
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode_name = map[int32]string{
		0: "SSL_MODE_UNSPECIFIED",
		1: "DISABLE",
		2: "ALLOW",
		3: "PREFER",
		4: "VERIFY_CA",
		5: "VERIFY_FULL",
	}
	ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode_value = map[string]int32{
		"SSL_MODE_UNSPECIFIED": 0,
		"DISABLE":              1,
		"ALLOW":                2,
		"PREFER":               3,
		"VERIFY_CA":            4,
		"VERIFY_FULL":          5,
	}
)

func (x ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode) Enum() *ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode {
	p := new(ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode)
	*p = x
	return p
}

func (x ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[5].Descriptor()
}

func (ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[5]
}

func (x ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode.Descriptor instead.
func (ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 3, 7, 0}
}

type ClickhouseConfig_Kafka_SecurityProtocol int32

const (
	ClickhouseConfig_Kafka_SECURITY_PROTOCOL_UNSPECIFIED    ClickhouseConfig_Kafka_SecurityProtocol = 0
	ClickhouseConfig_Kafka_SECURITY_PROTOCOL_PLAINTEXT      ClickhouseConfig_Kafka_SecurityProtocol = 1
	ClickhouseConfig_Kafka_SECURITY_PROTOCOL_SSL            ClickhouseConfig_Kafka_SecurityProtocol = 2
	ClickhouseConfig_Kafka_SECURITY_PROTOCOL_SASL_PLAINTEXT ClickhouseConfig_Kafka_SecurityProtocol = 3
	ClickhouseConfig_Kafka_SECURITY_PROTOCOL_SASL_SSL       ClickhouseConfig_Kafka_SecurityProtocol = 4
)

// Enum value maps for ClickhouseConfig_Kafka_SecurityProtocol.
var (
	ClickhouseConfig_Kafka_SecurityProtocol_name = map[int32]string{
		0: "SECURITY_PROTOCOL_UNSPECIFIED",
		1: "SECURITY_PROTOCOL_PLAINTEXT",
		2: "SECURITY_PROTOCOL_SSL",
		3: "SECURITY_PROTOCOL_SASL_PLAINTEXT",
		4: "SECURITY_PROTOCOL_SASL_SSL",
	}
	ClickhouseConfig_Kafka_SecurityProtocol_value = map[string]int32{
		"SECURITY_PROTOCOL_UNSPECIFIED":    0,
		"SECURITY_PROTOCOL_PLAINTEXT":      1,
		"SECURITY_PROTOCOL_SSL":            2,
		"SECURITY_PROTOCOL_SASL_PLAINTEXT": 3,
		"SECURITY_PROTOCOL_SASL_SSL":       4,
	}
)

func (x ClickhouseConfig_Kafka_SecurityProtocol) Enum() *ClickhouseConfig_Kafka_SecurityProtocol {
	p := new(ClickhouseConfig_Kafka_SecurityProtocol)
	*p = x
	return p
}

func (x ClickhouseConfig_Kafka_SecurityProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickhouseConfig_Kafka_SecurityProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[6].Descriptor()
}

func (ClickhouseConfig_Kafka_SecurityProtocol) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[6]
}

func (x ClickhouseConfig_Kafka_SecurityProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickhouseConfig_Kafka_SecurityProtocol.Descriptor instead.
func (ClickhouseConfig_Kafka_SecurityProtocol) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 5, 0}
}

type ClickhouseConfig_Kafka_SaslMechanism int32

const (
	ClickhouseConfig_Kafka_SASL_MECHANISM_UNSPECIFIED   ClickhouseConfig_Kafka_SaslMechanism = 0
	ClickhouseConfig_Kafka_SASL_MECHANISM_GSSAPI        ClickhouseConfig_Kafka_SaslMechanism = 1
	ClickhouseConfig_Kafka_SASL_MECHANISM_PLAIN         ClickhouseConfig_Kafka_SaslMechanism = 2
	ClickhouseConfig_Kafka_SASL_MECHANISM_SCRAM_SHA_256 ClickhouseConfig_Kafka_SaslMechanism = 3
	ClickhouseConfig_Kafka_SASL_MECHANISM_SCRAM_SHA_512 ClickhouseConfig_Kafka_SaslMechanism = 4
)

// Enum value maps for ClickhouseConfig_Kafka_SaslMechanism.
var (
	ClickhouseConfig_Kafka_SaslMechanism_name = map[int32]string{
		0: "SASL_MECHANISM_UNSPECIFIED",
		1: "SASL_MECHANISM_GSSAPI",
		2: "SASL_MECHANISM_PLAIN",
		3: "SASL_MECHANISM_SCRAM_SHA_256",
		4: "SASL_MECHANISM_SCRAM_SHA_512",
	}
	ClickhouseConfig_Kafka_SaslMechanism_value = map[string]int32{
		"SASL_MECHANISM_UNSPECIFIED":   0,
		"SASL_MECHANISM_GSSAPI":        1,
		"SASL_MECHANISM_PLAIN":         2,
		"SASL_MECHANISM_SCRAM_SHA_256": 3,
		"SASL_MECHANISM_SCRAM_SHA_512": 4,
	}
)

func (x ClickhouseConfig_Kafka_SaslMechanism) Enum() *ClickhouseConfig_Kafka_SaslMechanism {
	p := new(ClickhouseConfig_Kafka_SaslMechanism)
	*p = x
	return p
}

func (x ClickhouseConfig_Kafka_SaslMechanism) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickhouseConfig_Kafka_SaslMechanism) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[7].Descriptor()
}

func (ClickhouseConfig_Kafka_SaslMechanism) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[7]
}

func (x ClickhouseConfig_Kafka_SaslMechanism) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickhouseConfig_Kafka_SaslMechanism.Descriptor instead.
func (ClickhouseConfig_Kafka_SaslMechanism) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 5, 1}
}

type ClickhouseConfig_Kafka_Debug int32

const (
	ClickhouseConfig_Kafka_DEBUG_UNSPECIFIED ClickhouseConfig_Kafka_Debug = 0
	ClickhouseConfig_Kafka_DEBUG_GENERIC     ClickhouseConfig_Kafka_Debug = 1
	ClickhouseConfig_Kafka_DEBUG_BROKER      ClickhouseConfig_Kafka_Debug = 2
	ClickhouseConfig_Kafka_DEBUG_TOPIC       ClickhouseConfig_Kafka_Debug = 3
	ClickhouseConfig_Kafka_DEBUG_METADATA    ClickhouseConfig_Kafka_Debug = 4
	ClickhouseConfig_Kafka_DEBUG_FEATURE     ClickhouseConfig_Kafka_Debug = 5
	ClickhouseConfig_Kafka_DEBUG_QUEUE       ClickhouseConfig_Kafka_Debug = 6
	ClickhouseConfig_Kafka_DEBUG_MSG         ClickhouseConfig_Kafka_Debug = 7
	ClickhouseConfig_Kafka_DEBUG_PROTOCOL    ClickhouseConfig_Kafka_Debug = 8
	ClickhouseConfig_Kafka_DEBUG_CGRP        ClickhouseConfig_Kafka_Debug = 9
	ClickhouseConfig_Kafka_DEBUG_SECURITY    ClickhouseConfig_Kafka_Debug = 10
	ClickhouseConfig_Kafka_DEBUG_FETCH       ClickhouseConfig_Kafka_Debug = 11
	ClickhouseConfig_Kafka_DEBUG_INTERCEPTOR ClickhouseConfig_Kafka_Debug = 12
	ClickhouseConfig_Kafka_DEBUG_PLUGIN      ClickhouseConfig_Kafka_Debug = 13
	ClickhouseConfig_Kafka_DEBUG_CONSUMER    ClickhouseConfig_Kafka_Debug = 14
	ClickhouseConfig_Kafka_DEBUG_ADMIN       ClickhouseConfig_Kafka_Debug = 15
	ClickhouseConfig_Kafka_DEBUG_EOS         ClickhouseConfig_Kafka_Debug = 16
	ClickhouseConfig_Kafka_DEBUG_MOCK        ClickhouseConfig_Kafka_Debug = 17
	ClickhouseConfig_Kafka_DEBUG_ASSIGNOR    ClickhouseConfig_Kafka_Debug = 18
	ClickhouseConfig_Kafka_DEBUG_CONF        ClickhouseConfig_Kafka_Debug = 19
	ClickhouseConfig_Kafka_DEBUG_TELEMETRY   ClickhouseConfig_Kafka_Debug = 20
	ClickhouseConfig_Kafka_DEBUG_ALL         ClickhouseConfig_Kafka_Debug = 21
)

// Enum value maps for ClickhouseConfig_Kafka_Debug.
var (
	ClickhouseConfig_Kafka_Debug_name = map[int32]string{
		0:  "DEBUG_UNSPECIFIED",
		1:  "DEBUG_GENERIC",
		2:  "DEBUG_BROKER",
		3:  "DEBUG_TOPIC",
		4:  "DEBUG_METADATA",
		5:  "DEBUG_FEATURE",
		6:  "DEBUG_QUEUE",
		7:  "DEBUG_MSG",
		8:  "DEBUG_PROTOCOL",
		9:  "DEBUG_CGRP",
		10: "DEBUG_SECURITY",
		11: "DEBUG_FETCH",
		12: "DEBUG_INTERCEPTOR",
		13: "DEBUG_PLUGIN",
		14: "DEBUG_CONSUMER",
		15: "DEBUG_ADMIN",
		16: "DEBUG_EOS",
		17: "DEBUG_MOCK",
		18: "DEBUG_ASSIGNOR",
		19: "DEBUG_CONF",
		20: "DEBUG_TELEMETRY",
		21: "DEBUG_ALL",
	}
	ClickhouseConfig_Kafka_Debug_value = map[string]int32{
		"DEBUG_UNSPECIFIED": 0,
		"DEBUG_GENERIC":     1,
		"DEBUG_BROKER":      2,
		"DEBUG_TOPIC":       3,
		"DEBUG_METADATA":    4,
		"DEBUG_FEATURE":     5,
		"DEBUG_QUEUE":       6,
		"DEBUG_MSG":         7,
		"DEBUG_PROTOCOL":    8,
		"DEBUG_CGRP":        9,
		"DEBUG_SECURITY":    10,
		"DEBUG_FETCH":       11,
		"DEBUG_INTERCEPTOR": 12,
		"DEBUG_PLUGIN":      13,
		"DEBUG_CONSUMER":    14,
		"DEBUG_ADMIN":       15,
		"DEBUG_EOS":         16,
		"DEBUG_MOCK":        17,
		"DEBUG_ASSIGNOR":    18,
		"DEBUG_CONF":        19,
		"DEBUG_TELEMETRY":   20,
		"DEBUG_ALL":         21,
	}
)

func (x ClickhouseConfig_Kafka_Debug) Enum() *ClickhouseConfig_Kafka_Debug {
	p := new(ClickhouseConfig_Kafka_Debug)
	*p = x
	return p
}

func (x ClickhouseConfig_Kafka_Debug) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickhouseConfig_Kafka_Debug) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[8].Descriptor()
}

func (ClickhouseConfig_Kafka_Debug) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[8]
}

func (x ClickhouseConfig_Kafka_Debug) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickhouseConfig_Kafka_Debug.Descriptor instead.
func (ClickhouseConfig_Kafka_Debug) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 5, 2}
}

type ClickhouseConfig_Kafka_AutoOffsetReset int32

const (
	ClickhouseConfig_Kafka_AUTO_OFFSET_RESET_UNSPECIFIED ClickhouseConfig_Kafka_AutoOffsetReset = 0
	ClickhouseConfig_Kafka_AUTO_OFFSET_RESET_SMALLEST    ClickhouseConfig_Kafka_AutoOffsetReset = 1
	ClickhouseConfig_Kafka_AUTO_OFFSET_RESET_EARLIEST    ClickhouseConfig_Kafka_AutoOffsetReset = 2
	ClickhouseConfig_Kafka_AUTO_OFFSET_RESET_BEGINNING   ClickhouseConfig_Kafka_AutoOffsetReset = 3
	ClickhouseConfig_Kafka_AUTO_OFFSET_RESET_LARGEST     ClickhouseConfig_Kafka_AutoOffsetReset = 4
	ClickhouseConfig_Kafka_AUTO_OFFSET_RESET_LATEST      ClickhouseConfig_Kafka_AutoOffsetReset = 5
	ClickhouseConfig_Kafka_AUTO_OFFSET_RESET_END         ClickhouseConfig_Kafka_AutoOffsetReset = 6
	ClickhouseConfig_Kafka_AUTO_OFFSET_RESET_ERROR       ClickhouseConfig_Kafka_AutoOffsetReset = 7
)

// Enum value maps for ClickhouseConfig_Kafka_AutoOffsetReset.
var (
	ClickhouseConfig_Kafka_AutoOffsetReset_name = map[int32]string{
		0: "AUTO_OFFSET_RESET_UNSPECIFIED",
		1: "AUTO_OFFSET_RESET_SMALLEST",
		2: "AUTO_OFFSET_RESET_EARLIEST",
		3: "AUTO_OFFSET_RESET_BEGINNING",
		4: "AUTO_OFFSET_RESET_LARGEST",
		5: "AUTO_OFFSET_RESET_LATEST",
		6: "AUTO_OFFSET_RESET_END",
		7: "AUTO_OFFSET_RESET_ERROR",
	}
	ClickhouseConfig_Kafka_AutoOffsetReset_value = map[string]int32{
		"AUTO_OFFSET_RESET_UNSPECIFIED": 0,
		"AUTO_OFFSET_RESET_SMALLEST":    1,
		"AUTO_OFFSET_RESET_EARLIEST":    2,
		"AUTO_OFFSET_RESET_BEGINNING":   3,
		"AUTO_OFFSET_RESET_LARGEST":     4,
		"AUTO_OFFSET_RESET_LATEST":      5,
		"AUTO_OFFSET_RESET_END":         6,
		"AUTO_OFFSET_RESET_ERROR":       7,
	}
)

func (x ClickhouseConfig_Kafka_AutoOffsetReset) Enum() *ClickhouseConfig_Kafka_AutoOffsetReset {
	p := new(ClickhouseConfig_Kafka_AutoOffsetReset)
	*p = x
	return p
}

func (x ClickhouseConfig_Kafka_AutoOffsetReset) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClickhouseConfig_Kafka_AutoOffsetReset) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[9].Descriptor()
}

func (ClickhouseConfig_Kafka_AutoOffsetReset) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes[9]
}

func (x ClickhouseConfig_Kafka_AutoOffsetReset) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClickhouseConfig_Kafka_AutoOffsetReset.Descriptor instead.
func (ClickhouseConfig_Kafka_AutoOffsetReset) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 5, 3}
}

// ClickHouse configuration settings. Supported settings are a subset of settings described
// in [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings).
type ClickhouseConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Sets the number of threads performing background merges and mutations for MergeTree-engine tables.
	//
	// Default value: **16**.
	//
	// Change of the setting is applied with restart on value decrease and without restart on value increase.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#background_pool_size).
	BackgroundPoolSize *wrapperspb.Int64Value `protobuf:"bytes,33,opt,name=background_pool_size,json=backgroundPoolSize,proto3" json:"background_pool_size,omitempty"`
	// Sets a ratio between the number of threads and the number of background merges and mutations that can be executed concurrently.
	//
	// For example, if the ratio equals to **2** and **background_pool_size** is set to **16** then ClickHouse can execute **32** background merges concurrently.
	// This is possible, because background operations could be suspended and postponed. This is needed to give small merges more execution priority.
	//
	// Default value: **2**.
	//
	// Change of the setting is applied with restart on value decrease and without restart on value increase.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#background_merges_mutations_concurrency_ratio).
	BackgroundMergesMutationsConcurrencyRatio *wrapperspb.Int64Value `protobuf:"bytes,48,opt,name=background_merges_mutations_concurrency_ratio,json=backgroundMergesMutationsConcurrencyRatio,proto3" json:"background_merges_mutations_concurrency_ratio,omitempty"`
	// The maximum number of threads that will be used for constantly executing some lightweight periodic operations
	// for replicated tables, Kafka streaming, and DNS cache updates.
	//
	// Default value: **512**.
	//
	// Change of the setting is applied with restart on value decrease and without restart on value increase.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#background_schedule_pool_size).
	BackgroundSchedulePoolSize *wrapperspb.Int64Value `protobuf:"bytes,34,opt,name=background_schedule_pool_size,json=backgroundSchedulePoolSize,proto3" json:"background_schedule_pool_size,omitempty"`
	// The maximum number of threads that will be used for fetching data parts from another replica for MergeTree-engine tables in a background.
	//
	// Default value: **32** for versions 25.1 and higher, **16** for versions 24.12 and lower.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#background_fetches_pool_size).
	BackgroundFetchesPoolSize *wrapperspb.Int64Value `protobuf:"bytes,38,opt,name=background_fetches_pool_size,json=backgroundFetchesPoolSize,proto3" json:"background_fetches_pool_size,omitempty"`
	// The maximum number of threads that will be used for moving data parts to another disk or volume for MergeTree-engine tables in a background.
	//
	// Default value: **8**.
	//
	// Change of the setting is applied with restart on value decrease and without restart on value increase.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#background_move_pool_size).
	BackgroundMovePoolSize *wrapperspb.Int64Value `protobuf:"bytes,39,opt,name=background_move_pool_size,json=backgroundMovePoolSize,proto3" json:"background_move_pool_size,omitempty"`
	// The maximum number of threads that will be used for executing distributed sends.
	//
	// Default value: **16**.
	//
	// Change of the setting is applied with restart on value decrease and without restart on value increase.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#background_distributed_schedule_pool_size).
	BackgroundDistributedSchedulePoolSize *wrapperspb.Int64Value `protobuf:"bytes,40,opt,name=background_distributed_schedule_pool_size,json=backgroundDistributedSchedulePoolSize,proto3" json:"background_distributed_schedule_pool_size,omitempty"`
	// The maximum number of threads that will be used for performing flush operations for Buffer-engine tables in the background.
	//
	// Default value: **16**.
	//
	// Change of the setting is applied with restart on value decrease and without restart on value increase.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#background_buffer_flush_schedule_pool_size).
	BackgroundBufferFlushSchedulePoolSize *wrapperspb.Int64Value `protobuf:"bytes,41,opt,name=background_buffer_flush_schedule_pool_size,json=backgroundBufferFlushSchedulePoolSize,proto3" json:"background_buffer_flush_schedule_pool_size,omitempty"`
	// The maximum number of threads that will be used for executing background operations for message streaming.
	//
	// Default value: **16**.
	//
	// Change of the setting is applied with restart on value decrease and without restart on value increase.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#background_message_broker_schedule_pool_size).
	BackgroundMessageBrokerSchedulePoolSize *wrapperspb.Int64Value `protobuf:"bytes,46,opt,name=background_message_broker_schedule_pool_size,json=backgroundMessageBrokerSchedulePoolSize,proto3" json:"background_message_broker_schedule_pool_size,omitempty"`
	// The maximum number of threads that will be used for performing a variety of operations (mostly garbage collection) for MergeTree-engine tables in a background.
	//
	// Default value: **8**.
	//
	// Change of the setting is applied with restart on value decrease and without restart on value increase.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#background_common_pool_size).
	BackgroundCommonPoolSize *wrapperspb.Int64Value `protobuf:"bytes,47,opt,name=background_common_pool_size,json=backgroundCommonPoolSize,proto3" json:"background_common_pool_size,omitempty"`
	// Lazy loading of dictionaries. If enabled, then each dictionary is loaded on the first use. Otherwise, the server loads all dictionaries at startup.
	//
	// Default value: **true** for versions 25.1 and higher, **false** for versions 24.12 and lower.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#dictionaries_lazy_load).
	DictionariesLazyLoad *wrapperspb.BoolValue `protobuf:"bytes,68,opt,name=dictionaries_lazy_load,json=dictionariesLazyLoad,proto3" json:"dictionaries_lazy_load,omitempty"`
	// Logging level.
	LogLevel ClickhouseConfig_LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_LogLevel" json:"log_level,omitempty"`
	// The maximum size that query_log can grow to before old data will be removed. If set to **0**,
	// automatic removal of query_log data based on size is disabled.
	//
	// Default value: **1073741824** (1 GiB).
	QueryLogRetentionSize *wrapperspb.Int64Value `protobuf:"bytes,16,opt,name=query_log_retention_size,json=queryLogRetentionSize,proto3" json:"query_log_retention_size,omitempty"`
	// The maximum time that query_log records will be retained before removal. If set to **0**, automatic removal of query_log data based on time is disabled.
	//
	// Default value: **2592000000** (30 days).
	QueryLogRetentionTime *wrapperspb.Int64Value `protobuf:"bytes,17,opt,name=query_log_retention_time,json=queryLogRetentionTime,proto3" json:"query_log_retention_time,omitempty"`
	// Enables or disables query_thread_log system table.
	//
	// Default value: **true**.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/query_thread_log).
	QueryThreadLogEnabled *wrapperspb.BoolValue `protobuf:"bytes,18,opt,name=query_thread_log_enabled,json=queryThreadLogEnabled,proto3" json:"query_thread_log_enabled,omitempty"`
	// The maximum size that query_thread_log can grow to before old data will be removed. If set to **0**,
	// automatic removal of query_thread_log data based on size is disabled.
	//
	// Default value: **536870912** (512 MiB).
	QueryThreadLogRetentionSize *wrapperspb.Int64Value `protobuf:"bytes,19,opt,name=query_thread_log_retention_size,json=queryThreadLogRetentionSize,proto3" json:"query_thread_log_retention_size,omitempty"`
	// The maximum time that query_thread_log records will be retained before removal. If set to **0**,
	// automatic removal of query_thread_log data based on time is disabled.
	//
	// Default value: **2592000000** (30 days).
	QueryThreadLogRetentionTime *wrapperspb.Int64Value `protobuf:"bytes,20,opt,name=query_thread_log_retention_time,json=queryThreadLogRetentionTime,proto3" json:"query_thread_log_retention_time,omitempty"`
	// The maximum size that part_log can grow to before old data will be removed. If set to **0**,
	// automatic removal of part_log data based on size is disabled.
	//
	// Default value: **536870912** (512 MiB).
	PartLogRetentionSize *wrapperspb.Int64Value `protobuf:"bytes,21,opt,name=part_log_retention_size,json=partLogRetentionSize,proto3" json:"part_log_retention_size,omitempty"`
	// The maximum time that part_log records will be retained before removal. If set to **0**,
	// automatic removal of part_log data based on time is disabled.
	//
	// Default value: **2592000000** (30 days).
	PartLogRetentionTime *wrapperspb.Int64Value `protobuf:"bytes,22,opt,name=part_log_retention_time,json=partLogRetentionTime,proto3" json:"part_log_retention_time,omitempty"`
	// Enables or disables metric_log system table.
	//
	// Default value: **false** for versions 25.1 and higher, **true** for versions 24.12 and lower.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/metric_log).
	MetricLogEnabled *wrapperspb.BoolValue `protobuf:"bytes,23,opt,name=metric_log_enabled,json=metricLogEnabled,proto3" json:"metric_log_enabled,omitempty"`
	// The maximum size that metric_log can grow to before old data will be removed. If set to **0**,
	// automatic removal of metric_log data based on size is disabled.
	//
	// Default value: **536870912** (512 MiB).
	MetricLogRetentionSize *wrapperspb.Int64Value `protobuf:"bytes,24,opt,name=metric_log_retention_size,json=metricLogRetentionSize,proto3" json:"metric_log_retention_size,omitempty"`
	// The maximum time that metric_log records will be retained before removal. If set to **0**,
	// automatic removal of metric_log data based on time is disabled.
	//
	// Default value: **2592000000** (30 days).
	MetricLogRetentionTime *wrapperspb.Int64Value `protobuf:"bytes,25,opt,name=metric_log_retention_time,json=metricLogRetentionTime,proto3" json:"metric_log_retention_time,omitempty"`
	// Enables or disables trace_log system table.
	//
	// Default value: **true** for versions 25.2 and higher, **false** for versions 25.1 and lower.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/trace_log).
	TraceLogEnabled *wrapperspb.BoolValue `protobuf:"bytes,26,opt,name=trace_log_enabled,json=traceLogEnabled,proto3" json:"trace_log_enabled,omitempty"`
	// The maximum size that trace_log can grow to before old data will be removed. If set to **0**,
	// automatic removal of trace_log data based on size is disabled.
	//
	// Default value: **536870912** (512 MiB).
	TraceLogRetentionSize *wrapperspb.Int64Value `protobuf:"bytes,27,opt,name=trace_log_retention_size,json=traceLogRetentionSize,proto3" json:"trace_log_retention_size,omitempty"`
	// The maximum time that trace_log records will be retained before removal. If set to **0**,
	// automatic removal of trace_log data based on time is disabled.
	//
	// Default value: **2592000000** (30 days).
	TraceLogRetentionTime *wrapperspb.Int64Value `protobuf:"bytes,28,opt,name=trace_log_retention_time,json=traceLogRetentionTime,proto3" json:"trace_log_retention_time,omitempty"`
	// Enables or disables text_log system table.
	//
	// Default value: **false**.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/text_log).
	TextLogEnabled *wrapperspb.BoolValue `protobuf:"bytes,29,opt,name=text_log_enabled,json=textLogEnabled,proto3" json:"text_log_enabled,omitempty"`
	// The maximum size that text_log can grow to before old data will be removed. If set to **0**,
	// automatic removal of text_log data based on size is disabled.
	//
	// Default value: **536870912** (512 MiB).
	TextLogRetentionSize *wrapperspb.Int64Value `protobuf:"bytes,30,opt,name=text_log_retention_size,json=textLogRetentionSize,proto3" json:"text_log_retention_size,omitempty"`
	// The maximum time that text_log records will be retained before removal. If set to **0**,
	// automatic removal of text_log data based on time is disabled.
	//
	// Default value: **2592000000** (30 days).
	TextLogRetentionTime *wrapperspb.Int64Value `protobuf:"bytes,31,opt,name=text_log_retention_time,json=textLogRetentionTime,proto3" json:"text_log_retention_time,omitempty"`
	// Logging level for text_log system table.
	//
	// Default value: **TRACE**.
	//
	// Change of the setting is applied with restart.
	TextLogLevel ClickhouseConfig_LogLevel `protobuf:"varint,32,opt,name=text_log_level,json=textLogLevel,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_LogLevel" json:"text_log_level,omitempty"`
	// Enables or disables opentelemetry_span_log system table.
	//
	// Default value: **false**.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/opentelemetry_span_log).
	OpentelemetrySpanLogEnabled *wrapperspb.BoolValue `protobuf:"bytes,42,opt,name=opentelemetry_span_log_enabled,json=opentelemetrySpanLogEnabled,proto3" json:"opentelemetry_span_log_enabled,omitempty"`
	// The maximum size that opentelemetry_span_log can grow to before old data will be removed. If set to **0**,
	// automatic removal of opentelemetry_span_log data based on size is disabled.
	//
	// Default value: **0**.
	OpentelemetrySpanLogRetentionSize *wrapperspb.Int64Value `protobuf:"bytes,55,opt,name=opentelemetry_span_log_retention_size,json=opentelemetrySpanLogRetentionSize,proto3" json:"opentelemetry_span_log_retention_size,omitempty"`
	// The maximum time that opentelemetry_span_log records will be retained before removal. If set to **0**,
	// automatic removal of opentelemetry_span_log data based on time is disabled.
	//
	// Default value: **2592000000** (30 days).
	OpentelemetrySpanLogRetentionTime *wrapperspb.Int64Value `protobuf:"bytes,56,opt,name=opentelemetry_span_log_retention_time,json=opentelemetrySpanLogRetentionTime,proto3" json:"opentelemetry_span_log_retention_time,omitempty"`
	// Enables or disables query_views_log system table.
	//
	// Default value: **false**.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/query_views_log).
	QueryViewsLogEnabled *wrapperspb.BoolValue `protobuf:"bytes,49,opt,name=query_views_log_enabled,json=queryViewsLogEnabled,proto3" json:"query_views_log_enabled,omitempty"`
	// The maximum size that query_views_log can grow to before old data will be removed. If set to **0**,
	// automatic removal of query_views_log data based on size is disabled.
	//
	// Default value: **0**.
	QueryViewsLogRetentionSize *wrapperspb.Int64Value `protobuf:"bytes,50,opt,name=query_views_log_retention_size,json=queryViewsLogRetentionSize,proto3" json:"query_views_log_retention_size,omitempty"`
	// The maximum time that query_views_log records will be retained before removal. If set to **0**,
	// automatic removal of query_views_log data based on time is disabled.
	//
	// Default value: **2592000000** (30 days).
	QueryViewsLogRetentionTime *wrapperspb.Int64Value `protobuf:"bytes,51,opt,name=query_views_log_retention_time,json=queryViewsLogRetentionTime,proto3" json:"query_views_log_retention_time,omitempty"`
	// Enables or disables asynchronous_metric_log system table.
	//
	// Default value: **false**.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/asynchronous_metric_log).
	AsynchronousMetricLogEnabled *wrapperspb.BoolValue `protobuf:"bytes,52,opt,name=asynchronous_metric_log_enabled,json=asynchronousMetricLogEnabled,proto3" json:"asynchronous_metric_log_enabled,omitempty"`
	// The maximum size that asynchronous_metric_log can grow to before old data will be removed. If set to **0**,
	// automatic removal of asynchronous_metric_log data based on size is disabled.
	//
	// Default value: **0**.
	AsynchronousMetricLogRetentionSize *wrapperspb.Int64Value `protobuf:"bytes,53,opt,name=asynchronous_metric_log_retention_size,json=asynchronousMetricLogRetentionSize,proto3" json:"asynchronous_metric_log_retention_size,omitempty"`
	// The maximum time that asynchronous_metric_log records will be retained before removal. If set to **0**,
	// automatic removal of asynchronous_metric_log data based on time is disabled.
	//
	// Default value: **2592000000** (30 days).
	AsynchronousMetricLogRetentionTime *wrapperspb.Int64Value `protobuf:"bytes,54,opt,name=asynchronous_metric_log_retention_time,json=asynchronousMetricLogRetentionTime,proto3" json:"asynchronous_metric_log_retention_time,omitempty"`
	// Enables or disables session_log system table.
	//
	// Default value: **true** for versions 25.3 and higher, **false** for versions 25.2 and lower.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/session_log).
	SessionLogEnabled *wrapperspb.BoolValue `protobuf:"bytes,57,opt,name=session_log_enabled,json=sessionLogEnabled,proto3" json:"session_log_enabled,omitempty"`
	// The maximum size that session_log can grow to before old data will be removed. If set to **0**,
	// automatic removal of session_log data based on size is disabled.
	//
	// Default value: **536870912** (512 MiB) for versions 25.3 and higher, **0** for versions 25.2 and lower.
	SessionLogRetentionSize *wrapperspb.Int64Value `protobuf:"bytes,58,opt,name=session_log_retention_size,json=sessionLogRetentionSize,proto3" json:"session_log_retention_size,omitempty"`
	// The maximum time that session_log records will be retained before removal. If set to **0**,
	// automatic removal of session_log data based on time is disabled.
	//
	// Default value: **2592000000** (30 days).
	SessionLogRetentionTime *wrapperspb.Int64Value `protobuf:"bytes,59,opt,name=session_log_retention_time,json=sessionLogRetentionTime,proto3" json:"session_log_retention_time,omitempty"`
	// Enables or disables zookeeper_log system table.
	//
	// Default value: **false**.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/zookeeper_log).
	ZookeeperLogEnabled *wrapperspb.BoolValue `protobuf:"bytes,60,opt,name=zookeeper_log_enabled,json=zookeeperLogEnabled,proto3" json:"zookeeper_log_enabled,omitempty"`
	// The maximum size that zookeeper_log can grow to before old data will be removed. If set to **0**,
	// automatic removal of zookeeper_log data based on size is disabled.
	//
	// Default value: **0**.
	ZookeeperLogRetentionSize *wrapperspb.Int64Value `protobuf:"bytes,61,opt,name=zookeeper_log_retention_size,json=zookeeperLogRetentionSize,proto3" json:"zookeeper_log_retention_size,omitempty"`
	// The maximum time that zookeeper_log records will be retained before removal. If set to **0**,
	// automatic removal of zookeeper_log data based on time is disabled.
	//
	// Default value: **2592000000** (30 days).
	ZookeeperLogRetentionTime *wrapperspb.Int64Value `protobuf:"bytes,62,opt,name=zookeeper_log_retention_time,json=zookeeperLogRetentionTime,proto3" json:"zookeeper_log_retention_time,omitempty"`
	// Enables or disables asynchronous_insert_log system table.
	//
	// Default value: **false**.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/asynchronous_insert_log).
	AsynchronousInsertLogEnabled *wrapperspb.BoolValue `protobuf:"bytes,63,opt,name=asynchronous_insert_log_enabled,json=asynchronousInsertLogEnabled,proto3" json:"asynchronous_insert_log_enabled,omitempty"`
	// The maximum size that asynchronous_insert_log can grow to before old data will be removed. If set to **0**,
	// automatic removal of asynchronous_insert_log data based on size is disabled.
	//
	// Default value: **0**.
	AsynchronousInsertLogRetentionSize *wrapperspb.Int64Value `protobuf:"bytes,64,opt,name=asynchronous_insert_log_retention_size,json=asynchronousInsertLogRetentionSize,proto3" json:"asynchronous_insert_log_retention_size,omitempty"`
	// The maximum time that asynchronous_insert_log records will be retained before removal. If set to **0**,
	// automatic removal of asynchronous_insert_log data based on time is disabled.
	//
	// Default value: **2592000000** (30 days).
	AsynchronousInsertLogRetentionTime *wrapperspb.Int64Value `protobuf:"bytes,65,opt,name=asynchronous_insert_log_retention_time,json=asynchronousInsertLogRetentionTime,proto3" json:"asynchronous_insert_log_retention_time,omitempty"`
	// Enables or disables processors_profile_log system table.
	//
	// Default value: **true** for versions 25.2 and higher, **false** for versions 25.1 and lower.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/processors_profile_log).
	ProcessorsProfileLogEnabled *wrapperspb.BoolValue `protobuf:"bytes,71,opt,name=processors_profile_log_enabled,json=processorsProfileLogEnabled,proto3" json:"processors_profile_log_enabled,omitempty"`
	// The maximum size that processors_profile_log can grow to before old data will be removed. If set to **0**,
	// automatic removal of processors_profile_log data based on size is disabled.
	//
	// Default value: **0**.
	ProcessorsProfileLogRetentionSize *wrapperspb.Int64Value `protobuf:"bytes,72,opt,name=processors_profile_log_retention_size,json=processorsProfileLogRetentionSize,proto3" json:"processors_profile_log_retention_size,omitempty"`
	// The maximum time that processors_profile_log records will be retained before removal. If set to **0**,
	// automatic removal of processors_profile_log data based on time is disabled.
	//
	// Default value: **2592000000** (30 days).
	ProcessorsProfileLogRetentionTime *wrapperspb.Int64Value `protobuf:"bytes,73,opt,name=processors_profile_log_retention_time,json=processorsProfileLogRetentionTime,proto3" json:"processors_profile_log_retention_time,omitempty"`
	// Enables or disables error_log system table.
	//
	// Default value: **false**.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/system-tables/error_log).
	ErrorLogEnabled *wrapperspb.BoolValue `protobuf:"bytes,75,opt,name=error_log_enabled,json=errorLogEnabled,proto3" json:"error_log_enabled,omitempty"`
	// The maximum size that error_log can grow to before old data will be removed. If set to **0**,
	// automatic removal of error_log data based on size is disabled.
	//
	// Default value: **0**.
	ErrorLogRetentionSize *wrapperspb.Int64Value `protobuf:"bytes,76,opt,name=error_log_retention_size,json=errorLogRetentionSize,proto3" json:"error_log_retention_size,omitempty"`
	// The maximum time that error_log records will be retained before removal. If set to **0**,
	// automatic removal of error_log data based on time is disabled.
	//
	// Default value: **2592000000** (30 days).
	ErrorLogRetentionTime *wrapperspb.Int64Value `protobuf:"bytes,77,opt,name=error_log_retention_time,json=errorLogRetentionTime,proto3" json:"error_log_retention_time,omitempty"`
	// Access control settings.
	AccessControlImprovements *ClickhouseConfig_AccessControlImprovements `protobuf:"bytes,74,opt,name=access_control_improvements,json=accessControlImprovements,proto3" json:"access_control_improvements,omitempty"`
	// Maximum number of inbound connections.
	//
	// Default value: **4096**.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#max_connections).
	MaxConnections *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// Maximum number of concurrently executed queries.
	//
	// Default value: **500**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#max_concurrent_queries).
	MaxConcurrentQueries *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=max_concurrent_queries,json=maxConcurrentQueries,proto3" json:"max_concurrent_queries,omitempty"`
	// Maximum size of the table that can be deleted using **DROP** or **TRUNCATE** query.
	//
	// Default value: **50000000000** (48828125 KiB).
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#max_table_size_to_drop).
	MaxTableSizeToDrop *wrapperspb.Int64Value `protobuf:"bytes,11,opt,name=max_table_size_to_drop,json=maxTableSizeToDrop,proto3" json:"max_table_size_to_drop,omitempty"`
	// Maximum size of the partition that can be deleted using **DROP** or **TRUNCATE** query.
	//
	// Default value: **50000000000** (48828125 KiB).
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#max_partition_size_to_drop).
	MaxPartitionSizeToDrop *wrapperspb.Int64Value `protobuf:"bytes,13,opt,name=max_partition_size_to_drop,json=maxPartitionSizeToDrop,proto3" json:"max_partition_size_to_drop,omitempty"`
	// The number of seconds that ClickHouse waits for incoming requests for HTTP protocol before closing the connection.
	//
	// Default value: **30**.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#keep_alive_timeout).
	KeepAliveTimeout *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=keep_alive_timeout,json=keepAliveTimeout,proto3" json:"keep_alive_timeout,omitempty"`
	// Cache size (in bytes) for uncompressed data used by table engines from the MergeTree family. **0** means disabled.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#uncompressed_cache_size).
	UncompressedCacheSize *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=uncompressed_cache_size,json=uncompressedCacheSize,proto3" json:"uncompressed_cache_size,omitempty"`
	// Maximum size (in bytes) of the cache of "marks" used by MergeTree tables.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#mark_cache_size).
	MarkCacheSize *wrapperspb.Int64Value `protobuf:"bytes,10,opt,name=mark_cache_size,json=markCacheSize,proto3" json:"mark_cache_size,omitempty"`
	// The server's time zone to be used in DateTime fields conversions. Specified as an IANA identifier.
	//
	// Default value: **Europe/Moscow**.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#timezone).
	Timezone string `protobuf:"bytes,14,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// Enables or disables geobase.
	//
	// Default value: **false** for versions 25.8 and higher, **true** for versions 25.7 and lower.
	//
	// Change of the setting is applied with restart.
	GeobaseEnabled *wrapperspb.BoolValue `protobuf:"bytes,66,opt,name=geobase_enabled,json=geobaseEnabled,proto3" json:"geobase_enabled,omitempty"`
	// Address of the archive with the user geobase in Object Storage.
	//
	// Change of the setting is applied with restart.
	GeobaseUri string `protobuf:"bytes,15,opt,name=geobase_uri,json=geobaseUri,proto3" json:"geobase_uri,omitempty"`
	// The default database.
	//
	// Default value: **default**.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#default_database).
	DefaultDatabase *wrapperspb.StringValue `protobuf:"bytes,43,opt,name=default_database,json=defaultDatabase,proto3" json:"default_database,omitempty"`
	// Whenever server memory usage becomes larger than every next step in number of bytes the memory profiler will collect
	// the allocating stack trace. **0** means disabled memory profiler.
	//
	// Default value: **0**.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#total_memory_profiler_step).
	TotalMemoryProfilerStep *wrapperspb.Int64Value `protobuf:"bytes,44,opt,name=total_memory_profiler_step,json=totalMemoryProfilerStep,proto3" json:"total_memory_profiler_step,omitempty"`
	// Allows to collect random allocations and de-allocations and writes them in the system.trace_log system table
	// with trace_type equal to a MemorySample with the specified probability.
	//
	// Default value: **0**.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#total_memory_tracker_sample_probability).
	TotalMemoryTrackerSampleProbability *wrapperspb.DoubleValue `protobuf:"bytes,45,opt,name=total_memory_tracker_sample_probability,json=totalMemoryTrackerSampleProbability,proto3" json:"total_memory_tracker_sample_probability,omitempty"`
	// Maximum number of threads to parse and insert data in background. If set to **0**, asynchronous mode is disabled.
	//
	// Default value: **16**.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#async_insert_threads).
	AsyncInsertThreads *wrapperspb.Int64Value `protobuf:"bytes,79,opt,name=async_insert_threads,json=asyncInsertThreads,proto3" json:"async_insert_threads,omitempty"`
	// The maximum number of threads to execute **BACKUP** requests.
	//
	// Default value: **16**.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#backup_threads).
	BackupThreads *wrapperspb.Int64Value `protobuf:"bytes,80,opt,name=backup_threads,json=backupThreads,proto3" json:"backup_threads,omitempty"`
	// The maximum number of threads to execute **RESTORE** requests.
	//
	// Default value: **16**.
	//
	// Change of the setting is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#restore_threads).
	RestoreThreads *wrapperspb.Int64Value `protobuf:"bytes,81,opt,name=restore_threads,json=restoreThreads,proto3" json:"restore_threads,omitempty"`
	// Settings for the MergeTree table engine family.
	//
	// Change of the settings of **merge_tree** is applied with restart.
	MergeTree *ClickhouseConfig_MergeTree `protobuf:"bytes,2,opt,name=merge_tree,json=mergeTree,proto3" json:"merge_tree,omitempty"`
	// Data compression settings for MergeTree engine tables.
	//
	// Change of the settings of **compression** is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#compression).
	Compression []*ClickhouseConfig_Compression `protobuf:"bytes,3,rep,name=compression,proto3" json:"compression,omitempty"`
	// Configuration of external dictionaries.
	//
	// Change of the settings of **dictionaries** is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries).
	Dictionaries []*ClickhouseConfig_ExternalDictionary `protobuf:"bytes,4,rep,name=dictionaries,proto3" json:"dictionaries,omitempty"`
	// Rollup settings for the GraphiteMergeTree engine tables.
	//
	// Change of the settings of **graphite_rollup** is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#graphite_rollup).
	GraphiteRollup []*ClickhouseConfig_GraphiteRollup `protobuf:"bytes,5,rep,name=graphite_rollup,json=graphiteRollup,proto3" json:"graphite_rollup,omitempty"`
	// Kafka integration settings.
	//
	// Change of the settings of **kafka** is applied with restart.
	Kafka *ClickhouseConfig_Kafka `protobuf:"bytes,35,opt,name=kafka,proto3" json:"kafka,omitempty"`
	// Per-topic Kafka integration settings.
	//
	// Change of the settings of **kafka_topics** is applied with restart.
	KafkaTopics []*ClickhouseConfig_KafkaTopic `protobuf:"bytes,36,rep,name=kafka_topics,json=kafkaTopics,proto3" json:"kafka_topics,omitempty"`
	// RabbitMQ integration settings.
	//
	// Change of the settings of **rabbitmq** is applied with restart.
	Rabbitmq *ClickhouseConfig_Rabbitmq `protobuf:"bytes,37,opt,name=rabbitmq,proto3" json:"rabbitmq,omitempty"`
	// Regexp-based rules, which will be applied to queries as well as all log messages before storing them in server logs,
	// system.query_log, system.text_log, system.processes tables, and in logs sent to the client. That allows preventing
	// sensitive data leakage from SQL queries (like names, emails, personal identifiers or credit card numbers) to logs.
	//
	// Change of the settings of **query_masking_rules** is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#query_masking_rules).
	QueryMaskingRules []*ClickhouseConfig_QueryMaskingRule `protobuf:"bytes,67,rep,name=query_masking_rules,json=queryMaskingRules,proto3" json:"query_masking_rules,omitempty"`
	// [Query cache](https://clickhouse.com/docs/operations/query-cache) configuration.
	//
	// Change of the settings of **query_cache** is applied with restart.
	QueryCache *ClickhouseConfig_QueryCache `protobuf:"bytes,69,opt,name=query_cache,json=queryCache,proto3" json:"query_cache,omitempty"`
	// JDBC bridge configuration for queries to external databases.
	//
	// Change of the settings of **jdbc_bridge** is applied with restart.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/integrations/jdbc/jdbc-with-clickhouse).
	JdbcBridge *ClickhouseConfig_JdbcBridge `protobuf:"bytes,70,opt,name=jdbc_bridge,json=jdbcBridge,proto3" json:"jdbc_bridge,omitempty"`
	// Enables or disables MySQL interface on ClickHouse server
	//
	// Default value: **false**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/interfaces/mysql).
	MysqlProtocol *wrapperspb.BoolValue `protobuf:"bytes,78,opt,name=mysql_protocol,json=mysqlProtocol,proto3" json:"mysql_protocol,omitempty"`
	// Custom ClickHouse macros.
	CustomMacros []*ClickhouseConfig_Macro `protobuf:"bytes,82,rep,name=custom_macros,json=customMacros,proto3" json:"custom_macros,omitempty"`
	// The interval in seconds before reloading built-in dictionaries.
	//
	// Default value: **3600**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#builtin_dictionaries_reload_interval).
	//
	// Deprecated: Marked as deprecated in yandex/cloud/mdb/clickhouse/v1/config/clickhouse.proto.
	BuiltinDictionariesReloadInterval *wrapperspb.Int64Value `protobuf:"bytes,12,opt,name=builtin_dictionaries_reload_interval,json=builtinDictionariesReloadInterval,proto3" json:"builtin_dictionaries_reload_interval,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *ClickhouseConfig) Reset() {
	*x = ClickhouseConfig{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig) ProtoMessage() {}

func (x *ClickhouseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0}
}

func (x *ClickhouseConfig) GetBackgroundPoolSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackgroundPoolSize
	}
	return nil
}

func (x *ClickhouseConfig) GetBackgroundMergesMutationsConcurrencyRatio() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackgroundMergesMutationsConcurrencyRatio
	}
	return nil
}

func (x *ClickhouseConfig) GetBackgroundSchedulePoolSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackgroundSchedulePoolSize
	}
	return nil
}

func (x *ClickhouseConfig) GetBackgroundFetchesPoolSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackgroundFetchesPoolSize
	}
	return nil
}

func (x *ClickhouseConfig) GetBackgroundMovePoolSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackgroundMovePoolSize
	}
	return nil
}

func (x *ClickhouseConfig) GetBackgroundDistributedSchedulePoolSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackgroundDistributedSchedulePoolSize
	}
	return nil
}

func (x *ClickhouseConfig) GetBackgroundBufferFlushSchedulePoolSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackgroundBufferFlushSchedulePoolSize
	}
	return nil
}

func (x *ClickhouseConfig) GetBackgroundMessageBrokerSchedulePoolSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackgroundMessageBrokerSchedulePoolSize
	}
	return nil
}

func (x *ClickhouseConfig) GetBackgroundCommonPoolSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackgroundCommonPoolSize
	}
	return nil
}

func (x *ClickhouseConfig) GetDictionariesLazyLoad() *wrapperspb.BoolValue {
	if x != nil {
		return x.DictionariesLazyLoad
	}
	return nil
}

func (x *ClickhouseConfig) GetLogLevel() ClickhouseConfig_LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return ClickhouseConfig_LOG_LEVEL_UNSPECIFIED
}

func (x *ClickhouseConfig) GetQueryLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.QueryLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetQueryLogRetentionTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.QueryLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetQueryThreadLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.QueryThreadLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetQueryThreadLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.QueryThreadLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetQueryThreadLogRetentionTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.QueryThreadLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetPartLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.PartLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetPartLogRetentionTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.PartLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetMetricLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.MetricLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetMetricLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MetricLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetMetricLogRetentionTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.MetricLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetTraceLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.TraceLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetTraceLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.TraceLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetTraceLogRetentionTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.TraceLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetTextLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.TextLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetTextLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.TextLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetTextLogRetentionTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.TextLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetTextLogLevel() ClickhouseConfig_LogLevel {
	if x != nil {
		return x.TextLogLevel
	}
	return ClickhouseConfig_LOG_LEVEL_UNSPECIFIED
}

func (x *ClickhouseConfig) GetOpentelemetrySpanLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.OpentelemetrySpanLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetOpentelemetrySpanLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.OpentelemetrySpanLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetOpentelemetrySpanLogRetentionTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.OpentelemetrySpanLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetQueryViewsLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.QueryViewsLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetQueryViewsLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.QueryViewsLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetQueryViewsLogRetentionTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.QueryViewsLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetAsynchronousMetricLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.AsynchronousMetricLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetAsynchronousMetricLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.AsynchronousMetricLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetAsynchronousMetricLogRetentionTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.AsynchronousMetricLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetSessionLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.SessionLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetSessionLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.SessionLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetSessionLogRetentionTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.SessionLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetZookeeperLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.ZookeeperLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetZookeeperLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.ZookeeperLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetZookeeperLogRetentionTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.ZookeeperLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetAsynchronousInsertLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.AsynchronousInsertLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetAsynchronousInsertLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.AsynchronousInsertLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetAsynchronousInsertLogRetentionTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.AsynchronousInsertLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetProcessorsProfileLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.ProcessorsProfileLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetProcessorsProfileLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.ProcessorsProfileLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetProcessorsProfileLogRetentionTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.ProcessorsProfileLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetErrorLogEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.ErrorLogEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetErrorLogRetentionSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.ErrorLogRetentionSize
	}
	return nil
}

func (x *ClickhouseConfig) GetErrorLogRetentionTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.ErrorLogRetentionTime
	}
	return nil
}

func (x *ClickhouseConfig) GetAccessControlImprovements() *ClickhouseConfig_AccessControlImprovements {
	if x != nil {
		return x.AccessControlImprovements
	}
	return nil
}

func (x *ClickhouseConfig) GetMaxConnections() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *ClickhouseConfig) GetMaxConcurrentQueries() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxConcurrentQueries
	}
	return nil
}

func (x *ClickhouseConfig) GetMaxTableSizeToDrop() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxTableSizeToDrop
	}
	return nil
}

func (x *ClickhouseConfig) GetMaxPartitionSizeToDrop() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxPartitionSizeToDrop
	}
	return nil
}

func (x *ClickhouseConfig) GetKeepAliveTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.KeepAliveTimeout
	}
	return nil
}

func (x *ClickhouseConfig) GetUncompressedCacheSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.UncompressedCacheSize
	}
	return nil
}

func (x *ClickhouseConfig) GetMarkCacheSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MarkCacheSize
	}
	return nil
}

func (x *ClickhouseConfig) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *ClickhouseConfig) GetGeobaseEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.GeobaseEnabled
	}
	return nil
}

func (x *ClickhouseConfig) GetGeobaseUri() string {
	if x != nil {
		return x.GeobaseUri
	}
	return ""
}

func (x *ClickhouseConfig) GetDefaultDatabase() *wrapperspb.StringValue {
	if x != nil {
		return x.DefaultDatabase
	}
	return nil
}

func (x *ClickhouseConfig) GetTotalMemoryProfilerStep() *wrapperspb.Int64Value {
	if x != nil {
		return x.TotalMemoryProfilerStep
	}
	return nil
}

func (x *ClickhouseConfig) GetTotalMemoryTrackerSampleProbability() *wrapperspb.DoubleValue {
	if x != nil {
		return x.TotalMemoryTrackerSampleProbability
	}
	return nil
}

func (x *ClickhouseConfig) GetAsyncInsertThreads() *wrapperspb.Int64Value {
	if x != nil {
		return x.AsyncInsertThreads
	}
	return nil
}

func (x *ClickhouseConfig) GetBackupThreads() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackupThreads
	}
	return nil
}

func (x *ClickhouseConfig) GetRestoreThreads() *wrapperspb.Int64Value {
	if x != nil {
		return x.RestoreThreads
	}
	return nil
}

func (x *ClickhouseConfig) GetMergeTree() *ClickhouseConfig_MergeTree {
	if x != nil {
		return x.MergeTree
	}
	return nil
}

func (x *ClickhouseConfig) GetCompression() []*ClickhouseConfig_Compression {
	if x != nil {
		return x.Compression
	}
	return nil
}

func (x *ClickhouseConfig) GetDictionaries() []*ClickhouseConfig_ExternalDictionary {
	if x != nil {
		return x.Dictionaries
	}
	return nil
}

func (x *ClickhouseConfig) GetGraphiteRollup() []*ClickhouseConfig_GraphiteRollup {
	if x != nil {
		return x.GraphiteRollup
	}
	return nil
}

func (x *ClickhouseConfig) GetKafka() *ClickhouseConfig_Kafka {
	if x != nil {
		return x.Kafka
	}
	return nil
}

func (x *ClickhouseConfig) GetKafkaTopics() []*ClickhouseConfig_KafkaTopic {
	if x != nil {
		return x.KafkaTopics
	}
	return nil
}

func (x *ClickhouseConfig) GetRabbitmq() *ClickhouseConfig_Rabbitmq {
	if x != nil {
		return x.Rabbitmq
	}
	return nil
}

func (x *ClickhouseConfig) GetQueryMaskingRules() []*ClickhouseConfig_QueryMaskingRule {
	if x != nil {
		return x.QueryMaskingRules
	}
	return nil
}

func (x *ClickhouseConfig) GetQueryCache() *ClickhouseConfig_QueryCache {
	if x != nil {
		return x.QueryCache
	}
	return nil
}

func (x *ClickhouseConfig) GetJdbcBridge() *ClickhouseConfig_JdbcBridge {
	if x != nil {
		return x.JdbcBridge
	}
	return nil
}

func (x *ClickhouseConfig) GetMysqlProtocol() *wrapperspb.BoolValue {
	if x != nil {
		return x.MysqlProtocol
	}
	return nil
}

func (x *ClickhouseConfig) GetCustomMacros() []*ClickhouseConfig_Macro {
	if x != nil {
		return x.CustomMacros
	}
	return nil
}

// Deprecated: Marked as deprecated in yandex/cloud/mdb/clickhouse/v1/config/clickhouse.proto.
func (x *ClickhouseConfig) GetBuiltinDictionariesReloadInterval() *wrapperspb.Int64Value {
	if x != nil {
		return x.BuiltinDictionariesReloadInterval
	}
	return nil
}

type ClickhouseConfigSet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Effective configuration (a combination of user-defined configuration and default configuration).
	EffectiveConfig *ClickhouseConfig `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined configuration.
	UserConfig *ClickhouseConfig `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration.
	DefaultConfig *ClickhouseConfig `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConfigSet) Reset() {
	*x = ClickhouseConfigSet{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfigSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfigSet) ProtoMessage() {}

func (x *ClickhouseConfigSet) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfigSet.ProtoReflect.Descriptor instead.
func (*ClickhouseConfigSet) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{1}
}

func (x *ClickhouseConfigSet) GetEffectiveConfig() *ClickhouseConfig {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *ClickhouseConfigSet) GetUserConfig() *ClickhouseConfig {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *ClickhouseConfigSet) GetDefaultConfig() *ClickhouseConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

// Access control settings.
// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#access_control_improvements).
type ClickhouseConfig_AccessControlImprovements struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Sets whether **SELECT * FROM system.<table>** requires any grants and can be executed by any user.
	// If set to true then this query requires **GRANT SELECT ON system.<table>** just as for non-system tables.
	//
	// Default value: **false**.
	SelectFromSystemDbRequiresGrant *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=select_from_system_db_requires_grant,json=selectFromSystemDbRequiresGrant,proto3" json:"select_from_system_db_requires_grant,omitempty"`
	// Sets whether **SELECT * FROM information_schema.<table>** requires any grants and can be executed by any user.
	// If set to true, then this query requires **GRANT SELECT ON information_schema.<table>**, just as for ordinary tables.
	//
	// Default value: **false**.
	SelectFromInformationSchemaRequiresGrant *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=select_from_information_schema_requires_grant,json=selectFromInformationSchemaRequiresGrant,proto3" json:"select_from_information_schema_requires_grant,omitempty"`
	unknownFields                            protoimpl.UnknownFields
	sizeCache                                protoimpl.SizeCache
}

func (x *ClickhouseConfig_AccessControlImprovements) Reset() {
	*x = ClickhouseConfig_AccessControlImprovements{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_AccessControlImprovements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_AccessControlImprovements) ProtoMessage() {}

func (x *ClickhouseConfig_AccessControlImprovements) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_AccessControlImprovements.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_AccessControlImprovements) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ClickhouseConfig_AccessControlImprovements) GetSelectFromSystemDbRequiresGrant() *wrapperspb.BoolValue {
	if x != nil {
		return x.SelectFromSystemDbRequiresGrant
	}
	return nil
}

func (x *ClickhouseConfig_AccessControlImprovements) GetSelectFromInformationSchemaRequiresGrant() *wrapperspb.BoolValue {
	if x != nil {
		return x.SelectFromInformationSchemaRequiresGrant
	}
	return nil
}

// Settings for the MergeTree table engine family.
type ClickhouseConfig_MergeTree struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If the number of active parts in a single partition exceeds the **parts_to_delay_insert** value, an **INSERT** artificially slows down.
	//
	// Default value: **1000** for versions 25.1 and higher, **150** for versions 24.12 and lower.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#parts_to_delay_insert).
	PartsToDelayInsert *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=parts_to_delay_insert,json=partsToDelayInsert,proto3" json:"parts_to_delay_insert,omitempty"`
	// If the number of active parts in a single partition exceeds the **parts_to_throw_insert** value, an **INSERT**
	// is interrupted with the error "Too many parts (N). Merges are processing significantly slower than inserts".
	//
	// Default value: **3000** for versions 25.1 and higher, **300** for versions 24.12 and lower.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#parts_to_throw_insert).
	PartsToThrowInsert *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=parts_to_throw_insert,json=partsToThrowInsert,proto3" json:"parts_to_throw_insert,omitempty"`
	// If the number of inactive parts in a single partition in the table exceeds the **inactive_parts_to_delay_insert** value,
	// an **INSERT** is artificially slowed down.
	//
	// Default value: **0**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#inactive_parts_to_delay_insert).
	InactivePartsToDelayInsert *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=inactive_parts_to_delay_insert,json=inactivePartsToDelayInsert,proto3" json:"inactive_parts_to_delay_insert,omitempty"`
	// If the number of inactive parts in a single partition more than the **inactive_parts_to_throw_insert** value,
	// **INSERT** is interrupted with an error.
	//
	// Default value: **0**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#inactive_parts_to_throw_insert).
	InactivePartsToThrowInsert *wrapperspb.Int64Value `protobuf:"bytes,10,opt,name=inactive_parts_to_throw_insert,json=inactivePartsToThrowInsert,proto3" json:"inactive_parts_to_throw_insert,omitempty"`
	// The "Too many parts" check according to **parts_to_delay_insert** and **parts_to_throw_insert** will be active only if the average
	// part size (in the relevant partition) is not larger than the specified threshold. If it is larger than the specified threshold,
	// **INSERT** queries will be neither delayed or rejected. This allows to have hundreds of terabytes in a single table on a single server
	// if the parts are successfully merged to larger parts. This does not affect the thresholds on inactive parts or total parts.
	//
	// Default value: **1073741824** (1 GiB).
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#max_avg_part_size_for_too_many_parts).
	MaxAvgPartSizeForTooManyParts *wrapperspb.Int64Value `protobuf:"bytes,21,opt,name=max_avg_part_size_for_too_many_parts,json=maxAvgPartSizeForTooManyParts,proto3" json:"max_avg_part_size_for_too_many_parts,omitempty"`
	// If the total number of active parts in all partitions of a table exceeds the **max_parts_in_total** value,
	// an **INSERT** is interrupted with the error "Too many parts (N)".
	//
	// Default value: **20000** for versions 25.2 and higher, **100000** for versions 25.1 and lower.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#max_parts_in_total).
	MaxPartsInTotal *wrapperspb.Int64Value `protobuf:"bytes,17,opt,name=max_parts_in_total,json=maxPartsInTotal,proto3" json:"max_parts_in_total,omitempty"`
	// How many tasks of merging and mutating parts are allowed simultaneously in ReplicatedMergeTree queue.
	//
	// Default value: **32** for versions 25.8 and higher, **16** for versions 25.7 and lower.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#max_replicated_merges_in_queue).
	MaxReplicatedMergesInQueue *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=max_replicated_merges_in_queue,json=maxReplicatedMergesInQueue,proto3" json:"max_replicated_merges_in_queue,omitempty"`
	// When there is less than the specified number of free entries in pool (or replicated queue), start to lower maximum size of
	// merge to process (or to put in queue). This is to allow small merges to process - not filling the pool with long running merges.
	//
	// Default value: **8**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#number_of_free_entries_in_pool_to_lower_max_size_of_merge).
	NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=number_of_free_entries_in_pool_to_lower_max_size_of_merge,json=numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge,proto3" json:"number_of_free_entries_in_pool_to_lower_max_size_of_merge,omitempty"`
	// When there is less than specified number of free entries in pool, do not execute part mutations.
	// This is to leave free threads for regular merges and to avoid "Too many parts" errors.
	//
	// Default value: **20**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#number_of_free_entries_in_pool_to_execute_mutation).
	NumberOfFreeEntriesInPoolToExecuteMutation *wrapperspb.Int64Value `protobuf:"bytes,20,opt,name=number_of_free_entries_in_pool_to_execute_mutation,json=numberOfFreeEntriesInPoolToExecuteMutation,proto3" json:"number_of_free_entries_in_pool_to_execute_mutation,omitempty"`
	// The maximum total part size (in bytes) to be merged into one part, with the minimum available resources in the background pool.
	//
	// Default value: **1048576** (1 MiB).
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#max_bytes_to_merge_at_min_space_in_pool).
	MaxBytesToMergeAtMinSpaceInPool *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=max_bytes_to_merge_at_min_space_in_pool,json=maxBytesToMergeAtMinSpaceInPool,proto3" json:"max_bytes_to_merge_at_min_space_in_pool,omitempty"`
	// The maximum total parts size (in bytes) to be merged into one part, if there are enough resources available.
	// Corresponds roughly to the maximum possible part size created by an automatic background merge. **0** means merges will be disabled.
	//
	// Default value: **161061273600** (150 GiB).
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#max_bytes_to_merge_at_max_space_in_pool).
	MaxBytesToMergeAtMaxSpaceInPool *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=max_bytes_to_merge_at_max_space_in_pool,json=maxBytesToMergeAtMaxSpaceInPool,proto3" json:"max_bytes_to_merge_at_max_space_in_pool,omitempty"`
	// Minimum number of bytes in a data part that can be stored in Wide format.
	//
	// Default value: **10485760** (10 MiB).
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#min_bytes_for_wide_part).
	MinBytesForWidePart *wrapperspb.Int64Value `protobuf:"bytes,11,opt,name=min_bytes_for_wide_part,json=minBytesForWidePart,proto3" json:"min_bytes_for_wide_part,omitempty"`
	// Minimum number of rows in a data part that can be stored in Wide format.
	//
	// Default value: **0**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#min_rows_for_wide_part).
	MinRowsForWidePart *wrapperspb.Int64Value `protobuf:"bytes,12,opt,name=min_rows_for_wide_part,json=minRowsForWidePart,proto3" json:"min_rows_for_wide_part,omitempty"`
	// Minimum period to clean old queue logs, blocks hashes and parts.
	//
	// Default value: **30**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#cleanup_delay_period).
	CleanupDelayPeriod *wrapperspb.Int64Value `protobuf:"bytes,19,opt,name=cleanup_delay_period,json=cleanupDelayPeriod,proto3" json:"cleanup_delay_period,omitempty"`
	// Maximum period to clean old queue logs, blocks hashes and parts.
	//
	// Default value: **300** (5 minutes).
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#max_cleanup_delay_period).
	MaxCleanupDelayPeriod *wrapperspb.Int64Value `protobuf:"bytes,28,opt,name=max_cleanup_delay_period,json=maxCleanupDelayPeriod,proto3" json:"max_cleanup_delay_period,omitempty"`
	// Minimum time to wait before trying to select parts to merge again after no parts were selected. A lower setting value will trigger
	// selecting tasks in background_schedule_pool frequently which result in large amount of requests to Keeper in large-scale clusters.
	//
	// Default value: **5000** (5 seconds).
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#merge_selecting_sleep_ms).
	MergeSelectingSleepMs *wrapperspb.Int64Value `protobuf:"bytes,24,opt,name=merge_selecting_sleep_ms,json=mergeSelectingSleepMs,proto3" json:"merge_selecting_sleep_ms,omitempty"`
	// Maximum time to wait before trying to select parts to merge again after no parts were selected. A lower setting value will trigger
	// selecting tasks in background_schedule_pool frequently which result in large amount of requests to Keeper in large-scale clusters.
	//
	// Default value: **60000** (1 minute).
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#max_merge_selecting_sleep_ms).
	MaxMergeSelectingSleepMs *wrapperspb.Int64Value `protobuf:"bytes,27,opt,name=max_merge_selecting_sleep_ms,json=maxMergeSelectingSleepMs,proto3" json:"max_merge_selecting_sleep_ms,omitempty"`
	// Merge parts if every part in the range is older than the specified value. **0** means disabled.
	//
	// Default value: **0**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#min_age_to_force_merge_seconds).
	MinAgeToForceMergeSeconds *wrapperspb.Int64Value `protobuf:"bytes,22,opt,name=min_age_to_force_merge_seconds,json=minAgeToForceMergeSeconds,proto3" json:"min_age_to_force_merge_seconds,omitempty"`
	// Whether **min_age_to_force_merge_seconds** should be applied only on the entire partition and not on subset.
	//
	// Default value: **false**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#min_age_to_force_merge_on_partition_only).
	MinAgeToForceMergeOnPartitionOnly *wrapperspb.BoolValue `protobuf:"bytes,23,opt,name=min_age_to_force_merge_on_partition_only,json=minAgeToForceMergeOnPartitionOnly,proto3" json:"min_age_to_force_merge_on_partition_only,omitempty"`
	// The number of rows that are read from the merged parts into memory.
	//
	// Default value: **8192**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#merge_max_block_size).
	MergeMaxBlockSize *wrapperspb.Int64Value `protobuf:"bytes,25,opt,name=merge_max_block_size,json=mergeMaxBlockSize,proto3" json:"merge_max_block_size,omitempty"`
	// Determines the behavior of background merges for MergeTree tables with projections.
	//
	// Default value: **DEDUPLICATE_MERGE_PROJECTION_MODE_THROW**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#deduplicate_merge_projection_mode).
	DeduplicateMergeProjectionMode ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode `protobuf:"varint,29,opt,name=deduplicate_merge_projection_mode,json=deduplicateMergeProjectionMode,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode" json:"deduplicate_merge_projection_mode,omitempty"`
	// Determines the behavior of lightweight deletes for MergeTree tables with projections.
	//
	// Default value: **LIGHTWEIGHT_MUTATION_PROJECTION_MODE_THROW**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#lightweight_mutation_projection_mode).
	LightweightMutationProjectionMode ClickhouseConfig_MergeTree_LightweightMutationProjectionMode `protobuf:"varint,30,opt,name=lightweight_mutation_projection_mode,json=lightweightMutationProjectionMode,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_MergeTree_LightweightMutationProjectionMode" json:"lightweight_mutation_projection_mode,omitempty"`
	// The number of most recently inserted blocks for which ClickHouse Keeper stores hash sums to check for duplicates.
	//
	// Default value: **1000** for versions 23.11 and higher, **100** for versions 23.10 and lower.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#replicated_deduplication_window).
	ReplicatedDeduplicationWindow *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=replicated_deduplication_window,json=replicatedDeduplicationWindow,proto3" json:"replicated_deduplication_window,omitempty"`
	// The number of seconds after which the hash sums of the inserted blocks are removed from ClickHouse Keeper.
	//
	// Default value: **604800** (7 days).
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#replicated_deduplication_window_seconds).
	ReplicatedDeduplicationWindowSeconds *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=replicated_deduplication_window_seconds,json=replicatedDeduplicationWindowSeconds,proto3" json:"replicated_deduplication_window_seconds,omitempty"`
	// Do fsync for every inserted part. Significantly decreases performance of inserts, not recommended to use with wide parts.
	//
	// Default value: **false**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#fsync_after_insert).
	FsyncAfterInsert *wrapperspb.BoolValue `protobuf:"bytes,32,opt,name=fsync_after_insert,json=fsyncAfterInsert,proto3" json:"fsync_after_insert,omitempty"`
	// Do fsync for part directory after all part operations (writes, renames, etc.).
	//
	// Default value: **false**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#fsync_part_directory).
	FsyncPartDirectory *wrapperspb.BoolValue `protobuf:"bytes,33,opt,name=fsync_part_directory,json=fsyncPartDirectory,proto3" json:"fsync_part_directory,omitempty"`
	// Minimal number of compressed bytes to do fsync for part after fetch. **0** means disabled.
	//
	// Default value: **0**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#min_compressed_bytes_to_fsync_after_fetch).
	MinCompressedBytesToFsyncAfterFetch *wrapperspb.Int64Value `protobuf:"bytes,34,opt,name=min_compressed_bytes_to_fsync_after_fetch,json=minCompressedBytesToFsyncAfterFetch,proto3" json:"min_compressed_bytes_to_fsync_after_fetch,omitempty"`
	// Minimal number of compressed bytes to do fsync for part after merge. **0** means disabled.
	//
	// Default value: **0**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#min_compressed_bytes_to_fsync_after_merge).
	MinCompressedBytesToFsyncAfterMerge *wrapperspb.Int64Value `protobuf:"bytes,35,opt,name=min_compressed_bytes_to_fsync_after_merge,json=minCompressedBytesToFsyncAfterMerge,proto3" json:"min_compressed_bytes_to_fsync_after_merge,omitempty"`
	// Minimal number of rows to do fsync for part after merge. **0** means disabled.
	//
	// Default value: **0**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#min_rows_to_fsync_after_merge).
	MinRowsToFsyncAfterMerge *wrapperspb.Int64Value `protobuf:"bytes,36,opt,name=min_rows_to_fsync_after_merge,json=minRowsToFsyncAfterMerge,proto3" json:"min_rows_to_fsync_after_merge,omitempty"`
	// Controls whether data parts are fully dropped in MergeTree tables when all rows in that part have expired according to their **TTL** settings.
	// * **true** - the entire part is dropped if all rows in that part have expired according to their **TTL** settings.
	// * **false** - only the rows that have expired based on their **TTL** settings are removed.
	//
	// Default value: **false**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#ttl_only_drop_parts).
	TtlOnlyDropParts *wrapperspb.BoolValue `protobuf:"bytes,13,opt,name=ttl_only_drop_parts,json=ttlOnlyDropParts,proto3" json:"ttl_only_drop_parts,omitempty"`
	// Minimum delay in seconds before repeating a merge with delete TTL.
	//
	// Default value: **14400** (4 hours).
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#merge_with_ttl_timeout).
	MergeWithTtlTimeout *wrapperspb.Int64Value `protobuf:"bytes,15,opt,name=merge_with_ttl_timeout,json=mergeWithTtlTimeout,proto3" json:"merge_with_ttl_timeout,omitempty"`
	// Minimum delay in seconds before repeating a merge with recompression TTL.
	//
	// Default value: **14400** (4 hours).
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#merge_with_recompression_ttl_timeout).
	MergeWithRecompressionTtlTimeout *wrapperspb.Int64Value `protobuf:"bytes,16,opt,name=merge_with_recompression_ttl_timeout,json=mergeWithRecompressionTtlTimeout,proto3" json:"merge_with_recompression_ttl_timeout,omitempty"`
	// When there is more than specified number of merges with TTL entries in pool, do not assign new merge with TTL.
	// This is to leave free threads for regular merges and avoid "Too many parts" errors.
	//
	// Default value: **2**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#max_number_of_merges_with_ttl_in_pool).
	MaxNumberOfMergesWithTtlInPool *wrapperspb.Int64Value `protobuf:"bytes,18,opt,name=max_number_of_merges_with_ttl_in_pool,json=maxNumberOfMergesWithTtlInPool,proto3" json:"max_number_of_merges_with_ttl_in_pool,omitempty"`
	// Only recalculate ttl info when **MATERIALIZE TTL**.
	//
	// Default value: **true** for versions 25.2 and higher, **false** for versions 25.1 and lower.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#materialize_ttl_recalculate_only).
	MaterializeTtlRecalculateOnly *wrapperspb.BoolValue `protobuf:"bytes,31,opt,name=materialize_ttl_recalculate_only,json=materializeTtlRecalculateOnly,proto3" json:"materialize_ttl_recalculate_only,omitempty"`
	// Enables the check at table creation, that the data type of a column for sampling or sampling expression is correct.
	// The data type must be one of unsigned integer types: UInt8, UInt16, UInt32, UInt64.
	//
	// Default value: **true**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/settings/merge-tree-settings#check_sample_column_is_correct).
	CheckSampleColumnIsCorrect *wrapperspb.BoolValue `protobuf:"bytes,26,opt,name=check_sample_column_is_correct,json=checkSampleColumnIsCorrect,proto3" json:"check_sample_column_is_correct,omitempty"`
	// Setting is automatically enabled if cloud storage is enabled, disabled otherwise.
	//
	// Default value: **true**.
	//
	// Deprecated: Marked as deprecated in yandex/cloud/mdb/clickhouse/v1/config/clickhouse.proto.
	AllowRemoteFsZeroCopyReplication *wrapperspb.BoolValue `protobuf:"bytes,14,opt,name=allow_remote_fs_zero_copy_replication,json=allowRemoteFsZeroCopyReplication,proto3" json:"allow_remote_fs_zero_copy_replication,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *ClickhouseConfig_MergeTree) Reset() {
	*x = ClickhouseConfig_MergeTree{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_MergeTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_MergeTree) ProtoMessage() {}

func (x *ClickhouseConfig_MergeTree) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_MergeTree.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_MergeTree) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ClickhouseConfig_MergeTree) GetPartsToDelayInsert() *wrapperspb.Int64Value {
	if x != nil {
		return x.PartsToDelayInsert
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetPartsToThrowInsert() *wrapperspb.Int64Value {
	if x != nil {
		return x.PartsToThrowInsert
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetInactivePartsToDelayInsert() *wrapperspb.Int64Value {
	if x != nil {
		return x.InactivePartsToDelayInsert
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetInactivePartsToThrowInsert() *wrapperspb.Int64Value {
	if x != nil {
		return x.InactivePartsToThrowInsert
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMaxAvgPartSizeForTooManyParts() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxAvgPartSizeForTooManyParts
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMaxPartsInTotal() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxPartsInTotal
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMaxReplicatedMergesInQueue() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxReplicatedMergesInQueue
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetNumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge() *wrapperspb.Int64Value {
	if x != nil {
		return x.NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetNumberOfFreeEntriesInPoolToExecuteMutation() *wrapperspb.Int64Value {
	if x != nil {
		return x.NumberOfFreeEntriesInPoolToExecuteMutation
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMaxBytesToMergeAtMinSpaceInPool() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxBytesToMergeAtMinSpaceInPool
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMaxBytesToMergeAtMaxSpaceInPool() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxBytesToMergeAtMaxSpaceInPool
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMinBytesForWidePart() *wrapperspb.Int64Value {
	if x != nil {
		return x.MinBytesForWidePart
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMinRowsForWidePart() *wrapperspb.Int64Value {
	if x != nil {
		return x.MinRowsForWidePart
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetCleanupDelayPeriod() *wrapperspb.Int64Value {
	if x != nil {
		return x.CleanupDelayPeriod
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMaxCleanupDelayPeriod() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxCleanupDelayPeriod
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMergeSelectingSleepMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.MergeSelectingSleepMs
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMaxMergeSelectingSleepMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxMergeSelectingSleepMs
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMinAgeToForceMergeSeconds() *wrapperspb.Int64Value {
	if x != nil {
		return x.MinAgeToForceMergeSeconds
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMinAgeToForceMergeOnPartitionOnly() *wrapperspb.BoolValue {
	if x != nil {
		return x.MinAgeToForceMergeOnPartitionOnly
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMergeMaxBlockSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MergeMaxBlockSize
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetDeduplicateMergeProjectionMode() ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode {
	if x != nil {
		return x.DeduplicateMergeProjectionMode
	}
	return ClickhouseConfig_MergeTree_DEDUPLICATE_MERGE_PROJECTION_MODE_UNSPECIFIED
}

func (x *ClickhouseConfig_MergeTree) GetLightweightMutationProjectionMode() ClickhouseConfig_MergeTree_LightweightMutationProjectionMode {
	if x != nil {
		return x.LightweightMutationProjectionMode
	}
	return ClickhouseConfig_MergeTree_LIGHTWEIGHT_MUTATION_PROJECTION_MODE_UNSPECIFIED
}

func (x *ClickhouseConfig_MergeTree) GetReplicatedDeduplicationWindow() *wrapperspb.Int64Value {
	if x != nil {
		return x.ReplicatedDeduplicationWindow
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetReplicatedDeduplicationWindowSeconds() *wrapperspb.Int64Value {
	if x != nil {
		return x.ReplicatedDeduplicationWindowSeconds
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetFsyncAfterInsert() *wrapperspb.BoolValue {
	if x != nil {
		return x.FsyncAfterInsert
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetFsyncPartDirectory() *wrapperspb.BoolValue {
	if x != nil {
		return x.FsyncPartDirectory
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMinCompressedBytesToFsyncAfterFetch() *wrapperspb.Int64Value {
	if x != nil {
		return x.MinCompressedBytesToFsyncAfterFetch
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMinCompressedBytesToFsyncAfterMerge() *wrapperspb.Int64Value {
	if x != nil {
		return x.MinCompressedBytesToFsyncAfterMerge
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMinRowsToFsyncAfterMerge() *wrapperspb.Int64Value {
	if x != nil {
		return x.MinRowsToFsyncAfterMerge
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetTtlOnlyDropParts() *wrapperspb.BoolValue {
	if x != nil {
		return x.TtlOnlyDropParts
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMergeWithTtlTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.MergeWithTtlTimeout
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMergeWithRecompressionTtlTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.MergeWithRecompressionTtlTimeout
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMaxNumberOfMergesWithTtlInPool() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxNumberOfMergesWithTtlInPool
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetMaterializeTtlRecalculateOnly() *wrapperspb.BoolValue {
	if x != nil {
		return x.MaterializeTtlRecalculateOnly
	}
	return nil
}

func (x *ClickhouseConfig_MergeTree) GetCheckSampleColumnIsCorrect() *wrapperspb.BoolValue {
	if x != nil {
		return x.CheckSampleColumnIsCorrect
	}
	return nil
}

// Deprecated: Marked as deprecated in yandex/cloud/mdb/clickhouse/v1/config/clickhouse.proto.
func (x *ClickhouseConfig_MergeTree) GetAllowRemoteFsZeroCopyReplication() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowRemoteFsZeroCopyReplication
	}
	return nil
}

// Compression settings.
// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#compression).
type ClickhouseConfig_Compression struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Compression method to use for the specified combination of **min_part_size** and **min_part_size_ratio**.
	Method ClickhouseConfig_Compression_Method `protobuf:"varint,1,opt,name=method,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_Compression_Method" json:"method,omitempty"`
	// The minimum size of a data part.
	MinPartSize int64 `protobuf:"varint,2,opt,name=min_part_size,json=minPartSize,proto3" json:"min_part_size,omitempty"`
	// The ratio of the data part size to the table size.
	MinPartSizeRatio float64 `protobuf:"fixed64,3,opt,name=min_part_size_ratio,json=minPartSizeRatio,proto3" json:"min_part_size_ratio,omitempty"`
	// Compression level.
	Level         *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=level,proto3" json:"level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConfig_Compression) Reset() {
	*x = ClickhouseConfig_Compression{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_Compression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_Compression) ProtoMessage() {}

func (x *ClickhouseConfig_Compression) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_Compression.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_Compression) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ClickhouseConfig_Compression) GetMethod() ClickhouseConfig_Compression_Method {
	if x != nil {
		return x.Method
	}
	return ClickhouseConfig_Compression_METHOD_UNSPECIFIED
}

func (x *ClickhouseConfig_Compression) GetMinPartSize() int64 {
	if x != nil {
		return x.MinPartSize
	}
	return 0
}

func (x *ClickhouseConfig_Compression) GetMinPartSizeRatio() float64 {
	if x != nil {
		return x.MinPartSizeRatio
	}
	return 0
}

func (x *ClickhouseConfig_Compression) GetLevel() *wrapperspb.Int64Value {
	if x != nil {
		return x.Level
	}
	return nil
}

// External dictionary configuration.
type ClickhouseConfig_ExternalDictionary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the external dictionary.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Structure of the external dictionary.
	Structure *ClickhouseConfig_ExternalDictionary_Structure `protobuf:"bytes,2,opt,name=structure,proto3" json:"structure,omitempty"`
	// Layout determining how to store the dictionary in memory.
	//
	// For details, see https://clickhouse.com/docs/sql-reference/dictionaries#ways-to-store-dictionaries-in-memory.
	Layout *ClickhouseConfig_ExternalDictionary_Layout `protobuf:"bytes,3,opt,name=layout,proto3" json:"layout,omitempty"`
	// Types that are valid to be assigned to Lifetime:
	//
	//	*ClickhouseConfig_ExternalDictionary_FixedLifetime
	//	*ClickhouseConfig_ExternalDictionary_LifetimeRange
	Lifetime isClickhouseConfig_ExternalDictionary_Lifetime `protobuf_oneof:"lifetime"`
	// Types that are valid to be assigned to Source:
	//
	//	*ClickhouseConfig_ExternalDictionary_HttpSource_
	//	*ClickhouseConfig_ExternalDictionary_MysqlSource_
	//	*ClickhouseConfig_ExternalDictionary_ClickhouseSource_
	//	*ClickhouseConfig_ExternalDictionary_MongodbSource_
	//	*ClickhouseConfig_ExternalDictionary_PostgresqlSource_
	Source        isClickhouseConfig_ExternalDictionary_Source `protobuf_oneof:"source"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConfig_ExternalDictionary) Reset() {
	*x = ClickhouseConfig_ExternalDictionary{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_ExternalDictionary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ClickhouseConfig_ExternalDictionary) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary) GetStructure() *ClickhouseConfig_ExternalDictionary_Structure {
	if x != nil {
		return x.Structure
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary) GetLayout() *ClickhouseConfig_ExternalDictionary_Layout {
	if x != nil {
		return x.Layout
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary) GetLifetime() isClickhouseConfig_ExternalDictionary_Lifetime {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary) GetFixedLifetime() int64 {
	if x != nil {
		if x, ok := x.Lifetime.(*ClickhouseConfig_ExternalDictionary_FixedLifetime); ok {
			return x.FixedLifetime
		}
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary) GetLifetimeRange() *ClickhouseConfig_ExternalDictionary_Range {
	if x != nil {
		if x, ok := x.Lifetime.(*ClickhouseConfig_ExternalDictionary_LifetimeRange); ok {
			return x.LifetimeRange
		}
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary) GetSource() isClickhouseConfig_ExternalDictionary_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary) GetHttpSource() *ClickhouseConfig_ExternalDictionary_HttpSource {
	if x != nil {
		if x, ok := x.Source.(*ClickhouseConfig_ExternalDictionary_HttpSource_); ok {
			return x.HttpSource
		}
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary) GetMysqlSource() *ClickhouseConfig_ExternalDictionary_MysqlSource {
	if x != nil {
		if x, ok := x.Source.(*ClickhouseConfig_ExternalDictionary_MysqlSource_); ok {
			return x.MysqlSource
		}
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary) GetClickhouseSource() *ClickhouseConfig_ExternalDictionary_ClickhouseSource {
	if x != nil {
		if x, ok := x.Source.(*ClickhouseConfig_ExternalDictionary_ClickhouseSource_); ok {
			return x.ClickhouseSource
		}
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary) GetMongodbSource() *ClickhouseConfig_ExternalDictionary_MongodbSource {
	if x != nil {
		if x, ok := x.Source.(*ClickhouseConfig_ExternalDictionary_MongodbSource_); ok {
			return x.MongodbSource
		}
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary) GetPostgresqlSource() *ClickhouseConfig_ExternalDictionary_PostgresqlSource {
	if x != nil {
		if x, ok := x.Source.(*ClickhouseConfig_ExternalDictionary_PostgresqlSource_); ok {
			return x.PostgresqlSource
		}
	}
	return nil
}

type isClickhouseConfig_ExternalDictionary_Lifetime interface {
	isClickhouseConfig_ExternalDictionary_Lifetime()
}

type ClickhouseConfig_ExternalDictionary_FixedLifetime struct {
	// Fixed interval between dictionary updates.
	FixedLifetime int64 `protobuf:"varint,4,opt,name=fixed_lifetime,json=fixedLifetime,proto3,oneof"`
}

type ClickhouseConfig_ExternalDictionary_LifetimeRange struct {
	// Range of intervals between dictionary updates for ClickHouse to choose from.
	LifetimeRange *ClickhouseConfig_ExternalDictionary_Range `protobuf:"bytes,5,opt,name=lifetime_range,json=lifetimeRange,proto3,oneof"`
}

func (*ClickhouseConfig_ExternalDictionary_FixedLifetime) isClickhouseConfig_ExternalDictionary_Lifetime() {
}

func (*ClickhouseConfig_ExternalDictionary_LifetimeRange) isClickhouseConfig_ExternalDictionary_Lifetime() {
}

type isClickhouseConfig_ExternalDictionary_Source interface {
	isClickhouseConfig_ExternalDictionary_Source()
}

type ClickhouseConfig_ExternalDictionary_HttpSource_ struct {
	// HTTP source for the dictionary.
	HttpSource *ClickhouseConfig_ExternalDictionary_HttpSource `protobuf:"bytes,6,opt,name=http_source,json=httpSource,proto3,oneof"`
}

type ClickhouseConfig_ExternalDictionary_MysqlSource_ struct {
	// MySQL source for the dictionary.
	MysqlSource *ClickhouseConfig_ExternalDictionary_MysqlSource `protobuf:"bytes,7,opt,name=mysql_source,json=mysqlSource,proto3,oneof"`
}

type ClickhouseConfig_ExternalDictionary_ClickhouseSource_ struct {
	// ClickHouse source for the dictionary.
	ClickhouseSource *ClickhouseConfig_ExternalDictionary_ClickhouseSource `protobuf:"bytes,8,opt,name=clickhouse_source,json=clickhouseSource,proto3,oneof"`
}

type ClickhouseConfig_ExternalDictionary_MongodbSource_ struct {
	// MongoDB source for the dictionary.
	MongodbSource *ClickhouseConfig_ExternalDictionary_MongodbSource `protobuf:"bytes,9,opt,name=mongodb_source,json=mongodbSource,proto3,oneof"`
}

type ClickhouseConfig_ExternalDictionary_PostgresqlSource_ struct {
	// PostgreSQL source for the dictionary.
	PostgresqlSource *ClickhouseConfig_ExternalDictionary_PostgresqlSource `protobuf:"bytes,10,opt,name=postgresql_source,json=postgresqlSource,proto3,oneof"`
}

func (*ClickhouseConfig_ExternalDictionary_HttpSource_) isClickhouseConfig_ExternalDictionary_Source() {
}

func (*ClickhouseConfig_ExternalDictionary_MysqlSource_) isClickhouseConfig_ExternalDictionary_Source() {
}

func (*ClickhouseConfig_ExternalDictionary_ClickhouseSource_) isClickhouseConfig_ExternalDictionary_Source() {
}

func (*ClickhouseConfig_ExternalDictionary_MongodbSource_) isClickhouseConfig_ExternalDictionary_Source() {
}

func (*ClickhouseConfig_ExternalDictionary_PostgresqlSource_) isClickhouseConfig_ExternalDictionary_Source() {
}

// Rollup settings for the GraphiteMergeTree table engine.
// For details, see [ClickHouse documentation](https://clickhouse.com/docs/operations/server-configuration-parameters/settings#graphite-rollup).
type ClickhouseConfig_GraphiteRollup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name for the specified combination of settings for Graphite rollup.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pattern to use for the rollup.
	Patterns []*ClickhouseConfig_GraphiteRollup_Pattern `protobuf:"bytes,2,rep,name=patterns,proto3" json:"patterns,omitempty"`
	// The name of the column storing the metric name (Graphite sensor).
	//
	// Default value: **Path**.
	PathColumnName string `protobuf:"bytes,3,opt,name=path_column_name,json=pathColumnName,proto3" json:"path_column_name,omitempty"`
	// The name of the column storing the time of measuring the metric.
	//
	// Default value: **Time**.
	TimeColumnName string `protobuf:"bytes,4,opt,name=time_column_name,json=timeColumnName,proto3" json:"time_column_name,omitempty"`
	// The name of the column storing the value of the metric at the time set in **time_column_name**.
	//
	// Default value: **Value**.
	ValueColumnName string `protobuf:"bytes,5,opt,name=value_column_name,json=valueColumnName,proto3" json:"value_column_name,omitempty"`
	// The name of the column storing the version of the metric.
	//
	// Default value: **Timestamp**.
	VersionColumnName string `protobuf:"bytes,6,opt,name=version_column_name,json=versionColumnName,proto3" json:"version_column_name,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ClickhouseConfig_GraphiteRollup) Reset() {
	*x = ClickhouseConfig_GraphiteRollup{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_GraphiteRollup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_GraphiteRollup) ProtoMessage() {}

func (x *ClickhouseConfig_GraphiteRollup) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_GraphiteRollup.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_GraphiteRollup) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 4}
}

func (x *ClickhouseConfig_GraphiteRollup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClickhouseConfig_GraphiteRollup) GetPatterns() []*ClickhouseConfig_GraphiteRollup_Pattern {
	if x != nil {
		return x.Patterns
	}
	return nil
}

func (x *ClickhouseConfig_GraphiteRollup) GetPathColumnName() string {
	if x != nil {
		return x.PathColumnName
	}
	return ""
}

func (x *ClickhouseConfig_GraphiteRollup) GetTimeColumnName() string {
	if x != nil {
		return x.TimeColumnName
	}
	return ""
}

func (x *ClickhouseConfig_GraphiteRollup) GetValueColumnName() string {
	if x != nil {
		return x.ValueColumnName
	}
	return ""
}

func (x *ClickhouseConfig_GraphiteRollup) GetVersionColumnName() string {
	if x != nil {
		return x.VersionColumnName
	}
	return ""
}

// Kafka configuration settings.
// For details, see [librdkafka documentation](https://github.com/confluentinc/librdkafka/blob/master/CONFIGURATION.md).
type ClickhouseConfig_Kafka struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Protocol used to communicate with brokers.
	//
	// Default value: **SECURITY_PROTOCOL_PLAINTEXT**.
	SecurityProtocol ClickhouseConfig_Kafka_SecurityProtocol `protobuf:"varint,1,opt,name=security_protocol,json=securityProtocol,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_Kafka_SecurityProtocol" json:"security_protocol,omitempty"`
	// SASL mechanism to use for authentication.
	//
	// Default value: **SASL_MECHANISM_GSSAPI**.
	SaslMechanism ClickhouseConfig_Kafka_SaslMechanism `protobuf:"varint,2,opt,name=sasl_mechanism,json=saslMechanism,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_Kafka_SaslMechanism" json:"sasl_mechanism,omitempty"`
	// SASL username for use with the PLAIN and SASL-SCRAM mechanisms.
	SaslUsername string `protobuf:"bytes,3,opt,name=sasl_username,json=saslUsername,proto3" json:"sasl_username,omitempty"`
	// SASL password for use with the PLAIN and SASL-SCRAM mechanisms.
	SaslPassword string `protobuf:"bytes,4,opt,name=sasl_password,json=saslPassword,proto3" json:"sasl_password,omitempty"`
	// Enable OpenSSL's builtin broker (server) certificate verification.
	//
	// Default value: **true**.
	EnableSslCertificateVerification *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=enable_ssl_certificate_verification,json=enableSslCertificateVerification,proto3" json:"enable_ssl_certificate_verification,omitempty"`
	// Maximum allowed time between calls to consume messages for high-level consumers.
	// If this interval is exceeded the consumer is considered failed and the group will
	// rebalance in order to reassign the partitions to another consumer group member.
	//
	// Default value: **300000** (5 minutes).
	MaxPollIntervalMs *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=max_poll_interval_ms,json=maxPollIntervalMs,proto3" json:"max_poll_interval_ms,omitempty"`
	// Client group session and failure detection timeout. The consumer sends periodic heartbeats (heartbeat.interval.ms)
	// to indicate its liveness to the broker. If no hearts are received by the broker for a group member within
	// the session timeout, the broker will remove the consumer from the group and trigger a rebalance.
	//
	// Default value: **45000** (45 seconds).
	SessionTimeoutMs *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=session_timeout_ms,json=sessionTimeoutMs,proto3" json:"session_timeout_ms,omitempty"`
	// Debug context to enable.
	Debug ClickhouseConfig_Kafka_Debug `protobuf:"varint,8,opt,name=debug,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_Kafka_Debug" json:"debug,omitempty"`
	// Action to take when there is no initial offset in offset store or the desired offset is out of range.
	//
	// Default value: **AUTO_OFFSET_RESET_LARGEST**.
	AutoOffsetReset ClickhouseConfig_Kafka_AutoOffsetReset `protobuf:"varint,9,opt,name=auto_offset_reset,json=autoOffsetReset,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_Kafka_AutoOffsetReset" json:"auto_offset_reset,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ClickhouseConfig_Kafka) Reset() {
	*x = ClickhouseConfig_Kafka{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_Kafka) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_Kafka) ProtoMessage() {}

func (x *ClickhouseConfig_Kafka) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_Kafka.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_Kafka) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 5}
}

func (x *ClickhouseConfig_Kafka) GetSecurityProtocol() ClickhouseConfig_Kafka_SecurityProtocol {
	if x != nil {
		return x.SecurityProtocol
	}
	return ClickhouseConfig_Kafka_SECURITY_PROTOCOL_UNSPECIFIED
}

func (x *ClickhouseConfig_Kafka) GetSaslMechanism() ClickhouseConfig_Kafka_SaslMechanism {
	if x != nil {
		return x.SaslMechanism
	}
	return ClickhouseConfig_Kafka_SASL_MECHANISM_UNSPECIFIED
}

func (x *ClickhouseConfig_Kafka) GetSaslUsername() string {
	if x != nil {
		return x.SaslUsername
	}
	return ""
}

func (x *ClickhouseConfig_Kafka) GetSaslPassword() string {
	if x != nil {
		return x.SaslPassword
	}
	return ""
}

func (x *ClickhouseConfig_Kafka) GetEnableSslCertificateVerification() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableSslCertificateVerification
	}
	return nil
}

func (x *ClickhouseConfig_Kafka) GetMaxPollIntervalMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxPollIntervalMs
	}
	return nil
}

func (x *ClickhouseConfig_Kafka) GetSessionTimeoutMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.SessionTimeoutMs
	}
	return nil
}

func (x *ClickhouseConfig_Kafka) GetDebug() ClickhouseConfig_Kafka_Debug {
	if x != nil {
		return x.Debug
	}
	return ClickhouseConfig_Kafka_DEBUG_UNSPECIFIED
}

func (x *ClickhouseConfig_Kafka) GetAutoOffsetReset() ClickhouseConfig_Kafka_AutoOffsetReset {
	if x != nil {
		return x.AutoOffsetReset
	}
	return ClickhouseConfig_Kafka_AUTO_OFFSET_RESET_UNSPECIFIED
}

type ClickhouseConfig_KafkaTopic struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Kafka topic name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Kafka topic settings.
	Settings      *ClickhouseConfig_Kafka `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConfig_KafkaTopic) Reset() {
	*x = ClickhouseConfig_KafkaTopic{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_KafkaTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_KafkaTopic) ProtoMessage() {}

func (x *ClickhouseConfig_KafkaTopic) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_KafkaTopic.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_KafkaTopic) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 6}
}

func (x *ClickhouseConfig_KafkaTopic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClickhouseConfig_KafkaTopic) GetSettings() *ClickhouseConfig_Kafka {
	if x != nil {
		return x.Settings
	}
	return nil
}

// RabbitMQ integration settings.
// For details, see [ClickHouse documentation](https://clickhouse.com/docs/engines/table-engines/integrations/rabbitmq).
type ClickhouseConfig_Rabbitmq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// RabbitMQ username.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// RabbitMQ password.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// RabbitMQ virtual host.
	Vhost         string `protobuf:"bytes,3,opt,name=vhost,proto3" json:"vhost,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConfig_Rabbitmq) Reset() {
	*x = ClickhouseConfig_Rabbitmq{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_Rabbitmq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_Rabbitmq) ProtoMessage() {}

func (x *ClickhouseConfig_Rabbitmq) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_Rabbitmq.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_Rabbitmq) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 7}
}

func (x *ClickhouseConfig_Rabbitmq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ClickhouseConfig_Rabbitmq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ClickhouseConfig_Rabbitmq) GetVhost() string {
	if x != nil {
		return x.Vhost
	}
	return ""
}

type ClickhouseConfig_QueryMaskingRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name for the rule.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// RE2 compatible regular expression.
	Regexp string `protobuf:"bytes,2,opt,name=regexp,proto3" json:"regexp,omitempty"`
	// Substitution string for sensitive data.
	//
	// Default value: six asterisks.
	Replace       string `protobuf:"bytes,3,opt,name=replace,proto3" json:"replace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConfig_QueryMaskingRule) Reset() {
	*x = ClickhouseConfig_QueryMaskingRule{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_QueryMaskingRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_QueryMaskingRule) ProtoMessage() {}

func (x *ClickhouseConfig_QueryMaskingRule) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_QueryMaskingRule.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_QueryMaskingRule) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 8}
}

func (x *ClickhouseConfig_QueryMaskingRule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClickhouseConfig_QueryMaskingRule) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

func (x *ClickhouseConfig_QueryMaskingRule) GetReplace() string {
	if x != nil {
		return x.Replace
	}
	return ""
}

// Query cache configuration.
type ClickhouseConfig_QueryCache struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum cache size in bytes.
	//
	// Default value: **1073741824** (1 GiB).
	MaxSizeInBytes *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=max_size_in_bytes,json=maxSizeInBytes,proto3" json:"max_size_in_bytes,omitempty"`
	// The maximum number of **SELECT** query results stored in the cache.
	//
	// Default value: **1024**.
	MaxEntries *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=max_entries,json=maxEntries,proto3" json:"max_entries,omitempty"`
	// The maximum size in bytes **SELECT** query results may have to be saved in the cache.
	//
	// Default value: **1048576** (1 MiB).
	MaxEntrySizeInBytes *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=max_entry_size_in_bytes,json=maxEntrySizeInBytes,proto3" json:"max_entry_size_in_bytes,omitempty"`
	// The maximum number of rows **SELECT** query results may have to be saved in the cache.
	//
	// Default value: **30000000**.
	MaxEntrySizeInRows *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=max_entry_size_in_rows,json=maxEntrySizeInRows,proto3" json:"max_entry_size_in_rows,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ClickhouseConfig_QueryCache) Reset() {
	*x = ClickhouseConfig_QueryCache{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_QueryCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_QueryCache) ProtoMessage() {}

func (x *ClickhouseConfig_QueryCache) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_QueryCache.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_QueryCache) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 9}
}

func (x *ClickhouseConfig_QueryCache) GetMaxSizeInBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxSizeInBytes
	}
	return nil
}

func (x *ClickhouseConfig_QueryCache) GetMaxEntries() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxEntries
	}
	return nil
}

func (x *ClickhouseConfig_QueryCache) GetMaxEntrySizeInBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxEntrySizeInBytes
	}
	return nil
}

func (x *ClickhouseConfig_QueryCache) GetMaxEntrySizeInRows() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxEntrySizeInRows
	}
	return nil
}

// JDBC bridge configuration for queries to external databases.
type ClickhouseConfig_JdbcBridge struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Host of jdbc bridge.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Port of jdbc bridge.
	//
	// Default value: **9019**.
	Port          *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConfig_JdbcBridge) Reset() {
	*x = ClickhouseConfig_JdbcBridge{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_JdbcBridge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_JdbcBridge) ProtoMessage() {}

func (x *ClickhouseConfig_JdbcBridge) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_JdbcBridge.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_JdbcBridge) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 10}
}

func (x *ClickhouseConfig_JdbcBridge) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ClickhouseConfig_JdbcBridge) GetPort() *wrapperspb.Int64Value {
	if x != nil {
		return x.Port
	}
	return nil
}

// ClickHouse macro.
type ClickhouseConfig_Macro struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the macro.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Value of the macro.
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConfig_Macro) Reset() {
	*x = ClickhouseConfig_Macro{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_Macro) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_Macro) ProtoMessage() {}

func (x *ClickhouseConfig_Macro) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_Macro.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_Macro) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 11}
}

func (x *ClickhouseConfig_Macro) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClickhouseConfig_Macro) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Configuration of external dictionary structure.
type ClickhouseConfig_ExternalDictionary_Structure struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Single numeric key column for the dictionary.
	Id *ClickhouseConfig_ExternalDictionary_Structure_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Composite key for the dictionary, containing of one or more key columns.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).
	Key *ClickhouseConfig_ExternalDictionary_Structure_Key `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Field holding the beginning of the range for dictionaries with **RANGE_HASHED** layout.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
	RangeMin *ClickhouseConfig_ExternalDictionary_Structure_Attribute `protobuf:"bytes,4,opt,name=range_min,json=rangeMin,proto3" json:"range_min,omitempty"`
	// Field holding the end of the range for dictionaries with **RANGE_HASHED** layout.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
	RangeMax *ClickhouseConfig_ExternalDictionary_Structure_Attribute `protobuf:"bytes,5,opt,name=range_max,json=rangeMax,proto3" json:"range_max,omitempty"`
	// Description of the fields available for database queries.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
	Attributes    []*ClickhouseConfig_ExternalDictionary_Structure_Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConfig_ExternalDictionary_Structure) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_Structure{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_ExternalDictionary_Structure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_Structure) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_Structure) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_Structure.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_Structure) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *ClickhouseConfig_ExternalDictionary_Structure) GetId() *ClickhouseConfig_ExternalDictionary_Structure_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary_Structure) GetKey() *ClickhouseConfig_ExternalDictionary_Structure_Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary_Structure) GetRangeMin() *ClickhouseConfig_ExternalDictionary_Structure_Attribute {
	if x != nil {
		return x.RangeMin
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary_Structure) GetRangeMax() *ClickhouseConfig_ExternalDictionary_Structure_Attribute {
	if x != nil {
		return x.RangeMax
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary_Structure) GetAttributes() []*ClickhouseConfig_ExternalDictionary_Structure_Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ClickhouseConfig_ExternalDictionary_Layout struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Layout type.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries#ways-to-store-dictionaries-in-memory).
	Type ClickhouseConfig_ExternalDictionary_Layout_Type `protobuf:"varint,1,opt,name=type,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_ExternalDictionary_Layout_Type" json:"type,omitempty"`
	// Number of cells in the cache. Rounded up to a power of two.
	// Applicable only for **CACHE** and **COMPLEX_KEY_CACHE** layout types.
	//
	// Default value: **1000000000**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries#cache).
	SizeInCells int64 `protobuf:"varint,2,opt,name=size_in_cells,json=sizeInCells,proto3" json:"size_in_cells,omitempty"`
	// Allows to read expired keys.
	// Applicable only for **CACHE** and **COMPLEX_KEY_CACHE** layout types.
	//
	// Default value: **false**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries#cache).
	AllowReadExpiredKeys *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=allow_read_expired_keys,json=allowReadExpiredKeys,proto3" json:"allow_read_expired_keys,omitempty"`
	// Max size of update queue.
	// Applicable only for **CACHE** and **COMPLEX_KEY_CACHE** layout types.
	//
	// Default value: **100000**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries#cache).
	MaxUpdateQueueSize int64 `protobuf:"varint,6,opt,name=max_update_queue_size,json=maxUpdateQueueSize,proto3" json:"max_update_queue_size,omitempty"`
	// Max timeout in milliseconds for push update task into queue.
	// Applicable only for **CACHE** and **COMPLEX_KEY_CACHE** layout types.
	//
	// Default value: **10**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries#cache).
	UpdateQueuePushTimeoutMilliseconds int64 `protobuf:"varint,7,opt,name=update_queue_push_timeout_milliseconds,json=updateQueuePushTimeoutMilliseconds,proto3" json:"update_queue_push_timeout_milliseconds,omitempty"`
	// Max wait timeout in milliseconds for update task to complete.
	// Applicable only for **CACHE** and **COMPLEX_KEY_CACHE** layout types.
	//
	// Default value: **60000** (1 minute).
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries#cache).
	QueryWaitTimeoutMilliseconds int64 `protobuf:"varint,8,opt,name=query_wait_timeout_milliseconds,json=queryWaitTimeoutMilliseconds,proto3" json:"query_wait_timeout_milliseconds,omitempty"`
	// Max threads for cache dictionary update.
	// Applicable only for **CACHE** and **COMPLEX_KEY_CACHE** layout types.
	//
	// Default value: **4**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries#cache).
	MaxThreadsForUpdates int64 `protobuf:"varint,9,opt,name=max_threads_for_updates,json=maxThreadsForUpdates,proto3" json:"max_threads_for_updates,omitempty"`
	// Initial dictionary key size.
	// Applicable only for **FLAT** layout type.
	//
	// Default value: **1024**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries#flat).
	InitialArraySize int64 `protobuf:"varint,10,opt,name=initial_array_size,json=initialArraySize,proto3" json:"initial_array_size,omitempty"`
	// Maximum dictionary key size.
	// Applicable only for **FLAT** layout type.
	//
	// Default value: **500000**.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries#flat).
	MaxArraySize int64 `protobuf:"varint,3,opt,name=max_array_size,json=maxArraySize,proto3" json:"max_array_size,omitempty"`
	// Allows to retrieve key attribute using **dictGetString** function.
	// Enabling this option increases memory usage.
	// Applicable only for **IP_TRIE** layout type.
	//
	// For details, see [ClickHouse documentation](https://clickhouse.com/docs/sql-reference/dictionaries#ip_trie).
	AccessToKeyFromAttributes *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=access_to_key_from_attributes,json=accessToKeyFromAttributes,proto3" json:"access_to_key_from_attributes,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *ClickhouseConfig_ExternalDictionary_Layout) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_Layout{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_ExternalDictionary_Layout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_Layout) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_Layout) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_Layout.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_Layout) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *ClickhouseConfig_ExternalDictionary_Layout) GetType() ClickhouseConfig_ExternalDictionary_Layout_Type {
	if x != nil {
		return x.Type
	}
	return ClickhouseConfig_ExternalDictionary_Layout_TYPE_UNSPECIFIED
}

func (x *ClickhouseConfig_ExternalDictionary_Layout) GetSizeInCells() int64 {
	if x != nil {
		return x.SizeInCells
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary_Layout) GetAllowReadExpiredKeys() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowReadExpiredKeys
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary_Layout) GetMaxUpdateQueueSize() int64 {
	if x != nil {
		return x.MaxUpdateQueueSize
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary_Layout) GetUpdateQueuePushTimeoutMilliseconds() int64 {
	if x != nil {
		return x.UpdateQueuePushTimeoutMilliseconds
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary_Layout) GetQueryWaitTimeoutMilliseconds() int64 {
	if x != nil {
		return x.QueryWaitTimeoutMilliseconds
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary_Layout) GetMaxThreadsForUpdates() int64 {
	if x != nil {
		return x.MaxThreadsForUpdates
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary_Layout) GetInitialArraySize() int64 {
	if x != nil {
		return x.InitialArraySize
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary_Layout) GetMaxArraySize() int64 {
	if x != nil {
		return x.MaxArraySize
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary_Layout) GetAccessToKeyFromAttributes() *wrapperspb.BoolValue {
	if x != nil {
		return x.AccessToKeyFromAttributes
	}
	return nil
}

type ClickhouseConfig_ExternalDictionary_Range struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Minimum dictionary lifetime.
	Min int64 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	// Maximum dictionary lifetime.
	Max           int64 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConfig_ExternalDictionary_Range) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_Range{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_ExternalDictionary_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_Range) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_Range) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_Range.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_Range) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 3, 2}
}

func (x *ClickhouseConfig_ExternalDictionary_Range) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary_Range) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

type ClickhouseConfig_ExternalDictionary_HttpSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// URL of the source dictionary available over HTTP.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The data format. Valid values are all formats [supported by ClickHouse SQL dialect](https://clickhouse.com/docs/en/interfaces/formats/).
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	// HTTP headers.
	Headers       []*ClickhouseConfig_ExternalDictionary_HttpSource_Header `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConfig_ExternalDictionary_HttpSource) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_HttpSource{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_ExternalDictionary_HttpSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_HttpSource) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_HttpSource) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_HttpSource.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_HttpSource) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 3, 3}
}

func (x *ClickhouseConfig_ExternalDictionary_HttpSource) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_HttpSource) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_HttpSource) GetHeaders() []*ClickhouseConfig_ExternalDictionary_HttpSource_Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

type ClickhouseConfig_ExternalDictionary_MysqlSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Database name.
	Db string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	// Table name.
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// Port to use when connecting to a replica of the dictionary source.
	Port int64 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the user for replicas of the dictionary source.
	User string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	// Password of the user for replicas of the dictionary source.
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	// List of MySQL replicas of the database used as dictionary source.
	Replicas []*ClickhouseConfig_ExternalDictionary_MysqlSource_Replica `protobuf:"bytes,6,rep,name=replicas,proto3" json:"replicas,omitempty"`
	// Selection criteria for the data in the specified MySQL table.
	Where string `protobuf:"bytes,7,opt,name=where,proto3" json:"where,omitempty"`
	// Query for checking the dictionary status, to pull only updated data.
	InvalidateQuery string `protobuf:"bytes,8,opt,name=invalidate_query,json=invalidateQuery,proto3" json:"invalidate_query,omitempty"`
	// Should a connection be closed after each request.
	CloseConnection *wrapperspb.BoolValue `protobuf:"bytes,9,opt,name=close_connection,json=closeConnection,proto3" json:"close_connection,omitempty"`
	// Should a connection be shared for some requests.
	ShareConnection *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=share_connection,json=shareConnection,proto3" json:"share_connection,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_MysqlSource{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_MysqlSource) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_MysqlSource.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_MysqlSource) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 3, 4}
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) GetReplicas() []*ClickhouseConfig_ExternalDictionary_MysqlSource_Replica {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) GetWhere() string {
	if x != nil {
		return x.Where
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) GetInvalidateQuery() string {
	if x != nil {
		return x.InvalidateQuery
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) GetCloseConnection() *wrapperspb.BoolValue {
	if x != nil {
		return x.CloseConnection
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource) GetShareConnection() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShareConnection
	}
	return nil
}

type ClickhouseConfig_ExternalDictionary_ClickhouseSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Database name.
	Db string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	// Table name.
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// ClickHouse host.
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	// Port to use when connecting to the host.
	Port int64 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the ClickHouse database user.
	User string `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	// Password of the ClickHouse database user.
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	// Selection criteria for the data in the specified ClickHouse table.
	Where string `protobuf:"bytes,7,opt,name=where,proto3" json:"where,omitempty"`
	// Determines whether to use TLS for connection.
	Secure        *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=secure,proto3" json:"secure,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConfig_ExternalDictionary_ClickhouseSource) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_ClickhouseSource{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_ExternalDictionary_ClickhouseSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_ClickhouseSource) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_ClickhouseSource) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_ClickhouseSource.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_ClickhouseSource) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 3, 5}
}

func (x *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetWhere() string {
	if x != nil {
		return x.Where
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_ClickhouseSource) GetSecure() *wrapperspb.BoolValue {
	if x != nil {
		return x.Secure
	}
	return nil
}

type ClickhouseConfig_ExternalDictionary_MongodbSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Database name.
	Db string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	// Collection name.
	Collection string `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	// MongoDB host.
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	// Port to use when connecting to the host.
	Port int64 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the MongoDB database user.
	User string `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	// Password of the MongoDB database user.
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	// Dictionary source options.
	Options       string `protobuf:"bytes,7,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConfig_ExternalDictionary_MongodbSource) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_MongodbSource{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_ExternalDictionary_MongodbSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_MongodbSource) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_MongodbSource) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_MongodbSource.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_MongodbSource) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 3, 6}
}

func (x *ClickhouseConfig_ExternalDictionary_MongodbSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MongodbSource) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MongodbSource) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MongodbSource) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary_MongodbSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MongodbSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MongodbSource) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

type ClickhouseConfig_ExternalDictionary_PostgresqlSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Database name.
	Db string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	// Table name.
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// PostgreSQL hosts.
	Hosts []string `protobuf:"bytes,3,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// Port to use when connecting to the PostgreSQL hosts.
	Port int64 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the PostrgreSQL database user.
	User string `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	// Password of the PostrgreSQL database user.
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	// Query for checking the dictionary status, to pull only updated data.
	InvalidateQuery string `protobuf:"bytes,7,opt,name=invalidate_query,json=invalidateQuery,proto3" json:"invalidate_query,omitempty"`
	// Mode of SSL TCP/IP connection to the PostgreSQL host.
	SslMode       ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode `protobuf:"varint,8,opt,name=ssl_mode,json=sslMode,proto3,enum=yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode" json:"ssl_mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_PostgresqlSource{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_PostgresqlSource) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_PostgresqlSource.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_PostgresqlSource) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 3, 7}
}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetInvalidateQuery() string {
	if x != nil {
		return x.InvalidateQuery
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_PostgresqlSource) GetSslMode() ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode {
	if x != nil {
		return x.SslMode
	}
	return ClickhouseConfig_ExternalDictionary_PostgresqlSource_SSL_MODE_UNSPECIFIED
}

// Numeric key.
type ClickhouseConfig_ExternalDictionary_Structure_Id struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the numeric key.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Id) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_Structure_Id{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_Structure_Id) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Id) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_Structure_Id.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_Structure_Id) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 3, 0, 0}
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Id) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Complex key.
type ClickhouseConfig_ExternalDictionary_Structure_Key struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Attributes of a complex key.
	Attributes    []*ClickhouseConfig_ExternalDictionary_Structure_Attribute `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Key) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_Structure_Key{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_Structure_Key) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Key) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_Structure_Key.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_Structure_Key) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 3, 0, 1}
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Key) GetAttributes() []*ClickhouseConfig_ExternalDictionary_Structure_Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ClickhouseConfig_ExternalDictionary_Structure_Attribute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the column.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of the column.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Default value for an element without data (for example, an empty string).
	NullValue string `protobuf:"bytes,3,opt,name=null_value,json=nullValue,proto3" json:"null_value,omitempty"`
	// Expression, describing the attribute, if applicable.
	Expression string `protobuf:"bytes,4,opt,name=expression,proto3" json:"expression,omitempty"`
	// Indication of hierarchy support.
	//
	// Default value: **false**.
	Hierarchical bool `protobuf:"varint,5,opt,name=hierarchical,proto3" json:"hierarchical,omitempty"`
	// Indication of injective mapping "id -> attribute".
	//
	// Default value: **false**.
	Injective     bool `protobuf:"varint,6,opt,name=injective,proto3" json:"injective,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Attribute) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_Structure_Attribute{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_Structure_Attribute) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_Structure_Attribute.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_Structure_Attribute) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 3, 0, 2}
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetNullValue() string {
	if x != nil {
		return x.NullValue
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetHierarchical() bool {
	if x != nil {
		return x.Hierarchical
	}
	return false
}

func (x *ClickhouseConfig_ExternalDictionary_Structure_Attribute) GetInjective() bool {
	if x != nil {
		return x.Injective
	}
	return false
}

type ClickhouseConfig_ExternalDictionary_HttpSource_Header struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Header name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Header value.
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConfig_ExternalDictionary_HttpSource_Header) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_HttpSource_Header{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_ExternalDictionary_HttpSource_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_HttpSource_Header) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_HttpSource_Header) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_HttpSource_Header.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_HttpSource_Header) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 3, 3, 0}
}

func (x *ClickhouseConfig_ExternalDictionary_HttpSource_Header) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_HttpSource_Header) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ClickhouseConfig_ExternalDictionary_MysqlSource_Replica struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MySQL host of the replica.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// The priority of the replica that ClickHouse takes into account when connecting.
	// Replica with the highest priority should have this field set to the lowest number.
	Priority int64 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	// Port to use when connecting to the replica.
	// If a port is not specified for a replica, ClickHouse uses the port specified for the source.
	Port int64 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the MySQL database user.
	// If a user is not specified for a replica, ClickHouse uses the user specified for the source.
	User string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	// Password of the MySQL database user.
	// If a password is not specified for a replica, ClickHouse uses the password specified for the source.
	Password      string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) Reset() {
	*x = ClickhouseConfig_ExternalDictionary_MysqlSource_Replica{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) ProtoMessage() {}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_ExternalDictionary_MysqlSource_Replica.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 3, 4, 0}
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ClickhouseConfig_ExternalDictionary_MysqlSource_Replica) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ClickhouseConfig_GraphiteRollup_Pattern struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A pattern for the metric name (a regular or DSL).
	Regexp string `protobuf:"bytes,1,opt,name=regexp,proto3" json:"regexp,omitempty"`
	// The name of the aggregating function to apply to data whose age falls within the range [age, age + precision].
	// Accepted functions: **min**, **max**, **any**, **avg**. The average is calculated imprecisely, like the average of the averages.
	Function string `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	// Retention rules.
	Retention     []*ClickhouseConfig_GraphiteRollup_Pattern_Retention `protobuf:"bytes,3,rep,name=retention,proto3" json:"retention,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern) Reset() {
	*x = ClickhouseConfig_GraphiteRollup_Pattern{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_GraphiteRollup_Pattern) ProtoMessage() {}

func (x *ClickhouseConfig_GraphiteRollup_Pattern) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_GraphiteRollup_Pattern.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_GraphiteRollup_Pattern) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern) GetRetention() []*ClickhouseConfig_GraphiteRollup_Pattern_Retention {
	if x != nil {
		return x.Retention
	}
	return nil
}

type ClickhouseConfig_GraphiteRollup_Pattern_Retention struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The minimum age of the data in seconds.
	Age int64 `protobuf:"varint,1,opt,name=age,proto3" json:"age,omitempty"`
	// Precision of determining the age of the data, in seconds. Should be a divisor for 86400 (seconds in a day).
	Precision     int64 `protobuf:"varint,2,opt,name=precision,proto3" json:"precision,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern_Retention) Reset() {
	*x = ClickhouseConfig_GraphiteRollup_Pattern_Retention{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern_Retention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConfig_GraphiteRollup_Pattern_Retention) ProtoMessage() {}

func (x *ClickhouseConfig_GraphiteRollup_Pattern_Retention) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConfig_GraphiteRollup_Pattern_Retention.ProtoReflect.Descriptor instead.
func (*ClickhouseConfig_GraphiteRollup_Pattern_Retention) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP(), []int{0, 4, 0, 0}
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern_Retention) GetAge() int64 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *ClickhouseConfig_GraphiteRollup_Pattern_Retention) GetPrecision() int64 {
	if x != nil {
		return x.Precision
	}
	return 0
}

var File_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto protoreflect.FileDescriptor

const file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDesc = "" +
	"\n" +
	"6yandex/cloud/mdb/clickhouse/v1/config/clickhouse.proto\x12%yandex.cloud.mdb.clickhouse.v1.config\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1dyandex/cloud/validation.proto\"\xe5\xa5\x01\n" +
	"\x10ClickhouseConfig\x12V\n" +
	"\x14background_pool_size\x18! \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=1R\x12backgroundPoolSize\x12}\n" +
	"-background_merges_mutations_concurrency_ratio\x180 \x01(\v2\x1b.google.protobuf.Int64ValueR)backgroundMergesMutationsConcurrencyRatio\x12g\n" +
	"\x1dbackground_schedule_pool_size\x18\" \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=1R\x1abackgroundSchedulePoolSize\x12e\n" +
	"\x1cbackground_fetches_pool_size\x18& \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=1R\x19backgroundFetchesPoolSize\x12_\n" +
	"\x19background_move_pool_size\x18' \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=1R\x16backgroundMovePoolSize\x12~\n" +
	")background_distributed_schedule_pool_size\x18( \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=1R%backgroundDistributedSchedulePoolSize\x12\x7f\n" +
	"*background_buffer_flush_schedule_pool_size\x18) \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=1R%backgroundBufferFlushSchedulePoolSize\x12\x83\x01\n" +
	",background_message_broker_schedule_pool_size\x18. \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=1R'backgroundMessageBrokerSchedulePoolSize\x12c\n" +
	"\x1bbackground_common_pool_size\x18/ \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=1R\x18backgroundCommonPoolSize\x12P\n" +
	"\x16dictionaries_lazy_load\x18D \x01(\v2\x1a.google.protobuf.BoolValueR\x14dictionariesLazyLoad\x12]\n" +
	"\tlog_level\x18\x01 \x01(\x0e2@.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.LogLevelR\blogLevel\x12]\n" +
	"\x18query_log_retention_size\x18\x10 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x15queryLogRetentionSize\x12]\n" +
	"\x18query_log_retention_time\x18\x11 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x15queryLogRetentionTime\x12S\n" +
	"\x18query_thread_log_enabled\x18\x12 \x01(\v2\x1a.google.protobuf.BoolValueR\x15queryThreadLogEnabled\x12j\n" +
	"\x1fquery_thread_log_retention_size\x18\x13 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x1bqueryThreadLogRetentionSize\x12j\n" +
	"\x1fquery_thread_log_retention_time\x18\x14 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x1bqueryThreadLogRetentionTime\x12[\n" +
	"\x17part_log_retention_size\x18\x15 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x14partLogRetentionSize\x12[\n" +
	"\x17part_log_retention_time\x18\x16 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x14partLogRetentionTime\x12H\n" +
	"\x12metric_log_enabled\x18\x17 \x01(\v2\x1a.google.protobuf.BoolValueR\x10metricLogEnabled\x12_\n" +
	"\x19metric_log_retention_size\x18\x18 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x16metricLogRetentionSize\x12_\n" +
	"\x19metric_log_retention_time\x18\x19 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x16metricLogRetentionTime\x12F\n" +
	"\x11trace_log_enabled\x18\x1a \x01(\v2\x1a.google.protobuf.BoolValueR\x0ftraceLogEnabled\x12T\n" +
	"\x18trace_log_retention_size\x18\x1b \x01(\v2\x1b.google.protobuf.Int64ValueR\x15traceLogRetentionSize\x12T\n" +
	"\x18trace_log_retention_time\x18\x1c \x01(\v2\x1b.google.protobuf.Int64ValueR\x15traceLogRetentionTime\x12D\n" +
	"\x10text_log_enabled\x18\x1d \x01(\v2\x1a.google.protobuf.BoolValueR\x0etextLogEnabled\x12R\n" +
	"\x17text_log_retention_size\x18\x1e \x01(\v2\x1b.google.protobuf.Int64ValueR\x14textLogRetentionSize\x12R\n" +
	"\x17text_log_retention_time\x18\x1f \x01(\v2\x1b.google.protobuf.Int64ValueR\x14textLogRetentionTime\x12f\n" +
	"\x0etext_log_level\x18  \x01(\x0e2@.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.LogLevelR\ftextLogLevel\x12_\n" +
	"\x1eopentelemetry_span_log_enabled\x18* \x01(\v2\x1a.google.protobuf.BoolValueR\x1bopentelemetrySpanLogEnabled\x12v\n" +
	"%opentelemetry_span_log_retention_size\x187 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R!opentelemetrySpanLogRetentionSize\x12v\n" +
	"%opentelemetry_span_log_retention_time\x188 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R!opentelemetrySpanLogRetentionTime\x12Q\n" +
	"\x17query_views_log_enabled\x181 \x01(\v2\x1a.google.protobuf.BoolValueR\x14queryViewsLogEnabled\x12h\n" +
	"\x1equery_views_log_retention_size\x182 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x1aqueryViewsLogRetentionSize\x12h\n" +
	"\x1equery_views_log_retention_time\x183 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x1aqueryViewsLogRetentionTime\x12a\n" +
	"\x1fasynchronous_metric_log_enabled\x184 \x01(\v2\x1a.google.protobuf.BoolValueR\x1casynchronousMetricLogEnabled\x12x\n" +
	"&asynchronous_metric_log_retention_size\x185 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\"asynchronousMetricLogRetentionSize\x12x\n" +
	"&asynchronous_metric_log_retention_time\x186 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\"asynchronousMetricLogRetentionTime\x12J\n" +
	"\x13session_log_enabled\x189 \x01(\v2\x1a.google.protobuf.BoolValueR\x11sessionLogEnabled\x12a\n" +
	"\x1asession_log_retention_size\x18: \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x17sessionLogRetentionSize\x12a\n" +
	"\x1asession_log_retention_time\x18; \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x17sessionLogRetentionTime\x12N\n" +
	"\x15zookeeper_log_enabled\x18< \x01(\v2\x1a.google.protobuf.BoolValueR\x13zookeeperLogEnabled\x12e\n" +
	"\x1czookeeper_log_retention_size\x18= \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x19zookeeperLogRetentionSize\x12e\n" +
	"\x1czookeeper_log_retention_time\x18> \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x19zookeeperLogRetentionTime\x12a\n" +
	"\x1fasynchronous_insert_log_enabled\x18? \x01(\v2\x1a.google.protobuf.BoolValueR\x1casynchronousInsertLogEnabled\x12x\n" +
	"&asynchronous_insert_log_retention_size\x18@ \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\"asynchronousInsertLogRetentionSize\x12x\n" +
	"&asynchronous_insert_log_retention_time\x18A \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\"asynchronousInsertLogRetentionTime\x12_\n" +
	"\x1eprocessors_profile_log_enabled\x18G \x01(\v2\x1a.google.protobuf.BoolValueR\x1bprocessorsProfileLogEnabled\x12v\n" +
	"%processors_profile_log_retention_size\x18H \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R!processorsProfileLogRetentionSize\x12v\n" +
	"%processors_profile_log_retention_time\x18I \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R!processorsProfileLogRetentionTime\x12F\n" +
	"\x11error_log_enabled\x18K \x01(\v2\x1a.google.protobuf.BoolValueR\x0ferrorLogEnabled\x12]\n" +
	"\x18error_log_retention_size\x18L \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x15errorLogRetentionSize\x12]\n" +
	"\x18error_log_retention_time\x18M \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x15errorLogRetentionTime\x12\x91\x01\n" +
	"\x1baccess_control_improvements\x18J \x01(\v2Q.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.AccessControlImprovementsR\x19accessControlImprovements\x12N\n" +
	"\x0fmax_connections\x18\x06 \x01(\v2\x1b.google.protobuf.Int64ValueB\b\xfa\xc71\x04>=10R\x0emaxConnections\x12[\n" +
	"\x16max_concurrent_queries\x18\a \x01(\v2\x1b.google.protobuf.Int64ValueB\b\xfa\xc71\x04>=50R\x14maxConcurrentQueries\x12X\n" +
	"\x16max_table_size_to_drop\x18\v \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x12maxTableSizeToDrop\x12`\n" +
	"\x1amax_partition_size_to_drop\x18\r \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x16maxPartitionSizeToDrop\x12I\n" +
	"\x12keep_alive_timeout\x18\b \x01(\v2\x1b.google.protobuf.Int64ValueR\x10keepAliveTimeout\x12S\n" +
	"\x17uncompressed_cache_size\x18\t \x01(\v2\x1b.google.protobuf.Int64ValueR\x15uncompressedCacheSize\x12C\n" +
	"\x0fmark_cache_size\x18\n" +
	" \x01(\v2\x1b.google.protobuf.Int64ValueR\rmarkCacheSize\x12\x1a\n" +
	"\btimezone\x18\x0e \x01(\tR\btimezone\x12C\n" +
	"\x0fgeobase_enabled\x18B \x01(\v2\x1a.google.protobuf.BoolValueR\x0egeobaseEnabled\x12\x1f\n" +
	"\vgeobase_uri\x18\x0f \x01(\tR\n" +
	"geobaseUri\x12G\n" +
	"\x10default_database\x18+ \x01(\v2\x1c.google.protobuf.StringValueR\x0fdefaultDatabase\x12X\n" +
	"\x1atotal_memory_profiler_step\x18, \x01(\v2\x1b.google.protobuf.Int64ValueR\x17totalMemoryProfilerStep\x12r\n" +
	"'total_memory_tracker_sample_probability\x18- \x01(\v2\x1c.google.protobuf.DoubleValueR#totalMemoryTrackerSampleProbability\x12V\n" +
	"\x14async_insert_threads\x18O \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x12asyncInsertThreads\x12B\n" +
	"\x0ebackup_threads\x18P \x01(\v2\x1b.google.protobuf.Int64ValueR\rbackupThreads\x12D\n" +
	"\x0frestore_threads\x18Q \x01(\v2\x1b.google.protobuf.Int64ValueR\x0erestoreThreads\x12`\n" +
	"\n" +
	"merge_tree\x18\x02 \x01(\v2A.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTreeR\tmergeTree\x12e\n" +
	"\vcompression\x18\x03 \x03(\v2C.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.CompressionR\vcompression\x12n\n" +
	"\fdictionaries\x18\x04 \x03(\v2J.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionaryR\fdictionaries\x12o\n" +
	"\x0fgraphite_rollup\x18\x05 \x03(\v2F.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollupR\x0egraphiteRollup\x12S\n" +
	"\x05kafka\x18# \x01(\v2=.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.KafkaR\x05kafka\x12e\n" +
	"\fkafka_topics\x18$ \x03(\v2B.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.KafkaTopicR\vkafkaTopics\x12\\\n" +
	"\brabbitmq\x18% \x01(\v2@.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.RabbitmqR\brabbitmq\x12x\n" +
	"\x13query_masking_rules\x18C \x03(\v2H.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.QueryMaskingRuleR\x11queryMaskingRules\x12c\n" +
	"\vquery_cache\x18E \x01(\v2B.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.QueryCacheR\n" +
	"queryCache\x12c\n" +
	"\vjdbc_bridge\x18F \x01(\v2B.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.JdbcBridgeR\n" +
	"jdbcBridge\x12A\n" +
	"\x0emysql_protocol\x18N \x01(\v2\x1a.google.protobuf.BoolValueR\rmysqlProtocol\x12b\n" +
	"\rcustom_macros\x18R \x03(\v2=.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MacroR\fcustomMacros\x12p\n" +
	"$builtin_dictionaries_reload_interval\x18\f \x01(\v2\x1b.google.protobuf.Int64ValueB\x02\x18\x01R!builtinDictionariesReloadInterval\x1a\x83\x02\n" +
	"\x19AccessControlImprovements\x12i\n" +
	"$select_from_system_db_requires_grant\x18\x01 \x01(\v2\x1a.google.protobuf.BoolValueR\x1fselectFromSystemDbRequiresGrant\x12{\n" +
	"-select_from_information_schema_requires_grant\x18\x02 \x01(\v2\x1a.google.protobuf.BoolValueR(selectFromInformationSchemaRequiresGrant\x1a\xa6!\n" +
	"\tMergeTree\x12N\n" +
	"\x15parts_to_delay_insert\x18\x03 \x01(\v2\x1b.google.protobuf.Int64ValueR\x12partsToDelayInsert\x12N\n" +
	"\x15parts_to_throw_insert\x18\x04 \x01(\v2\x1b.google.protobuf.Int64ValueR\x12partsToThrowInsert\x12h\n" +
	"\x1einactive_parts_to_delay_insert\x18\t \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x1ainactivePartsToDelayInsert\x12h\n" +
	"\x1einactive_parts_to_throw_insert\x18\n" +
	" \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x1ainactivePartsToThrowInsert\x12q\n" +
	"$max_avg_part_size_for_too_many_parts\x18\x15 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x1dmaxAvgPartSizeForTooManyParts\x12H\n" +
	"\x12max_parts_in_total\x18\x11 \x01(\v2\x1b.google.protobuf.Int64ValueR\x0fmaxPartsInTotal\x12_\n" +
	"\x1emax_replicated_merges_in_queue\x18\x05 \x01(\v2\x1b.google.protobuf.Int64ValueR\x1amaxReplicatedMergesInQueue\x12\x8e\x01\n" +
	"9number_of_free_entries_in_pool_to_lower_max_size_of_merge\x18\x06 \x01(\v2\x1b.google.protobuf.Int64ValueR.numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge\x12\x83\x01\n" +
	"2number_of_free_entries_in_pool_to_execute_mutation\x18\x14 \x01(\v2\x1b.google.protobuf.Int64ValueR*numberOfFreeEntriesInPoolToExecuteMutation\x12m\n" +
	"'max_bytes_to_merge_at_min_space_in_pool\x18\a \x01(\v2\x1b.google.protobuf.Int64ValueR\x1fmaxBytesToMergeAtMinSpaceInPool\x12v\n" +
	"'max_bytes_to_merge_at_max_space_in_pool\x18\b \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x1fmaxBytesToMergeAtMaxSpaceInPool\x12Q\n" +
	"\x17min_bytes_for_wide_part\x18\v \x01(\v2\x1b.google.protobuf.Int64ValueR\x13minBytesForWidePart\x12O\n" +
	"\x16min_rows_for_wide_part\x18\f \x01(\v2\x1b.google.protobuf.Int64ValueR\x12minRowsForWidePart\x12V\n" +
	"\x14cleanup_delay_period\x18\x13 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x12cleanupDelayPeriod\x12]\n" +
	"\x18max_cleanup_delay_period\x18\x1c \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x15maxCleanupDelayPeriod\x12]\n" +
	"\x18merge_selecting_sleep_ms\x18\x18 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x15mergeSelectingSleepMs\x12d\n" +
	"\x1cmax_merge_selecting_sleep_ms\x18\x1b \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x18maxMergeSelectingSleepMs\x12g\n" +
	"\x1emin_age_to_force_merge_seconds\x18\x16 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x19minAgeToForceMergeSeconds\x12o\n" +
	"(min_age_to_force_merge_on_partition_only\x18\x17 \x01(\v2\x1a.google.protobuf.BoolValueR!minAgeToForceMergeOnPartitionOnly\x12L\n" +
	"\x14merge_max_block_size\x18\x19 \x01(\v2\x1b.google.protobuf.Int64ValueR\x11mergeMaxBlockSize\x12\xab\x01\n" +
	"!deduplicate_merge_projection_mode\x18\x1d \x01(\x0e2`.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.DeduplicateMergeProjectionModeR\x1ededuplicateMergeProjectionMode\x12\xb4\x01\n" +
	"$lightweight_mutation_projection_mode\x18\x1e \x01(\x0e2c.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.LightweightMutationProjectionModeR!lightweightMutationProjectionMode\x12c\n" +
	"\x1freplicated_deduplication_window\x18\x01 \x01(\v2\x1b.google.protobuf.Int64ValueR\x1dreplicatedDeduplicationWindow\x12r\n" +
	"'replicated_deduplication_window_seconds\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueR$replicatedDeduplicationWindowSeconds\x12H\n" +
	"\x12fsync_after_insert\x18  \x01(\v2\x1a.google.protobuf.BoolValueR\x10fsyncAfterInsert\x12L\n" +
	"\x14fsync_part_directory\x18! \x01(\v2\x1a.google.protobuf.BoolValueR\x12fsyncPartDirectory\x12s\n" +
	")min_compressed_bytes_to_fsync_after_fetch\x18\" \x01(\v2\x1b.google.protobuf.Int64ValueR#minCompressedBytesToFsyncAfterFetch\x12s\n" +
	")min_compressed_bytes_to_fsync_after_merge\x18# \x01(\v2\x1b.google.protobuf.Int64ValueR#minCompressedBytesToFsyncAfterMerge\x12\\\n" +
	"\x1dmin_rows_to_fsync_after_merge\x18$ \x01(\v2\x1b.google.protobuf.Int64ValueR\x18minRowsToFsyncAfterMerge\x12I\n" +
	"\x13ttl_only_drop_parts\x18\r \x01(\v2\x1a.google.protobuf.BoolValueR\x10ttlOnlyDropParts\x12P\n" +
	"\x16merge_with_ttl_timeout\x18\x0f \x01(\v2\x1b.google.protobuf.Int64ValueR\x13mergeWithTtlTimeout\x12k\n" +
	"$merge_with_recompression_ttl_timeout\x18\x10 \x01(\v2\x1b.google.protobuf.Int64ValueR mergeWithRecompressionTtlTimeout\x12j\n" +
	"%max_number_of_merges_with_ttl_in_pool\x18\x12 \x01(\v2\x1b.google.protobuf.Int64ValueR\x1emaxNumberOfMergesWithTtlInPool\x12c\n" +
	" materialize_ttl_recalculate_only\x18\x1f \x01(\v2\x1a.google.protobuf.BoolValueR\x1dmaterializeTtlRecalculateOnly\x12^\n" +
	"\x1echeck_sample_column_is_correct\x18\x1a \x01(\v2\x1a.google.protobuf.BoolValueR\x1acheckSampleColumnIsCorrect\x12o\n" +
	"%allow_remote_fs_zero_copy_replication\x18\x0e \x01(\v2\x1a.google.protobuf.BoolValueB\x02\x18\x01R allowRemoteFsZeroCopyReplication\"\x89\x02\n" +
	"\x1eDeduplicateMergeProjectionMode\x121\n" +
	"-DEDUPLICATE_MERGE_PROJECTION_MODE_UNSPECIFIED\x10\x00\x12,\n" +
	"(DEDUPLICATE_MERGE_PROJECTION_MODE_IGNORE\x10\x01\x12+\n" +
	"'DEDUPLICATE_MERGE_PROJECTION_MODE_THROW\x10\x02\x12*\n" +
	"&DEDUPLICATE_MERGE_PROJECTION_MODE_DROP\x10\x03\x12-\n" +
	")DEDUPLICATE_MERGE_PROJECTION_MODE_REBUILD\x10\x04\"\xea\x01\n" +
	"!LightweightMutationProjectionMode\x124\n" +
	"0LIGHTWEIGHT_MUTATION_PROJECTION_MODE_UNSPECIFIED\x10\x00\x12.\n" +
	"*LIGHTWEIGHT_MUTATION_PROJECTION_MODE_THROW\x10\x01\x12-\n" +
	")LIGHTWEIGHT_MUTATION_PROJECTION_MODE_DROP\x10\x02\x120\n" +
	",LIGHTWEIGHT_MUTATION_PROJECTION_MODE_REBUILD\x10\x03\x1a\xbd\x02\n" +
	"\vCompression\x12h\n" +
	"\x06method\x18\x01 \x01(\x0e2J.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression.MethodB\x04\xe8\xc71\x01R\x06method\x12\"\n" +
	"\rmin_part_size\x18\x02 \x01(\x03R\vminPartSize\x12-\n" +
	"\x13min_part_size_ratio\x18\x03 \x01(\x01R\x10minPartSizeRatio\x121\n" +
	"\x05level\x18\x04 \x01(\v2\x1b.google.protobuf.Int64ValueR\x05level\">\n" +
	"\x06Method\x12\x16\n" +
	"\x12METHOD_UNSPECIFIED\x10\x00\x12\a\n" +
	"\x03LZ4\x10\x01\x12\b\n" +
	"\x04ZSTD\x10\x02\x12\t\n" +
	"\x05LZ4HC\x10\x03\x1a\x9e'\n" +
	"\x12ExternalDictionary\x12\x18\n" +
	"\x04name\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\x04name\x12x\n" +
	"\tstructure\x18\x02 \x01(\v2T.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.StructureB\x04\xe8\xc71\x01R\tstructure\x12o\n" +
	"\x06layout\x18\x03 \x01(\v2Q.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.LayoutB\x04\xe8\xc71\x01R\x06layout\x12'\n" +
	"\x0efixed_lifetime\x18\x04 \x01(\x03H\x00R\rfixedLifetime\x12y\n" +
	"\x0elifetime_range\x18\x05 \x01(\v2P.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.RangeH\x00R\rlifetimeRange\x12x\n" +
	"\vhttp_source\x18\x06 \x01(\v2U.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSourceH\x01R\n" +
	"httpSource\x12{\n" +
	"\fmysql_source\x18\a \x01(\v2V.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSourceH\x01R\vmysqlSource\x12\x8a\x01\n" +
	"\x11clickhouse_source\x18\b \x01(\v2[.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSourceH\x01R\x10clickhouseSource\x12\x81\x01\n" +
	"\x0emongodb_source\x18\t \x01(\v2X.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSourceH\x01R\rmongodbSource\x12\x8a\x01\n" +
	"\x11postgresql_source\x18\n" +
	" \x01(\v2[.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSourceH\x01R\x10postgresqlSource\x1a\xd7\a\n" +
	"\tStructure\x12g\n" +
	"\x02id\x18\x01 \x01(\v2W.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.IdR\x02id\x12j\n" +
	"\x03key\x18\x03 \x01(\v2X.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.KeyR\x03key\x12{\n" +
	"\trange_min\x18\x04 \x01(\v2^.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.AttributeR\brangeMin\x12{\n" +
	"\trange_max\x18\x05 \x01(\v2^.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.AttributeR\brangeMax\x12\x86\x01\n" +
	"\n" +
	"attributes\x18\x02 \x03(\v2^.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.AttributeB\x06\x82\xc81\x02>0R\n" +
	"attributes\x1a\x1e\n" +
	"\x02Id\x12\x18\n" +
	"\x04name\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\x04name\x1a\x8e\x01\n" +
	"\x03Key\x12\x86\x01\n" +
	"\n" +
	"attributes\x18\x01 \x03(\v2^.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.AttributeB\x06\x82\xc81\x02>0R\n" +
	"attributes\x1a\xc0\x01\n" +
	"\tAttribute\x12\x18\n" +
	"\x04name\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\x04name\x12\x18\n" +
	"\x04type\x18\x02 \x01(\tB\x04\xe8\xc71\x01R\x04type\x12\x1d\n" +
	"\n" +
	"null_value\x18\x03 \x01(\tR\tnullValue\x12\x1e\n" +
	"\n" +
	"expression\x18\x04 \x01(\tR\n" +
	"expression\x12\"\n" +
	"\fhierarchical\x18\x05 \x01(\bR\fhierarchical\x12\x1c\n" +
	"\tinjective\x18\x06 \x01(\bR\tinjective\x1a\xe9\a\n" +
	"\x06Layout\x12p\n" +
	"\x04type\x18\x01 \x01(\x0e2V.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout.TypeB\x04\xe8\xc71\x01R\x04type\x12+\n" +
	"\rsize_in_cells\x18\x02 \x01(\x03B\a\xfa\xc71\x03>=0R\vsizeInCells\x12Q\n" +
	"\x17allow_read_expired_keys\x18\x05 \x01(\v2\x1a.google.protobuf.BoolValueR\x14allowReadExpiredKeys\x12:\n" +
	"\x15max_update_queue_size\x18\x06 \x01(\x03B\a\xfa\xc71\x03>=0R\x12maxUpdateQueueSize\x12[\n" +
	"&update_queue_push_timeout_milliseconds\x18\a \x01(\x03B\a\xfa\xc71\x03>=0R\"updateQueuePushTimeoutMilliseconds\x12N\n" +
	"\x1fquery_wait_timeout_milliseconds\x18\b \x01(\x03B\a\xfa\xc71\x03>=0R\x1cqueryWaitTimeoutMilliseconds\x12>\n" +
	"\x17max_threads_for_updates\x18\t \x01(\x03B\a\xfa\xc71\x03>=0R\x14maxThreadsForUpdates\x125\n" +
	"\x12initial_array_size\x18\n" +
	" \x01(\x03B\a\xfa\xc71\x03>=0R\x10initialArraySize\x12-\n" +
	"\x0emax_array_size\x18\x03 \x01(\x03B\a\xfa\xc71\x03>=0R\fmaxArraySize\x12\\\n" +
	"\x1daccess_to_key_from_attributes\x18\x04 \x01(\v2\x1a.google.protobuf.BoolValueR\x19accessToKeyFromAttributes\"\xff\x01\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\b\n" +
	"\x04FLAT\x10\x01\x12\n" +
	"\n" +
	"\x06HASHED\x10\x02\x12\x16\n" +
	"\x12COMPLEX_KEY_HASHED\x10\x03\x12\x10\n" +
	"\fRANGE_HASHED\x10\x04\x12\t\n" +
	"\x05CACHE\x10\x05\x12\x15\n" +
	"\x11COMPLEX_KEY_CACHE\x10\x06\x12\x11\n" +
	"\rSPARSE_HASHED\x10\a\x12\x1d\n" +
	"\x19COMPLEX_KEY_SPARSE_HASHED\x10\b\x12\x1c\n" +
	"\x18COMPLEX_KEY_RANGE_HASHED\x10\t\x12\n" +
	"\n" +
	"\x06DIRECT\x10\n" +
	"\x12\x16\n" +
	"\x12COMPLEX_KEY_DIRECT\x10\v\x12\v\n" +
	"\aIP_TRIE\x10\f\x1a+\n" +
	"\x05Range\x12\x10\n" +
	"\x03min\x18\x01 \x01(\x03R\x03min\x12\x10\n" +
	"\x03max\x18\x02 \x01(\x03R\x03max\x1a\xfa\x01\n" +
	"\n" +
	"HttpSource\x12\x16\n" +
	"\x03url\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\x03url\x12\x1c\n" +
	"\x06format\x18\x02 \x01(\tB\x04\xe8\xc71\x01R\x06format\x12v\n" +
	"\aheaders\x18\x03 \x03(\v2\\.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource.HeaderR\aheaders\x1a>\n" +
	"\x06Header\x12\x18\n" +
	"\x04name\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\x04name\x12\x1a\n" +
	"\x05value\x18\x02 \x01(\tB\x04\xe8\xc71\x01R\x05value\x1a\x86\x05\n" +
	"\vMysqlSource\x12\x14\n" +
	"\x02db\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\x02db\x12\x1a\n" +
	"\x05table\x18\x02 \x01(\tB\x04\xe8\xc71\x01R\x05table\x12\x1f\n" +
	"\x04port\x18\x03 \x01(\x03B\v\xfa\xc71\a0-65535R\x04port\x12\x18\n" +
	"\x04user\x18\x04 \x01(\tB\x04\xe8\xc71\x01R\x04user\x12\x1a\n" +
	"\bpassword\x18\x05 \x01(\tR\bpassword\x12z\n" +
	"\breplicas\x18\x06 \x03(\v2^.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.ReplicaR\breplicas\x12\x14\n" +
	"\x05where\x18\a \x01(\tR\x05where\x12)\n" +
	"\x10invalidate_query\x18\b \x01(\tR\x0finvalidateQuery\x12E\n" +
	"\x10close_connection\x18\t \x01(\v2\x1a.google.protobuf.BoolValueR\x0fcloseConnection\x12E\n" +
	"\x10share_connection\x18\n" +
	" \x01(\v2\x1a.google.protobuf.BoolValueR\x0fshareConnection\x1a\xa2\x01\n" +
	"\aReplica\x12!\n" +
	"\x04host\x18\x01 \x01(\tB\r\xe8\xc71\x01\x8a\xc81\x05<=253R\x04host\x12#\n" +
	"\bpriority\x18\x02 \x01(\x03B\a\xfa\xc71\x03>=0R\bpriority\x12\x1f\n" +
	"\x04port\x18\x03 \x01(\x03B\v\xfa\xc71\a0-65535R\x04port\x12\x12\n" +
	"\x04user\x18\x04 \x01(\tR\x04user\x12\x1a\n" +
	"\bpassword\x18\x05 \x01(\tR\bpassword\x1a\x84\x02\n" +
	"\x10ClickhouseSource\x12\x14\n" +
	"\x02db\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\x02db\x12\x1a\n" +
	"\x05table\x18\x02 \x01(\tB\x04\xe8\xc71\x01R\x05table\x12\x1d\n" +
	"\x04host\x18\x03 \x01(\tB\t\x8a\xc81\x05<=253R\x04host\x12\x1f\n" +
	"\x04port\x18\x04 \x01(\x03B\v\xfa\xc71\a0-65535R\x04port\x12\x18\n" +
	"\x04user\x18\x05 \x01(\tB\x04\xe8\xc71\x01R\x04user\x12\x1a\n" +
	"\bpassword\x18\x06 \x01(\tR\bpassword\x12\x14\n" +
	"\x05where\x18\a \x01(\tR\x05where\x122\n" +
	"\x06secure\x18\b \x01(\v2\x1a.google.protobuf.BoolValueR\x06secure\x1a\xdf\x01\n" +
	"\rMongodbSource\x12\x14\n" +
	"\x02db\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\x02db\x12$\n" +
	"\n" +
	"collection\x18\x02 \x01(\tB\x04\xe8\xc71\x01R\n" +
	"collection\x12!\n" +
	"\x04host\x18\x03 \x01(\tB\r\xe8\xc71\x01\x8a\xc81\x05<=253R\x04host\x12\x1f\n" +
	"\x04port\x18\x04 \x01(\x03B\v\xfa\xc71\a0-65535R\x04port\x12\x18\n" +
	"\x04user\x18\x05 \x01(\tB\x04\xe8\xc71\x01R\x04user\x12\x1a\n" +
	"\bpassword\x18\x06 \x01(\tR\bpassword\x12\x18\n" +
	"\aoptions\x18\a \x01(\tR\aoptions\x1a\xc5\x03\n" +
	"\x10PostgresqlSource\x12\x14\n" +
	"\x02db\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\x02db\x12\x1a\n" +
	"\x05table\x18\x02 \x01(\tB\x04\xe8\xc71\x01R\x05table\x12\x14\n" +
	"\x05hosts\x18\x03 \x03(\tR\x05hosts\x12\x1f\n" +
	"\x04port\x18\x04 \x01(\x03B\v\xfa\xc71\a0-65535R\x04port\x12\x18\n" +
	"\x04user\x18\x05 \x01(\tB\x04\xe8\xc71\x01R\x04user\x12\x1a\n" +
	"\bpassword\x18\x06 \x01(\tR\bpassword\x12)\n" +
	"\x10invalidate_query\x18\a \x01(\tR\x0finvalidateQuery\x12~\n" +
	"\bssl_mode\x18\b \x01(\x0e2c.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslModeR\asslMode\"g\n" +
	"\aSslMode\x12\x18\n" +
	"\x14SSL_MODE_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aDISABLE\x10\x01\x12\t\n" +
	"\x05ALLOW\x10\x02\x12\n" +
	"\n" +
	"\x06PREFER\x10\x03\x12\r\n" +
	"\tVERIFY_CA\x10\x04\x12\x0f\n" +
	"\vVERIFY_FULL\x10\x05B\x10\n" +
	"\blifetime\x12\x04\xc0\xc11\x01B\x0e\n" +
	"\x06source\x12\x04\xc0\xc11\x01\x1a\xc3\x04\n" +
	"\x0eGraphiteRollup\x12\x18\n" +
	"\x04name\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\x04name\x12r\n" +
	"\bpatterns\x18\x02 \x03(\v2N.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.PatternB\x06\x82\xc81\x02>0R\bpatterns\x12(\n" +
	"\x10path_column_name\x18\x03 \x01(\tR\x0epathColumnName\x12(\n" +
	"\x10time_column_name\x18\x04 \x01(\tR\x0etimeColumnName\x12*\n" +
	"\x11value_column_name\x18\x05 \x01(\tR\x0fvalueColumnName\x12.\n" +
	"\x13version_column_name\x18\x06 \x01(\tR\x11versionColumnName\x1a\xf2\x01\n" +
	"\aPattern\x12\x16\n" +
	"\x06regexp\x18\x01 \x01(\tR\x06regexp\x12\x1a\n" +
	"\bfunction\x18\x02 \x01(\tR\bfunction\x12v\n" +
	"\tretention\x18\x03 \x03(\v2X.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.RetentionR\tretention\x1a;\n" +
	"\tRetention\x12\x10\n" +
	"\x03age\x18\x01 \x01(\x03R\x03age\x12\x1c\n" +
	"\tprecision\x18\x02 \x01(\x03R\tprecision\x1a\xbc\x0e\n" +
	"\x05Kafka\x12{\n" +
	"\x11security_protocol\x18\x01 \x01(\x0e2N.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.SecurityProtocolR\x10securityProtocol\x12r\n" +
	"\x0esasl_mechanism\x18\x02 \x01(\x0e2K.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.SaslMechanismR\rsaslMechanism\x12#\n" +
	"\rsasl_username\x18\x03 \x01(\tR\fsaslUsername\x12#\n" +
	"\rsasl_password\x18\x04 \x01(\tR\fsaslPassword\x12i\n" +
	"#enable_ssl_certificate_verification\x18\x05 \x01(\v2\x1a.google.protobuf.BoolValueR enableSslCertificateVerification\x12U\n" +
	"\x14max_poll_interval_ms\x18\x06 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x11maxPollIntervalMs\x12R\n" +
	"\x12session_timeout_ms\x18\a \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x10sessionTimeoutMs\x12Y\n" +
	"\x05debug\x18\b \x01(\x0e2C.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.DebugR\x05debug\x12y\n" +
	"\x11auto_offset_reset\x18\t \x01(\x0e2M.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.AutoOffsetResetR\x0fautoOffsetReset\"\xb7\x01\n" +
	"\x10SecurityProtocol\x12!\n" +
	"\x1dSECURITY_PROTOCOL_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bSECURITY_PROTOCOL_PLAINTEXT\x10\x01\x12\x19\n" +
	"\x15SECURITY_PROTOCOL_SSL\x10\x02\x12$\n" +
	" SECURITY_PROTOCOL_SASL_PLAINTEXT\x10\x03\x12\x1e\n" +
	"\x1aSECURITY_PROTOCOL_SASL_SSL\x10\x04\"\xa8\x01\n" +
	"\rSaslMechanism\x12\x1e\n" +
	"\x1aSASL_MECHANISM_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15SASL_MECHANISM_GSSAPI\x10\x01\x12\x18\n" +
	"\x14SASL_MECHANISM_PLAIN\x10\x02\x12 \n" +
	"\x1cSASL_MECHANISM_SCRAM_SHA_256\x10\x03\x12 \n" +
	"\x1cSASL_MECHANISM_SCRAM_SHA_512\x10\x04\"\x99\x03\n" +
	"\x05Debug\x12\x15\n" +
	"\x11DEBUG_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rDEBUG_GENERIC\x10\x01\x12\x10\n" +
	"\fDEBUG_BROKER\x10\x02\x12\x0f\n" +
	"\vDEBUG_TOPIC\x10\x03\x12\x12\n" +
	"\x0eDEBUG_METADATA\x10\x04\x12\x11\n" +
	"\rDEBUG_FEATURE\x10\x05\x12\x0f\n" +
	"\vDEBUG_QUEUE\x10\x06\x12\r\n" +
	"\tDEBUG_MSG\x10\a\x12\x12\n" +
	"\x0eDEBUG_PROTOCOL\x10\b\x12\x0e\n" +
	"\n" +
	"DEBUG_CGRP\x10\t\x12\x12\n" +
	"\x0eDEBUG_SECURITY\x10\n" +
	"\x12\x0f\n" +
	"\vDEBUG_FETCH\x10\v\x12\x15\n" +
	"\x11DEBUG_INTERCEPTOR\x10\f\x12\x10\n" +
	"\fDEBUG_PLUGIN\x10\r\x12\x12\n" +
	"\x0eDEBUG_CONSUMER\x10\x0e\x12\x0f\n" +
	"\vDEBUG_ADMIN\x10\x0f\x12\r\n" +
	"\tDEBUG_EOS\x10\x10\x12\x0e\n" +
	"\n" +
	"DEBUG_MOCK\x10\x11\x12\x12\n" +
	"\x0eDEBUG_ASSIGNOR\x10\x12\x12\x0e\n" +
	"\n" +
	"DEBUG_CONF\x10\x13\x12\x13\n" +
	"\x0fDEBUG_TELEMETRY\x10\x14\x12\r\n" +
	"\tDEBUG_ALL\x10\x15\"\x8a\x02\n" +
	"\x0fAutoOffsetReset\x12!\n" +
	"\x1dAUTO_OFFSET_RESET_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aAUTO_OFFSET_RESET_SMALLEST\x10\x01\x12\x1e\n" +
	"\x1aAUTO_OFFSET_RESET_EARLIEST\x10\x02\x12\x1f\n" +
	"\x1bAUTO_OFFSET_RESET_BEGINNING\x10\x03\x12\x1d\n" +
	"\x19AUTO_OFFSET_RESET_LARGEST\x10\x04\x12\x1c\n" +
	"\x18AUTO_OFFSET_RESET_LATEST\x10\x05\x12\x19\n" +
	"\x15AUTO_OFFSET_RESET_END\x10\x06\x12\x1b\n" +
	"\x17AUTO_OFFSET_RESET_ERROR\x10\a\x1a\x87\x01\n" +
	"\n" +
	"KafkaTopic\x12\x18\n" +
	"\x04name\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\x04name\x12_\n" +
	"\bsettings\x18\x02 \x01(\v2=.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.KafkaB\x04\xe8\xc71\x01R\bsettings\x1aX\n" +
	"\bRabbitmq\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\x12\x14\n" +
	"\x05vhost\x18\x03 \x01(\tR\x05vhost\x1a^\n" +
	"\x10QueryMaskingRule\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1c\n" +
	"\x06regexp\x18\x02 \x01(\tB\x04\xe8\xc71\x01R\x06regexp\x12\x18\n" +
	"\areplace\x18\x03 \x01(\tR\areplace\x1a\xda\x02\n" +
	"\n" +
	"QueryCache\x12O\n" +
	"\x11max_size_in_bytes\x18\x01 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x0emaxSizeInBytes\x12E\n" +
	"\vmax_entries\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\n" +
	"maxEntries\x12Z\n" +
	"\x17max_entry_size_in_bytes\x18\x03 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x13maxEntrySizeInBytes\x12X\n" +
	"\x16max_entry_size_in_rows\x18\x04 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x12maxEntrySizeInRows\x1a^\n" +
	"\n" +
	"JdbcBridge\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12<\n" +
	"\x04port\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueB\v\xfa\xc71\a0-65535R\x04port\x1a\x89\x01\n" +
	"\x05Macro\x12>\n" +
	"\x04name\x18\x01 \x01(\tB*\xe8\xc71\x01\xf2\xc71\x1a[a-zA-Z0-9_][a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x04name\x12@\n" +
	"\x05value\x18\x02 \x01(\tB*\xe8\xc71\x01\xf2\xc71\x1a[a-zA-Z0-9_][a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x05value\"d\n" +
	"\bLogLevel\x12\x19\n" +
	"\x15LOG_LEVEL_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05TRACE\x10\x01\x12\t\n" +
	"\x05DEBUG\x10\x02\x12\x0f\n" +
	"\vINFORMATION\x10\x03\x12\v\n" +
	"\aWARNING\x10\x04\x12\t\n" +
	"\x05ERROR\x10\x05\"\xc5\x02\n" +
	"\x13ClickhouseConfigSet\x12h\n" +
	"\x10effective_config\x18\x01 \x01(\v27.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigB\x04\xe8\xc71\x01R\x0feffectiveConfig\x12^\n" +
	"\vuser_config\x18\x02 \x01(\v27.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigB\x04\xe8\xc71\x01R\n" +
	"userConfig\x12d\n" +
	"\x0edefault_config\x18\x03 \x01(\v27.yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigB\x04\xe8\xc71\x01R\rdefaultConfigB\x81\x01\n" +
	")yandex.cloud.api.mdb.clickhouse.v1.configZTgithub.com/yandex-cloud/go-genproto/yandex/cloud/mdb/clickhouse/v1/config;clickhouseb\x06proto3"

var (
	file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescData []byte
)

func file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDesc), len(file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDesc)))
	})
	return file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDescData
}

var file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_goTypes = []any{
	(ClickhouseConfig_LogLevel)(0),                                    // 0: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.LogLevel
	(ClickhouseConfig_MergeTree_DeduplicateMergeProjectionMode)(0),    // 1: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.DeduplicateMergeProjectionMode
	(ClickhouseConfig_MergeTree_LightweightMutationProjectionMode)(0), // 2: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.LightweightMutationProjectionMode
	(ClickhouseConfig_Compression_Method)(0),                          // 3: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression.Method
	(ClickhouseConfig_ExternalDictionary_Layout_Type)(0),              // 4: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout.Type
	(ClickhouseConfig_ExternalDictionary_PostgresqlSource_SslMode)(0), // 5: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode
	(ClickhouseConfig_Kafka_SecurityProtocol)(0),                      // 6: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.SecurityProtocol
	(ClickhouseConfig_Kafka_SaslMechanism)(0),                         // 7: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.SaslMechanism
	(ClickhouseConfig_Kafka_Debug)(0),                                 // 8: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.Debug
	(ClickhouseConfig_Kafka_AutoOffsetReset)(0),                       // 9: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.AutoOffsetReset
	(*ClickhouseConfig)(nil),                                          // 10: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig
	(*ClickhouseConfigSet)(nil),                                       // 11: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigSet
	(*ClickhouseConfig_AccessControlImprovements)(nil),                // 12: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.AccessControlImprovements
	(*ClickhouseConfig_MergeTree)(nil),                                // 13: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree
	(*ClickhouseConfig_Compression)(nil),                              // 14: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression
	(*ClickhouseConfig_ExternalDictionary)(nil),                       // 15: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary
	(*ClickhouseConfig_GraphiteRollup)(nil),                           // 16: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup
	(*ClickhouseConfig_Kafka)(nil),                                    // 17: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka
	(*ClickhouseConfig_KafkaTopic)(nil),                               // 18: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.KafkaTopic
	(*ClickhouseConfig_Rabbitmq)(nil),                                 // 19: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Rabbitmq
	(*ClickhouseConfig_QueryMaskingRule)(nil),                         // 20: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.QueryMaskingRule
	(*ClickhouseConfig_QueryCache)(nil),                               // 21: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.QueryCache
	(*ClickhouseConfig_JdbcBridge)(nil),                               // 22: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.JdbcBridge
	(*ClickhouseConfig_Macro)(nil),                                    // 23: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Macro
	(*ClickhouseConfig_ExternalDictionary_Structure)(nil),             // 24: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure
	(*ClickhouseConfig_ExternalDictionary_Layout)(nil),                // 25: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout
	(*ClickhouseConfig_ExternalDictionary_Range)(nil),                 // 26: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range
	(*ClickhouseConfig_ExternalDictionary_HttpSource)(nil),            // 27: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource
	(*ClickhouseConfig_ExternalDictionary_MysqlSource)(nil),           // 28: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource
	(*ClickhouseConfig_ExternalDictionary_ClickhouseSource)(nil),      // 29: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource
	(*ClickhouseConfig_ExternalDictionary_MongodbSource)(nil),         // 30: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource
	(*ClickhouseConfig_ExternalDictionary_PostgresqlSource)(nil),      // 31: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource
	(*ClickhouseConfig_ExternalDictionary_Structure_Id)(nil),          // 32: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id
	(*ClickhouseConfig_ExternalDictionary_Structure_Key)(nil),         // 33: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key
	(*ClickhouseConfig_ExternalDictionary_Structure_Attribute)(nil),   // 34: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute
	(*ClickhouseConfig_ExternalDictionary_HttpSource_Header)(nil),     // 35: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource.Header
	(*ClickhouseConfig_ExternalDictionary_MysqlSource_Replica)(nil),   // 36: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica
	(*ClickhouseConfig_GraphiteRollup_Pattern)(nil),                   // 37: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern
	(*ClickhouseConfig_GraphiteRollup_Pattern_Retention)(nil),         // 38: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention
	(*wrapperspb.Int64Value)(nil),                                     // 39: google.protobuf.Int64Value
	(*wrapperspb.BoolValue)(nil),                                      // 40: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil),                                    // 41: google.protobuf.StringValue
	(*wrapperspb.DoubleValue)(nil),                                    // 42: google.protobuf.DoubleValue
}
var file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_depIdxs = []int32{
	39,  // 0: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.background_pool_size:type_name -> google.protobuf.Int64Value
	39,  // 1: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.background_merges_mutations_concurrency_ratio:type_name -> google.protobuf.Int64Value
	39,  // 2: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.background_schedule_pool_size:type_name -> google.protobuf.Int64Value
	39,  // 3: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.background_fetches_pool_size:type_name -> google.protobuf.Int64Value
	39,  // 4: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.background_move_pool_size:type_name -> google.protobuf.Int64Value
	39,  // 5: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.background_distributed_schedule_pool_size:type_name -> google.protobuf.Int64Value
	39,  // 6: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.background_buffer_flush_schedule_pool_size:type_name -> google.protobuf.Int64Value
	39,  // 7: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.background_message_broker_schedule_pool_size:type_name -> google.protobuf.Int64Value
	39,  // 8: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.background_common_pool_size:type_name -> google.protobuf.Int64Value
	40,  // 9: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.dictionaries_lazy_load:type_name -> google.protobuf.BoolValue
	0,   // 10: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.log_level:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.LogLevel
	39,  // 11: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.query_log_retention_size:type_name -> google.protobuf.Int64Value
	39,  // 12: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.query_log_retention_time:type_name -> google.protobuf.Int64Value
	40,  // 13: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.query_thread_log_enabled:type_name -> google.protobuf.BoolValue
	39,  // 14: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.query_thread_log_retention_size:type_name -> google.protobuf.Int64Value
	39,  // 15: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.query_thread_log_retention_time:type_name -> google.protobuf.Int64Value
	39,  // 16: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.part_log_retention_size:type_name -> google.protobuf.Int64Value
	39,  // 17: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.part_log_retention_time:type_name -> google.protobuf.Int64Value
	40,  // 18: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.metric_log_enabled:type_name -> google.protobuf.BoolValue
	39,  // 19: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.metric_log_retention_size:type_name -> google.protobuf.Int64Value
	39,  // 20: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.metric_log_retention_time:type_name -> google.protobuf.Int64Value
	40,  // 21: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.trace_log_enabled:type_name -> google.protobuf.BoolValue
	39,  // 22: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.trace_log_retention_size:type_name -> google.protobuf.Int64Value
	39,  // 23: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.trace_log_retention_time:type_name -> google.protobuf.Int64Value
	40,  // 24: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.text_log_enabled:type_name -> google.protobuf.BoolValue
	39,  // 25: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.text_log_retention_size:type_name -> google.protobuf.Int64Value
	39,  // 26: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.text_log_retention_time:type_name -> google.protobuf.Int64Value
	0,   // 27: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.text_log_level:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.LogLevel
	40,  // 28: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.opentelemetry_span_log_enabled:type_name -> google.protobuf.BoolValue
	39,  // 29: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.opentelemetry_span_log_retention_size:type_name -> google.protobuf.Int64Value
	39,  // 30: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.opentelemetry_span_log_retention_time:type_name -> google.protobuf.Int64Value
	40,  // 31: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.query_views_log_enabled:type_name -> google.protobuf.BoolValue
	39,  // 32: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.query_views_log_retention_size:type_name -> google.protobuf.Int64Value
	39,  // 33: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.query_views_log_retention_time:type_name -> google.protobuf.Int64Value
	40,  // 34: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.asynchronous_metric_log_enabled:type_name -> google.protobuf.BoolValue
	39,  // 35: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.asynchronous_metric_log_retention_size:type_name -> google.protobuf.Int64Value
	39,  // 36: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.asynchronous_metric_log_retention_time:type_name -> google.protobuf.Int64Value
	40,  // 37: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.session_log_enabled:type_name -> google.protobuf.BoolValue
	39,  // 38: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.session_log_retention_size:type_name -> google.protobuf.Int64Value
	39,  // 39: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.session_log_retention_time:type_name -> google.protobuf.Int64Value
	40,  // 40: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.zookeeper_log_enabled:type_name -> google.protobuf.BoolValue
	39,  // 41: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.zookeeper_log_retention_size:type_name -> google.protobuf.Int64Value
	39,  // 42: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.zookeeper_log_retention_time:type_name -> google.protobuf.Int64Value
	40,  // 43: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.asynchronous_insert_log_enabled:type_name -> google.protobuf.BoolValue
	39,  // 44: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.asynchronous_insert_log_retention_size:type_name -> google.protobuf.Int64Value
	39,  // 45: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.asynchronous_insert_log_retention_time:type_name -> google.protobuf.Int64Value
	40,  // 46: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.processors_profile_log_enabled:type_name -> google.protobuf.BoolValue
	39,  // 47: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.processors_profile_log_retention_size:type_name -> google.protobuf.Int64Value
	39,  // 48: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.processors_profile_log_retention_time:type_name -> google.protobuf.Int64Value
	40,  // 49: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.error_log_enabled:type_name -> google.protobuf.BoolValue
	39,  // 50: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.error_log_retention_size:type_name -> google.protobuf.Int64Value
	39,  // 51: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.error_log_retention_time:type_name -> google.protobuf.Int64Value
	12,  // 52: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.access_control_improvements:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.AccessControlImprovements
	39,  // 53: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.max_connections:type_name -> google.protobuf.Int64Value
	39,  // 54: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.max_concurrent_queries:type_name -> google.protobuf.Int64Value
	39,  // 55: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.max_table_size_to_drop:type_name -> google.protobuf.Int64Value
	39,  // 56: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.max_partition_size_to_drop:type_name -> google.protobuf.Int64Value
	39,  // 57: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.keep_alive_timeout:type_name -> google.protobuf.Int64Value
	39,  // 58: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.uncompressed_cache_size:type_name -> google.protobuf.Int64Value
	39,  // 59: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.mark_cache_size:type_name -> google.protobuf.Int64Value
	40,  // 60: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.geobase_enabled:type_name -> google.protobuf.BoolValue
	41,  // 61: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.default_database:type_name -> google.protobuf.StringValue
	39,  // 62: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.total_memory_profiler_step:type_name -> google.protobuf.Int64Value
	42,  // 63: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.total_memory_tracker_sample_probability:type_name -> google.protobuf.DoubleValue
	39,  // 64: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.async_insert_threads:type_name -> google.protobuf.Int64Value
	39,  // 65: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.backup_threads:type_name -> google.protobuf.Int64Value
	39,  // 66: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.restore_threads:type_name -> google.protobuf.Int64Value
	13,  // 67: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.merge_tree:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree
	14,  // 68: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.compression:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression
	15,  // 69: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.dictionaries:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary
	16,  // 70: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.graphite_rollup:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup
	17,  // 71: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.kafka:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka
	18,  // 72: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.kafka_topics:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.KafkaTopic
	19,  // 73: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.rabbitmq:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Rabbitmq
	20,  // 74: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.query_masking_rules:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.QueryMaskingRule
	21,  // 75: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.query_cache:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.QueryCache
	22,  // 76: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.jdbc_bridge:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.JdbcBridge
	40,  // 77: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.mysql_protocol:type_name -> google.protobuf.BoolValue
	23,  // 78: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.custom_macros:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Macro
	39,  // 79: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.builtin_dictionaries_reload_interval:type_name -> google.protobuf.Int64Value
	10,  // 80: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigSet.effective_config:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig
	10,  // 81: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigSet.user_config:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig
	10,  // 82: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfigSet.default_config:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig
	40,  // 83: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.AccessControlImprovements.select_from_system_db_requires_grant:type_name -> google.protobuf.BoolValue
	40,  // 84: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.AccessControlImprovements.select_from_information_schema_requires_grant:type_name -> google.protobuf.BoolValue
	39,  // 85: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.parts_to_delay_insert:type_name -> google.protobuf.Int64Value
	39,  // 86: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.parts_to_throw_insert:type_name -> google.protobuf.Int64Value
	39,  // 87: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.inactive_parts_to_delay_insert:type_name -> google.protobuf.Int64Value
	39,  // 88: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.inactive_parts_to_throw_insert:type_name -> google.protobuf.Int64Value
	39,  // 89: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.max_avg_part_size_for_too_many_parts:type_name -> google.protobuf.Int64Value
	39,  // 90: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.max_parts_in_total:type_name -> google.protobuf.Int64Value
	39,  // 91: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.max_replicated_merges_in_queue:type_name -> google.protobuf.Int64Value
	39,  // 92: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.number_of_free_entries_in_pool_to_lower_max_size_of_merge:type_name -> google.protobuf.Int64Value
	39,  // 93: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.number_of_free_entries_in_pool_to_execute_mutation:type_name -> google.protobuf.Int64Value
	39,  // 94: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.max_bytes_to_merge_at_min_space_in_pool:type_name -> google.protobuf.Int64Value
	39,  // 95: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.max_bytes_to_merge_at_max_space_in_pool:type_name -> google.protobuf.Int64Value
	39,  // 96: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.min_bytes_for_wide_part:type_name -> google.protobuf.Int64Value
	39,  // 97: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.min_rows_for_wide_part:type_name -> google.protobuf.Int64Value
	39,  // 98: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.cleanup_delay_period:type_name -> google.protobuf.Int64Value
	39,  // 99: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.max_cleanup_delay_period:type_name -> google.protobuf.Int64Value
	39,  // 100: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.merge_selecting_sleep_ms:type_name -> google.protobuf.Int64Value
	39,  // 101: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.max_merge_selecting_sleep_ms:type_name -> google.protobuf.Int64Value
	39,  // 102: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.min_age_to_force_merge_seconds:type_name -> google.protobuf.Int64Value
	40,  // 103: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.min_age_to_force_merge_on_partition_only:type_name -> google.protobuf.BoolValue
	39,  // 104: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.merge_max_block_size:type_name -> google.protobuf.Int64Value
	1,   // 105: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.deduplicate_merge_projection_mode:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.DeduplicateMergeProjectionMode
	2,   // 106: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.lightweight_mutation_projection_mode:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.LightweightMutationProjectionMode
	39,  // 107: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.replicated_deduplication_window:type_name -> google.protobuf.Int64Value
	39,  // 108: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.replicated_deduplication_window_seconds:type_name -> google.protobuf.Int64Value
	40,  // 109: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.fsync_after_insert:type_name -> google.protobuf.BoolValue
	40,  // 110: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.fsync_part_directory:type_name -> google.protobuf.BoolValue
	39,  // 111: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.min_compressed_bytes_to_fsync_after_fetch:type_name -> google.protobuf.Int64Value
	39,  // 112: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.min_compressed_bytes_to_fsync_after_merge:type_name -> google.protobuf.Int64Value
	39,  // 113: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.min_rows_to_fsync_after_merge:type_name -> google.protobuf.Int64Value
	40,  // 114: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.ttl_only_drop_parts:type_name -> google.protobuf.BoolValue
	39,  // 115: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.merge_with_ttl_timeout:type_name -> google.protobuf.Int64Value
	39,  // 116: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.merge_with_recompression_ttl_timeout:type_name -> google.protobuf.Int64Value
	39,  // 117: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.max_number_of_merges_with_ttl_in_pool:type_name -> google.protobuf.Int64Value
	40,  // 118: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.materialize_ttl_recalculate_only:type_name -> google.protobuf.BoolValue
	40,  // 119: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.check_sample_column_is_correct:type_name -> google.protobuf.BoolValue
	40,  // 120: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.MergeTree.allow_remote_fs_zero_copy_replication:type_name -> google.protobuf.BoolValue
	3,   // 121: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression.method:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression.Method
	39,  // 122: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Compression.level:type_name -> google.protobuf.Int64Value
	24,  // 123: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.structure:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure
	25,  // 124: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.layout:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout
	26,  // 125: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.lifetime_range:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Range
	27,  // 126: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.http_source:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource
	28,  // 127: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.mysql_source:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource
	29,  // 128: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.clickhouse_source:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource
	30,  // 129: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.mongodb_source:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MongodbSource
	31,  // 130: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.postgresql_source:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource
	37,  // 131: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.patterns:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern
	6,   // 132: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.security_protocol:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.SecurityProtocol
	7,   // 133: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.sasl_mechanism:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.SaslMechanism
	40,  // 134: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.enable_ssl_certificate_verification:type_name -> google.protobuf.BoolValue
	39,  // 135: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.max_poll_interval_ms:type_name -> google.protobuf.Int64Value
	39,  // 136: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.session_timeout_ms:type_name -> google.protobuf.Int64Value
	8,   // 137: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.debug:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.Debug
	9,   // 138: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.auto_offset_reset:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka.AutoOffsetReset
	17,  // 139: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.KafkaTopic.settings:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.Kafka
	39,  // 140: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.QueryCache.max_size_in_bytes:type_name -> google.protobuf.Int64Value
	39,  // 141: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.QueryCache.max_entries:type_name -> google.protobuf.Int64Value
	39,  // 142: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.QueryCache.max_entry_size_in_bytes:type_name -> google.protobuf.Int64Value
	39,  // 143: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.QueryCache.max_entry_size_in_rows:type_name -> google.protobuf.Int64Value
	39,  // 144: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.JdbcBridge.port:type_name -> google.protobuf.Int64Value
	32,  // 145: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.id:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Id
	33,  // 146: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.key:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key
	34,  // 147: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.range_min:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute
	34,  // 148: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.range_max:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute
	34,  // 149: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.attributes:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute
	4,   // 150: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout.type:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout.Type
	40,  // 151: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout.allow_read_expired_keys:type_name -> google.protobuf.BoolValue
	40,  // 152: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Layout.access_to_key_from_attributes:type_name -> google.protobuf.BoolValue
	35,  // 153: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource.headers:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.HttpSource.Header
	36,  // 154: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.replicas:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.Replica
	40,  // 155: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.close_connection:type_name -> google.protobuf.BoolValue
	40,  // 156: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.MysqlSource.share_connection:type_name -> google.protobuf.BoolValue
	40,  // 157: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.ClickhouseSource.secure:type_name -> google.protobuf.BoolValue
	5,   // 158: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource.ssl_mode:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.PostgresqlSource.SslMode
	34,  // 159: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Key.attributes:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.ExternalDictionary.Structure.Attribute
	38,  // 160: yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.retention:type_name -> yandex.cloud.mdb.clickhouse.v1.config.ClickhouseConfig.GraphiteRollup.Pattern.Retention
	161, // [161:161] is the sub-list for method output_type
	161, // [161:161] is the sub-list for method input_type
	161, // [161:161] is the sub-list for extension type_name
	161, // [161:161] is the sub-list for extension extendee
	0,   // [0:161] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_init() }
func file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_init() {
	if File_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto != nil {
		return
	}
	file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes[5].OneofWrappers = []any{
		(*ClickhouseConfig_ExternalDictionary_FixedLifetime)(nil),
		(*ClickhouseConfig_ExternalDictionary_LifetimeRange)(nil),
		(*ClickhouseConfig_ExternalDictionary_HttpSource_)(nil),
		(*ClickhouseConfig_ExternalDictionary_MysqlSource_)(nil),
		(*ClickhouseConfig_ExternalDictionary_ClickhouseSource_)(nil),
		(*ClickhouseConfig_ExternalDictionary_MongodbSource_)(nil),
		(*ClickhouseConfig_ExternalDictionary_PostgresqlSource_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDesc), len(file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_rawDesc)),
			NumEnums:      10,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto = out.File
	file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_goTypes = nil
	file_yandex_cloud_mdb_clickhouse_v1_config_clickhouse_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/mdb/clickhouse/v1/format_schema_service.proto

package clickhouse

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetFormatSchemaRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClickHouse cluster ID.
	//
	// To get a ClickHouse cluster ID, use the [ClusterService.List] method.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Format schema name.
	//
	// To get a format schema name, use the [FormatSchemaService.List] method.
	FormatSchemaName string `protobuf:"bytes,2,opt,name=format_schema_name,json=formatSchemaName,proto3" json:"format_schema_name,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetFormatSchemaRequest) Reset() {
	*x = GetFormatSchemaRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFormatSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFormatSchemaRequest) ProtoMessage() {}

func (x *GetFormatSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFormatSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetFormatSchemaRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetFormatSchemaRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetFormatSchemaRequest) GetFormatSchemaName() string {
	if x != nil {
		return x.FormatSchemaName
	}
	return ""
}

type ListFormatSchemasRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClickHouse cluster ID.
	//
	// To get a ClickHouse cluster ID, use the [ClusterService.List] method.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of the results is larger than [page_size], the service returns [ListFormatSchemasResponse.next_page_token]. You can use it to get the next page of the results in subsequent requests of a format schema list.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the [ListFormatSchemasResponse.next_page_token] returned by the previous format schema list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFormatSchemasRequest) Reset() {
	*x = ListFormatSchemasRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFormatSchemasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFormatSchemasRequest) ProtoMessage() {}

func (x *ListFormatSchemasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFormatSchemasRequest.ProtoReflect.Descriptor instead.
func (*ListFormatSchemasRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListFormatSchemasRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListFormatSchemasRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFormatSchemasRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListFormatSchemasResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of format schemas.
	FormatSchemas []*FormatSchema `protobuf:"bytes,1,rep,name=format_schemas,json=formatSchemas,proto3" json:"format_schemas,omitempty"`
	// This token allows you to get the next page of results when requesting the format schema list. If the number of the results is larger than [ListFormatSchemasRequest.page_size], use the [next_page_token] as the value for the [ListFormatSchemasRequest.page_token] parameter in the next request. Each subsequent request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFormatSchemasResponse) Reset() {
	*x = ListFormatSchemasResponse{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFormatSchemasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFormatSchemasResponse) ProtoMessage() {}

func (x *ListFormatSchemasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFormatSchemasResponse.ProtoReflect.Descriptor instead.
func (*ListFormatSchemasResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListFormatSchemasResponse) GetFormatSchemas() []*FormatSchema {
	if x != nil {
		return x.FormatSchemas
	}
	return nil
}

func (x *ListFormatSchemasResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateFormatSchemaRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClickHouse cluster ID.
	//
	// To get a ClickHouse cluster ID, use the [ClusterService.List] method.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Format schema name.
	FormatSchemaName string `protobuf:"bytes,2,opt,name=format_schema_name,json=formatSchemaName,proto3" json:"format_schema_name,omitempty"`
	// Schema type. Possible values are the following:
	//
	// * FORMAT_SCHEMA_TYPE_PROTOBUF - [Protobuf](https://protobuf.dev/) data format (including [ProtobufSingle](https://clickhouse.com/docs/en/interfaces/formats#protobufsingle)).
	// * FORMAT_SCHEMA_TYPE_CAPNPROTO - [Cap'n Proto](https://capnproto.org/) data format.
	Type FormatSchemaType `protobuf:"varint,3,opt,name=type,proto3,enum=yandex.cloud.mdb.clickhouse.v1.FormatSchemaType" json:"type,omitempty"`
	// [Link to the file](/docs/managed-clickhouse/operations/s3-access#get-link-to-object) of a format schema in Yandex Object Storage. Managed Service for ClickHouse works only with format schemas imported to Object Storage.
	Uri           string `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFormatSchemaRequest) Reset() {
	*x = CreateFormatSchemaRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFormatSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFormatSchemaRequest) ProtoMessage() {}

func (x *CreateFormatSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFormatSchemaRequest.ProtoReflect.Descriptor instead.
func (*CreateFormatSchemaRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFormatSchemaRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateFormatSchemaRequest) GetFormatSchemaName() string {
	if x != nil {
		return x.FormatSchemaName
	}
	return ""
}

func (x *CreateFormatSchemaRequest) GetType() FormatSchemaType {
	if x != nil {
		return x.Type
	}
	return FormatSchemaType_FORMAT_SCHEMA_TYPE_UNSPECIFIED
}

func (x *CreateFormatSchemaRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type CreateFormatSchemaMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClickHouse cluster ID.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Format schema name.
	FormatSchemaName string `protobuf:"bytes,2,opt,name=format_schema_name,json=formatSchemaName,proto3" json:"format_schema_name,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CreateFormatSchemaMetadata) Reset() {
	*x = CreateFormatSchemaMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFormatSchemaMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFormatSchemaMetadata) ProtoMessage() {}

func (x *CreateFormatSchemaMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFormatSchemaMetadata.ProtoReflect.Descriptor instead.
func (*CreateFormatSchemaMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFormatSchemaMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateFormatSchemaMetadata) GetFormatSchemaName() string {
	if x != nil {
		return x.FormatSchemaName
	}
	return ""
}

type UpdateFormatSchemaRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClickHouse cluster ID.
	//
	// To get a ClickHouse cluster ID, use the [ClusterService.List] method.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Format schema name.
	//
	// To get a format schema name, use the [FormatSchemaService.List] method.
	FormatSchemaName string                 `protobuf:"bytes,2,opt,name=format_schema_name,json=formatSchemaName,proto3" json:"format_schema_name,omitempty"`
	UpdateMask       *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// [Link to the file](/docs/managed-clickhouse/operations/s3-access#get-link-to-object) of a format schema in Yandex Object Storage. Managed Service for ClickHouse works only with format schemas imported to Object Storage.
	Uri           string `protobuf:"bytes,4,opt,name=uri,proto3" json:"uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFormatSchemaRequest) Reset() {
	*x = UpdateFormatSchemaRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFormatSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFormatSchemaRequest) ProtoMessage() {}

func (x *UpdateFormatSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFormatSchemaRequest.ProtoReflect.Descriptor instead.
func (*UpdateFormatSchemaRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateFormatSchemaRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateFormatSchemaRequest) GetFormatSchemaName() string {
	if x != nil {
		return x.FormatSchemaName
	}
	return ""
}

func (x *UpdateFormatSchemaRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateFormatSchemaRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type UpdateFormatSchemaMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClickHouse cluster ID.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Format schema name.
	FormatSchemaName string `protobuf:"bytes,2,opt,name=format_schema_name,json=formatSchemaName,proto3" json:"format_schema_name,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UpdateFormatSchemaMetadata) Reset() {
	*x = UpdateFormatSchemaMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFormatSchemaMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFormatSchemaMetadata) ProtoMessage() {}

func (x *UpdateFormatSchemaMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFormatSchemaMetadata.ProtoReflect.Descriptor instead.
func (*UpdateFormatSchemaMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateFormatSchemaMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateFormatSchemaMetadata) GetFormatSchemaName() string {
	if x != nil {
		return x.FormatSchemaName
	}
	return ""
}

type DeleteFormatSchemaRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClickHouse cluster ID.
	//
	// To get a ClickHouse cluster ID, use the [ClusterService.List] method.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Format schema name.
	//
	// To get a format schema name, use the [FormatSchemaService.List] method.
	FormatSchemaName string `protobuf:"bytes,2,opt,name=format_schema_name,json=formatSchemaName,proto3" json:"format_schema_name,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DeleteFormatSchemaRequest) Reset() {
	*x = DeleteFormatSchemaRequest{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFormatSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFormatSchemaRequest) ProtoMessage() {}

func (x *DeleteFormatSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFormatSchemaRequest.ProtoReflect.Descriptor instead.
func (*DeleteFormatSchemaRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteFormatSchemaRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteFormatSchemaRequest) GetFormatSchemaName() string {
	if x != nil {
		return x.FormatSchemaName
	}
	return ""
}

type DeleteFormatSchemaMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClickHouse cluster ID.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Format schema name.
	FormatSchemaName string `protobuf:"bytes,2,opt,name=format_schema_name,json=formatSchemaName,proto3" json:"format_schema_name,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DeleteFormatSchemaMetadata) Reset() {
	*x = DeleteFormatSchemaMetadata{}
	mi := &file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFormatSchemaMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFormatSchemaMetadata) ProtoMessage() {}

func (x *DeleteFormatSchemaMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFormatSchemaMetadata.ProtoReflect.Descriptor instead.
func (*DeleteFormatSchemaMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteFormatSchemaMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteFormatSchemaMetadata) GetFormatSchemaName() string {
	if x != nil {
		return x.FormatSchemaName
	}
	return ""
}

var File_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_rawDesc = "" +
	"\n" +
	":yandex/cloud/mdb/clickhouse/v1/format_schema_service.proto\x12\x1eyandex.cloud.mdb.clickhouse.v1\x1a\x1cgoogle/api/annotations.proto\x1a google/protobuf/field_mask.proto\x1a yandex/cloud/api/operation.proto\x1a&yandex/cloud/operation/operation.proto\x1a\x1dyandex/cloud/validation.proto\x1a2yandex/cloud/mdb/clickhouse/v1/format_schema.proto\"\x93\x01\n" +
	"\x16GetFormatSchemaRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12L\n" +
	"\x12format_schema_name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x10formatSchemaName\"\x9a\x01\n" +
	"\x18ListFormatSchemasRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x98\x01\n" +
	"\x19ListFormatSchemasResponse\x12S\n" +
	"\x0eformat_schemas\x18\x01 \x03(\v2,.yandex.cloud.mdb.clickhouse.v1.FormatSchemaR\rformatSchemas\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xfa\x01\n" +
	"\x19CreateFormatSchemaRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12L\n" +
	"\x12format_schema_name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x10formatSchemaName\x12J\n" +
	"\x04type\x18\x03 \x01(\x0e20.yandex.cloud.mdb.clickhouse.v1.FormatSchemaTypeB\x04\xe8\xc71\x01R\x04type\x12\x16\n" +
	"\x03uri\x18\x04 \x01(\tB\x04\xe8\xc71\x01R\x03uri\"i\n" +
	"\x1aCreateFormatSchemaMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12,\n" +
	"\x12format_schema_name\x18\x02 \x01(\tR\x10formatSchemaName\"\xe5\x01\n" +
	"\x19UpdateFormatSchemaRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12L\n" +
	"\x12format_schema_name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x10formatSchemaName\x12;\n" +
	"\vupdate_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12\x10\n" +
	"\x03uri\x18\x04 \x01(\tR\x03uri\"i\n" +
	"\x1aUpdateFormatSchemaMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12,\n" +
	"\x12format_schema_name\x18\x02 \x01(\tR\x10formatSchemaName\"\x96\x01\n" +
	"\x19DeleteFormatSchemaRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12L\n" +
	"\x12format_schema_name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x10formatSchemaName\"i\n" +
	"\x1aDeleteFormatSchemaMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12,\n" +
	"\x12format_schema_name\x18\x02 \x01(\tR\x10formatSchemaName2\xea\b\n" +
	"\x13FormatSchemaService\x12\xc4\x01\n" +
	"\x03Get\x126.yandex.cloud.mdb.clickhouse.v1.GetFormatSchemaRequest\x1a,.yandex.cloud.mdb.clickhouse.v1.FormatSchema\"W\x82\xd3\xe4\x93\x02Q\x12O/managed-clickhouse/v1/clusters/{cluster_id}/formatSchemas/{format_schema_name}\x12\xbf\x01\n" +
	"\x04List\x128.yandex.cloud.mdb.clickhouse.v1.ListFormatSchemasRequest\x1a9.yandex.cloud.mdb.clickhouse.v1.ListFormatSchemasResponse\"B\x82\xd3\xe4\x93\x02<\x12:/managed-clickhouse/v1/clusters/{cluster_id}/formatSchemas\x12\xdb\x01\n" +
	"\x06Create\x129.yandex.cloud.mdb.clickhouse.v1.CreateFormatSchemaRequest\x1a!.yandex.cloud.operation.Operation\"s\xb2\xd2**\n" +
	"\x1aCreateFormatSchemaMetadata\x12\fFormatSchema\x82\xd3\xe4\x93\x02?:\x01*\":/managed-clickhouse/v1/clusters/{cluster_id}/formatSchemas\x12\xf1\x01\n" +
	"\x06Update\x129.yandex.cloud.mdb.clickhouse.v1.UpdateFormatSchemaRequest\x1a!.yandex.cloud.operation.Operation\"\x88\x01\xb2\xd2**\n" +
	"\x1aUpdateFormatSchemaMetadata\x12\fFormatSchema\x82\xd3\xe4\x93\x02T:\x01*2O/managed-clickhouse/v1/clusters/{cluster_id}/formatSchemas/{format_schema_name}\x12\xf7\x01\n" +
	"\x06Delete\x129.yandex.cloud.mdb.clickhouse.v1.DeleteFormatSchemaRequest\x1a!.yandex.cloud.operation.Operation\"\x8e\x01\xb2\xd2*3\n" +
	"\x1aDeleteFormatSchemaMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02Q*O/managed-clickhouse/v1/clusters/{cluster_id}/formatSchemas/{format_schema_name}Bs\n" +
	"\"yandex.cloud.api.mdb.clickhouse.v1ZMgithub.com/yandex-cloud/go-genproto/yandex/cloud/mdb/clickhouse/v1;clickhouseb\x06proto3"

var (
	file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_rawDescData []byte
)

func file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_rawDesc), len(file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_rawDesc)))
	})
	return file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_rawDescData
}

var file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_goTypes = []any{
	(*GetFormatSchemaRequest)(nil),     // 0: yandex.cloud.mdb.clickhouse.v1.GetFormatSchemaRequest
	(*ListFormatSchemasRequest)(nil),   // 1: yandex.cloud.mdb.clickhouse.v1.ListFormatSchemasRequest
	(*ListFormatSchemasResponse)(nil),  // 2: yandex.cloud.mdb.clickhouse.v1.ListFormatSchemasResponse
	(*CreateFormatSchemaRequest)(nil),  // 3: yandex.cloud.mdb.clickhouse.v1.CreateFormatSchemaRequest
	(*CreateFormatSchemaMetadata)(nil), // 4: yandex.cloud.mdb.clickhouse.v1.CreateFormatSchemaMetadata
	(*UpdateFormatSchemaRequest)(nil),  // 5: yandex.cloud.mdb.clickhouse.v1.UpdateFormatSchemaRequest
	(*UpdateFormatSchemaMetadata)(nil), // 6: yandex.cloud.mdb.clickhouse.v1.UpdateFormatSchemaMetadata
	(*DeleteFormatSchemaRequest)(nil),  // 7: yandex.cloud.mdb.clickhouse.v1.DeleteFormatSchemaRequest
	(*DeleteFormatSchemaMetadata)(nil), // 8: yandex.cloud.mdb.clickhouse.v1.DeleteFormatSchemaMetadata
	(*FormatSchema)(nil),               // 9: yandex.cloud.mdb.clickhouse.v1.FormatSchema
	(FormatSchemaType)(0),              // 10: yandex.cloud.mdb.clickhouse.v1.FormatSchemaType
	(*fieldmaskpb.FieldMask)(nil),      // 11: google.protobuf.FieldMask
	(*operation.Operation)(nil),        // 12: yandex.cloud.operation.Operation
}
var file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_depIdxs = []int32{
	9,  // 0: yandex.cloud.mdb.clickhouse.v1.ListFormatSchemasResponse.format_schemas:type_name -> yandex.cloud.mdb.clickhouse.v1.FormatSchema
	10, // 1: yandex.cloud.mdb.clickhouse.v1.CreateFormatSchemaRequest.type:type_name -> yandex.cloud.mdb.clickhouse.v1.FormatSchemaType
	11, // 2: yandex.cloud.mdb.clickhouse.v1.UpdateFormatSchemaRequest.update_mask:type_name -> google.protobuf.FieldMask
	0,  // 3: yandex.cloud.mdb.clickhouse.v1.FormatSchemaService.Get:input_type -> yandex.cloud.mdb.clickhouse.v1.GetFormatSchemaRequest
	1,  // 4: yandex.cloud.mdb.clickhouse.v1.FormatSchemaService.List:input_type -> yandex.cloud.mdb.clickhouse.v1.ListFormatSchemasRequest
	3,  // 5: yandex.cloud.mdb.clickhouse.v1.FormatSchemaService.Create:input_type -> yandex.cloud.mdb.clickhouse.v1.CreateFormatSchemaRequest
	5,  // 6: yandex.cloud.mdb.clickhouse.v1.FormatSchemaService.Update:input_type -> yandex.cloud.mdb.clickhouse.v1.UpdateFormatSchemaRequest
	7,  // 7: yandex.cloud.mdb.clickhouse.v1.FormatSchemaService.Delete:input_type -> yandex.cloud.mdb.clickhouse.v1.DeleteFormatSchemaRequest
	9,  // 8: yandex.cloud.mdb.clickhouse.v1.FormatSchemaService.Get:output_type -> yandex.cloud.mdb.clickhouse.v1.FormatSchema
	2,  // 9: yandex.cloud.mdb.clickhouse.v1.FormatSchemaService.List:output_type -> yandex.cloud.mdb.clickhouse.v1.ListFormatSchemasResponse
	12, // 10: yandex.cloud.mdb.clickhouse.v1.FormatSchemaService.Create:output_type -> yandex.cloud.operation.Operation
	12, // 11: yandex.cloud.mdb.clickhouse.v1.FormatSchemaService.Update:output_type -> yandex.cloud.operation.Operation
	12, // 12: yandex.cloud.mdb.clickhouse.v1.FormatSchemaService.Delete:output_type -> yandex.cloud.operation.Operation
	8,  // [8:13] is the sub-list for method output_type
	3,  // [3:8] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_init() }
func file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_init() {
	if File_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto != nil {
		return
	}
	file_yandex_cloud_mdb_clickhouse_v1_format_schema_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_rawDesc), len(file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto = out.File
	file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_goTypes = nil
	file_yandex_cloud_mdb_clickhouse_v1_format_schema_service_proto_depIdxs = nil
}

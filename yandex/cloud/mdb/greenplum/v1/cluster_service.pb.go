// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/mdb/greenplum/v1/cluster_service.proto

package greenplum

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RescheduleMaintenanceRequest_RescheduleType int32

const (
	RescheduleMaintenanceRequest_RESCHEDULE_TYPE_UNSPECIFIED RescheduleMaintenanceRequest_RescheduleType = 0
	RescheduleMaintenanceRequest_IMMEDIATE                   RescheduleMaintenanceRequest_RescheduleType = 1
	RescheduleMaintenanceRequest_NEXT_AVAILABLE_WINDOW       RescheduleMaintenanceRequest_RescheduleType = 2
	RescheduleMaintenanceRequest_SPECIFIC_TIME               RescheduleMaintenanceRequest_RescheduleType = 3
)

// Enum value maps for RescheduleMaintenanceRequest_RescheduleType.
var (
	RescheduleMaintenanceRequest_RescheduleType_name = map[int32]string{
		0: "RESCHEDULE_TYPE_UNSPECIFIED",
		1: "IMMEDIATE",
		2: "NEXT_AVAILABLE_WINDOW",
		3: "SPECIFIC_TIME",
	}
	RescheduleMaintenanceRequest_RescheduleType_value = map[string]int32{
		"RESCHEDULE_TYPE_UNSPECIFIED": 0,
		"IMMEDIATE":                   1,
		"NEXT_AVAILABLE_WINDOW":       2,
		"SPECIFIC_TIME":               3,
	}
)

func (x RescheduleMaintenanceRequest_RescheduleType) Enum() *RescheduleMaintenanceRequest_RescheduleType {
	p := new(RescheduleMaintenanceRequest_RescheduleType)
	*p = x
	return p
}

func (x RescheduleMaintenanceRequest_RescheduleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RescheduleMaintenanceRequest_RescheduleType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_enumTypes[0].Descriptor()
}

func (RescheduleMaintenanceRequest_RescheduleType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_enumTypes[0]
}

func (x RescheduleMaintenanceRequest_RescheduleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RescheduleMaintenanceRequest_RescheduleType.Descriptor instead.
func (RescheduleMaintenanceRequest_RescheduleType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{18, 0}
}

type ListClusterLogsRequest_ServiceType int32

const (
	// Type is not specified.
	ListClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED ListClusterLogsRequest_ServiceType = 0
	// Greenplum® activity logs.
	ListClusterLogsRequest_GREENPLUM ListClusterLogsRequest_ServiceType = 1
	// Greenplum® pooler logs.
	ListClusterLogsRequest_GREENPLUM_POOLER ListClusterLogsRequest_ServiceType = 2
	// Greenplum® PXF service logs.
	ListClusterLogsRequest_GREENPLUM_PXF ListClusterLogsRequest_ServiceType = 3
)

// Enum value maps for ListClusterLogsRequest_ServiceType.
var (
	ListClusterLogsRequest_ServiceType_name = map[int32]string{
		0: "SERVICE_TYPE_UNSPECIFIED",
		1: "GREENPLUM",
		2: "GREENPLUM_POOLER",
		3: "GREENPLUM_PXF",
	}
	ListClusterLogsRequest_ServiceType_value = map[string]int32{
		"SERVICE_TYPE_UNSPECIFIED": 0,
		"GREENPLUM":                1,
		"GREENPLUM_POOLER":         2,
		"GREENPLUM_PXF":            3,
	}
)

func (x ListClusterLogsRequest_ServiceType) Enum() *ListClusterLogsRequest_ServiceType {
	p := new(ListClusterLogsRequest_ServiceType)
	*p = x
	return p
}

func (x ListClusterLogsRequest_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListClusterLogsRequest_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_enumTypes[1].Descriptor()
}

func (ListClusterLogsRequest_ServiceType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_enumTypes[1]
}

func (x ListClusterLogsRequest_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListClusterLogsRequest_ServiceType.Descriptor instead.
func (ListClusterLogsRequest_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{28, 0}
}

type StreamClusterLogsRequest_ServiceType int32

const (
	// Type is not specified.
	StreamClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED StreamClusterLogsRequest_ServiceType = 0
	// Greenplum® activity logs.
	StreamClusterLogsRequest_GREENPLUM StreamClusterLogsRequest_ServiceType = 1
	// Greenplum® pooler logs.
	StreamClusterLogsRequest_GREENPLUM_POOLER StreamClusterLogsRequest_ServiceType = 2
	// Greenplum® PXF service logs.
	StreamClusterLogsRequest_GREENPLUM_PXF StreamClusterLogsRequest_ServiceType = 3
)

// Enum value maps for StreamClusterLogsRequest_ServiceType.
var (
	StreamClusterLogsRequest_ServiceType_name = map[int32]string{
		0: "SERVICE_TYPE_UNSPECIFIED",
		1: "GREENPLUM",
		2: "GREENPLUM_POOLER",
		3: "GREENPLUM_PXF",
	}
	StreamClusterLogsRequest_ServiceType_value = map[string]int32{
		"SERVICE_TYPE_UNSPECIFIED": 0,
		"GREENPLUM":                1,
		"GREENPLUM_POOLER":         2,
		"GREENPLUM_PXF":            3,
	}
)

func (x StreamClusterLogsRequest_ServiceType) Enum() *StreamClusterLogsRequest_ServiceType {
	p := new(StreamClusterLogsRequest_ServiceType)
	*p = x
	return p
}

func (x StreamClusterLogsRequest_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamClusterLogsRequest_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_enumTypes[2].Descriptor()
}

func (StreamClusterLogsRequest_ServiceType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_enumTypes[2]
}

func (x StreamClusterLogsRequest_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamClusterLogsRequest_ServiceType.Descriptor instead.
func (StreamClusterLogsRequest_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{31, 0}
}

type GetClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Greenplum® cluster resource to return.
	//
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterRequest) Reset() {
	*x = GetClusterRequest{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterRequest) ProtoMessage() {}

func (x *GetClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterRequest.ProtoReflect.Descriptor instead.
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ListClustersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to list Greenplum® clusters in.
	//
	// To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return.
	//
	// If the number of available results is larger than [page_size], the service returns a [ListClustersResponse.next_page_token] that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the [ListClustersResponse.next_page_token] returned by the previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	//
	// The expression must specify:
	//
	// 1. The field name. Currently you can only use filtering with the [Cluster.name] field.
	//
	// 2. An `=` operator.
	//
	// 3. The value in double quotes (`"`). Must be 1-63 characters long and match the regular expression `[a-zA-Z0-9_-]+`.
	Filter        string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListClustersRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListClustersRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClustersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListClustersRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListClustersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of Greenplum® cluster resources.
	Clusters []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	// This token allows you to get the next page of results for list requests.
	//
	// If the number of results is larger than [ListClustersRequest.page_size], use the [next_page_token] as the value for the [ListClustersRequest.page_token] parameter in the next list request.
	//
	// Each subsequent list request has its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersResponse) Reset() {
	*x = ListClustersResponse{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersResponse) ProtoMessage() {}

func (x *ListClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersResponse.ProtoReflect.Descriptor instead.
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListClustersResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ListClustersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to create the Greenplum® cluster in.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the Greenplum® cluster. The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the Greenplum® cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the Greenplum® cluster as `key:value` pairs.
	// For example, `"project":"mvp"` or `"source":"dictionary"`.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Deployment environment of the Greenplum® cluster.
	Environment Cluster_Environment `protobuf:"varint,5,opt,name=environment,proto3,enum=yandex.cloud.mdb.greenplum.v1.Cluster_Environment" json:"environment,omitempty"`
	// Greenplum® cluster configuration.
	Config *GreenplumConfig `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	// Configuration of the Greenplum® master subcluster.
	MasterConfig *MasterSubclusterConfigSpec `protobuf:"bytes,7,opt,name=master_config,json=masterConfig,proto3" json:"master_config,omitempty"`
	// Configuration of the Greenplum® segment subcluster.
	SegmentConfig *SegmentSubclusterConfigSpec `protobuf:"bytes,8,opt,name=segment_config,json=segmentConfig,proto3" json:"segment_config,omitempty"`
	// Number of hosts in the master subcluster.
	MasterHostCount int64 `protobuf:"varint,9,opt,name=master_host_count,json=masterHostCount,proto3" json:"master_host_count,omitempty"`
	// Number of segments per host.
	SegmentInHost int64 `protobuf:"varint,10,opt,name=segment_in_host,json=segmentInHost,proto3" json:"segment_in_host,omitempty"`
	// Number of hosts in the segment subcluster.
	SegmentHostCount int64 `protobuf:"varint,11,opt,name=segment_host_count,json=segmentHostCount,proto3" json:"segment_host_count,omitempty"`
	// Owner user name.
	UserName string `protobuf:"bytes,12,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// Owner user password.
	UserPassword string `protobuf:"bytes,13,opt,name=user_password,json=userPassword,proto3" json:"user_password,omitempty"`
	// ID of the network to create the cluster in.
	NetworkId string `protobuf:"bytes,14,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// User security groups.
	SecurityGroupIds []string `protobuf:"bytes,15,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// Determines whether the cluster is protected from being deleted.
	DeletionProtection bool `protobuf:"varint,16,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// Host groups to place VMs of the cluster in.
	HostGroupIds []string `protobuf:"bytes,17,rep,name=host_group_ids,json=hostGroupIds,proto3" json:"host_group_ids,omitempty"`
	// A Greenplum® cluster maintenance window. Should be defined by either one of the two options.
	MaintenanceWindow *MaintenanceWindow `protobuf:"bytes,19,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"`
	// Configuration of Greenplum® and Odyssey®.
	ConfigSpec *ConfigSpec `protobuf:"bytes,20,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// Cloud storage settings
	CloudStorage *CloudStorage `protobuf:"bytes,21,opt,name=cloud_storage,json=cloudStorage,proto3" json:"cloud_storage,omitempty"`
	// Host groups hosting VMs of the master subcluster.
	MasterHostGroupIds []string `protobuf:"bytes,22,rep,name=master_host_group_ids,json=masterHostGroupIds,proto3" json:"master_host_group_ids,omitempty"`
	// Host groups hosting VMs of the segment subcluster.
	SegmentHostGroupIds []string `protobuf:"bytes,23,rep,name=segment_host_group_ids,json=segmentHostGroupIds,proto3" json:"segment_host_group_ids,omitempty"`
	// ID of the service account used for access Yandex Cloud resources.
	ServiceAccountId string `protobuf:"bytes,24,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	// Cloud logging configuration
	Logging       *LoggingConfig `protobuf:"bytes,25,opt,name=logging,proto3" json:"logging,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClusterRequest) Reset() {
	*x = CreateClusterRequest{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterRequest) ProtoMessage() {}

func (x *CreateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateClusterRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateClusterRequest) GetEnvironment() Cluster_Environment {
	if x != nil {
		return x.Environment
	}
	return Cluster_ENVIRONMENT_UNSPECIFIED
}

func (x *CreateClusterRequest) GetConfig() *GreenplumConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateClusterRequest) GetMasterConfig() *MasterSubclusterConfigSpec {
	if x != nil {
		return x.MasterConfig
	}
	return nil
}

func (x *CreateClusterRequest) GetSegmentConfig() *SegmentSubclusterConfigSpec {
	if x != nil {
		return x.SegmentConfig
	}
	return nil
}

func (x *CreateClusterRequest) GetMasterHostCount() int64 {
	if x != nil {
		return x.MasterHostCount
	}
	return 0
}

func (x *CreateClusterRequest) GetSegmentInHost() int64 {
	if x != nil {
		return x.SegmentInHost
	}
	return 0
}

func (x *CreateClusterRequest) GetSegmentHostCount() int64 {
	if x != nil {
		return x.SegmentHostCount
	}
	return 0
}

func (x *CreateClusterRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CreateClusterRequest) GetUserPassword() string {
	if x != nil {
		return x.UserPassword
	}
	return ""
}

func (x *CreateClusterRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *CreateClusterRequest) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *CreateClusterRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *CreateClusterRequest) GetHostGroupIds() []string {
	if x != nil {
		return x.HostGroupIds
	}
	return nil
}

func (x *CreateClusterRequest) GetMaintenanceWindow() *MaintenanceWindow {
	if x != nil {
		return x.MaintenanceWindow
	}
	return nil
}

func (x *CreateClusterRequest) GetConfigSpec() *ConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *CreateClusterRequest) GetCloudStorage() *CloudStorage {
	if x != nil {
		return x.CloudStorage
	}
	return nil
}

func (x *CreateClusterRequest) GetMasterHostGroupIds() []string {
	if x != nil {
		return x.MasterHostGroupIds
	}
	return nil
}

func (x *CreateClusterRequest) GetSegmentHostGroupIds() []string {
	if x != nil {
		return x.SegmentHostGroupIds
	}
	return nil
}

func (x *CreateClusterRequest) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *CreateClusterRequest) GetLogging() *LoggingConfig {
	if x != nil {
		return x.Logging
	}
	return nil
}

type ConfigSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to GreenplumConfig:
	//
	//	*ConfigSpec_GreenplumConfig_6_17
	//	*ConfigSpec_GreenplumConfig_6_19
	//	*ConfigSpec_GreenplumConfig_6_21
	//	*ConfigSpec_GreenplumConfig_6_22
	//	*ConfigSpec_GreenplumConfig_6
	GreenplumConfig isConfigSpec_GreenplumConfig `protobuf_oneof:"greenplum_config"`
	// Odyssey® pool settings.
	Pool *ConnectionPoolerConfig `protobuf:"bytes,3,opt,name=pool,proto3" json:"pool,omitempty"`
	// Managed Greenplum® background tasks configuration.
	BackgroundActivities *BackgroundActivitiesConfig `protobuf:"bytes,6,opt,name=background_activities,json=backgroundActivities,proto3" json:"background_activities,omitempty"`
	PxfConfig            *PXFConfig                  `protobuf:"bytes,8,opt,name=pxf_config,json=pxfConfig,proto3" json:"pxf_config,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ConfigSpec) Reset() {
	*x = ConfigSpec{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSpec) ProtoMessage() {}

func (x *ConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSpec.ProtoReflect.Descriptor instead.
func (*ConfigSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigSpec) GetGreenplumConfig() isConfigSpec_GreenplumConfig {
	if x != nil {
		return x.GreenplumConfig
	}
	return nil
}

func (x *ConfigSpec) GetGreenplumConfig_6_17() *GreenplumConfig6_17 {
	if x != nil {
		if x, ok := x.GreenplumConfig.(*ConfigSpec_GreenplumConfig_6_17); ok {
			return x.GreenplumConfig_6_17
		}
	}
	return nil
}

func (x *ConfigSpec) GetGreenplumConfig_6_19() *GreenplumConfig6_19 {
	if x != nil {
		if x, ok := x.GreenplumConfig.(*ConfigSpec_GreenplumConfig_6_19); ok {
			return x.GreenplumConfig_6_19
		}
	}
	return nil
}

func (x *ConfigSpec) GetGreenplumConfig_6_21() *GreenplumConfig6_21 {
	if x != nil {
		if x, ok := x.GreenplumConfig.(*ConfigSpec_GreenplumConfig_6_21); ok {
			return x.GreenplumConfig_6_21
		}
	}
	return nil
}

func (x *ConfigSpec) GetGreenplumConfig_6_22() *GreenplumConfig6_22 {
	if x != nil {
		if x, ok := x.GreenplumConfig.(*ConfigSpec_GreenplumConfig_6_22); ok {
			return x.GreenplumConfig_6_22
		}
	}
	return nil
}

func (x *ConfigSpec) GetGreenplumConfig_6() *GreenplumConfig6 {
	if x != nil {
		if x, ok := x.GreenplumConfig.(*ConfigSpec_GreenplumConfig_6); ok {
			return x.GreenplumConfig_6
		}
	}
	return nil
}

func (x *ConfigSpec) GetPool() *ConnectionPoolerConfig {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *ConfigSpec) GetBackgroundActivities() *BackgroundActivitiesConfig {
	if x != nil {
		return x.BackgroundActivities
	}
	return nil
}

func (x *ConfigSpec) GetPxfConfig() *PXFConfig {
	if x != nil {
		return x.PxfConfig
	}
	return nil
}

type isConfigSpec_GreenplumConfig interface {
	isConfigSpec_GreenplumConfig()
}

type ConfigSpec_GreenplumConfig_6_17 struct {
	GreenplumConfig_6_17 *GreenplumConfig6_17 `protobuf:"bytes,1,opt,name=greenplum_config_6_17,json=greenplumConfig_6_17,proto3,oneof"`
}

type ConfigSpec_GreenplumConfig_6_19 struct {
	GreenplumConfig_6_19 *GreenplumConfig6_19 `protobuf:"bytes,2,opt,name=greenplum_config_6_19,json=greenplumConfig_6_19,proto3,oneof"`
}

type ConfigSpec_GreenplumConfig_6_21 struct {
	GreenplumConfig_6_21 *GreenplumConfig6_21 `protobuf:"bytes,4,opt,name=greenplum_config_6_21,json=greenplumConfig_6_21,proto3,oneof"`
}

type ConfigSpec_GreenplumConfig_6_22 struct {
	GreenplumConfig_6_22 *GreenplumConfig6_22 `protobuf:"bytes,5,opt,name=greenplum_config_6_22,json=greenplumConfig_6_22,proto3,oneof"`
}

type ConfigSpec_GreenplumConfig_6 struct {
	GreenplumConfig_6 *GreenplumConfig6 `protobuf:"bytes,9,opt,name=greenplum_config_6,json=greenplumConfig_6,proto3,oneof"`
}

func (*ConfigSpec_GreenplumConfig_6_17) isConfigSpec_GreenplumConfig() {}

func (*ConfigSpec_GreenplumConfig_6_19) isConfigSpec_GreenplumConfig() {}

func (*ConfigSpec_GreenplumConfig_6_21) isConfigSpec_GreenplumConfig() {}

func (*ConfigSpec_GreenplumConfig_6_22) isConfigSpec_GreenplumConfig() {}

func (*ConfigSpec_GreenplumConfig_6) isConfigSpec_GreenplumConfig() {}

type CreateClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Greenplum® cluster that is being created.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClusterMetadata) Reset() {
	*x = CreateClusterMetadata{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterMetadata) ProtoMessage() {}

func (x *CreateClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterMetadata.ProtoReflect.Descriptor instead.
func (*CreateClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type UpdateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Greenplum® cluster resource to update.
	// To get the Greenplum® cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Field mask that specifies which fields of the Greenplum® cluster resource should be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// New description of the Greenplum® cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the Greenplum® cluster as `key:value` pairs.
	// For example, `"project":"mvp"` or `"source":"dictionary"`.
	//
	// The new set of labels completely replaces the old one.
	// To add a label, request the current set with the [ClusterService.Get] method, then send an [ClusterService.Update] request with the new label added to the set.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// New name for the cluster.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// The Greenplum® cluster configuration.
	Config *GreenplumConfig `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	// Configuration of the Greenplum® master subcluster.
	MasterConfig *MasterSubclusterConfigSpec `protobuf:"bytes,7,opt,name=master_config,json=masterConfig,proto3" json:"master_config,omitempty"`
	// Configuration of the Greenplum® segment subcluster.
	SegmentConfig *SegmentSubclusterConfigSpec `protobuf:"bytes,8,opt,name=segment_config,json=segmentConfig,proto3" json:"segment_config,omitempty"`
	// Owner user password.
	UserPassword string `protobuf:"bytes,13,opt,name=user_password,json=userPassword,proto3" json:"user_password,omitempty"`
	// ID of the network to move the cluster to.
	NetworkId string `protobuf:"bytes,14,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// The Greenplum® cluster maintenance window. Should be defined by either one of the two options.
	MaintenanceWindow *MaintenanceWindow `protobuf:"bytes,15,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"`
	// User security groups.
	SecurityGroupIds []string `protobuf:"bytes,17,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// Determines whether the cluster is protected from being deleted.
	DeletionProtection bool `protobuf:"varint,18,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// Settings of the Greenplum® cluster.
	ConfigSpec *ConfigSpec `protobuf:"bytes,19,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// Cloud storage settings
	CloudStorage *CloudStorage `protobuf:"bytes,20,opt,name=cloud_storage,json=cloudStorage,proto3" json:"cloud_storage,omitempty"`
	// ID of the service account used for access YC resources.
	ServiceAccountId string `protobuf:"bytes,21,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	// Cloud logging configuration
	Logging       *LoggingConfig `protobuf:"bytes,22,opt,name=logging,proto3" json:"logging,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterRequest) Reset() {
	*x = UpdateClusterRequest{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterRequest) ProtoMessage() {}

func (x *UpdateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateClusterRequest) GetConfig() *GreenplumConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *UpdateClusterRequest) GetMasterConfig() *MasterSubclusterConfigSpec {
	if x != nil {
		return x.MasterConfig
	}
	return nil
}

func (x *UpdateClusterRequest) GetSegmentConfig() *SegmentSubclusterConfigSpec {
	if x != nil {
		return x.SegmentConfig
	}
	return nil
}

func (x *UpdateClusterRequest) GetUserPassword() string {
	if x != nil {
		return x.UserPassword
	}
	return ""
}

func (x *UpdateClusterRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *UpdateClusterRequest) GetMaintenanceWindow() *MaintenanceWindow {
	if x != nil {
		return x.MaintenanceWindow
	}
	return nil
}

func (x *UpdateClusterRequest) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *UpdateClusterRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *UpdateClusterRequest) GetConfigSpec() *ConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *UpdateClusterRequest) GetCloudStorage() *CloudStorage {
	if x != nil {
		return x.CloudStorage
	}
	return nil
}

func (x *UpdateClusterRequest) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *UpdateClusterRequest) GetLogging() *LoggingConfig {
	if x != nil {
		return x.Logging
	}
	return nil
}

type UpdateClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Greenplum® cluster resource that is being updated.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterMetadata) Reset() {
	*x = UpdateClusterMetadata{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterMetadata) ProtoMessage() {}

func (x *UpdateClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterMetadata.ProtoReflect.Descriptor instead.
func (*UpdateClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type AddClusterHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Greenplum Cluster resource that is being updated.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterHostsMetadata) Reset() {
	*x = AddClusterHostsMetadata{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterHostsMetadata) ProtoMessage() {}

func (x *AddClusterHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterHostsMetadata.ProtoReflect.Descriptor instead.
func (*AddClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{8}
}

func (x *AddClusterHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ExpandRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Greenplum Cluster resource to update.
	// To get the Greenplum cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Number of hosts for add to the segment subcluster
	SegmentHostCount int64 `protobuf:"varint,2,opt,name=segment_host_count,json=segmentHostCount,proto3" json:"segment_host_count,omitempty"`
	// Number of segments per host to add
	AddSegmentsPerHostCount int64 `protobuf:"varint,3,opt,name=add_segments_per_host_count,json=addSegmentsPerHostCount,proto3" json:"add_segments_per_host_count,omitempty"`
	// Redistribute duration, in seconds
	Duration int64 `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	// Redistribute process parallelism, 0 - for automatic detection
	Parallel int64 `protobuf:"varint,5,opt,name=parallel,proto3" json:"parallel,omitempty"`
	// Deny all client connections during the expand operation
	CloseCluster bool `protobuf:"varint,6,opt,name=close_cluster,json=closeCluster,proto3" json:"close_cluster,omitempty"`
	// Perform redistribution process by small chunks as background activity
	DelayRedistribution bool `protobuf:"varint,7,opt,name=delay_redistribution,json=delayRedistribution,proto3" json:"delay_redistribution,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ExpandRequest) Reset() {
	*x = ExpandRequest{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandRequest) ProtoMessage() {}

func (x *ExpandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandRequest.ProtoReflect.Descriptor instead.
func (*ExpandRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{9}
}

func (x *ExpandRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ExpandRequest) GetSegmentHostCount() int64 {
	if x != nil {
		return x.SegmentHostCount
	}
	return 0
}

func (x *ExpandRequest) GetAddSegmentsPerHostCount() int64 {
	if x != nil {
		return x.AddSegmentsPerHostCount
	}
	return 0
}

func (x *ExpandRequest) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ExpandRequest) GetParallel() int64 {
	if x != nil {
		return x.Parallel
	}
	return 0
}

func (x *ExpandRequest) GetCloseCluster() bool {
	if x != nil {
		return x.CloseCluster
	}
	return false
}

func (x *ExpandRequest) GetDelayRedistribution() bool {
	if x != nil {
		return x.DelayRedistribution
	}
	return false
}

type DeleteClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Greenplum® cluster to delete.
	// To get the Greenplum® cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type DeleteClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Greenplum® cluster that is being deleted.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterMetadata) Reset() {
	*x = DeleteClusterMetadata{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterMetadata) ProtoMessage() {}

func (x *DeleteClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterMetadata.ProtoReflect.Descriptor instead.
func (*DeleteClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StartClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Greenplum® cluster to start.
	// To get the Greenplum® cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterRequest) Reset() {
	*x = StartClusterRequest{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterRequest) ProtoMessage() {}

func (x *StartClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterRequest.ProtoReflect.Descriptor instead.
func (*StartClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{12}
}

func (x *StartClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StartClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Greenplum® cluster being started.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterMetadata) Reset() {
	*x = StartClusterMetadata{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterMetadata) ProtoMessage() {}

func (x *StartClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterMetadata.ProtoReflect.Descriptor instead.
func (*StartClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{13}
}

func (x *StartClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StopClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Greenplum® cluster to stop.
	// To get the Greenplum® cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopClusterRequest) Reset() {
	*x = StopClusterRequest{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClusterRequest) ProtoMessage() {}

func (x *StopClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClusterRequest.ProtoReflect.Descriptor instead.
func (*StopClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{14}
}

func (x *StopClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StopClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Greenplum® cluster being stopped.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopClusterMetadata) Reset() {
	*x = StopClusterMetadata{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClusterMetadata) ProtoMessage() {}

func (x *StopClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClusterMetadata.ProtoReflect.Descriptor instead.
func (*StopClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{15}
}

func (x *StopClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type MoveClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Greenplum® cluster to move.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the destination folder.
	DestinationFolderId string `protobuf:"bytes,2,opt,name=destination_folder_id,json=destinationFolderId,proto3" json:"destination_folder_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MoveClusterRequest) Reset() {
	*x = MoveClusterRequest{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveClusterRequest) ProtoMessage() {}

func (x *MoveClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveClusterRequest.ProtoReflect.Descriptor instead.
func (*MoveClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{16}
}

func (x *MoveClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *MoveClusterRequest) GetDestinationFolderId() string {
	if x != nil {
		return x.DestinationFolderId
	}
	return ""
}

type MoveClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Greenplum® cluster being moved.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the source folder.
	SourceFolderId string `protobuf:"bytes,2,opt,name=source_folder_id,json=sourceFolderId,proto3" json:"source_folder_id,omitempty"`
	// ID of the destination folder.
	DestinationFolderId string `protobuf:"bytes,3,opt,name=destination_folder_id,json=destinationFolderId,proto3" json:"destination_folder_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MoveClusterMetadata) Reset() {
	*x = MoveClusterMetadata{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveClusterMetadata) ProtoMessage() {}

func (x *MoveClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveClusterMetadata.ProtoReflect.Descriptor instead.
func (*MoveClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{17}
}

func (x *MoveClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *MoveClusterMetadata) GetSourceFolderId() string {
	if x != nil {
		return x.SourceFolderId
	}
	return ""
}

func (x *MoveClusterMetadata) GetDestinationFolderId() string {
	if x != nil {
		return x.DestinationFolderId
	}
	return ""
}

type RescheduleMaintenanceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ID of the Greenplum cluster to maintenance reschedule.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required. The type of reschedule request.
	RescheduleType RescheduleMaintenanceRequest_RescheduleType `protobuf:"varint,2,opt,name=reschedule_type,json=rescheduleType,proto3,enum=yandex.cloud.mdb.greenplum.v1.RescheduleMaintenanceRequest_RescheduleType" json:"reschedule_type,omitempty"`
	// The time for SPECIFIC_TIME reschedule. Limited by two weeks since first time scheduled.
	DelayedUntil  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=delayed_until,json=delayedUntil,proto3" json:"delayed_until,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RescheduleMaintenanceRequest) Reset() {
	*x = RescheduleMaintenanceRequest{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RescheduleMaintenanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RescheduleMaintenanceRequest) ProtoMessage() {}

func (x *RescheduleMaintenanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RescheduleMaintenanceRequest.ProtoReflect.Descriptor instead.
func (*RescheduleMaintenanceRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{18}
}

func (x *RescheduleMaintenanceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RescheduleMaintenanceRequest) GetRescheduleType() RescheduleMaintenanceRequest_RescheduleType {
	if x != nil {
		return x.RescheduleType
	}
	return RescheduleMaintenanceRequest_RESCHEDULE_TYPE_UNSPECIFIED
}

func (x *RescheduleMaintenanceRequest) GetDelayedUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.DelayedUntil
	}
	return nil
}

type RescheduleMaintenanceMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ID of the Greenplum cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required. New time of the planned maintenance. Can be in the past for rescheduled to "IMMEDIATE".
	DelayedUntil  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=delayed_until,json=delayedUntil,proto3" json:"delayed_until,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RescheduleMaintenanceMetadata) Reset() {
	*x = RescheduleMaintenanceMetadata{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RescheduleMaintenanceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RescheduleMaintenanceMetadata) ProtoMessage() {}

func (x *RescheduleMaintenanceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RescheduleMaintenanceMetadata.ProtoReflect.Descriptor instead.
func (*RescheduleMaintenanceMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{19}
}

func (x *RescheduleMaintenanceMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RescheduleMaintenanceMetadata) GetDelayedUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.DelayedUntil
	}
	return nil
}

type ListClusterOperationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Greenplum® cluster resource to list operations for.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return.
	//
	// If the number of available results is larger than [page_size], the service returns a [ListClusterOperationsResponse.next_page_token] that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the [ListClusterOperationsResponse.next_page_token] returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterOperationsRequest) Reset() {
	*x = ListClusterOperationsRequest{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterOperationsRequest) ProtoMessage() {}

func (x *ListClusterOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterOperationsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{20}
}

func (x *ListClusterOperationsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterOperationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterOperationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterOperationsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of Operation resources for the specified Greenplum® cluster.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// This token allows you to get the next page of results for list requests.
	//
	// If the number of results is larger than [ListClusterOperationsRequest.page_size], use the [next_page_token] as the value for the [ListClusterOperationsRequest.page_token] query parameter in the next list request.
	//
	// Each subsequent list request has its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterOperationsResponse) Reset() {
	*x = ListClusterOperationsResponse{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterOperationsResponse) ProtoMessage() {}

func (x *ListClusterOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterOperationsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{21}
}

func (x *ListClusterOperationsResponse) GetOperations() []*operation.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListClusterOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Greenplum® cluster.
	//
	// To get the Greenplum® cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return.
	//
	// If the number of available results is larger than [page_size], the service returns a [ListClusterHostsResponse.next_page_token] that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the [ListClusterHostsResponse.next_page_token] returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterHostsRequest) Reset() {
	*x = ListClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterHostsRequest) ProtoMessage() {}

func (x *ListClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{22}
}

func (x *ListClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterHostsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterHostsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterHostsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Requested list of hosts for the cluster.
	Hosts []*Host `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// This token allows you to get the next page of results for list requests.
	//
	// If the number of results is larger than [ListClusterHostsRequest.page_size], use the [next_page_token] as the value for the [ListClusterHostsRequest.page_token] query parameter in the next list request.
	//
	// Each subsequent list request has its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterHostsResponse) Reset() {
	*x = ListClusterHostsResponse{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterHostsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterHostsResponse) ProtoMessage() {}

func (x *ListClusterHostsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterHostsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterHostsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{23}
}

func (x *ListClusterHostsResponse) GetHosts() []*Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *ListClusterHostsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type MasterSubclusterConfigSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resources allocated to Greenplum® master subcluster hosts.
	Resources     *Resources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MasterSubclusterConfigSpec) Reset() {
	*x = MasterSubclusterConfigSpec{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MasterSubclusterConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterSubclusterConfigSpec) ProtoMessage() {}

func (x *MasterSubclusterConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterSubclusterConfigSpec.ProtoReflect.Descriptor instead.
func (*MasterSubclusterConfigSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{24}
}

func (x *MasterSubclusterConfigSpec) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

type SegmentSubclusterConfigSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resources allocated to Greenplum® segment subcluster hosts.
	Resources     *Resources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SegmentSubclusterConfigSpec) Reset() {
	*x = SegmentSubclusterConfigSpec{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SegmentSubclusterConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentSubclusterConfigSpec) ProtoMessage() {}

func (x *SegmentSubclusterConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentSubclusterConfigSpec.ProtoReflect.Descriptor instead.
func (*SegmentSubclusterConfigSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{25}
}

func (x *SegmentSubclusterConfigSpec) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

type ListClusterLogsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Requested log records.
	Logs []*LogRecord `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	// This token allows you to get the next page of results for list requests.
	//
	// If the number of results is larger than [ListClusterLogsRequest.page_size], use the [next_page_token] as the value for the [ListClusterLogsRequest.page_token] query parameter in the next list request.
	//
	// Each subsequent list request has its own [next_page_token] to continue paging through the results.
	//
	// This value is interchangeable with the [StreamLogRecord.next_record_token] from [StreamLogs] method.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterLogsResponse) Reset() {
	*x = ListClusterLogsResponse{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterLogsResponse) ProtoMessage() {}

func (x *ListClusterLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterLogsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterLogsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{26}
}

func (x *ListClusterLogsResponse) GetLogs() []*LogRecord {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *ListClusterLogsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type LogRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Time when the log was recorded.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Contents of the log record.
	Message       map[string]string `protobuf:"bytes,2,rep,name=message,proto3" json:"message,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogRecord) Reset() {
	*x = LogRecord{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRecord) ProtoMessage() {}

func (x *LogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRecord.ProtoReflect.Descriptor instead.
func (*LogRecord) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{27}
}

func (x *LogRecord) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LogRecord) GetMessage() map[string]string {
	if x != nil {
		return x.Message
	}
	return nil
}

type ListClusterLogsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Greenplum® cluster to request logs for.
	//
	// To get the Greenplum® cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Columns from log table to request.
	// If no columns are specified, entire log records are returned.
	ColumnFilter []string `protobuf:"bytes,2,rep,name=column_filter,json=columnFilter,proto3" json:"column_filter,omitempty"`
	// Type of the service to request logs about.
	ServiceType ListClusterLogsRequest_ServiceType `protobuf:"varint,3,opt,name=service_type,json=serviceType,proto3,enum=yandex.cloud.mdb.greenplum.v1.ListClusterLogsRequest_ServiceType" json:"service_type,omitempty"`
	// Start timestamp for the logs request.
	FromTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=from_time,json=fromTime,proto3" json:"from_time,omitempty"`
	// End timestamp for the logs request.
	ToTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=to_time,json=toTime,proto3" json:"to_time,omitempty"`
	// The maximum number of results per page to return.
	//
	// If the number of available results is larger than [page_size], the service returns a [ListClusterLogsResponse.next_page_token] that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the [ListClusterLogsResponse.next_page_token] returned by the previous list request.
	PageToken string `protobuf:"bytes,7,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The service always returns a [ListClusterLogsResponse.next_page_token], even if the current page is empty.
	AlwaysNextPageToken bool `protobuf:"varint,8,opt,name=always_next_page_token,json=alwaysNextPageToken,proto3" json:"always_next_page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	//
	// The expression must specify:
	//
	// 1. A field name. Currently filtering can be applied to the [LogRecord.logs.message.hostname], [LogRecord.logs.message.error_severity] (for `GREENPLUM` service) and [LogRecord.logs.message.level] (for `GREENPLUM_POOLER` service) fields.
	//
	// 2. A conditional operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
	//
	// 3. A value. Must be 1-63 characters long and match the regular expression `^[a-z0-9.-]{1,61}$`.
	//
	// Examples of a filter:
	// * `message.hostname='node1.db.cloud.yandex.net'`;
	// * `message.error_severity IN ("ERROR", "FATAL", "PANIC") AND message.hostname = "node1.db.cloud.yandex.net"`.
	Filter        string `protobuf:"bytes,9,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterLogsRequest) Reset() {
	*x = ListClusterLogsRequest{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterLogsRequest) ProtoMessage() {}

func (x *ListClusterLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterLogsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterLogsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{28}
}

func (x *ListClusterLogsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterLogsRequest) GetColumnFilter() []string {
	if x != nil {
		return x.ColumnFilter
	}
	return nil
}

func (x *ListClusterLogsRequest) GetServiceType() ListClusterLogsRequest_ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return ListClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED
}

func (x *ListClusterLogsRequest) GetFromTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FromTime
	}
	return nil
}

func (x *ListClusterLogsRequest) GetToTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ToTime
	}
	return nil
}

func (x *ListClusterLogsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterLogsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListClusterLogsRequest) GetAlwaysNextPageToken() bool {
	if x != nil {
		return x.AlwaysNextPageToken
	}
	return false
}

func (x *ListClusterLogsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListClusterBackupsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Greenplum® cluster.
	//
	// To get the Greenplum® cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return.
	//
	// If the number of available results is larger than [page_size], the service returns a [ListClusterBackupsResponse.next_page_token] that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the [ListClusterBackupsResponse.next_page_token] returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterBackupsRequest) Reset() {
	*x = ListClusterBackupsRequest{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterBackupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterBackupsRequest) ProtoMessage() {}

func (x *ListClusterBackupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterBackupsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterBackupsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{29}
}

func (x *ListClusterBackupsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterBackupsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterBackupsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type StreamLogRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// One of the requested log records.
	Record *LogRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	// This token allows you to continue streaming logs starting from the exact same record.
	//
	// To do that, specify value of [next_record_token] as the value for [StreamLogs.record_token] parameter in the next [StreamLogs] request.
	//
	// This value is interchangeable with [ListLogs.next_page_token] from [ListLogs] method.
	NextRecordToken string `protobuf:"bytes,2,opt,name=next_record_token,json=nextRecordToken,proto3" json:"next_record_token,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StreamLogRecord) Reset() {
	*x = StreamLogRecord{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamLogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamLogRecord) ProtoMessage() {}

func (x *StreamLogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamLogRecord.ProtoReflect.Descriptor instead.
func (*StreamLogRecord) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{30}
}

func (x *StreamLogRecord) GetRecord() *LogRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *StreamLogRecord) GetNextRecordToken() string {
	if x != nil {
		return x.NextRecordToken
	}
	return ""
}

type StreamClusterLogsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Greenplum® cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Columns from log table to get in the response.
	// If no columns are specified, entire log records are returned.
	ColumnFilter []string `protobuf:"bytes,2,rep,name=column_filter,json=columnFilter,proto3" json:"column_filter,omitempty"`
	// Type of the service to request logs about.
	ServiceType StreamClusterLogsRequest_ServiceType `protobuf:"varint,3,opt,name=service_type,json=serviceType,proto3,enum=yandex.cloud.mdb.greenplum.v1.StreamClusterLogsRequest_ServiceType" json:"service_type,omitempty"`
	// Start timestamp for the logs request.
	FromTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=from_time,json=fromTime,proto3" json:"from_time,omitempty"`
	// End timestamp for the logs request.
	//
	// If this field is not set, all existing logs are sent as well as the new ones as they appear.
	//
	// In essence it has `tail -f` semantics.
	ToTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=to_time,json=toTime,proto3" json:"to_time,omitempty"`
	// Record token. Set [record_token] to the [StreamLogs.next_record_token] returned by the previous [StreamLogs] request to start streaming from the next log record.
	RecordToken string `protobuf:"bytes,6,opt,name=record_token,json=recordToken,proto3" json:"record_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	//
	// The expression must specify:
	//
	// 1. A field name. Currently filtering can be applied to the [LogRecord.logs.message.hostname], [LogRecord.logs.message.error_severity] (for GREENPLUM service), [LogRecord.logs.message.level] (for POOLER service) fields.
	//
	// 2. An `=` operator.
	//
	// 3. A value in double quotes (`"`). Must be 1-63 characters long and match the regular expression `[a-z0-9.-]{1,61}`.
	//
	// Examples of a filter:
	//
	// * `message.hostname='node1.db.cloud.yandex.net'`;
	// * `message.error_severity IN ("ERROR", "FATAL", "PANIC") AND message.hostname = "node1.db.cloud.yandex.net"`.
	Filter        string `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamClusterLogsRequest) Reset() {
	*x = StreamClusterLogsRequest{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamClusterLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamClusterLogsRequest) ProtoMessage() {}

func (x *StreamClusterLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamClusterLogsRequest.ProtoReflect.Descriptor instead.
func (*StreamClusterLogsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{31}
}

func (x *StreamClusterLogsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *StreamClusterLogsRequest) GetColumnFilter() []string {
	if x != nil {
		return x.ColumnFilter
	}
	return nil
}

func (x *StreamClusterLogsRequest) GetServiceType() StreamClusterLogsRequest_ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return StreamClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED
}

func (x *StreamClusterLogsRequest) GetFromTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FromTime
	}
	return nil
}

func (x *StreamClusterLogsRequest) GetToTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ToTime
	}
	return nil
}

func (x *StreamClusterLogsRequest) GetRecordToken() string {
	if x != nil {
		return x.RecordToken
	}
	return ""
}

func (x *StreamClusterLogsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListClusterBackupsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of Greenplum® backups.
	Backups []*Backup `protobuf:"bytes,1,rep,name=backups,proto3" json:"backups,omitempty"`
	// This token allows you to get the next page of results for list requests.
	//
	// If the number of results is larger than [ListClusterBackupsRequest.page_size], use the [next_page_token] as the value for the [ListClusterBackupsRequest.page_token] query parameter in the next list request.
	//
	// Each subsequent list request has its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterBackupsResponse) Reset() {
	*x = ListClusterBackupsResponse{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterBackupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterBackupsResponse) ProtoMessage() {}

func (x *ListClusterBackupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterBackupsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterBackupsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{32}
}

func (x *ListClusterBackupsResponse) GetBackups() []*Backup {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *ListClusterBackupsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type BackupClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Greenplum cluster to back up.
	// To get the Greenplum cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupClusterRequest) Reset() {
	*x = BackupClusterRequest{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupClusterRequest) ProtoMessage() {}

func (x *BackupClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupClusterRequest.ProtoReflect.Descriptor instead.
func (*BackupClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{33}
}

func (x *BackupClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type BackupClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Greenplum cluster to back up.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	BackupId      string `protobuf:"bytes,2,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupClusterMetadata) Reset() {
	*x = BackupClusterMetadata{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupClusterMetadata) ProtoMessage() {}

func (x *BackupClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupClusterMetadata.ProtoReflect.Descriptor instead.
func (*BackupClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{34}
}

func (x *BackupClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *BackupClusterMetadata) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

type RestoreClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the backup to create a cluster from.
	//
	// To get the backup ID, use a [ClusterService.ListBackups] request.
	BackupId string `protobuf:"bytes,1,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	// Timestamp of the moment to which the Greenplum cluster should be restored.
	Time *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=time,proto3" json:"time,omitempty"`
	// ID of the folder to create the Greenplum® cluster in.
	FolderId string `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the Greenplum® cluster. The name must be unique within the folder.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the Greenplum® cluster.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the Greenplum® cluster as `key:value` pairs.
	// For example, "project":"mvp" or "source":"dictionary".
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Deployment environment of the Greenplum® cluster.
	Environment Cluster_Environment `protobuf:"varint,6,opt,name=environment,proto3,enum=yandex.cloud.mdb.greenplum.v1.Cluster_Environment" json:"environment,omitempty"`
	// Greenplum® cluster config.
	Config *GreenplumRestoreConfig `protobuf:"bytes,7,opt,name=config,proto3" json:"config,omitempty"`
	// Resources of the Greenplum® master subcluster.
	MasterResources *Resources `protobuf:"bytes,8,opt,name=master_resources,json=masterResources,proto3" json:"master_resources,omitempty"`
	// Resources of the Greenplum® segment subcluster.
	SegmentResources *Resources `protobuf:"bytes,9,opt,name=segment_resources,json=segmentResources,proto3" json:"segment_resources,omitempty"`
	// ID of the network to create the cluster in.
	NetworkId string `protobuf:"bytes,10,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// User security groups.
	SecurityGroupIds []string `protobuf:"bytes,11,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// Determines whether the cluster is protected from being deleted.
	DeletionProtection bool `protobuf:"varint,12,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// Host groups to place VMs of cluster on.
	HostGroupIds []string `protobuf:"bytes,13,rep,name=host_group_ids,json=hostGroupIds,proto3" json:"host_group_ids,omitempty"`
	// ID of the placement group.
	PlacementGroupId string `protobuf:"bytes,14,opt,name=placement_group_id,json=placementGroupId,proto3" json:"placement_group_id,omitempty"`
	// A Greenplum® cluster maintenance window. Should be defined by either one of the two options.
	MaintenanceWindow *MaintenanceWindow `protobuf:"bytes,15,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"`
	// Number of segment hosts
	SegmentHostCount int64 `protobuf:"varint,17,opt,name=segment_host_count,json=segmentHostCount,proto3" json:"segment_host_count,omitempty"`
	// Number of segments on each host
	SegmentInHost int64 `protobuf:"varint,18,opt,name=segment_in_host,json=segmentInHost,proto3" json:"segment_in_host,omitempty"`
	// List of databases and tables to restore
	RestoreOnly []string `protobuf:"bytes,19,rep,name=restore_only,json=restoreOnly,proto3" json:"restore_only,omitempty"`
	// Host groups hosting VMs of the master subcluster.
	MasterHostGroupIds []string `protobuf:"bytes,20,rep,name=master_host_group_ids,json=masterHostGroupIds,proto3" json:"master_host_group_ids,omitempty"`
	// Host groups hosting VMs of the segment subcluster.
	SegmentHostGroupIds []string `protobuf:"bytes,21,rep,name=segment_host_group_ids,json=segmentHostGroupIds,proto3" json:"segment_host_group_ids,omitempty"`
	// Service account that will be used to access a Yandex Cloud resources
	ServiceAccountId string `protobuf:"bytes,24,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RestoreClusterRequest) Reset() {
	*x = RestoreClusterRequest{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreClusterRequest) ProtoMessage() {}

func (x *RestoreClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreClusterRequest.ProtoReflect.Descriptor instead.
func (*RestoreClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{35}
}

func (x *RestoreClusterRequest) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

func (x *RestoreClusterRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *RestoreClusterRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *RestoreClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RestoreClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RestoreClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RestoreClusterRequest) GetEnvironment() Cluster_Environment {
	if x != nil {
		return x.Environment
	}
	return Cluster_ENVIRONMENT_UNSPECIFIED
}

func (x *RestoreClusterRequest) GetConfig() *GreenplumRestoreConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RestoreClusterRequest) GetMasterResources() *Resources {
	if x != nil {
		return x.MasterResources
	}
	return nil
}

func (x *RestoreClusterRequest) GetSegmentResources() *Resources {
	if x != nil {
		return x.SegmentResources
	}
	return nil
}

func (x *RestoreClusterRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *RestoreClusterRequest) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *RestoreClusterRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *RestoreClusterRequest) GetHostGroupIds() []string {
	if x != nil {
		return x.HostGroupIds
	}
	return nil
}

func (x *RestoreClusterRequest) GetPlacementGroupId() string {
	if x != nil {
		return x.PlacementGroupId
	}
	return ""
}

func (x *RestoreClusterRequest) GetMaintenanceWindow() *MaintenanceWindow {
	if x != nil {
		return x.MaintenanceWindow
	}
	return nil
}

func (x *RestoreClusterRequest) GetSegmentHostCount() int64 {
	if x != nil {
		return x.SegmentHostCount
	}
	return 0
}

func (x *RestoreClusterRequest) GetSegmentInHost() int64 {
	if x != nil {
		return x.SegmentInHost
	}
	return 0
}

func (x *RestoreClusterRequest) GetRestoreOnly() []string {
	if x != nil {
		return x.RestoreOnly
	}
	return nil
}

func (x *RestoreClusterRequest) GetMasterHostGroupIds() []string {
	if x != nil {
		return x.MasterHostGroupIds
	}
	return nil
}

func (x *RestoreClusterRequest) GetSegmentHostGroupIds() []string {
	if x != nil {
		return x.SegmentHostGroupIds
	}
	return nil
}

func (x *RestoreClusterRequest) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

type RestoreClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the new Greenplum® cluster that is being created from a backup.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the backup that is being used for creating a cluster.
	BackupId      string `protobuf:"bytes,2,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestoreClusterMetadata) Reset() {
	*x = RestoreClusterMetadata{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreClusterMetadata) ProtoMessage() {}

func (x *RestoreClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreClusterMetadata.ProtoReflect.Descriptor instead.
func (*RestoreClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP(), []int{36}
}

func (x *RestoreClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RestoreClusterMetadata) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

var File_yandex_cloud_mdb_greenplum_v1_cluster_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDesc = "" +
	"\n" +
	"3yandex/cloud/mdb/greenplum/v1/cluster_service.proto\x12\x1dyandex.cloud.mdb.greenplum.v1\x1a\x1cgoogle/api/annotations.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a yandex/cloud/api/operation.proto\x1a*yandex/cloud/mdb/greenplum/v1/backup.proto\x1a+yandex/cloud/mdb/greenplum/v1/cluster.proto\x1a*yandex/cloud/mdb/greenplum/v1/config.proto\x1a(yandex/cloud/mdb/greenplum/v1/host.proto\x1a/yandex/cloud/mdb/greenplum/v1/maintenance.proto\x1a'yandex/cloud/mdb/greenplum/v1/pxf.proto\x1a&yandex/cloud/operation/operation.proto\x1a\x1dyandex/cloud/validation.proto\"@\n" +
	"\x11GetClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"\xb7\x01\n" +
	"\x13ListClustersRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\x12\"\n" +
	"\x06filter\x18\x04 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"\x82\x01\n" +
	"\x14ListClustersResponse\x12B\n" +
	"\bclusters\x18\x01 \x03(\v2&.yandex.cloud.mdb.greenplum.v1.ClusterR\bclusters\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xc9\f\n" +
	"\x14CreateClusterRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x122\n" +
	"\x04name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x04name\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x94\x01\n" +
	"\x06labels\x18\x04 \x03(\v2?.yandex.cloud.mdb.greenplum.v1.CreateClusterRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x04<=63R\x06labels\x12Z\n" +
	"\venvironment\x18\x05 \x01(\x0e22.yandex.cloud.mdb.greenplum.v1.Cluster.EnvironmentB\x04\xe8\xc71\x01R\venvironment\x12F\n" +
	"\x06config\x18\x06 \x01(\v2..yandex.cloud.mdb.greenplum.v1.GreenplumConfigR\x06config\x12^\n" +
	"\rmaster_config\x18\a \x01(\v29.yandex.cloud.mdb.greenplum.v1.MasterSubclusterConfigSpecR\fmasterConfig\x12a\n" +
	"\x0esegment_config\x18\b \x01(\v2:.yandex.cloud.mdb.greenplum.v1.SegmentSubclusterConfigSpecR\rsegmentConfig\x12*\n" +
	"\x11master_host_count\x18\t \x01(\x03R\x0fmasterHostCount\x12&\n" +
	"\x0fsegment_in_host\x18\n" +
	" \x01(\x03R\rsegmentInHost\x12,\n" +
	"\x12segment_host_count\x18\v \x01(\x03R\x10segmentHostCount\x12!\n" +
	"\tuser_name\x18\f \x01(\tB\x04\xe8\xc71\x01R\buserName\x122\n" +
	"\ruser_password\x18\r \x01(\tB\r\xe8\xc71\x01\x8a\xc81\x058-128R\fuserPassword\x12+\n" +
	"\n" +
	"network_id\x18\x0e \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tnetworkId\x12,\n" +
	"\x12security_group_ids\x18\x0f \x03(\tR\x10securityGroupIds\x12/\n" +
	"\x13deletion_protection\x18\x10 \x01(\bR\x12deletionProtection\x12$\n" +
	"\x0ehost_group_ids\x18\x11 \x03(\tR\fhostGroupIds\x12_\n" +
	"\x12maintenance_window\x18\x13 \x01(\v20.yandex.cloud.mdb.greenplum.v1.MaintenanceWindowR\x11maintenanceWindow\x12J\n" +
	"\vconfig_spec\x18\x14 \x01(\v2).yandex.cloud.mdb.greenplum.v1.ConfigSpecR\n" +
	"configSpec\x12P\n" +
	"\rcloud_storage\x18\x15 \x01(\v2+.yandex.cloud.mdb.greenplum.v1.CloudStorageR\fcloudStorage\x121\n" +
	"\x15master_host_group_ids\x18\x16 \x03(\tR\x12masterHostGroupIds\x123\n" +
	"\x16segment_host_group_ids\x18\x17 \x03(\tR\x13segmentHostGroupIds\x12,\n" +
	"\x12service_account_id\x18\x18 \x01(\tR\x10serviceAccountId\x12F\n" +
	"\alogging\x18\x19 \x01(\v2,.yandex.cloud.mdb.greenplum.v1.LoggingConfigR\alogging\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01J\x04\b\x12\x10\x13\"\xb8\x06\n" +
	"\n" +
	"ConfigSpec\x12i\n" +
	"\x15greenplum_config_6_17\x18\x01 \x01(\v22.yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17H\x00R\x14greenplumConfig_6_17\x12i\n" +
	"\x15greenplum_config_6_19\x18\x02 \x01(\v22.yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19H\x00R\x14greenplumConfig_6_19\x12i\n" +
	"\x15greenplum_config_6_21\x18\x04 \x01(\v22.yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21H\x00R\x14greenplumConfig_6_21\x12i\n" +
	"\x15greenplum_config_6_22\x18\x05 \x01(\v22.yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22H\x00R\x14greenplumConfig_6_22\x12`\n" +
	"\x12greenplum_config_6\x18\t \x01(\v2/.yandex.cloud.mdb.greenplum.v1.GreenplumConfig6H\x00R\x11greenplumConfig_6\x12I\n" +
	"\x04pool\x18\x03 \x01(\v25.yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfigR\x04pool\x12n\n" +
	"\x15background_activities\x18\x06 \x01(\v29.yandex.cloud.mdb.greenplum.v1.BackgroundActivitiesConfigR\x14backgroundActivities\x12G\n" +
	"\n" +
	"pxf_config\x18\b \x01(\v2(.yandex.cloud.mdb.greenplum.v1.PXFConfigR\tpxfConfigB\x12\n" +
	"\x10greenplum_configJ\x04\b\a\x10\b\"6\n" +
	"\x15CreateClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\xf7\t\n" +
	"\x14UpdateClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x94\x01\n" +
	"\x06labels\x18\x04 \x03(\v2?.yandex.cloud.mdb.greenplum.v1.UpdateClusterRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x04<=63R\x06labels\x12.\n" +
	"\x04name\x18\x05 \x01(\tB\x1a\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x04name\x12F\n" +
	"\x06config\x18\x06 \x01(\v2..yandex.cloud.mdb.greenplum.v1.GreenplumConfigR\x06config\x12^\n" +
	"\rmaster_config\x18\a \x01(\v29.yandex.cloud.mdb.greenplum.v1.MasterSubclusterConfigSpecR\fmasterConfig\x12a\n" +
	"\x0esegment_config\x18\b \x01(\v2:.yandex.cloud.mdb.greenplum.v1.SegmentSubclusterConfigSpecR\rsegmentConfig\x122\n" +
	"\ruser_password\x18\r \x01(\tB\r\xe8\xc71\x01\x8a\xc81\x058-128R\fuserPassword\x12'\n" +
	"\n" +
	"network_id\x18\x0e \x01(\tB\b\x8a\xc81\x04<=50R\tnetworkId\x12_\n" +
	"\x12maintenance_window\x18\x0f \x01(\v20.yandex.cloud.mdb.greenplum.v1.MaintenanceWindowR\x11maintenanceWindow\x12,\n" +
	"\x12security_group_ids\x18\x11 \x03(\tR\x10securityGroupIds\x12/\n" +
	"\x13deletion_protection\x18\x12 \x01(\bR\x12deletionProtection\x12J\n" +
	"\vconfig_spec\x18\x13 \x01(\v2).yandex.cloud.mdb.greenplum.v1.ConfigSpecR\n" +
	"configSpec\x12P\n" +
	"\rcloud_storage\x18\x14 \x01(\v2+.yandex.cloud.mdb.greenplum.v1.CloudStorageR\fcloudStorage\x12,\n" +
	"\x12service_account_id\x18\x15 \x01(\tR\x10serviceAccountId\x12F\n" +
	"\alogging\x18\x16 \x01(\v2,.yandex.cloud.mdb.greenplum.v1.LoggingConfigR\alogging\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01J\x04\b\x10\x10\x11J\x04\b\t\x10\r\"6\n" +
	"\x15UpdateClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"8\n" +
	"\x17AddClusterHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\xb8\x02\n" +
	"\rExpandRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12,\n" +
	"\x12segment_host_count\x18\x02 \x01(\x03R\x10segmentHostCount\x12<\n" +
	"\x1badd_segments_per_host_count\x18\x03 \x01(\x03R\x17addSegmentsPerHostCount\x12\x1a\n" +
	"\bduration\x18\x04 \x01(\x03R\bduration\x12\x1a\n" +
	"\bparallel\x18\x05 \x01(\x03R\bparallel\x12#\n" +
	"\rclose_cluster\x18\x06 \x01(\bR\fcloseCluster\x121\n" +
	"\x14delay_redistribution\x18\a \x01(\bR\x13delayRedistribution\"C\n" +
	"\x14DeleteClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"6\n" +
	"\x15DeleteClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"B\n" +
	"\x13StartClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"5\n" +
	"\x14StartClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"A\n" +
	"\x12StopClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"4\n" +
	"\x13StopClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\x83\x01\n" +
	"\x12MoveClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12@\n" +
	"\x15destination_folder_id\x18\x02 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x13destinationFolderId\"\x92\x01\n" +
	"\x13MoveClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12(\n" +
	"\x10source_folder_id\x18\x02 \x01(\tR\x0esourceFolderId\x122\n" +
	"\x15destination_folder_id\x18\x03 \x01(\tR\x13destinationFolderId\"\xf7\x02\n" +
	"\x1cRescheduleMaintenanceRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12y\n" +
	"\x0freschedule_type\x18\x02 \x01(\x0e2J.yandex.cloud.mdb.greenplum.v1.RescheduleMaintenanceRequest.RescheduleTypeB\x04\xe8\xc71\x01R\x0erescheduleType\x12?\n" +
	"\rdelayed_until\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\fdelayedUntil\"n\n" +
	"\x0eRescheduleType\x12\x1f\n" +
	"\x1bRESCHEDULE_TYPE_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tIMMEDIATE\x10\x01\x12\x19\n" +
	"\x15NEXT_AVAILABLE_WINDOW\x10\x02\x12\x11\n" +
	"\rSPECIFIC_TIME\x10\x03\"\x8b\x01\n" +
	"\x1dRescheduleMaintenanceMetadata\x12#\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\tclusterId\x12E\n" +
	"\rdelayed_until\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe8\xc71\x01R\fdelayedUntil\"\x9e\x01\n" +
	"\x1cListClusterOperationsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x8a\x01\n" +
	"\x1dListClusterOperationsResponse\x12A\n" +
	"\n" +
	"operations\x18\x01 \x03(\v2!.yandex.cloud.operation.OperationR\n" +
	"operations\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x99\x01\n" +
	"\x17ListClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"}\n" +
	"\x18ListClusterHostsResponse\x129\n" +
	"\x05hosts\x18\x01 \x03(\v2#.yandex.cloud.mdb.greenplum.v1.HostR\x05hosts\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"d\n" +
	"\x1aMasterSubclusterConfigSpec\x12F\n" +
	"\tresources\x18\x01 \x01(\v2(.yandex.cloud.mdb.greenplum.v1.ResourcesR\tresources\"e\n" +
	"\x1bSegmentSubclusterConfigSpec\x12F\n" +
	"\tresources\x18\x01 \x01(\v2(.yandex.cloud.mdb.greenplum.v1.ResourcesR\tresources\"\x7f\n" +
	"\x17ListClusterLogsResponse\x12<\n" +
	"\x04logs\x18\x01 \x03(\v2(.yandex.cloud.mdb.greenplum.v1.LogRecordR\x04logs\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xd2\x01\n" +
	"\tLogRecord\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12O\n" +
	"\amessage\x18\x02 \x03(\v25.yandex.cloud.mdb.greenplum.v1.LogRecord.MessageEntryR\amessage\x1a:\n" +
	"\fMessageEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xcf\x04\n" +
	"\x16ListClusterLogsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12#\n" +
	"\rcolumn_filter\x18\x02 \x03(\tR\fcolumnFilter\x12d\n" +
	"\fservice_type\x18\x03 \x01(\x0e2A.yandex.cloud.mdb.greenplum.v1.ListClusterLogsRequest.ServiceTypeR\vserviceType\x127\n" +
	"\tfrom_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\bfromTime\x123\n" +
	"\ato_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x06toTime\x12'\n" +
	"\tpage_size\x18\x06 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\a \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\x123\n" +
	"\x16always_next_page_token\x18\b \x01(\bR\x13alwaysNextPageToken\x12\"\n" +
	"\x06filter\x18\t \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"c\n" +
	"\vServiceType\x12\x1c\n" +
	"\x18SERVICE_TYPE_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tGREENPLUM\x10\x01\x12\x14\n" +
	"\x10GREENPLUM_POOLER\x10\x02\x12\x11\n" +
	"\rGREENPLUM_PXF\x10\x03\"\x9b\x01\n" +
	"\x19ListClusterBackupsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x7f\n" +
	"\x0fStreamLogRecord\x12@\n" +
	"\x06record\x18\x01 \x01(\v2(.yandex.cloud.mdb.greenplum.v1.LogRecordR\x06record\x12*\n" +
	"\x11next_record_token\x18\x02 \x01(\tR\x0fnextRecordToken\"\xf9\x03\n" +
	"\x18StreamClusterLogsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12#\n" +
	"\rcolumn_filter\x18\x02 \x03(\tR\fcolumnFilter\x12f\n" +
	"\fservice_type\x18\x03 \x01(\x0e2C.yandex.cloud.mdb.greenplum.v1.StreamClusterLogsRequest.ServiceTypeR\vserviceType\x127\n" +
	"\tfrom_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\bfromTime\x123\n" +
	"\ato_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x06toTime\x12,\n" +
	"\frecord_token\x18\x06 \x01(\tB\t\x8a\xc81\x05<=100R\vrecordToken\x12\"\n" +
	"\x06filter\x18\a \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"c\n" +
	"\vServiceType\x12\x1c\n" +
	"\x18SERVICE_TYPE_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tGREENPLUM\x10\x01\x12\x14\n" +
	"\x10GREENPLUM_POOLER\x10\x02\x12\x11\n" +
	"\rGREENPLUM_PXF\x10\x03\"\x85\x01\n" +
	"\x1aListClusterBackupsResponse\x12?\n" +
	"\abackups\x18\x01 \x03(\v2%.yandex.cloud.mdb.greenplum.v1.BackupR\abackups\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"C\n" +
	"\x14BackupClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"S\n" +
	"\x15BackupClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1b\n" +
	"\tbackup_id\x18\x02 \x01(\tR\bbackupId\"\xba\v\n" +
	"\x15RestoreClusterRequest\x12!\n" +
	"\tbackup_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\bbackupId\x12.\n" +
	"\x04time\x18\x10 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12)\n" +
	"\tfolder_id\x18\x02 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x122\n" +
	"\x04name\x18\x03 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x04name\x12+\n" +
	"\vdescription\x18\x04 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x95\x01\n" +
	"\x06labels\x18\x05 \x03(\v2@.yandex.cloud.mdb.greenplum.v1.RestoreClusterRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x04<=63R\x06labels\x12Z\n" +
	"\venvironment\x18\x06 \x01(\x0e22.yandex.cloud.mdb.greenplum.v1.Cluster.EnvironmentB\x04\xe8\xc71\x01R\venvironment\x12M\n" +
	"\x06config\x18\a \x01(\v25.yandex.cloud.mdb.greenplum.v1.GreenplumRestoreConfigR\x06config\x12S\n" +
	"\x10master_resources\x18\b \x01(\v2(.yandex.cloud.mdb.greenplum.v1.ResourcesR\x0fmasterResources\x12U\n" +
	"\x11segment_resources\x18\t \x01(\v2(.yandex.cloud.mdb.greenplum.v1.ResourcesR\x10segmentResources\x12+\n" +
	"\n" +
	"network_id\x18\n" +
	" \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tnetworkId\x12,\n" +
	"\x12security_group_ids\x18\v \x03(\tR\x10securityGroupIds\x12/\n" +
	"\x13deletion_protection\x18\f \x01(\bR\x12deletionProtection\x12$\n" +
	"\x0ehost_group_ids\x18\r \x03(\tR\fhostGroupIds\x12,\n" +
	"\x12placement_group_id\x18\x0e \x01(\tR\x10placementGroupId\x12_\n" +
	"\x12maintenance_window\x18\x0f \x01(\v20.yandex.cloud.mdb.greenplum.v1.MaintenanceWindowR\x11maintenanceWindow\x12,\n" +
	"\x12segment_host_count\x18\x11 \x01(\x03R\x10segmentHostCount\x12&\n" +
	"\x0fsegment_in_host\x18\x12 \x01(\x03R\rsegmentInHost\x12_\n" +
	"\frestore_only\x18\x13 \x03(\tB<\xf2\xc71'[a-zA-Z0-9\\*_]*(\\/[a-zA-Z0-9\\*_]*){0,2}\x82\xc81\x04<=50\x8a\xc81\x05<=256R\vrestoreOnly\x121\n" +
	"\x15master_host_group_ids\x18\x14 \x03(\tR\x12masterHostGroupIds\x123\n" +
	"\x16segment_host_group_ids\x18\x15 \x03(\tR\x13segmentHostGroupIds\x12,\n" +
	"\x12service_account_id\x18\x18 \x01(\tR\x10serviceAccountId\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01J\x04\b\x16\x10\x17J\x04\b\x17\x10\x18\"T\n" +
	"\x16RestoreClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1b\n" +
	"\tbackup_id\x18\x02 \x01(\tR\bbackupId2\xfa\x1a\n" +
	"\x0eClusterService\x12\x94\x01\n" +
	"\x03Get\x120.yandex.cloud.mdb.greenplum.v1.GetClusterRequest\x1a&.yandex.cloud.mdb.greenplum.v1.Cluster\"3\x82\xd3\xe4\x93\x02-\x12+/managed-greenplum/v1/clusters/{cluster_id}\x12\x97\x01\n" +
	"\x04List\x122.yandex.cloud.mdb.greenplum.v1.ListClustersRequest\x1a3.yandex.cloud.mdb.greenplum.v1.ListClustersResponse\"&\x82\xd3\xe4\x93\x02 \x12\x1e/managed-greenplum/v1/clusters\x12\xaf\x01\n" +
	"\x06Create\x123.yandex.cloud.mdb.greenplum.v1.CreateClusterRequest\x1a!.yandex.cloud.operation.Operation\"M\xb2\xd2* \n" +
	"\x15CreateClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02#:\x01*\"\x1e/managed-greenplum/v1/clusters\x12\xbc\x01\n" +
	"\x06Update\x123.yandex.cloud.mdb.greenplum.v1.UpdateClusterRequest\x1a!.yandex.cloud.operation.Operation\"Z\xb2\xd2* \n" +
	"\x15UpdateClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x020:\x01*2+/managed-greenplum/v1/clusters/{cluster_id}\x12\xbe\x01\n" +
	"\x06Expand\x12,.yandex.cloud.mdb.greenplum.v1.ExpandRequest\x1a!.yandex.cloud.operation.Operation\"c\xb2\xd2*\"\n" +
	"\x17AddClusterHostsMetadata\x12\aCluster\x82\xd3\xe4\x93\x027:\x01*\"2/managed-greenplum/v1/clusters/{cluster_id}/expand\x12\xc7\x01\n" +
	"\x06Delete\x123.yandex.cloud.mdb.greenplum.v1.DeleteClusterRequest\x1a!.yandex.cloud.operation.Operation\"e\xb2\xd2*.\n" +
	"\x15DeleteClusterMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02-*+/managed-greenplum/v1/clusters/{cluster_id}\x12\xbc\x01\n" +
	"\x05Start\x122.yandex.cloud.mdb.greenplum.v1.StartClusterRequest\x1a!.yandex.cloud.operation.Operation\"\\\xb2\xd2*\x1f\n" +
	"\x14StartClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x023\"1/managed-greenplum/v1/clusters/{cluster_id}:start\x12\xb8\x01\n" +
	"\x04Stop\x121.yandex.cloud.mdb.greenplum.v1.StopClusterRequest\x1a!.yandex.cloud.operation.Operation\"Z\xb2\xd2*\x1e\n" +
	"\x13StopClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x022\"0/managed-greenplum/v1/clusters/{cluster_id}:stop\x12\xbb\x01\n" +
	"\x04Move\x121.yandex.cloud.mdb.greenplum.v1.MoveClusterRequest\x1a!.yandex.cloud.operation.Operation\"]\xb2\xd2*\x1e\n" +
	"\x13MoveClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x025:\x01*\"0/managed-greenplum/v1/clusters/{cluster_id}:move\x12\xf1\x01\n" +
	"\x15RescheduleMaintenance\x12;.yandex.cloud.mdb.greenplum.v1.RescheduleMaintenanceRequest\x1a!.yandex.cloud.operation.Operation\"x\xb2\xd2*(\n" +
	"\x1dRescheduleMaintenanceMetadata\x12\aCluster\x82\xd3\xe4\x93\x02F:\x01*\"A/managed-greenplum/v1/clusters/{cluster_id}:rescheduleMaintenance\x12\xcb\x01\n" +
	"\x0eListOperations\x12;.yandex.cloud.mdb.greenplum.v1.ListClusterOperationsRequest\x1a<.yandex.cloud.mdb.greenplum.v1.ListClusterOperationsResponse\">\x82\xd3\xe4\x93\x028\x126/managed-greenplum/v1/clusters/{cluster_id}/operations\x12\xc4\x01\n" +
	"\x0fListMasterHosts\x126.yandex.cloud.mdb.greenplum.v1.ListClusterHostsRequest\x1a7.yandex.cloud.mdb.greenplum.v1.ListClusterHostsResponse\"@\x82\xd3\xe4\x93\x02:\x128/managed-greenplum/v1/clusters/{cluster_id}/master-hosts\x12\xc6\x01\n" +
	"\x10ListSegmentHosts\x126.yandex.cloud.mdb.greenplum.v1.ListClusterHostsRequest\x1a7.yandex.cloud.mdb.greenplum.v1.ListClusterHostsResponse\"A\x82\xd3\xe4\x93\x02;\x129/managed-greenplum/v1/clusters/{cluster_id}/segment-hosts\x12\xb3\x01\n" +
	"\bListLogs\x125.yandex.cloud.mdb.greenplum.v1.ListClusterLogsRequest\x1a6.yandex.cloud.mdb.greenplum.v1.ListClusterLogsResponse\"8\x82\xd3\xe4\x93\x022\x120/managed-greenplum/v1/clusters/{cluster_id}:logs\x12\xb8\x01\n" +
	"\n" +
	"StreamLogs\x127.yandex.cloud.mdb.greenplum.v1.StreamClusterLogsRequest\x1a..yandex.cloud.mdb.greenplum.v1.StreamLogRecord\"?\x82\xd3\xe4\x93\x029\x127/managed-greenplum/v1/clusters/{cluster_id}:stream_logs0\x01\x12\xbf\x01\n" +
	"\vListBackups\x128.yandex.cloud.mdb.greenplum.v1.ListClusterBackupsRequest\x1a9.yandex.cloud.mdb.greenplum.v1.ListClusterBackupsResponse\";\x82\xd3\xe4\x93\x025\x123/managed-greenplum/v1/clusters/{cluster_id}/backups\x12\xc0\x01\n" +
	"\x06Backup\x123.yandex.cloud.mdb.greenplum.v1.BackupClusterRequest\x1a!.yandex.cloud.operation.Operation\"^\xb2\xd2* \n" +
	"\x15BackupClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x024\"2/managed-greenplum/v1/clusters/{cluster_id}:backup\x12\xba\x01\n" +
	"\aRestore\x124.yandex.cloud.mdb.greenplum.v1.RestoreClusterRequest\x1a!.yandex.cloud.operation.Operation\"V\xb2\xd2*!\n" +
	"\x16RestoreClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02+:\x01*\"&/managed-greenplum/v1/clusters:restoreBp\n" +
	"!yandex.cloud.api.mdb.greenplum.v1ZKgithub.com/yandex-cloud/go-genproto/yandex/cloud/mdb/greenplum/v1;greenplumb\x06proto3"

var (
	file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescData []byte
)

func file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDesc), len(file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDesc)))
	})
	return file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDescData
}

var file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_goTypes = []any{
	(RescheduleMaintenanceRequest_RescheduleType)(0), // 0: yandex.cloud.mdb.greenplum.v1.RescheduleMaintenanceRequest.RescheduleType
	(ListClusterLogsRequest_ServiceType)(0),          // 1: yandex.cloud.mdb.greenplum.v1.ListClusterLogsRequest.ServiceType
	(StreamClusterLogsRequest_ServiceType)(0),        // 2: yandex.cloud.mdb.greenplum.v1.StreamClusterLogsRequest.ServiceType
	(*GetClusterRequest)(nil),                        // 3: yandex.cloud.mdb.greenplum.v1.GetClusterRequest
	(*ListClustersRequest)(nil),                      // 4: yandex.cloud.mdb.greenplum.v1.ListClustersRequest
	(*ListClustersResponse)(nil),                     // 5: yandex.cloud.mdb.greenplum.v1.ListClustersResponse
	(*CreateClusterRequest)(nil),                     // 6: yandex.cloud.mdb.greenplum.v1.CreateClusterRequest
	(*ConfigSpec)(nil),                               // 7: yandex.cloud.mdb.greenplum.v1.ConfigSpec
	(*CreateClusterMetadata)(nil),                    // 8: yandex.cloud.mdb.greenplum.v1.CreateClusterMetadata
	(*UpdateClusterRequest)(nil),                     // 9: yandex.cloud.mdb.greenplum.v1.UpdateClusterRequest
	(*UpdateClusterMetadata)(nil),                    // 10: yandex.cloud.mdb.greenplum.v1.UpdateClusterMetadata
	(*AddClusterHostsMetadata)(nil),                  // 11: yandex.cloud.mdb.greenplum.v1.AddClusterHostsMetadata
	(*ExpandRequest)(nil),                            // 12: yandex.cloud.mdb.greenplum.v1.ExpandRequest
	(*DeleteClusterRequest)(nil),                     // 13: yandex.cloud.mdb.greenplum.v1.DeleteClusterRequest
	(*DeleteClusterMetadata)(nil),                    // 14: yandex.cloud.mdb.greenplum.v1.DeleteClusterMetadata
	(*StartClusterRequest)(nil),                      // 15: yandex.cloud.mdb.greenplum.v1.StartClusterRequest
	(*StartClusterMetadata)(nil),                     // 16: yandex.cloud.mdb.greenplum.v1.StartClusterMetadata
	(*StopClusterRequest)(nil),                       // 17: yandex.cloud.mdb.greenplum.v1.StopClusterRequest
	(*StopClusterMetadata)(nil),                      // 18: yandex.cloud.mdb.greenplum.v1.StopClusterMetadata
	(*MoveClusterRequest)(nil),                       // 19: yandex.cloud.mdb.greenplum.v1.MoveClusterRequest
	(*MoveClusterMetadata)(nil),                      // 20: yandex.cloud.mdb.greenplum.v1.MoveClusterMetadata
	(*RescheduleMaintenanceRequest)(nil),             // 21: yandex.cloud.mdb.greenplum.v1.RescheduleMaintenanceRequest
	(*RescheduleMaintenanceMetadata)(nil),            // 22: yandex.cloud.mdb.greenplum.v1.RescheduleMaintenanceMetadata
	(*ListClusterOperationsRequest)(nil),             // 23: yandex.cloud.mdb.greenplum.v1.ListClusterOperationsRequest
	(*ListClusterOperationsResponse)(nil),            // 24: yandex.cloud.mdb.greenplum.v1.ListClusterOperationsResponse
	(*ListClusterHostsRequest)(nil),                  // 25: yandex.cloud.mdb.greenplum.v1.ListClusterHostsRequest
	(*ListClusterHostsResponse)(nil),                 // 26: yandex.cloud.mdb.greenplum.v1.ListClusterHostsResponse
	(*MasterSubclusterConfigSpec)(nil),               // 27: yandex.cloud.mdb.greenplum.v1.MasterSubclusterConfigSpec
	(*SegmentSubclusterConfigSpec)(nil),              // 28: yandex.cloud.mdb.greenplum.v1.SegmentSubclusterConfigSpec
	(*ListClusterLogsResponse)(nil),                  // 29: yandex.cloud.mdb.greenplum.v1.ListClusterLogsResponse
	(*LogRecord)(nil),                                // 30: yandex.cloud.mdb.greenplum.v1.LogRecord
	(*ListClusterLogsRequest)(nil),                   // 31: yandex.cloud.mdb.greenplum.v1.ListClusterLogsRequest
	(*ListClusterBackupsRequest)(nil),                // 32: yandex.cloud.mdb.greenplum.v1.ListClusterBackupsRequest
	(*StreamLogRecord)(nil),                          // 33: yandex.cloud.mdb.greenplum.v1.StreamLogRecord
	(*StreamClusterLogsRequest)(nil),                 // 34: yandex.cloud.mdb.greenplum.v1.StreamClusterLogsRequest
	(*ListClusterBackupsResponse)(nil),               // 35: yandex.cloud.mdb.greenplum.v1.ListClusterBackupsResponse
	(*BackupClusterRequest)(nil),                     // 36: yandex.cloud.mdb.greenplum.v1.BackupClusterRequest
	(*BackupClusterMetadata)(nil),                    // 37: yandex.cloud.mdb.greenplum.v1.BackupClusterMetadata
	(*RestoreClusterRequest)(nil),                    // 38: yandex.cloud.mdb.greenplum.v1.RestoreClusterRequest
	(*RestoreClusterMetadata)(nil),                   // 39: yandex.cloud.mdb.greenplum.v1.RestoreClusterMetadata
	nil,                                              // 40: yandex.cloud.mdb.greenplum.v1.CreateClusterRequest.LabelsEntry
	nil,                                              // 41: yandex.cloud.mdb.greenplum.v1.UpdateClusterRequest.LabelsEntry
	nil,                                              // 42: yandex.cloud.mdb.greenplum.v1.LogRecord.MessageEntry
	nil,                                              // 43: yandex.cloud.mdb.greenplum.v1.RestoreClusterRequest.LabelsEntry
	(*Cluster)(nil),                                  // 44: yandex.cloud.mdb.greenplum.v1.Cluster
	(Cluster_Environment)(0),                         // 45: yandex.cloud.mdb.greenplum.v1.Cluster.Environment
	(*GreenplumConfig)(nil),                          // 46: yandex.cloud.mdb.greenplum.v1.GreenplumConfig
	(*MaintenanceWindow)(nil),                        // 47: yandex.cloud.mdb.greenplum.v1.MaintenanceWindow
	(*CloudStorage)(nil),                             // 48: yandex.cloud.mdb.greenplum.v1.CloudStorage
	(*LoggingConfig)(nil),                            // 49: yandex.cloud.mdb.greenplum.v1.LoggingConfig
	(*GreenplumConfig6_17)(nil),                      // 50: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17
	(*GreenplumConfig6_19)(nil),                      // 51: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19
	(*GreenplumConfig6_21)(nil),                      // 52: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21
	(*GreenplumConfig6_22)(nil),                      // 53: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22
	(*GreenplumConfig6)(nil),                         // 54: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6
	(*ConnectionPoolerConfig)(nil),                   // 55: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig
	(*BackgroundActivitiesConfig)(nil),               // 56: yandex.cloud.mdb.greenplum.v1.BackgroundActivitiesConfig
	(*PXFConfig)(nil),                                // 57: yandex.cloud.mdb.greenplum.v1.PXFConfig
	(*fieldmaskpb.FieldMask)(nil),                    // 58: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),                    // 59: google.protobuf.Timestamp
	(*operation.Operation)(nil),                      // 60: yandex.cloud.operation.Operation
	(*Host)(nil),                                     // 61: yandex.cloud.mdb.greenplum.v1.Host
	(*Resources)(nil),                                // 62: yandex.cloud.mdb.greenplum.v1.Resources
	(*Backup)(nil),                                   // 63: yandex.cloud.mdb.greenplum.v1.Backup
	(*GreenplumRestoreConfig)(nil),                   // 64: yandex.cloud.mdb.greenplum.v1.GreenplumRestoreConfig
}
var file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_depIdxs = []int32{
	44, // 0: yandex.cloud.mdb.greenplum.v1.ListClustersResponse.clusters:type_name -> yandex.cloud.mdb.greenplum.v1.Cluster
	40, // 1: yandex.cloud.mdb.greenplum.v1.CreateClusterRequest.labels:type_name -> yandex.cloud.mdb.greenplum.v1.CreateClusterRequest.LabelsEntry
	45, // 2: yandex.cloud.mdb.greenplum.v1.CreateClusterRequest.environment:type_name -> yandex.cloud.mdb.greenplum.v1.Cluster.Environment
	46, // 3: yandex.cloud.mdb.greenplum.v1.CreateClusterRequest.config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig
	27, // 4: yandex.cloud.mdb.greenplum.v1.CreateClusterRequest.master_config:type_name -> yandex.cloud.mdb.greenplum.v1.MasterSubclusterConfigSpec
	28, // 5: yandex.cloud.mdb.greenplum.v1.CreateClusterRequest.segment_config:type_name -> yandex.cloud.mdb.greenplum.v1.SegmentSubclusterConfigSpec
	47, // 6: yandex.cloud.mdb.greenplum.v1.CreateClusterRequest.maintenance_window:type_name -> yandex.cloud.mdb.greenplum.v1.MaintenanceWindow
	7,  // 7: yandex.cloud.mdb.greenplum.v1.CreateClusterRequest.config_spec:type_name -> yandex.cloud.mdb.greenplum.v1.ConfigSpec
	48, // 8: yandex.cloud.mdb.greenplum.v1.CreateClusterRequest.cloud_storage:type_name -> yandex.cloud.mdb.greenplum.v1.CloudStorage
	49, // 9: yandex.cloud.mdb.greenplum.v1.CreateClusterRequest.logging:type_name -> yandex.cloud.mdb.greenplum.v1.LoggingConfig
	50, // 10: yandex.cloud.mdb.greenplum.v1.ConfigSpec.greenplum_config_6_17:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17
	51, // 11: yandex.cloud.mdb.greenplum.v1.ConfigSpec.greenplum_config_6_19:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19
	52, // 12: yandex.cloud.mdb.greenplum.v1.ConfigSpec.greenplum_config_6_21:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21
	53, // 13: yandex.cloud.mdb.greenplum.v1.ConfigSpec.greenplum_config_6_22:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22
	54, // 14: yandex.cloud.mdb.greenplum.v1.ConfigSpec.greenplum_config_6:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6
	55, // 15: yandex.cloud.mdb.greenplum.v1.ConfigSpec.pool:type_name -> yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig
	56, // 16: yandex.cloud.mdb.greenplum.v1.ConfigSpec.background_activities:type_name -> yandex.cloud.mdb.greenplum.v1.BackgroundActivitiesConfig
	57, // 17: yandex.cloud.mdb.greenplum.v1.ConfigSpec.pxf_config:type_name -> yandex.cloud.mdb.greenplum.v1.PXFConfig
	58, // 18: yandex.cloud.mdb.greenplum.v1.UpdateClusterRequest.update_mask:type_name -> google.protobuf.FieldMask
	41, // 19: yandex.cloud.mdb.greenplum.v1.UpdateClusterRequest.labels:type_name -> yandex.cloud.mdb.greenplum.v1.UpdateClusterRequest.LabelsEntry
	46, // 20: yandex.cloud.mdb.greenplum.v1.UpdateClusterRequest.config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig
	27, // 21: yandex.cloud.mdb.greenplum.v1.UpdateClusterRequest.master_config:type_name -> yandex.cloud.mdb.greenplum.v1.MasterSubclusterConfigSpec
	28, // 22: yandex.cloud.mdb.greenplum.v1.UpdateClusterRequest.segment_config:type_name -> yandex.cloud.mdb.greenplum.v1.SegmentSubclusterConfigSpec
	47, // 23: yandex.cloud.mdb.greenplum.v1.UpdateClusterRequest.maintenance_window:type_name -> yandex.cloud.mdb.greenplum.v1.MaintenanceWindow
	7,  // 24: yandex.cloud.mdb.greenplum.v1.UpdateClusterRequest.config_spec:type_name -> yandex.cloud.mdb.greenplum.v1.ConfigSpec
	48, // 25: yandex.cloud.mdb.greenplum.v1.UpdateClusterRequest.cloud_storage:type_name -> yandex.cloud.mdb.greenplum.v1.CloudStorage
	49, // 26: yandex.cloud.mdb.greenplum.v1.UpdateClusterRequest.logging:type_name -> yandex.cloud.mdb.greenplum.v1.LoggingConfig
	0,  // 27: yandex.cloud.mdb.greenplum.v1.RescheduleMaintenanceRequest.reschedule_type:type_name -> yandex.cloud.mdb.greenplum.v1.RescheduleMaintenanceRequest.RescheduleType
	59, // 28: yandex.cloud.mdb.greenplum.v1.RescheduleMaintenanceRequest.delayed_until:type_name -> google.protobuf.Timestamp
	59, // 29: yandex.cloud.mdb.greenplum.v1.RescheduleMaintenanceMetadata.delayed_until:type_name -> google.protobuf.Timestamp
	60, // 30: yandex.cloud.mdb.greenplum.v1.ListClusterOperationsResponse.operations:type_name -> yandex.cloud.operation.Operation
	61, // 31: yandex.cloud.mdb.greenplum.v1.ListClusterHostsResponse.hosts:type_name -> yandex.cloud.mdb.greenplum.v1.Host
	62, // 32: yandex.cloud.mdb.greenplum.v1.MasterSubclusterConfigSpec.resources:type_name -> yandex.cloud.mdb.greenplum.v1.Resources
	62, // 33: yandex.cloud.mdb.greenplum.v1.SegmentSubclusterConfigSpec.resources:type_name -> yandex.cloud.mdb.greenplum.v1.Resources
	30, // 34: yandex.cloud.mdb.greenplum.v1.ListClusterLogsResponse.logs:type_name -> yandex.cloud.mdb.greenplum.v1.LogRecord
	59, // 35: yandex.cloud.mdb.greenplum.v1.LogRecord.timestamp:type_name -> google.protobuf.Timestamp
	42, // 36: yandex.cloud.mdb.greenplum.v1.LogRecord.message:type_name -> yandex.cloud.mdb.greenplum.v1.LogRecord.MessageEntry
	1,  // 37: yandex.cloud.mdb.greenplum.v1.ListClusterLogsRequest.service_type:type_name -> yandex.cloud.mdb.greenplum.v1.ListClusterLogsRequest.ServiceType
	59, // 38: yandex.cloud.mdb.greenplum.v1.ListClusterLogsRequest.from_time:type_name -> google.protobuf.Timestamp
	59, // 39: yandex.cloud.mdb.greenplum.v1.ListClusterLogsRequest.to_time:type_name -> google.protobuf.Timestamp
	30, // 40: yandex.cloud.mdb.greenplum.v1.StreamLogRecord.record:type_name -> yandex.cloud.mdb.greenplum.v1.LogRecord
	2,  // 41: yandex.cloud.mdb.greenplum.v1.StreamClusterLogsRequest.service_type:type_name -> yandex.cloud.mdb.greenplum.v1.StreamClusterLogsRequest.ServiceType
	59, // 42: yandex.cloud.mdb.greenplum.v1.StreamClusterLogsRequest.from_time:type_name -> google.protobuf.Timestamp
	59, // 43: yandex.cloud.mdb.greenplum.v1.StreamClusterLogsRequest.to_time:type_name -> google.protobuf.Timestamp
	63, // 44: yandex.cloud.mdb.greenplum.v1.ListClusterBackupsResponse.backups:type_name -> yandex.cloud.mdb.greenplum.v1.Backup
	59, // 45: yandex.cloud.mdb.greenplum.v1.RestoreClusterRequest.time:type_name -> google.protobuf.Timestamp
	43, // 46: yandex.cloud.mdb.greenplum.v1.RestoreClusterRequest.labels:type_name -> yandex.cloud.mdb.greenplum.v1.RestoreClusterRequest.LabelsEntry
	45, // 47: yandex.cloud.mdb.greenplum.v1.RestoreClusterRequest.environment:type_name -> yandex.cloud.mdb.greenplum.v1.Cluster.Environment
	64, // 48: yandex.cloud.mdb.greenplum.v1.RestoreClusterRequest.config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumRestoreConfig
	62, // 49: yandex.cloud.mdb.greenplum.v1.RestoreClusterRequest.master_resources:type_name -> yandex.cloud.mdb.greenplum.v1.Resources
	62, // 50: yandex.cloud.mdb.greenplum.v1.RestoreClusterRequest.segment_resources:type_name -> yandex.cloud.mdb.greenplum.v1.Resources
	47, // 51: yandex.cloud.mdb.greenplum.v1.RestoreClusterRequest.maintenance_window:type_name -> yandex.cloud.mdb.greenplum.v1.MaintenanceWindow
	3,  // 52: yandex.cloud.mdb.greenplum.v1.ClusterService.Get:input_type -> yandex.cloud.mdb.greenplum.v1.GetClusterRequest
	4,  // 53: yandex.cloud.mdb.greenplum.v1.ClusterService.List:input_type -> yandex.cloud.mdb.greenplum.v1.ListClustersRequest
	6,  // 54: yandex.cloud.mdb.greenplum.v1.ClusterService.Create:input_type -> yandex.cloud.mdb.greenplum.v1.CreateClusterRequest
	9,  // 55: yandex.cloud.mdb.greenplum.v1.ClusterService.Update:input_type -> yandex.cloud.mdb.greenplum.v1.UpdateClusterRequest
	12, // 56: yandex.cloud.mdb.greenplum.v1.ClusterService.Expand:input_type -> yandex.cloud.mdb.greenplum.v1.ExpandRequest
	13, // 57: yandex.cloud.mdb.greenplum.v1.ClusterService.Delete:input_type -> yandex.cloud.mdb.greenplum.v1.DeleteClusterRequest
	15, // 58: yandex.cloud.mdb.greenplum.v1.ClusterService.Start:input_type -> yandex.cloud.mdb.greenplum.v1.StartClusterRequest
	17, // 59: yandex.cloud.mdb.greenplum.v1.ClusterService.Stop:input_type -> yandex.cloud.mdb.greenplum.v1.StopClusterRequest
	19, // 60: yandex.cloud.mdb.greenplum.v1.ClusterService.Move:input_type -> yandex.cloud.mdb.greenplum.v1.MoveClusterRequest
	21, // 61: yandex.cloud.mdb.greenplum.v1.ClusterService.RescheduleMaintenance:input_type -> yandex.cloud.mdb.greenplum.v1.RescheduleMaintenanceRequest
	23, // 62: yandex.cloud.mdb.greenplum.v1.ClusterService.ListOperations:input_type -> yandex.cloud.mdb.greenplum.v1.ListClusterOperationsRequest
	25, // 63: yandex.cloud.mdb.greenplum.v1.ClusterService.ListMasterHosts:input_type -> yandex.cloud.mdb.greenplum.v1.ListClusterHostsRequest
	25, // 64: yandex.cloud.mdb.greenplum.v1.ClusterService.ListSegmentHosts:input_type -> yandex.cloud.mdb.greenplum.v1.ListClusterHostsRequest
	31, // 65: yandex.cloud.mdb.greenplum.v1.ClusterService.ListLogs:input_type -> yandex.cloud.mdb.greenplum.v1.ListClusterLogsRequest
	34, // 66: yandex.cloud.mdb.greenplum.v1.ClusterService.StreamLogs:input_type -> yandex.cloud.mdb.greenplum.v1.StreamClusterLogsRequest
	32, // 67: yandex.cloud.mdb.greenplum.v1.ClusterService.ListBackups:input_type -> yandex.cloud.mdb.greenplum.v1.ListClusterBackupsRequest
	36, // 68: yandex.cloud.mdb.greenplum.v1.ClusterService.Backup:input_type -> yandex.cloud.mdb.greenplum.v1.BackupClusterRequest
	38, // 69: yandex.cloud.mdb.greenplum.v1.ClusterService.Restore:input_type -> yandex.cloud.mdb.greenplum.v1.RestoreClusterRequest
	44, // 70: yandex.cloud.mdb.greenplum.v1.ClusterService.Get:output_type -> yandex.cloud.mdb.greenplum.v1.Cluster
	5,  // 71: yandex.cloud.mdb.greenplum.v1.ClusterService.List:output_type -> yandex.cloud.mdb.greenplum.v1.ListClustersResponse
	60, // 72: yandex.cloud.mdb.greenplum.v1.ClusterService.Create:output_type -> yandex.cloud.operation.Operation
	60, // 73: yandex.cloud.mdb.greenplum.v1.ClusterService.Update:output_type -> yandex.cloud.operation.Operation
	60, // 74: yandex.cloud.mdb.greenplum.v1.ClusterService.Expand:output_type -> yandex.cloud.operation.Operation
	60, // 75: yandex.cloud.mdb.greenplum.v1.ClusterService.Delete:output_type -> yandex.cloud.operation.Operation
	60, // 76: yandex.cloud.mdb.greenplum.v1.ClusterService.Start:output_type -> yandex.cloud.operation.Operation
	60, // 77: yandex.cloud.mdb.greenplum.v1.ClusterService.Stop:output_type -> yandex.cloud.operation.Operation
	60, // 78: yandex.cloud.mdb.greenplum.v1.ClusterService.Move:output_type -> yandex.cloud.operation.Operation
	60, // 79: yandex.cloud.mdb.greenplum.v1.ClusterService.RescheduleMaintenance:output_type -> yandex.cloud.operation.Operation
	24, // 80: yandex.cloud.mdb.greenplum.v1.ClusterService.ListOperations:output_type -> yandex.cloud.mdb.greenplum.v1.ListClusterOperationsResponse
	26, // 81: yandex.cloud.mdb.greenplum.v1.ClusterService.ListMasterHosts:output_type -> yandex.cloud.mdb.greenplum.v1.ListClusterHostsResponse
	26, // 82: yandex.cloud.mdb.greenplum.v1.ClusterService.ListSegmentHosts:output_type -> yandex.cloud.mdb.greenplum.v1.ListClusterHostsResponse
	29, // 83: yandex.cloud.mdb.greenplum.v1.ClusterService.ListLogs:output_type -> yandex.cloud.mdb.greenplum.v1.ListClusterLogsResponse
	33, // 84: yandex.cloud.mdb.greenplum.v1.ClusterService.StreamLogs:output_type -> yandex.cloud.mdb.greenplum.v1.StreamLogRecord
	35, // 85: yandex.cloud.mdb.greenplum.v1.ClusterService.ListBackups:output_type -> yandex.cloud.mdb.greenplum.v1.ListClusterBackupsResponse
	60, // 86: yandex.cloud.mdb.greenplum.v1.ClusterService.Backup:output_type -> yandex.cloud.operation.Operation
	60, // 87: yandex.cloud.mdb.greenplum.v1.ClusterService.Restore:output_type -> yandex.cloud.operation.Operation
	70, // [70:88] is the sub-list for method output_type
	52, // [52:70] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_init() }
func file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_init() {
	if File_yandex_cloud_mdb_greenplum_v1_cluster_service_proto != nil {
		return
	}
	file_yandex_cloud_mdb_greenplum_v1_backup_proto_init()
	file_yandex_cloud_mdb_greenplum_v1_cluster_proto_init()
	file_yandex_cloud_mdb_greenplum_v1_config_proto_init()
	file_yandex_cloud_mdb_greenplum_v1_host_proto_init()
	file_yandex_cloud_mdb_greenplum_v1_maintenance_proto_init()
	file_yandex_cloud_mdb_greenplum_v1_pxf_proto_init()
	file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes[4].OneofWrappers = []any{
		(*ConfigSpec_GreenplumConfig_6_17)(nil),
		(*ConfigSpec_GreenplumConfig_6_19)(nil),
		(*ConfigSpec_GreenplumConfig_6_21)(nil),
		(*ConfigSpec_GreenplumConfig_6_22)(nil),
		(*ConfigSpec_GreenplumConfig_6)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDesc), len(file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_greenplum_v1_cluster_service_proto = out.File
	file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_goTypes = nil
	file_yandex_cloud_mdb_greenplum_v1_cluster_service_proto_depIdxs = nil
}

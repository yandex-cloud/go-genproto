// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/mdb/greenplum/v1/config.proto

package greenplum

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogStatement int32

const (
	LogStatement_LOG_STATEMENT_UNSPECIFIED LogStatement = 0
	// None statements are logged.
	LogStatement_NONE LogStatement = 1
	// Logs all data definition commands like `CREATE`, `ALTER`, and `DROP`. Default value.
	LogStatement_DDL LogStatement = 2
	// Logs all `DDL` statements, plus `INSERT`, `UPDATE`, `DELETE`, `TRUNCATE`, and `COPY FROM`.
	LogStatement_MOD LogStatement = 3
	// Logs all statements.
	LogStatement_ALL LogStatement = 4
)

// Enum value maps for LogStatement.
var (
	LogStatement_name = map[int32]string{
		0: "LOG_STATEMENT_UNSPECIFIED",
		1: "NONE",
		2: "DDL",
		3: "MOD",
		4: "ALL",
	}
	LogStatement_value = map[string]int32{
		"LOG_STATEMENT_UNSPECIFIED": 0,
		"NONE":                      1,
		"DDL":                       2,
		"MOD":                       3,
		"ALL":                       4,
	}
)

func (x LogStatement) Enum() *LogStatement {
	p := new(LogStatement)
	*p = x
	return p
}

func (x LogStatement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogStatement) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes[0].Descriptor()
}

func (LogStatement) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes[0]
}

func (x LogStatement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogStatement.Descriptor instead.
func (LogStatement) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{0}
}

type ConnectionPoolerConfig_PoolMode int32

const (
	ConnectionPoolerConfig_POOL_MODE_UNSPECIFIED ConnectionPoolerConfig_PoolMode = 0
	// Assign server connection to a client until it disconnects. Default value.
	ConnectionPoolerConfig_SESSION ConnectionPoolerConfig_PoolMode = 1
	// Assign server connection to a client for a transaction processing.
	ConnectionPoolerConfig_TRANSACTION ConnectionPoolerConfig_PoolMode = 2
)

// Enum value maps for ConnectionPoolerConfig_PoolMode.
var (
	ConnectionPoolerConfig_PoolMode_name = map[int32]string{
		0: "POOL_MODE_UNSPECIFIED",
		1: "SESSION",
		2: "TRANSACTION",
	}
	ConnectionPoolerConfig_PoolMode_value = map[string]int32{
		"POOL_MODE_UNSPECIFIED": 0,
		"SESSION":               1,
		"TRANSACTION":           2,
	}
)

func (x ConnectionPoolerConfig_PoolMode) Enum() *ConnectionPoolerConfig_PoolMode {
	p := new(ConnectionPoolerConfig_PoolMode)
	*p = x
	return p
}

func (x ConnectionPoolerConfig_PoolMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionPoolerConfig_PoolMode) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes[1].Descriptor()
}

func (ConnectionPoolerConfig_PoolMode) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes[1]
}

func (x ConnectionPoolerConfig_PoolMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionPoolerConfig_PoolMode.Descriptor instead.
func (ConnectionPoolerConfig_PoolMode) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{1, 0}
}

type Resources struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the preset for computational resources allocated to a host.
	//
	// Available presets are listed in the [documentation](/docs/managed-greenplum/concepts/instance-types).
	ResourcePresetId string `protobuf:"bytes,1,opt,name=resource_preset_id,json=resourcePresetId,proto3" json:"resource_preset_id,omitempty"`
	// Volume of the storage used by the host, in bytes.
	DiskSize int64 `protobuf:"varint,2,opt,name=disk_size,json=diskSize,proto3" json:"disk_size,omitempty"`
	// Type of the storage used by the host: `network-hdd`, `network-ssd` or `local-ssd`.
	DiskTypeId    string `protobuf:"bytes,3,opt,name=disk_type_id,json=diskTypeId,proto3" json:"disk_type_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Resources) Reset() {
	*x = Resources{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{0}
}

func (x *Resources) GetResourcePresetId() string {
	if x != nil {
		return x.ResourcePresetId
	}
	return ""
}

func (x *Resources) GetDiskSize() int64 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

func (x *Resources) GetDiskTypeId() string {
	if x != nil {
		return x.DiskTypeId
	}
	return ""
}

type ConnectionPoolerConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Route server pool mode.
	Mode ConnectionPoolerConfig_PoolMode `protobuf:"varint,1,opt,name=mode,proto3,enum=yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig_PoolMode" json:"mode,omitempty"`
	// The number of servers in the server pool. Clients are placed in a wait queue when all servers are busy.
	//
	// Set to zero to disable the limit.
	Size *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	// Server pool idle timeout, in seconds.
	//
	// A server connection closes after being idle for the specified time.
	//
	// Set to zero to disable the limit.
	ClientIdleTimeout *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=client_idle_timeout,json=clientIdleTimeout,proto3" json:"client_idle_timeout,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ConnectionPoolerConfig) Reset() {
	*x = ConnectionPoolerConfig{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionPoolerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionPoolerConfig) ProtoMessage() {}

func (x *ConnectionPoolerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionPoolerConfig.ProtoReflect.Descriptor instead.
func (*ConnectionPoolerConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectionPoolerConfig) GetMode() ConnectionPoolerConfig_PoolMode {
	if x != nil {
		return x.Mode
	}
	return ConnectionPoolerConfig_POOL_MODE_UNSPECIFIED
}

func (x *ConnectionPoolerConfig) GetSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *ConnectionPoolerConfig) GetClientIdleTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.ClientIdleTimeout
	}
	return nil
}

type BackgroundActivityStartAt struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hours         int64                  `protobuf:"varint,1,opt,name=hours,proto3" json:"hours,omitempty"`
	Minutes       int64                  `protobuf:"varint,2,opt,name=minutes,proto3" json:"minutes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackgroundActivityStartAt) Reset() {
	*x = BackgroundActivityStartAt{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackgroundActivityStartAt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundActivityStartAt) ProtoMessage() {}

func (x *BackgroundActivityStartAt) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundActivityStartAt.ProtoReflect.Descriptor instead.
func (*BackgroundActivityStartAt) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{2}
}

func (x *BackgroundActivityStartAt) GetHours() int64 {
	if x != nil {
		return x.Hours
	}
	return 0
}

func (x *BackgroundActivityStartAt) GetMinutes() int64 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

type TableSizes struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Starts        []*BackgroundActivityStartAt `protobuf:"bytes,1,rep,name=starts,proto3" json:"starts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableSizes) Reset() {
	*x = TableSizes{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableSizes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSizes) ProtoMessage() {}

func (x *TableSizes) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSizes.ProtoReflect.Descriptor instead.
func (*TableSizes) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{3}
}

func (x *TableSizes) GetStarts() []*BackgroundActivityStartAt {
	if x != nil {
		return x.Starts
	}
	return nil
}

type AnalyzeAndVacuum struct {
	state protoimpl.MessageState     `protogen:"open.v1"`
	Start *BackgroundActivityStartAt `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// Maximum duration of the `ANALYZE` operation, in seconds. The default value is `36000`. As soon as this period expires, the `ANALYZE` operation will be forced to terminate.
	AnalyzeTimeout *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=analyze_timeout,json=analyzeTimeout,proto3" json:"analyze_timeout,omitempty"`
	// Maximum duration of the `VACUUM` operation, in seconds. The default value is `36000`. As soon as this period expires, the `VACUUM` operation will be forced to terminate.
	VacuumTimeout *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=vacuum_timeout,json=vacuumTimeout,proto3" json:"vacuum_timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeAndVacuum) Reset() {
	*x = AnalyzeAndVacuum{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeAndVacuum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeAndVacuum) ProtoMessage() {}

func (x *AnalyzeAndVacuum) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeAndVacuum.ProtoReflect.Descriptor instead.
func (*AnalyzeAndVacuum) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{4}
}

func (x *AnalyzeAndVacuum) GetStart() *BackgroundActivityStartAt {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *AnalyzeAndVacuum) GetAnalyzeTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.AnalyzeTimeout
	}
	return nil
}

func (x *AnalyzeAndVacuum) GetVacuumTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.VacuumTimeout
	}
	return nil
}

type BackgroundActivitiesConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enables scripts that collects tables sizes to `*_sizes` tables in `mdb_toolkit` schema.
	TableSizes *TableSizes `protobuf:"bytes,1,opt,name=table_sizes,json=tableSizes,proto3" json:"table_sizes,omitempty"`
	// Configuration for `ANALYZE` and `VACUUM` operations.
	AnalyzeAndVacuum *AnalyzeAndVacuum `protobuf:"bytes,2,opt,name=analyze_and_vacuum,json=analyzeAndVacuum,proto3" json:"analyze_and_vacuum,omitempty"`
	// Configuration for long running queries killer.
	QueryKillerScripts *QueryKillerScripts `protobuf:"bytes,3,opt,name=query_killer_scripts,json=queryKillerScripts,proto3" json:"query_killer_scripts,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BackgroundActivitiesConfig) Reset() {
	*x = BackgroundActivitiesConfig{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackgroundActivitiesConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundActivitiesConfig) ProtoMessage() {}

func (x *BackgroundActivitiesConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundActivitiesConfig.ProtoReflect.Descriptor instead.
func (*BackgroundActivitiesConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{5}
}

func (x *BackgroundActivitiesConfig) GetTableSizes() *TableSizes {
	if x != nil {
		return x.TableSizes
	}
	return nil
}

func (x *BackgroundActivitiesConfig) GetAnalyzeAndVacuum() *AnalyzeAndVacuum {
	if x != nil {
		return x.AnalyzeAndVacuum
	}
	return nil
}

func (x *BackgroundActivitiesConfig) GetQueryKillerScripts() *QueryKillerScripts {
	if x != nil {
		return x.QueryKillerScripts
	}
	return nil
}

type QueryKiller struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Enable *wrapperspb.BoolValue  `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// Maximum duration for this type of queries (in seconds).
	MaxAge *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	// Ignore these users when considering queries to terminate
	IgnoreUsers   []string `protobuf:"bytes,3,rep,name=ignore_users,json=ignoreUsers,proto3" json:"ignore_users,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryKiller) Reset() {
	*x = QueryKiller{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryKiller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKiller) ProtoMessage() {}

func (x *QueryKiller) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKiller.ProtoReflect.Descriptor instead.
func (*QueryKiller) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{6}
}

func (x *QueryKiller) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *QueryKiller) GetMaxAge() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

func (x *QueryKiller) GetIgnoreUsers() []string {
	if x != nil {
		return x.IgnoreUsers
	}
	return nil
}

type QueryKillerScripts struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration of script that kills long running queries that are in `idle` state.
	Idle *QueryKiller `protobuf:"bytes,1,opt,name=idle,proto3" json:"idle,omitempty"`
	// Configuration of script that kills long running queries that are in `idle in transaction` state.
	IdleInTransaction *QueryKiller `protobuf:"bytes,2,opt,name=idle_in_transaction,json=idleInTransaction,proto3" json:"idle_in_transaction,omitempty"`
	// Configuration of script that kills long running queries (in any state).
	LongRunning   *QueryKiller `protobuf:"bytes,3,opt,name=long_running,json=longRunning,proto3" json:"long_running,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryKillerScripts) Reset() {
	*x = QueryKillerScripts{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryKillerScripts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryKillerScripts) ProtoMessage() {}

func (x *QueryKillerScripts) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryKillerScripts.ProtoReflect.Descriptor instead.
func (*QueryKillerScripts) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{7}
}

func (x *QueryKillerScripts) GetIdle() *QueryKiller {
	if x != nil {
		return x.Idle
	}
	return nil
}

func (x *QueryKillerScripts) GetIdleInTransaction() *QueryKiller {
	if x != nil {
		return x.IdleInTransaction
	}
	return nil
}

func (x *QueryKillerScripts) GetLongRunning() *QueryKiller {
	if x != nil {
		return x.LongRunning
	}
	return nil
}

type MasterSubclusterConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Computational resources allocated to Greenplum® master subcluster hosts.
	Resources     *Resources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MasterSubclusterConfig) Reset() {
	*x = MasterSubclusterConfig{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MasterSubclusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterSubclusterConfig) ProtoMessage() {}

func (x *MasterSubclusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterSubclusterConfig.ProtoReflect.Descriptor instead.
func (*MasterSubclusterConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{8}
}

func (x *MasterSubclusterConfig) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

type SegmentSubclusterConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Computational resources allocated to Greenplum® segment subcluster hosts.
	Resources     *Resources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SegmentSubclusterConfig) Reset() {
	*x = SegmentSubclusterConfig{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SegmentSubclusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentSubclusterConfig) ProtoMessage() {}

func (x *SegmentSubclusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentSubclusterConfig.ProtoReflect.Descriptor instead.
func (*SegmentSubclusterConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{9}
}

func (x *SegmentSubclusterConfig) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

type GreenplumConfig6 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Maximum number of inbound connections on master segment
	MaxConnections *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// Specify the maximum size of WAL files that replication slots are allowed to retain in the pg_wal directory at checkpoint time.
	// https://www.postgresql.org/docs/current/runtime-config-replication.html
	MaxSlotWalKeepSize *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=max_slot_wal_keep_size,json=maxSlotWalKeepSize,proto3" json:"max_slot_wal_keep_size,omitempty"`
	// Sets the maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.
	// The default value is 0, which means a limit is not enforced.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_segment
	GpWorkfileLimitPerSegment *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=gp_workfile_limit_per_segment,json=gpWorkfileLimitPerSegment,proto3" json:"gp_workfile_limit_per_segment,omitempty"`
	// Sets the maximum disk size an individual query is allowed to use for creating temporary spill files at each segment.
	// The default value is 0, which means a limit is not enforced.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_per_query
	GpWorkfileLimitPerQuery *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=gp_workfile_limit_per_query,json=gpWorkfileLimitPerQuery,proto3" json:"gp_workfile_limit_per_query,omitempty"`
	// Sets the maximum number of temporary spill files (also known as workfiles) allowed per query per segment.
	// Spill files are created when executing a query that requires more memory than it is allocated.
	// The current query is terminated when the limit is exceeded.
	// Set the value to 0 (zero) to allow an unlimited number of spill files. master session reload
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_limit_files_per_query
	// Default value is 10000
	GpWorkfileLimitFilesPerQuery *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=gp_workfile_limit_files_per_query,json=gpWorkfileLimitFilesPerQuery,proto3" json:"gp_workfile_limit_files_per_query,omitempty"`
	// Sets the maximum number of transactions that can be in the "prepared" state simultaneously
	// https://www.postgresql.org/docs/9.6/runtime-config-resource.html
	MaxPreparedTransactions *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=max_prepared_transactions,json=maxPreparedTransactions,proto3" json:"max_prepared_transactions,omitempty"`
	// Specifies whether the temporary files created, when a hash aggregation or hash join operation spills to disk, are compressed.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#gp_workfile_compression
	GpWorkfileCompression *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=gp_workfile_compression,json=gpWorkfileCompression,proto3" json:"gp_workfile_compression,omitempty"`
	// Sets the maximum memory limit for a query. Helps avoid out-of-memory errors on a segment host during query processing as a result of setting statement_mem too high.
	// Taking into account the configuration of a single segment host, calculate max_statement_mem as follows:
	// (seghost_physical_memory) / (average_number_concurrent_queries)
	// When changing both max_statement_mem and statement_mem, max_statement_mem must be changed first, or listed first in the postgresql.conf file.
	// https://greenplum.docs.pivotal.io/6-19/ref_guide/config_params/guc-list.html#max_statement_mem
	// Default value is 2097152000 (2000MB)
	MaxStatementMem *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=max_statement_mem,json=maxStatementMem,proto3" json:"max_statement_mem,omitempty"` // in bytes
	// Controls which SQL statements are logged. DDL logs all data definition commands like CREATE, ALTER, and DROP commands.
	// MOD logs all DDL statements, plus INSERT, UPDATE, DELETE, TRUNCATE, and COPY FROM.
	// PREPARE and EXPLAIN ANALYZE statements are also logged if their contained command is of an appropriate type.
	// https://docs.greenplum.org/6-5/ref_guide/config_params/guc-list.html#log_statement
	// Default value is ddl
	LogStatement LogStatement `protobuf:"varint,9,opt,name=log_statement,json=logStatement,proto3,enum=yandex.cloud.mdb.greenplum.v1.LogStatement" json:"log_statement,omitempty"`
	// https://docs.vmware.com/en/VMware-Tanzu-Greenplum/6/greenplum-database/GUID-ref_guide-config_params-guc-list.html#gp_add_column_inherits_table_setting
	GpAddColumnInheritsTableSetting *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=gp_add_column_inherits_table_setting,json=gpAddColumnInheritsTableSetting,proto3" json:"gp_add_column_inherits_table_setting,omitempty"`
	// Controls whether the Greenplum Database Global Deadlock Detector is enabled to manage concurrent UPDATE and DELETE operations on heap tables to improve performance. See Inserting, Updating, and Deleting Datain the Greenplum Database Administrator Guide. The default is off, the Global Deadlock Detector is deactivated.
	// If the Global Deadlock Detector is deactivated (the default), Greenplum Database runs concurrent update and delete operations on a heap table serially.
	// If the Global Deadlock Detector is enabled, concurrent updates are permitted and the Global Deadlock Detector determines when a deadlock exists, and breaks the deadlock by cancelling one or more backend processes associated with the youngest transaction(s) involved.
	// https://techdocs.broadcom.com/us/en/vmware-tanzu/data-solutions/tanzu-greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_enable_global_deadlock_detector
	GpEnableGlobalDeadlockDetector *wrapperspb.BoolValue `protobuf:"bytes,11,opt,name=gp_enable_global_deadlock_detector,json=gpEnableGlobalDeadlockDetector,proto3" json:"gp_enable_global_deadlock_detector,omitempty"`
	// Specifies the executing interval (in seconds) of the global deadlock detector background worker process.
	// https://techdocs.broadcom.com/us/en/vmware-tanzu/data-solutions/tanzu-greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_global_deadlock_detector_period
	GpGlobalDeadlockDetectorPeriod *wrapperspb.Int64Value `protobuf:"bytes,12,opt,name=gp_global_deadlock_detector_period,json=gpGlobalDeadlockDetectorPeriod,proto3" json:"gp_global_deadlock_detector_period,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *GreenplumConfig6) Reset() {
	*x = GreenplumConfig6{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GreenplumConfig6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumConfig6) ProtoMessage() {}

func (x *GreenplumConfig6) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumConfig6.ProtoReflect.Descriptor instead.
func (*GreenplumConfig6) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{10}
}

func (x *GreenplumConfig6) GetMaxConnections() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *GreenplumConfig6) GetMaxSlotWalKeepSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxSlotWalKeepSize
	}
	return nil
}

func (x *GreenplumConfig6) GetGpWorkfileLimitPerSegment() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerSegment
	}
	return nil
}

func (x *GreenplumConfig6) GetGpWorkfileLimitPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerQuery
	}
	return nil
}

func (x *GreenplumConfig6) GetGpWorkfileLimitFilesPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitFilesPerQuery
	}
	return nil
}

func (x *GreenplumConfig6) GetMaxPreparedTransactions() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxPreparedTransactions
	}
	return nil
}

func (x *GreenplumConfig6) GetGpWorkfileCompression() *wrapperspb.BoolValue {
	if x != nil {
		return x.GpWorkfileCompression
	}
	return nil
}

func (x *GreenplumConfig6) GetMaxStatementMem() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxStatementMem
	}
	return nil
}

func (x *GreenplumConfig6) GetLogStatement() LogStatement {
	if x != nil {
		return x.LogStatement
	}
	return LogStatement_LOG_STATEMENT_UNSPECIFIED
}

func (x *GreenplumConfig6) GetGpAddColumnInheritsTableSetting() *wrapperspb.BoolValue {
	if x != nil {
		return x.GpAddColumnInheritsTableSetting
	}
	return nil
}

func (x *GreenplumConfig6) GetGpEnableGlobalDeadlockDetector() *wrapperspb.BoolValue {
	if x != nil {
		return x.GpEnableGlobalDeadlockDetector
	}
	return nil
}

func (x *GreenplumConfig6) GetGpGlobalDeadlockDetectorPeriod() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpGlobalDeadlockDetectorPeriod
	}
	return nil
}

type GreenplumConfig6_17 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Maximum number of inbound connections on master segment.
	MaxConnections *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// The maximum size of WAL files that replication slots are allowed to retain in the `pg_wal` directory at checkpoint time.
	//
	// More info in [PostgreSQL® documentation](https://www.postgresql.org/docs/current/runtime-config-replication.html).
	MaxSlotWalKeepSize *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=max_slot_wal_keep_size,json=maxSlotWalKeepSize,proto3" json:"max_slot_wal_keep_size,omitempty"`
	// The maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.
	//
	// The default value is 0 (no limit).
	//
	// More info in [Greenplum® documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_segment).
	GpWorkfileLimitPerSegment *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=gp_workfile_limit_per_segment,json=gpWorkfileLimitPerSegment,proto3" json:"gp_workfile_limit_per_segment,omitempty"`
	// The maximum disk size that an individual query is allowed to use for creating temporary spill files at each segment.
	//
	// The default value is 0 (no limit).
	//
	// More info in [Greenplum® documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_query).
	GpWorkfileLimitPerQuery *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=gp_workfile_limit_per_query,json=gpWorkfileLimitPerQuery,proto3" json:"gp_workfile_limit_per_query,omitempty"`
	// The maximum number of temporary spill files allowed per query at each segment.
	//
	// Spill files, also known as workfiles, are created when a query requires more memory than there is allocated.
	//
	// The current query is terminated if the limit is exceeded.
	//
	// Set to zero to disable the limit.
	//
	// Master session reloads if the parameter changes.
	//
	// Default value is 10000.
	//
	// More info in [Greenplum® documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_files_per_query).
	GpWorkfileLimitFilesPerQuery *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=gp_workfile_limit_files_per_query,json=gpWorkfileLimitFilesPerQuery,proto3" json:"gp_workfile_limit_files_per_query,omitempty"`
	// The maximum number of transactions that can be in the `prepared` state simultaneously.
	//
	// More info in [PostgreSQL® documentation](https://www.postgresql.org/docs/9.6/runtime-config-resource.html).
	MaxPreparedTransactions *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=max_prepared_transactions,json=maxPreparedTransactions,proto3" json:"max_prepared_transactions,omitempty"`
	// Whether the spill files are compressed or not.
	//
	// More info in [Greenplum® documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_compression).
	GpWorkfileCompression *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=gp_workfile_compression,json=gpWorkfileCompression,proto3" json:"gp_workfile_compression,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GreenplumConfig6_17) Reset() {
	*x = GreenplumConfig6_17{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GreenplumConfig6_17) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumConfig6_17) ProtoMessage() {}

func (x *GreenplumConfig6_17) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumConfig6_17.ProtoReflect.Descriptor instead.
func (*GreenplumConfig6_17) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{11}
}

func (x *GreenplumConfig6_17) GetMaxConnections() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *GreenplumConfig6_17) GetMaxSlotWalKeepSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxSlotWalKeepSize
	}
	return nil
}

func (x *GreenplumConfig6_17) GetGpWorkfileLimitPerSegment() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerSegment
	}
	return nil
}

func (x *GreenplumConfig6_17) GetGpWorkfileLimitPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerQuery
	}
	return nil
}

func (x *GreenplumConfig6_17) GetGpWorkfileLimitFilesPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitFilesPerQuery
	}
	return nil
}

func (x *GreenplumConfig6_17) GetMaxPreparedTransactions() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxPreparedTransactions
	}
	return nil
}

func (x *GreenplumConfig6_17) GetGpWorkfileCompression() *wrapperspb.BoolValue {
	if x != nil {
		return x.GpWorkfileCompression
	}
	return nil
}

type GreenplumConfig6_19 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Maximum number of inbound connections on master segment.
	MaxConnections *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// The maximum size of WAL files that replication slots are allowed to retain in the `pg_wal` directory at checkpoint time.
	//
	// More info in [PostgreSQL® documentation](https://www.postgresql.org/docs/current/runtime-config-replication.html).
	MaxSlotWalKeepSize *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=max_slot_wal_keep_size,json=maxSlotWalKeepSize,proto3" json:"max_slot_wal_keep_size,omitempty"`
	// The maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.
	//
	// The default value is 0 (no limit).
	//
	// More info in [Greenplum® documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_segment).
	GpWorkfileLimitPerSegment *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=gp_workfile_limit_per_segment,json=gpWorkfileLimitPerSegment,proto3" json:"gp_workfile_limit_per_segment,omitempty"`
	// The maximum disk size that an individual query is allowed to use for creating temporary spill files at each segment.
	//
	// The default value is 0 (no limit).
	//
	// More info in [Greenplum® documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_query).
	GpWorkfileLimitPerQuery *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=gp_workfile_limit_per_query,json=gpWorkfileLimitPerQuery,proto3" json:"gp_workfile_limit_per_query,omitempty"`
	// The maximum number of temporary spill files allowed per query at each segment.
	//
	// Spill files, also known as workfiles, are created when a query requires more memory than there is allocated.
	//
	// The current query is terminated if the limit is exceeded.
	//
	// Set to zero to disable the limit.
	//
	// Master session reloads if the parameter changes.
	//
	// Default value is 10000.
	//
	// More info in [Greenplum® documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_files_per_query).
	GpWorkfileLimitFilesPerQuery *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=gp_workfile_limit_files_per_query,json=gpWorkfileLimitFilesPerQuery,proto3" json:"gp_workfile_limit_files_per_query,omitempty"`
	// The maximum number of transactions that can be in the `prepared` state simultaneously.
	//
	// More info in [PostgreSQL® documentation](https://www.postgresql.org/docs/9.6/runtime-config-resource.html).
	MaxPreparedTransactions *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=max_prepared_transactions,json=maxPreparedTransactions,proto3" json:"max_prepared_transactions,omitempty"`
	// Whether the spill files are compressed or not.
	//
	// More info in [Greenplum® documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_compression).
	GpWorkfileCompression *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=gp_workfile_compression,json=gpWorkfileCompression,proto3" json:"gp_workfile_compression,omitempty"`
	// The maximum memory limit for a query, in bytes.
	//
	// Helps to avoid out-of-memory errors on a segment host during query processing as a result of setting `statement_mem` too high.
	//
	// Taking into account the configuration of a single segment host, calculate [max_statement_mem] as follows: `seghost_physical_memory` / `average_number_concurrent_queries`.
	//
	// When changing both [max_statement_mem] and `statement_mem`, [max_statement_mem] must be changed first, or listed first in the `postgresql.conf` file.
	//
	// Default value is 2097152000 (2000 MB).
	//
	// More info in [Greenplum® documentation](https://greenplum.docs.pivotal.io/6-19/ref_guide/config_params/guc-list.html#max_statement_mem).
	MaxStatementMem *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=max_statement_mem,json=maxStatementMem,proto3" json:"max_statement_mem,omitempty"` // in bytes
	// Logged SQL statements.
	//
	// `PREPARE` and `EXPLAIN ANALYZE` statements are also logged if their contained command belongs to an appropriate type.
	//
	// More info in [Greenplum® documentation](https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#log_statement).
	LogStatement  LogStatement `protobuf:"varint,9,opt,name=log_statement,json=logStatement,proto3,enum=yandex.cloud.mdb.greenplum.v1.LogStatement" json:"log_statement,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GreenplumConfig6_19) Reset() {
	*x = GreenplumConfig6_19{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GreenplumConfig6_19) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumConfig6_19) ProtoMessage() {}

func (x *GreenplumConfig6_19) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumConfig6_19.ProtoReflect.Descriptor instead.
func (*GreenplumConfig6_19) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{12}
}

func (x *GreenplumConfig6_19) GetMaxConnections() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *GreenplumConfig6_19) GetMaxSlotWalKeepSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxSlotWalKeepSize
	}
	return nil
}

func (x *GreenplumConfig6_19) GetGpWorkfileLimitPerSegment() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerSegment
	}
	return nil
}

func (x *GreenplumConfig6_19) GetGpWorkfileLimitPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerQuery
	}
	return nil
}

func (x *GreenplumConfig6_19) GetGpWorkfileLimitFilesPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitFilesPerQuery
	}
	return nil
}

func (x *GreenplumConfig6_19) GetMaxPreparedTransactions() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxPreparedTransactions
	}
	return nil
}

func (x *GreenplumConfig6_19) GetGpWorkfileCompression() *wrapperspb.BoolValue {
	if x != nil {
		return x.GpWorkfileCompression
	}
	return nil
}

func (x *GreenplumConfig6_19) GetMaxStatementMem() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxStatementMem
	}
	return nil
}

func (x *GreenplumConfig6_19) GetLogStatement() LogStatement {
	if x != nil {
		return x.LogStatement
	}
	return LogStatement_LOG_STATEMENT_UNSPECIFIED
}

type GreenplumConfig6_21 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Maximum number of inbound connections on master segment
	MaxConnections *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// Specify the maximum size of WAL files that replication slots are allowed to retain in the pg_wal directory at checkpoint time.
	// https://www.postgresql.org/docs/current/runtime-config-replication.html
	MaxSlotWalKeepSize *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=max_slot_wal_keep_size,json=maxSlotWalKeepSize,proto3" json:"max_slot_wal_keep_size,omitempty"`
	// Sets the maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.
	// The default value is 0, which means a limit is not enforced.
	// https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_segment
	GpWorkfileLimitPerSegment *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=gp_workfile_limit_per_segment,json=gpWorkfileLimitPerSegment,proto3" json:"gp_workfile_limit_per_segment,omitempty"`
	// Sets the maximum disk size an individual query is allowed to use for creating temporary spill files at each segment.
	// The default value is 0, which means a limit is not enforced.
	// https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_query
	GpWorkfileLimitPerQuery *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=gp_workfile_limit_per_query,json=gpWorkfileLimitPerQuery,proto3" json:"gp_workfile_limit_per_query,omitempty"`
	// Sets the maximum number of temporary spill files (also known as workfiles) allowed per query per segment.
	// Spill files are created when executing a query that requires more memory than it is allocated.
	// The current query is terminated when the limit is exceeded.
	// Set the value to 0 (zero) to allow an unlimited number of spill files. master session reload
	// https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_files_per_query
	// Default value is 10000
	GpWorkfileLimitFilesPerQuery *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=gp_workfile_limit_files_per_query,json=gpWorkfileLimitFilesPerQuery,proto3" json:"gp_workfile_limit_files_per_query,omitempty"`
	// Sets the maximum number of transactions that can be in the "prepared" state simultaneously
	// https://www.postgresql.org/docs/9.6/runtime-config-resource.html
	MaxPreparedTransactions *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=max_prepared_transactions,json=maxPreparedTransactions,proto3" json:"max_prepared_transactions,omitempty"`
	// Specifies whether the temporary files created, when a hash aggregation or hash join operation spills to disk, are compressed.
	// https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_compression
	GpWorkfileCompression *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=gp_workfile_compression,json=gpWorkfileCompression,proto3" json:"gp_workfile_compression,omitempty"`
	// Sets the maximum memory limit for a query. Helps avoid out-of-memory errors on a segment host during query processing as a result of setting statement_mem too high.
	// Taking into account the configuration of a single segment host, calculate max_statement_mem as follows:
	// (seghost_physical_memory) / (average_number_concurrent_queries)
	// When changing both max_statement_mem and statement_mem, max_statement_mem must be changed first, or listed first in the postgresql.conf file.
	// https://greenplum.docs.pivotal.io/6-19/ref_guide/config_params/guc-list.html#max_statement_mem
	// Default value is 2097152000 (2000MB)
	MaxStatementMem *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=max_statement_mem,json=maxStatementMem,proto3" json:"max_statement_mem,omitempty"` // in bytes
	// Controls which SQL statements are logged. DDL logs all data definition commands like CREATE, ALTER, and DROP commands.
	// MOD logs all DDL statements, plus INSERT, UPDATE, DELETE, TRUNCATE, and COPY FROM.
	// PREPARE and EXPLAIN ANALYZE statements are also logged if their contained command is of an appropriate type.
	// https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#log_statement
	// Default value is ddl
	LogStatement LogStatement `protobuf:"varint,9,opt,name=log_statement,json=logStatement,proto3,enum=yandex.cloud.mdb.greenplum.v1.LogStatement" json:"log_statement,omitempty"`
	// https://docs.vmware.com/en/VMware-Tanzu-Greenplum/6/greenplum-database/GUID-ref_guide-config_params-guc-list.html#gp_add_column_inherits_table_setting
	GpAddColumnInheritsTableSetting *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=gp_add_column_inherits_table_setting,json=gpAddColumnInheritsTableSetting,proto3" json:"gp_add_column_inherits_table_setting,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *GreenplumConfig6_21) Reset() {
	*x = GreenplumConfig6_21{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GreenplumConfig6_21) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumConfig6_21) ProtoMessage() {}

func (x *GreenplumConfig6_21) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumConfig6_21.ProtoReflect.Descriptor instead.
func (*GreenplumConfig6_21) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{13}
}

func (x *GreenplumConfig6_21) GetMaxConnections() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *GreenplumConfig6_21) GetMaxSlotWalKeepSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxSlotWalKeepSize
	}
	return nil
}

func (x *GreenplumConfig6_21) GetGpWorkfileLimitPerSegment() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerSegment
	}
	return nil
}

func (x *GreenplumConfig6_21) GetGpWorkfileLimitPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerQuery
	}
	return nil
}

func (x *GreenplumConfig6_21) GetGpWorkfileLimitFilesPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitFilesPerQuery
	}
	return nil
}

func (x *GreenplumConfig6_21) GetMaxPreparedTransactions() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxPreparedTransactions
	}
	return nil
}

func (x *GreenplumConfig6_21) GetGpWorkfileCompression() *wrapperspb.BoolValue {
	if x != nil {
		return x.GpWorkfileCompression
	}
	return nil
}

func (x *GreenplumConfig6_21) GetMaxStatementMem() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxStatementMem
	}
	return nil
}

func (x *GreenplumConfig6_21) GetLogStatement() LogStatement {
	if x != nil {
		return x.LogStatement
	}
	return LogStatement_LOG_STATEMENT_UNSPECIFIED
}

func (x *GreenplumConfig6_21) GetGpAddColumnInheritsTableSetting() *wrapperspb.BoolValue {
	if x != nil {
		return x.GpAddColumnInheritsTableSetting
	}
	return nil
}

type GreenplumConfig6_22 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Maximum number of inbound connections on master segment
	MaxConnections *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// Specify the maximum size of WAL files that replication slots are allowed to retain in the pg_wal directory at checkpoint time.
	// https://www.postgresql.org/docs/current/runtime-config-replication.html
	MaxSlotWalKeepSize *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=max_slot_wal_keep_size,json=maxSlotWalKeepSize,proto3" json:"max_slot_wal_keep_size,omitempty"`
	// Sets the maximum total disk size that all running queries are allowed to use for creating temporary spill files at each segment.
	// The default value is 0, which means a limit is not enforced.
	// https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_segment
	GpWorkfileLimitPerSegment *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=gp_workfile_limit_per_segment,json=gpWorkfileLimitPerSegment,proto3" json:"gp_workfile_limit_per_segment,omitempty"`
	// Sets the maximum disk size an individual query is allowed to use for creating temporary spill files at each segment.
	// The default value is 0, which means a limit is not enforced.
	// https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_per_query
	GpWorkfileLimitPerQuery *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=gp_workfile_limit_per_query,json=gpWorkfileLimitPerQuery,proto3" json:"gp_workfile_limit_per_query,omitempty"`
	// Sets the maximum number of temporary spill files (also known as workfiles) allowed per query per segment.
	// Spill files are created when executing a query that requires more memory than it is allocated.
	// The current query is terminated when the limit is exceeded.
	// Set the value to 0 (zero) to allow an unlimited number of spill files. master session reload
	// https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_limit_files_per_query
	// Default value is 10000
	GpWorkfileLimitFilesPerQuery *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=gp_workfile_limit_files_per_query,json=gpWorkfileLimitFilesPerQuery,proto3" json:"gp_workfile_limit_files_per_query,omitempty"`
	// Sets the maximum number of transactions that can be in the "prepared" state simultaneously
	// https://www.postgresql.org/docs/9.6/runtime-config-resource.html
	MaxPreparedTransactions *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=max_prepared_transactions,json=maxPreparedTransactions,proto3" json:"max_prepared_transactions,omitempty"`
	// Specifies whether the temporary files created, when a hash aggregation or hash join operation spills to disk, are compressed.
	// https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#gp_workfile_compression
	GpWorkfileCompression *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=gp_workfile_compression,json=gpWorkfileCompression,proto3" json:"gp_workfile_compression,omitempty"`
	// Sets the maximum memory limit for a query. Helps avoid out-of-memory errors on a segment host during query processing as a result of setting statement_mem too high.
	// Taking into account the configuration of a single segment host, calculate max_statement_mem as follows:
	// (seghost_physical_memory) / (average_number_concurrent_queries)
	// When changing both max_statement_mem and statement_mem, max_statement_mem must be changed first, or listed first in the postgresql.conf file.
	// https://greenplum.docs.pivotal.io/6-19/ref_guide/config_params/guc-list.html#max_statement_mem
	// Default value is 2097152000 (2000MB)
	MaxStatementMem *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=max_statement_mem,json=maxStatementMem,proto3" json:"max_statement_mem,omitempty"` // in bytes
	// Controls which SQL statements are logged. DDL logs all data definition commands like CREATE, ALTER, and DROP commands.
	// MOD logs all DDL statements, plus INSERT, UPDATE, DELETE, TRUNCATE, and COPY FROM.
	// PREPARE and EXPLAIN ANALYZE statements are also logged if their contained command is of an appropriate type.
	// https://docs.vmware.com/en/VMware-Greenplum/6/greenplum-database/ref_guide-config_params-guc-list.html#log_statement
	// Default value is ddl
	LogStatement LogStatement `protobuf:"varint,9,opt,name=log_statement,json=logStatement,proto3,enum=yandex.cloud.mdb.greenplum.v1.LogStatement" json:"log_statement,omitempty"`
	// https://docs.vmware.com/en/VMware-Tanzu-Greenplum/6/greenplum-database/GUID-ref_guide-config_params-guc-list.html#gp_add_column_inherits_table_setting
	GpAddColumnInheritsTableSetting *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=gp_add_column_inherits_table_setting,json=gpAddColumnInheritsTableSetting,proto3" json:"gp_add_column_inherits_table_setting,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *GreenplumConfig6_22) Reset() {
	*x = GreenplumConfig6_22{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GreenplumConfig6_22) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumConfig6_22) ProtoMessage() {}

func (x *GreenplumConfig6_22) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumConfig6_22.ProtoReflect.Descriptor instead.
func (*GreenplumConfig6_22) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{14}
}

func (x *GreenplumConfig6_22) GetMaxConnections() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *GreenplumConfig6_22) GetMaxSlotWalKeepSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxSlotWalKeepSize
	}
	return nil
}

func (x *GreenplumConfig6_22) GetGpWorkfileLimitPerSegment() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerSegment
	}
	return nil
}

func (x *GreenplumConfig6_22) GetGpWorkfileLimitPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitPerQuery
	}
	return nil
}

func (x *GreenplumConfig6_22) GetGpWorkfileLimitFilesPerQuery() *wrapperspb.Int64Value {
	if x != nil {
		return x.GpWorkfileLimitFilesPerQuery
	}
	return nil
}

func (x *GreenplumConfig6_22) GetMaxPreparedTransactions() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxPreparedTransactions
	}
	return nil
}

func (x *GreenplumConfig6_22) GetGpWorkfileCompression() *wrapperspb.BoolValue {
	if x != nil {
		return x.GpWorkfileCompression
	}
	return nil
}

func (x *GreenplumConfig6_22) GetMaxStatementMem() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxStatementMem
	}
	return nil
}

func (x *GreenplumConfig6_22) GetLogStatement() LogStatement {
	if x != nil {
		return x.LogStatement
	}
	return LogStatement_LOG_STATEMENT_UNSPECIFIED
}

func (x *GreenplumConfig6_22) GetGpAddColumnInheritsTableSetting() *wrapperspb.BoolValue {
	if x != nil {
		return x.GpAddColumnInheritsTableSetting
	}
	return nil
}

// Configuration settings version 6.17
type GreenplumConfigSet6_17 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Effective settings for a Greenplum® cluster (a combination of settings defined in [user_config] and [default_config]).
	EffectiveConfig *GreenplumConfig6_17 `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a Greenplum® cluster.
	UserConfig *GreenplumConfig6_17 `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a Greenplum® cluster.
	DefaultConfig *GreenplumConfig6_17 `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GreenplumConfigSet6_17) Reset() {
	*x = GreenplumConfigSet6_17{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GreenplumConfigSet6_17) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumConfigSet6_17) ProtoMessage() {}

func (x *GreenplumConfigSet6_17) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumConfigSet6_17.ProtoReflect.Descriptor instead.
func (*GreenplumConfigSet6_17) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{15}
}

func (x *GreenplumConfigSet6_17) GetEffectiveConfig() *GreenplumConfig6_17 {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *GreenplumConfigSet6_17) GetUserConfig() *GreenplumConfig6_17 {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *GreenplumConfigSet6_17) GetDefaultConfig() *GreenplumConfig6_17 {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

// Configuration settings version 6.19
type GreenplumConfigSet6_19 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Effective settings for a Greenplum® cluster (a combination of settings defined in [user_config] and [default_config]).
	EffectiveConfig *GreenplumConfig6_19 `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a Greenplum® cluster.
	UserConfig *GreenplumConfig6_19 `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a Greenplum® cluster.
	DefaultConfig *GreenplumConfig6_19 `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GreenplumConfigSet6_19) Reset() {
	*x = GreenplumConfigSet6_19{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GreenplumConfigSet6_19) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumConfigSet6_19) ProtoMessage() {}

func (x *GreenplumConfigSet6_19) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumConfigSet6_19.ProtoReflect.Descriptor instead.
func (*GreenplumConfigSet6_19) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{16}
}

func (x *GreenplumConfigSet6_19) GetEffectiveConfig() *GreenplumConfig6_19 {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *GreenplumConfigSet6_19) GetUserConfig() *GreenplumConfig6_19 {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *GreenplumConfigSet6_19) GetDefaultConfig() *GreenplumConfig6_19 {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

type GreenplumConfigSet6_21 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Effective settings for a Greenplum®  cluster (a combination of settings defined in [user_config] and [default_config]).
	EffectiveConfig *GreenplumConfig6_21 `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a Greenplum® cluster.
	UserConfig *GreenplumConfig6_21 `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a Greenplum® cluster.
	DefaultConfig *GreenplumConfig6_21 `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GreenplumConfigSet6_21) Reset() {
	*x = GreenplumConfigSet6_21{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GreenplumConfigSet6_21) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumConfigSet6_21) ProtoMessage() {}

func (x *GreenplumConfigSet6_21) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumConfigSet6_21.ProtoReflect.Descriptor instead.
func (*GreenplumConfigSet6_21) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{17}
}

func (x *GreenplumConfigSet6_21) GetEffectiveConfig() *GreenplumConfig6_21 {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *GreenplumConfigSet6_21) GetUserConfig() *GreenplumConfig6_21 {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *GreenplumConfigSet6_21) GetDefaultConfig() *GreenplumConfig6_21 {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

type GreenplumConfigSet6_22 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Effective settings for a Greenplum®  cluster (a combination of settings defined in [user_config] and [default_config]).
	EffectiveConfig *GreenplumConfig6_22 `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a Greenplum® cluster.
	UserConfig *GreenplumConfig6_22 `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a Greenplum® cluster.
	DefaultConfig *GreenplumConfig6_22 `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GreenplumConfigSet6_22) Reset() {
	*x = GreenplumConfigSet6_22{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GreenplumConfigSet6_22) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumConfigSet6_22) ProtoMessage() {}

func (x *GreenplumConfigSet6_22) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumConfigSet6_22.ProtoReflect.Descriptor instead.
func (*GreenplumConfigSet6_22) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{18}
}

func (x *GreenplumConfigSet6_22) GetEffectiveConfig() *GreenplumConfig6_22 {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *GreenplumConfigSet6_22) GetUserConfig() *GreenplumConfig6_22 {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *GreenplumConfigSet6_22) GetDefaultConfig() *GreenplumConfig6_22 {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

type GreenplumConfigSet6 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Effective settings for a Greenplum (a combination of settings defined
	// in [user_config] and [default_config]).
	EffectiveConfig *GreenplumConfig6 `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a Greenplum.
	UserConfig *GreenplumConfig6 `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a Greenplum.
	DefaultConfig *GreenplumConfig6 `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GreenplumConfigSet6) Reset() {
	*x = GreenplumConfigSet6{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GreenplumConfigSet6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GreenplumConfigSet6) ProtoMessage() {}

func (x *GreenplumConfigSet6) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GreenplumConfigSet6.ProtoReflect.Descriptor instead.
func (*GreenplumConfigSet6) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{19}
}

func (x *GreenplumConfigSet6) GetEffectiveConfig() *GreenplumConfig6 {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *GreenplumConfigSet6) GetUserConfig() *GreenplumConfig6 {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *GreenplumConfigSet6) GetDefaultConfig() *GreenplumConfig6 {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

type ConnectionPoolerConfigSet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Effective settings for an Odyssey® pooler (a combination of settings defined in [ConnectionPoolerConfigSet.user_config] and [ConnectionPoolerConfigSet.default_config]).
	EffectiveConfig *ConnectionPoolerConfig `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for an Odyssey® pooler.
	UserConfig *ConnectionPoolerConfig `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for an Odyssey® pooler.
	DefaultConfig *ConnectionPoolerConfig `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionPoolerConfigSet) Reset() {
	*x = ConnectionPoolerConfigSet{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionPoolerConfigSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionPoolerConfigSet) ProtoMessage() {}

func (x *ConnectionPoolerConfigSet) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionPoolerConfigSet.ProtoReflect.Descriptor instead.
func (*ConnectionPoolerConfigSet) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP(), []int{20}
}

func (x *ConnectionPoolerConfigSet) GetEffectiveConfig() *ConnectionPoolerConfig {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *ConnectionPoolerConfigSet) GetUserConfig() *ConnectionPoolerConfig {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *ConnectionPoolerConfigSet) GetDefaultConfig() *ConnectionPoolerConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

var File_yandex_cloud_mdb_greenplum_v1_config_proto protoreflect.FileDescriptor

const file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDesc = "" +
	"\n" +
	"*yandex/cloud/mdb/greenplum/v1/config.proto\x12\x1dyandex.cloud.mdb.greenplum.v1\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1dyandex/cloud/validation.proto\"x\n" +
	"\tResources\x12,\n" +
	"\x12resource_preset_id\x18\x01 \x01(\tR\x10resourcePresetId\x12\x1b\n" +
	"\tdisk_size\x18\x02 \x01(\x03R\bdiskSize\x12 \n" +
	"\fdisk_type_id\x18\x03 \x01(\tR\n" +
	"diskTypeId\"\xaf\x02\n" +
	"\x16ConnectionPoolerConfig\x12R\n" +
	"\x04mode\x18\x01 \x01(\x0e2>.yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig.PoolModeR\x04mode\x12/\n" +
	"\x04size\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueR\x04size\x12K\n" +
	"\x13client_idle_timeout\x18\x03 \x01(\v2\x1b.google.protobuf.Int64ValueR\x11clientIdleTimeout\"C\n" +
	"\bPoolMode\x12\x19\n" +
	"\x15POOL_MODE_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aSESSION\x10\x01\x12\x0f\n" +
	"\vTRANSACTION\x10\x02\"_\n" +
	"\x19BackgroundActivityStartAt\x12\x1e\n" +
	"\x05hours\x18\x01 \x01(\x03B\b\xfa\xc71\x040-23R\x05hours\x12\"\n" +
	"\aminutes\x18\x02 \x01(\x03B\b\xfa\xc71\x040-59R\aminutes\"g\n" +
	"\n" +
	"TableSizes\x12Y\n" +
	"\x06starts\x18\x01 \x03(\v28.yandex.cloud.mdb.greenplum.v1.BackgroundActivityStartAtB\a\x82\xc81\x03<=4R\x06starts\"\x8c\x02\n" +
	"\x10AnalyzeAndVacuum\x12N\n" +
	"\x05start\x18\x01 \x01(\v28.yandex.cloud.mdb.greenplum.v1.BackgroundActivityStartAtR\x05start\x12T\n" +
	"\x0fanalyze_timeout\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueB\x0e\xfa\xc71\n" +
	"7200-86399R\x0eanalyzeTimeout\x12R\n" +
	"\x0evacuum_timeout\x18\x03 \x01(\v2\x1b.google.protobuf.Int64ValueB\x0e\xfa\xc71\n" +
	"7200-86399R\rvacuumTimeout\"\xac\x02\n" +
	"\x1aBackgroundActivitiesConfig\x12J\n" +
	"\vtable_sizes\x18\x01 \x01(\v2).yandex.cloud.mdb.greenplum.v1.TableSizesR\n" +
	"tableSizes\x12]\n" +
	"\x12analyze_and_vacuum\x18\x02 \x01(\v2/.yandex.cloud.mdb.greenplum.v1.AnalyzeAndVacuumR\x10analyzeAndVacuum\x12c\n" +
	"\x14query_killer_scripts\x18\x03 \x01(\v21.yandex.cloud.mdb.greenplum.v1.QueryKillerScriptsR\x12queryKillerScripts\"\xa7\x01\n" +
	"\vQueryKiller\x122\n" +
	"\x06enable\x18\x01 \x01(\v2\x1a.google.protobuf.BoolValueR\x06enable\x12A\n" +
	"\amax_age\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueB\v\xfa\xc71\a1-86400R\x06maxAge\x12!\n" +
	"\fignore_users\x18\x03 \x03(\tR\vignoreUsers\"\xff\x01\n" +
	"\x12QueryKillerScripts\x12>\n" +
	"\x04idle\x18\x01 \x01(\v2*.yandex.cloud.mdb.greenplum.v1.QueryKillerR\x04idle\x12Z\n" +
	"\x13idle_in_transaction\x18\x02 \x01(\v2*.yandex.cloud.mdb.greenplum.v1.QueryKillerR\x11idleInTransaction\x12M\n" +
	"\flong_running\x18\x03 \x01(\v2*.yandex.cloud.mdb.greenplum.v1.QueryKillerR\vlongRunning\"`\n" +
	"\x16MasterSubclusterConfig\x12F\n" +
	"\tresources\x18\x01 \x01(\v2(.yandex.cloud.mdb.greenplum.v1.ResourcesR\tresources\"a\n" +
	"\x17SegmentSubclusterConfig\x12F\n" +
	"\tresources\x18\x01 \x01(\v2(.yandex.cloud.mdb.greenplum.v1.ResourcesR\tresources\"\xcd\b\n" +
	"\x10GreenplumConfig6\x12D\n" +
	"\x0fmax_connections\x18\x01 \x01(\v2\x1b.google.protobuf.Int64ValueR\x0emaxConnections\x12O\n" +
	"\x16max_slot_wal_keep_size\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueR\x12maxSlotWalKeepSize\x12]\n" +
	"\x1dgp_workfile_limit_per_segment\x18\x03 \x01(\v2\x1b.google.protobuf.Int64ValueR\x19gpWorkfileLimitPerSegment\x12Y\n" +
	"\x1bgp_workfile_limit_per_query\x18\x04 \x01(\v2\x1b.google.protobuf.Int64ValueR\x17gpWorkfileLimitPerQuery\x12d\n" +
	"!gp_workfile_limit_files_per_query\x18\x05 \x01(\v2\x1b.google.protobuf.Int64ValueR\x1cgpWorkfileLimitFilesPerQuery\x12W\n" +
	"\x19max_prepared_transactions\x18\x06 \x01(\v2\x1b.google.protobuf.Int64ValueR\x17maxPreparedTransactions\x12R\n" +
	"\x17gp_workfile_compression\x18\a \x01(\v2\x1a.google.protobuf.BoolValueR\x15gpWorkfileCompression\x12G\n" +
	"\x11max_statement_mem\x18\b \x01(\v2\x1b.google.protobuf.Int64ValueR\x0fmaxStatementMem\x12P\n" +
	"\rlog_statement\x18\t \x01(\x0e2+.yandex.cloud.mdb.greenplum.v1.LogStatementR\flogStatement\x12i\n" +
	"$gp_add_column_inherits_table_setting\x18\n" +
	" \x01(\v2\x1a.google.protobuf.BoolValueR\x1fgpAddColumnInheritsTableSetting\x12f\n" +
	"\"gp_enable_global_deadlock_detector\x18\v \x01(\v2\x1a.google.protobuf.BoolValueR\x1egpEnableGlobalDeadlockDetector\x12g\n" +
	"\"gp_global_deadlock_detector_period\x18\f \x01(\v2\x1b.google.protobuf.Int64ValueR\x1egpGlobalDeadlockDetectorPeriod\"\xf9\x04\n" +
	"\x13GreenplumConfig6_17\x12D\n" +
	"\x0fmax_connections\x18\x01 \x01(\v2\x1b.google.protobuf.Int64ValueR\x0emaxConnections\x12O\n" +
	"\x16max_slot_wal_keep_size\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueR\x12maxSlotWalKeepSize\x12]\n" +
	"\x1dgp_workfile_limit_per_segment\x18\x03 \x01(\v2\x1b.google.protobuf.Int64ValueR\x19gpWorkfileLimitPerSegment\x12Y\n" +
	"\x1bgp_workfile_limit_per_query\x18\x04 \x01(\v2\x1b.google.protobuf.Int64ValueR\x17gpWorkfileLimitPerQuery\x12d\n" +
	"!gp_workfile_limit_files_per_query\x18\x05 \x01(\v2\x1b.google.protobuf.Int64ValueR\x1cgpWorkfileLimitFilesPerQuery\x12W\n" +
	"\x19max_prepared_transactions\x18\x06 \x01(\v2\x1b.google.protobuf.Int64ValueR\x17maxPreparedTransactions\x12R\n" +
	"\x17gp_workfile_compression\x18\a \x01(\v2\x1a.google.protobuf.BoolValueR\x15gpWorkfileCompression\"\x94\x06\n" +
	"\x13GreenplumConfig6_19\x12D\n" +
	"\x0fmax_connections\x18\x01 \x01(\v2\x1b.google.protobuf.Int64ValueR\x0emaxConnections\x12O\n" +
	"\x16max_slot_wal_keep_size\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueR\x12maxSlotWalKeepSize\x12]\n" +
	"\x1dgp_workfile_limit_per_segment\x18\x03 \x01(\v2\x1b.google.protobuf.Int64ValueR\x19gpWorkfileLimitPerSegment\x12Y\n" +
	"\x1bgp_workfile_limit_per_query\x18\x04 \x01(\v2\x1b.google.protobuf.Int64ValueR\x17gpWorkfileLimitPerQuery\x12d\n" +
	"!gp_workfile_limit_files_per_query\x18\x05 \x01(\v2\x1b.google.protobuf.Int64ValueR\x1cgpWorkfileLimitFilesPerQuery\x12W\n" +
	"\x19max_prepared_transactions\x18\x06 \x01(\v2\x1b.google.protobuf.Int64ValueR\x17maxPreparedTransactions\x12R\n" +
	"\x17gp_workfile_compression\x18\a \x01(\v2\x1a.google.protobuf.BoolValueR\x15gpWorkfileCompression\x12G\n" +
	"\x11max_statement_mem\x18\b \x01(\v2\x1b.google.protobuf.Int64ValueR\x0fmaxStatementMem\x12P\n" +
	"\rlog_statement\x18\t \x01(\x0e2+.yandex.cloud.mdb.greenplum.v1.LogStatementR\flogStatement\"\xff\x06\n" +
	"\x13GreenplumConfig6_21\x12D\n" +
	"\x0fmax_connections\x18\x01 \x01(\v2\x1b.google.protobuf.Int64ValueR\x0emaxConnections\x12O\n" +
	"\x16max_slot_wal_keep_size\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueR\x12maxSlotWalKeepSize\x12]\n" +
	"\x1dgp_workfile_limit_per_segment\x18\x03 \x01(\v2\x1b.google.protobuf.Int64ValueR\x19gpWorkfileLimitPerSegment\x12Y\n" +
	"\x1bgp_workfile_limit_per_query\x18\x04 \x01(\v2\x1b.google.protobuf.Int64ValueR\x17gpWorkfileLimitPerQuery\x12d\n" +
	"!gp_workfile_limit_files_per_query\x18\x05 \x01(\v2\x1b.google.protobuf.Int64ValueR\x1cgpWorkfileLimitFilesPerQuery\x12W\n" +
	"\x19max_prepared_transactions\x18\x06 \x01(\v2\x1b.google.protobuf.Int64ValueR\x17maxPreparedTransactions\x12R\n" +
	"\x17gp_workfile_compression\x18\a \x01(\v2\x1a.google.protobuf.BoolValueR\x15gpWorkfileCompression\x12G\n" +
	"\x11max_statement_mem\x18\b \x01(\v2\x1b.google.protobuf.Int64ValueR\x0fmaxStatementMem\x12P\n" +
	"\rlog_statement\x18\t \x01(\x0e2+.yandex.cloud.mdb.greenplum.v1.LogStatementR\flogStatement\x12i\n" +
	"$gp_add_column_inherits_table_setting\x18\n" +
	" \x01(\v2\x1a.google.protobuf.BoolValueR\x1fgpAddColumnInheritsTableSetting\"\xff\x06\n" +
	"\x13GreenplumConfig6_22\x12D\n" +
	"\x0fmax_connections\x18\x01 \x01(\v2\x1b.google.protobuf.Int64ValueR\x0emaxConnections\x12O\n" +
	"\x16max_slot_wal_keep_size\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueR\x12maxSlotWalKeepSize\x12]\n" +
	"\x1dgp_workfile_limit_per_segment\x18\x03 \x01(\v2\x1b.google.protobuf.Int64ValueR\x19gpWorkfileLimitPerSegment\x12Y\n" +
	"\x1bgp_workfile_limit_per_query\x18\x04 \x01(\v2\x1b.google.protobuf.Int64ValueR\x17gpWorkfileLimitPerQuery\x12d\n" +
	"!gp_workfile_limit_files_per_query\x18\x05 \x01(\v2\x1b.google.protobuf.Int64ValueR\x1cgpWorkfileLimitFilesPerQuery\x12W\n" +
	"\x19max_prepared_transactions\x18\x06 \x01(\v2\x1b.google.protobuf.Int64ValueR\x17maxPreparedTransactions\x12R\n" +
	"\x17gp_workfile_compression\x18\a \x01(\v2\x1a.google.protobuf.BoolValueR\x15gpWorkfileCompression\x12G\n" +
	"\x11max_statement_mem\x18\b \x01(\v2\x1b.google.protobuf.Int64ValueR\x0fmaxStatementMem\x12P\n" +
	"\rlog_statement\x18\t \x01(\x0e2+.yandex.cloud.mdb.greenplum.v1.LogStatementR\flogStatement\x12i\n" +
	"$gp_add_column_inherits_table_setting\x18\n" +
	" \x01(\v2\x1a.google.protobuf.BoolValueR\x1fgpAddColumnInheritsTableSetting\"\xad\x02\n" +
	"\x16GreenplumConfigSet6_17\x12c\n" +
	"\x10effective_config\x18\x01 \x01(\v22.yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17B\x04\xe8\xc71\x01R\x0feffectiveConfig\x12S\n" +
	"\vuser_config\x18\x02 \x01(\v22.yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17R\n" +
	"userConfig\x12Y\n" +
	"\x0edefault_config\x18\x03 \x01(\v22.yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17R\rdefaultConfig\"\xad\x02\n" +
	"\x16GreenplumConfigSet6_19\x12c\n" +
	"\x10effective_config\x18\x01 \x01(\v22.yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19B\x04\xe8\xc71\x01R\x0feffectiveConfig\x12S\n" +
	"\vuser_config\x18\x02 \x01(\v22.yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19R\n" +
	"userConfig\x12Y\n" +
	"\x0edefault_config\x18\x03 \x01(\v22.yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19R\rdefaultConfig\"\xad\x02\n" +
	"\x16GreenplumConfigSet6_21\x12c\n" +
	"\x10effective_config\x18\x01 \x01(\v22.yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21B\x04\xe8\xc71\x01R\x0feffectiveConfig\x12S\n" +
	"\vuser_config\x18\x02 \x01(\v22.yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21R\n" +
	"userConfig\x12Y\n" +
	"\x0edefault_config\x18\x03 \x01(\v22.yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21R\rdefaultConfig\"\xad\x02\n" +
	"\x16GreenplumConfigSet6_22\x12c\n" +
	"\x10effective_config\x18\x01 \x01(\v22.yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22B\x04\xe8\xc71\x01R\x0feffectiveConfig\x12S\n" +
	"\vuser_config\x18\x02 \x01(\v22.yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22R\n" +
	"userConfig\x12Y\n" +
	"\x0edefault_config\x18\x03 \x01(\v22.yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22R\rdefaultConfig\"\xa1\x02\n" +
	"\x13GreenplumConfigSet6\x12`\n" +
	"\x10effective_config\x18\x01 \x01(\v2/.yandex.cloud.mdb.greenplum.v1.GreenplumConfig6B\x04\xe8\xc71\x01R\x0feffectiveConfig\x12P\n" +
	"\vuser_config\x18\x02 \x01(\v2/.yandex.cloud.mdb.greenplum.v1.GreenplumConfig6R\n" +
	"userConfig\x12V\n" +
	"\x0edefault_config\x18\x03 \x01(\v2/.yandex.cloud.mdb.greenplum.v1.GreenplumConfig6R\rdefaultConfig\"\xb9\x02\n" +
	"\x19ConnectionPoolerConfigSet\x12f\n" +
	"\x10effective_config\x18\x01 \x01(\v25.yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfigB\x04\xe8\xc71\x01R\x0feffectiveConfig\x12V\n" +
	"\vuser_config\x18\x02 \x01(\v25.yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfigR\n" +
	"userConfig\x12\\\n" +
	"\x0edefault_config\x18\x03 \x01(\v25.yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfigR\rdefaultConfig*R\n" +
	"\fLogStatement\x12\x1d\n" +
	"\x19LOG_STATEMENT_UNSPECIFIED\x10\x00\x12\b\n" +
	"\x04NONE\x10\x01\x12\a\n" +
	"\x03DDL\x10\x02\x12\a\n" +
	"\x03MOD\x10\x03\x12\a\n" +
	"\x03ALL\x10\x04Bp\n" +
	"!yandex.cloud.api.mdb.greenplum.v1ZKgithub.com/yandex-cloud/go-genproto/yandex/cloud/mdb/greenplum/v1;greenplumb\x06proto3"

var (
	file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescData []byte
)

func file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDesc), len(file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDesc)))
	})
	return file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDescData
}

var file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_yandex_cloud_mdb_greenplum_v1_config_proto_goTypes = []any{
	(LogStatement)(0),                    // 0: yandex.cloud.mdb.greenplum.v1.LogStatement
	(ConnectionPoolerConfig_PoolMode)(0), // 1: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig.PoolMode
	(*Resources)(nil),                    // 2: yandex.cloud.mdb.greenplum.v1.Resources
	(*ConnectionPoolerConfig)(nil),       // 3: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig
	(*BackgroundActivityStartAt)(nil),    // 4: yandex.cloud.mdb.greenplum.v1.BackgroundActivityStartAt
	(*TableSizes)(nil),                   // 5: yandex.cloud.mdb.greenplum.v1.TableSizes
	(*AnalyzeAndVacuum)(nil),             // 6: yandex.cloud.mdb.greenplum.v1.AnalyzeAndVacuum
	(*BackgroundActivitiesConfig)(nil),   // 7: yandex.cloud.mdb.greenplum.v1.BackgroundActivitiesConfig
	(*QueryKiller)(nil),                  // 8: yandex.cloud.mdb.greenplum.v1.QueryKiller
	(*QueryKillerScripts)(nil),           // 9: yandex.cloud.mdb.greenplum.v1.QueryKillerScripts
	(*MasterSubclusterConfig)(nil),       // 10: yandex.cloud.mdb.greenplum.v1.MasterSubclusterConfig
	(*SegmentSubclusterConfig)(nil),      // 11: yandex.cloud.mdb.greenplum.v1.SegmentSubclusterConfig
	(*GreenplumConfig6)(nil),             // 12: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6
	(*GreenplumConfig6_17)(nil),          // 13: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17
	(*GreenplumConfig6_19)(nil),          // 14: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19
	(*GreenplumConfig6_21)(nil),          // 15: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21
	(*GreenplumConfig6_22)(nil),          // 16: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22
	(*GreenplumConfigSet6_17)(nil),       // 17: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_17
	(*GreenplumConfigSet6_19)(nil),       // 18: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_19
	(*GreenplumConfigSet6_21)(nil),       // 19: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_21
	(*GreenplumConfigSet6_22)(nil),       // 20: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_22
	(*GreenplumConfigSet6)(nil),          // 21: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6
	(*ConnectionPoolerConfigSet)(nil),    // 22: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfigSet
	(*wrapperspb.Int64Value)(nil),        // 23: google.protobuf.Int64Value
	(*wrapperspb.BoolValue)(nil),         // 24: google.protobuf.BoolValue
}
var file_yandex_cloud_mdb_greenplum_v1_config_proto_depIdxs = []int32{
	1,  // 0: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig.mode:type_name -> yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig.PoolMode
	23, // 1: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig.size:type_name -> google.protobuf.Int64Value
	23, // 2: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig.client_idle_timeout:type_name -> google.protobuf.Int64Value
	4,  // 3: yandex.cloud.mdb.greenplum.v1.TableSizes.starts:type_name -> yandex.cloud.mdb.greenplum.v1.BackgroundActivityStartAt
	4,  // 4: yandex.cloud.mdb.greenplum.v1.AnalyzeAndVacuum.start:type_name -> yandex.cloud.mdb.greenplum.v1.BackgroundActivityStartAt
	23, // 5: yandex.cloud.mdb.greenplum.v1.AnalyzeAndVacuum.analyze_timeout:type_name -> google.protobuf.Int64Value
	23, // 6: yandex.cloud.mdb.greenplum.v1.AnalyzeAndVacuum.vacuum_timeout:type_name -> google.protobuf.Int64Value
	5,  // 7: yandex.cloud.mdb.greenplum.v1.BackgroundActivitiesConfig.table_sizes:type_name -> yandex.cloud.mdb.greenplum.v1.TableSizes
	6,  // 8: yandex.cloud.mdb.greenplum.v1.BackgroundActivitiesConfig.analyze_and_vacuum:type_name -> yandex.cloud.mdb.greenplum.v1.AnalyzeAndVacuum
	9,  // 9: yandex.cloud.mdb.greenplum.v1.BackgroundActivitiesConfig.query_killer_scripts:type_name -> yandex.cloud.mdb.greenplum.v1.QueryKillerScripts
	24, // 10: yandex.cloud.mdb.greenplum.v1.QueryKiller.enable:type_name -> google.protobuf.BoolValue
	23, // 11: yandex.cloud.mdb.greenplum.v1.QueryKiller.max_age:type_name -> google.protobuf.Int64Value
	8,  // 12: yandex.cloud.mdb.greenplum.v1.QueryKillerScripts.idle:type_name -> yandex.cloud.mdb.greenplum.v1.QueryKiller
	8,  // 13: yandex.cloud.mdb.greenplum.v1.QueryKillerScripts.idle_in_transaction:type_name -> yandex.cloud.mdb.greenplum.v1.QueryKiller
	8,  // 14: yandex.cloud.mdb.greenplum.v1.QueryKillerScripts.long_running:type_name -> yandex.cloud.mdb.greenplum.v1.QueryKiller
	2,  // 15: yandex.cloud.mdb.greenplum.v1.MasterSubclusterConfig.resources:type_name -> yandex.cloud.mdb.greenplum.v1.Resources
	2,  // 16: yandex.cloud.mdb.greenplum.v1.SegmentSubclusterConfig.resources:type_name -> yandex.cloud.mdb.greenplum.v1.Resources
	23, // 17: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.max_connections:type_name -> google.protobuf.Int64Value
	23, // 18: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.max_slot_wal_keep_size:type_name -> google.protobuf.Int64Value
	23, // 19: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.gp_workfile_limit_per_segment:type_name -> google.protobuf.Int64Value
	23, // 20: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.gp_workfile_limit_per_query:type_name -> google.protobuf.Int64Value
	23, // 21: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.gp_workfile_limit_files_per_query:type_name -> google.protobuf.Int64Value
	23, // 22: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.max_prepared_transactions:type_name -> google.protobuf.Int64Value
	24, // 23: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.gp_workfile_compression:type_name -> google.protobuf.BoolValue
	23, // 24: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.max_statement_mem:type_name -> google.protobuf.Int64Value
	0,  // 25: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.log_statement:type_name -> yandex.cloud.mdb.greenplum.v1.LogStatement
	24, // 26: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.gp_add_column_inherits_table_setting:type_name -> google.protobuf.BoolValue
	24, // 27: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.gp_enable_global_deadlock_detector:type_name -> google.protobuf.BoolValue
	23, // 28: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6.gp_global_deadlock_detector_period:type_name -> google.protobuf.Int64Value
	23, // 29: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17.max_connections:type_name -> google.protobuf.Int64Value
	23, // 30: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17.max_slot_wal_keep_size:type_name -> google.protobuf.Int64Value
	23, // 31: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17.gp_workfile_limit_per_segment:type_name -> google.protobuf.Int64Value
	23, // 32: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17.gp_workfile_limit_per_query:type_name -> google.protobuf.Int64Value
	23, // 33: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17.gp_workfile_limit_files_per_query:type_name -> google.protobuf.Int64Value
	23, // 34: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17.max_prepared_transactions:type_name -> google.protobuf.Int64Value
	24, // 35: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17.gp_workfile_compression:type_name -> google.protobuf.BoolValue
	23, // 36: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19.max_connections:type_name -> google.protobuf.Int64Value
	23, // 37: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19.max_slot_wal_keep_size:type_name -> google.protobuf.Int64Value
	23, // 38: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19.gp_workfile_limit_per_segment:type_name -> google.protobuf.Int64Value
	23, // 39: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19.gp_workfile_limit_per_query:type_name -> google.protobuf.Int64Value
	23, // 40: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19.gp_workfile_limit_files_per_query:type_name -> google.protobuf.Int64Value
	23, // 41: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19.max_prepared_transactions:type_name -> google.protobuf.Int64Value
	24, // 42: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19.gp_workfile_compression:type_name -> google.protobuf.BoolValue
	23, // 43: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19.max_statement_mem:type_name -> google.protobuf.Int64Value
	0,  // 44: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19.log_statement:type_name -> yandex.cloud.mdb.greenplum.v1.LogStatement
	23, // 45: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21.max_connections:type_name -> google.protobuf.Int64Value
	23, // 46: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21.max_slot_wal_keep_size:type_name -> google.protobuf.Int64Value
	23, // 47: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21.gp_workfile_limit_per_segment:type_name -> google.protobuf.Int64Value
	23, // 48: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21.gp_workfile_limit_per_query:type_name -> google.protobuf.Int64Value
	23, // 49: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21.gp_workfile_limit_files_per_query:type_name -> google.protobuf.Int64Value
	23, // 50: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21.max_prepared_transactions:type_name -> google.protobuf.Int64Value
	24, // 51: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21.gp_workfile_compression:type_name -> google.protobuf.BoolValue
	23, // 52: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21.max_statement_mem:type_name -> google.protobuf.Int64Value
	0,  // 53: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21.log_statement:type_name -> yandex.cloud.mdb.greenplum.v1.LogStatement
	24, // 54: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21.gp_add_column_inherits_table_setting:type_name -> google.protobuf.BoolValue
	23, // 55: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22.max_connections:type_name -> google.protobuf.Int64Value
	23, // 56: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22.max_slot_wal_keep_size:type_name -> google.protobuf.Int64Value
	23, // 57: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22.gp_workfile_limit_per_segment:type_name -> google.protobuf.Int64Value
	23, // 58: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22.gp_workfile_limit_per_query:type_name -> google.protobuf.Int64Value
	23, // 59: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22.gp_workfile_limit_files_per_query:type_name -> google.protobuf.Int64Value
	23, // 60: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22.max_prepared_transactions:type_name -> google.protobuf.Int64Value
	24, // 61: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22.gp_workfile_compression:type_name -> google.protobuf.BoolValue
	23, // 62: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22.max_statement_mem:type_name -> google.protobuf.Int64Value
	0,  // 63: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22.log_statement:type_name -> yandex.cloud.mdb.greenplum.v1.LogStatement
	24, // 64: yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22.gp_add_column_inherits_table_setting:type_name -> google.protobuf.BoolValue
	13, // 65: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_17.effective_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17
	13, // 66: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_17.user_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17
	13, // 67: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_17.default_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_17
	14, // 68: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_19.effective_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19
	14, // 69: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_19.user_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19
	14, // 70: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_19.default_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_19
	15, // 71: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_21.effective_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21
	15, // 72: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_21.user_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21
	15, // 73: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_21.default_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_21
	16, // 74: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_22.effective_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22
	16, // 75: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_22.user_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22
	16, // 76: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6_22.default_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6_22
	12, // 77: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6.effective_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6
	12, // 78: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6.user_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6
	12, // 79: yandex.cloud.mdb.greenplum.v1.GreenplumConfigSet6.default_config:type_name -> yandex.cloud.mdb.greenplum.v1.GreenplumConfig6
	3,  // 80: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfigSet.effective_config:type_name -> yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig
	3,  // 81: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfigSet.user_config:type_name -> yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig
	3,  // 82: yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfigSet.default_config:type_name -> yandex.cloud.mdb.greenplum.v1.ConnectionPoolerConfig
	83, // [83:83] is the sub-list for method output_type
	83, // [83:83] is the sub-list for method input_type
	83, // [83:83] is the sub-list for extension type_name
	83, // [83:83] is the sub-list for extension extendee
	0,  // [0:83] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_greenplum_v1_config_proto_init() }
func file_yandex_cloud_mdb_greenplum_v1_config_proto_init() {
	if File_yandex_cloud_mdb_greenplum_v1_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDesc), len(file_yandex_cloud_mdb_greenplum_v1_config_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_mdb_greenplum_v1_config_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_greenplum_v1_config_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_greenplum_v1_config_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_greenplum_v1_config_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_greenplum_v1_config_proto = out.File
	file_yandex_cloud_mdb_greenplum_v1_config_proto_goTypes = nil
	file_yandex_cloud_mdb_greenplum_v1_config_proto_depIdxs = nil
}

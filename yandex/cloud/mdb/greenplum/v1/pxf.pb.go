// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/mdb/greenplum/v1/pxf.proto

package greenplum

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PXFConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timeout for connection to the Apache Tomcat® server when making read requests.
	//
	// Specify values in seconds.
	ConnectionTimeout *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=connection_timeout,json=connectionTimeout,proto3" json:"connection_timeout,omitempty"`
	// Timeout for connection to the Apache Tomcat® server when making write requests.
	//
	// Specify the values in seconds.
	UploadTimeout *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=upload_timeout,json=uploadTimeout,proto3" json:"upload_timeout,omitempty"`
	// Maximum number of the Apache Tomcat® threads.
	//
	// To prevent situations when requests get stuck or fail due to running out of memory or malfunctioning of the Java garbage collector, specify the number of the Apache Tomcat® threads. Learn more about adjusting the number of threads in the [VMware Greenplum® Platform Extension Framework](https://docs.vmware.com/en/VMware-Greenplum-Platform-Extension-Framework/6.9/greenplum-platform-extension-framework/cfg_mem.html) documentation.
	MaxThreads *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=max_threads,json=maxThreads,proto3" json:"max_threads,omitempty"`
	// Determines whether the timeout for core streaming threads is permitted.
	PoolAllowCoreThreadTimeout *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=pool_allow_core_thread_timeout,json=poolAllowCoreThreadTimeout,proto3" json:"pool_allow_core_thread_timeout,omitempty"`
	// Number of core streaming threads per pool.
	PoolCoreSize *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=pool_core_size,json=poolCoreSize,proto3" json:"pool_core_size,omitempty"`
	// Maximum number of requests you can add to a pool queue for core streaming threads.
	//
	// If `0`, no pool queue is generated.
	PoolQueueCapacity *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=pool_queue_capacity,json=poolQueueCapacity,proto3" json:"pool_queue_capacity,omitempty"`
	// Maximum allowed number of core streaming threads.
	PoolMaxSize *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=pool_max_size,json=poolMaxSize,proto3" json:"pool_max_size,omitempty"`
	// Initial size, in megabytes, of the JVM heap for the PXF daemon.
	Xmx *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=xmx,proto3" json:"xmx,omitempty"`
	// Maximum size, in megabytes, of the JVM heap for the PXF daemon.
	Xms           *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=xms,proto3" json:"xms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PXFConfig) Reset() {
	*x = PXFConfig{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PXFConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXFConfig) ProtoMessage() {}

func (x *PXFConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXFConfig.ProtoReflect.Descriptor instead.
func (*PXFConfig) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescGZIP(), []int{0}
}

func (x *PXFConfig) GetConnectionTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.ConnectionTimeout
	}
	return nil
}

func (x *PXFConfig) GetUploadTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.UploadTimeout
	}
	return nil
}

func (x *PXFConfig) GetMaxThreads() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxThreads
	}
	return nil
}

func (x *PXFConfig) GetPoolAllowCoreThreadTimeout() *wrapperspb.BoolValue {
	if x != nil {
		return x.PoolAllowCoreThreadTimeout
	}
	return nil
}

func (x *PXFConfig) GetPoolCoreSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.PoolCoreSize
	}
	return nil
}

func (x *PXFConfig) GetPoolQueueCapacity() *wrapperspb.Int64Value {
	if x != nil {
		return x.PoolQueueCapacity
	}
	return nil
}

func (x *PXFConfig) GetPoolMaxSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.PoolMaxSize
	}
	return nil
}

func (x *PXFConfig) GetXmx() *wrapperspb.Int64Value {
	if x != nil {
		return x.Xmx
	}
	return nil
}

func (x *PXFConfig) GetXms() *wrapperspb.Int64Value {
	if x != nil {
		return x.Xms
	}
	return nil
}

type PXFConfigSet struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	EffectiveConfig *PXFConfig             `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings.
	UserConfig *PXFConfig `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration.
	DefaultConfig *PXFConfig `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PXFConfigSet) Reset() {
	*x = PXFConfigSet{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PXFConfigSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXFConfigSet) ProtoMessage() {}

func (x *PXFConfigSet) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXFConfigSet.ProtoReflect.Descriptor instead.
func (*PXFConfigSet) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescGZIP(), []int{1}
}

func (x *PXFConfigSet) GetEffectiveConfig() *PXFConfig {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *PXFConfigSet) GetUserConfig() *PXFConfig {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *PXFConfigSet) GetDefaultConfig() *PXFConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

type PXFDatasourceS3 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Public key to access S3 storage.
	AccessKey string `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	// Secret key to access S3 storage.
	SecretKey string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	// Manages a fast upload of big files to S3 storage. In case of the `false` value, the PXF generates files on disk before sending them to the S3 storage. In case of the `true` value, the PXF generates files in RAM (the PXF writes to disc only if there is not enough RAM).
	//
	// The fast upload is enabled by default.
	FastUpload *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=fast_upload,json=fastUpload,proto3" json:"fast_upload,omitempty"`
	// S3 storage address. The default value is `storage.yandexcloud.net` used for Yandex Object Storage.
	Endpoint      string `protobuf:"bytes,4,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PXFDatasourceS3) Reset() {
	*x = PXFDatasourceS3{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PXFDatasourceS3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXFDatasourceS3) ProtoMessage() {}

func (x *PXFDatasourceS3) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXFDatasourceS3.ProtoReflect.Descriptor instead.
func (*PXFDatasourceS3) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescGZIP(), []int{2}
}

func (x *PXFDatasourceS3) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *PXFDatasourceS3) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *PXFDatasourceS3) GetFastUpload() *wrapperspb.BoolValue {
	if x != nil {
		return x.FastUpload
	}
	return nil
}

func (x *PXFDatasourceS3) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

type PXFDatasourceJDBC struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// JDBC driver class in Java. The possible values are the following:
	//
	// * `com.simba.athena.jdbc.Driver`
	// * `com.clickhouse.jdbc.ClickHouseDriver`
	// * `com.ibm.as400.access.AS400JDBCDriver`
	// * `com.microsoft.sqlserver.jdbc.SQLServerDriver`
	// * `com.mysql.cj.jdbc.Driver`
	// * `org.postgresql.Driver`
	// * `oracle.jdbc.driver.OracleDriver`
	// * `net.snowflake.client.jdbc.SnowflakeDriver`
	// * `io.trino.jdbc.TrinoDriver`
	Driver string `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	// URL that the JDBC driver uses to connect to the database. Examples:
	//
	// * `jdbc:mysql://mysqlhost:3306/testdb`: Local MySQL DB.
	// * `jdbc:postgresql://c-<cluster_id>.rw.mdb.yandexcloud.net:6432/db1`: Managed Service for PostgreSQL cluster. The address contains the special FQDN of the cluster's master.
	// * `jdbc:oracle:thin:@host.example:1521:orcl`: Oracle DB.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Username of the DB owner.
	User string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// Password of the DB owner.
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// Number of rows to read in an external table, in a batch.
	//
	// The default value is `100`.
	StatementBatchSize *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=statement_batch_size,json=statementBatchSize,proto3" json:"statement_batch_size,omitempty"`
	// Number of rows to fetch (buffer) when reading from an external table.
	//
	// The default value is `1000`.
	StatementFetchSize *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=statement_fetch_size,json=statementFetchSize,proto3" json:"statement_fetch_size,omitempty"`
	// Amount of time (in seconds) the JDBC driver waits for a statement to run. This timeout applies to statements created for both read and write operations.
	//
	// The default value is `60`.
	StatementQueryTimeout *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=statement_query_timeout,json=statementQueryTimeout,proto3" json:"statement_query_timeout,omitempty"`
	// Determines whether JDBC connection pooling is used in a server configuration. By default, it is used.
	PoolEnabled *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=pool_enabled,json=poolEnabled,proto3" json:"pool_enabled,omitempty"`
	// Maximum number of connections to the DB backend.
	//
	// The default value is `5`.
	PoolMaximumSize *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=pool_maximum_size,json=poolMaximumSize,proto3" json:"pool_maximum_size,omitempty"`
	// Maximum time, in milliseconds, to wait for a connection from the pool.
	//
	// The default value is `30000`.
	PoolConnectionTimeout *wrapperspb.Int64Value `protobuf:"bytes,10,opt,name=pool_connection_timeout,json=poolConnectionTimeout,proto3" json:"pool_connection_timeout,omitempty"`
	// Maximum amount of time, in milliseconds, after which an inactive connection is considered idle.
	//
	// The default value is `30000`.
	PoolIdleTimeout *wrapperspb.Int64Value `protobuf:"bytes,11,opt,name=pool_idle_timeout,json=poolIdleTimeout,proto3" json:"pool_idle_timeout,omitempty"`
	// Minimum number of idle connections maintained in the connection pool.
	//
	// The default value is `0`.
	PoolMinimumIdle *wrapperspb.Int64Value `protobuf:"bytes,12,opt,name=pool_minimum_idle,json=poolMinimumIdle,proto3" json:"pool_minimum_idle,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PXFDatasourceJDBC) Reset() {
	*x = PXFDatasourceJDBC{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PXFDatasourceJDBC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXFDatasourceJDBC) ProtoMessage() {}

func (x *PXFDatasourceJDBC) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXFDatasourceJDBC.ProtoReflect.Descriptor instead.
func (*PXFDatasourceJDBC) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescGZIP(), []int{3}
}

func (x *PXFDatasourceJDBC) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *PXFDatasourceJDBC) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PXFDatasourceJDBC) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *PXFDatasourceJDBC) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *PXFDatasourceJDBC) GetStatementBatchSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.StatementBatchSize
	}
	return nil
}

func (x *PXFDatasourceJDBC) GetStatementFetchSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.StatementFetchSize
	}
	return nil
}

func (x *PXFDatasourceJDBC) GetStatementQueryTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.StatementQueryTimeout
	}
	return nil
}

func (x *PXFDatasourceJDBC) GetPoolEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.PoolEnabled
	}
	return nil
}

func (x *PXFDatasourceJDBC) GetPoolMaximumSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.PoolMaximumSize
	}
	return nil
}

func (x *PXFDatasourceJDBC) GetPoolConnectionTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.PoolConnectionTimeout
	}
	return nil
}

func (x *PXFDatasourceJDBC) GetPoolIdleTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.PoolIdleTimeout
	}
	return nil
}

func (x *PXFDatasourceJDBC) GetPoolMinimumIdle() *wrapperspb.Int64Value {
	if x != nil {
		return x.PoolMinimumIdle
	}
	return nil
}

type PXFDatasourceCore struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// URI whose scheme and authority determine the file system implementation.
	DefaultFs string `protobuf:"bytes,1,opt,name=default_fs,json=defaultFs,proto3" json:"default_fs,omitempty"`
	// Rules for mapping Kerberos principals to operating system user accounts.
	SecurityAuthToLocal string `protobuf:"bytes,2,opt,name=security_auth_to_local,json=securityAuthToLocal,proto3" json:"security_auth_to_local,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PXFDatasourceCore) Reset() {
	*x = PXFDatasourceCore{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PXFDatasourceCore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXFDatasourceCore) ProtoMessage() {}

func (x *PXFDatasourceCore) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXFDatasourceCore.ProtoReflect.Descriptor instead.
func (*PXFDatasourceCore) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescGZIP(), []int{4}
}

func (x *PXFDatasourceCore) GetDefaultFs() string {
	if x != nil {
		return x.DefaultFs
	}
	return ""
}

func (x *PXFDatasourceCore) GetSecurityAuthToLocal() string {
	if x != nil {
		return x.SecurityAuthToLocal
	}
	return ""
}

type PXFDatasourceKerberos struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Determines whether the Kerberos authentication server is used. By default, it is not used.
	Enable *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// Host of the primary KDC server (Key Distribution Center).
	Primary string `protobuf:"bytes,2,opt,name=primary,proto3" json:"primary,omitempty"`
	// Kerberos realm for a Greenplum® DB.
	Realm string `protobuf:"bytes,3,opt,name=realm,proto3" json:"realm,omitempty"`
	// KDC server hosts.
	KdcServers []string `protobuf:"bytes,4,rep,name=kdc_servers,json=kdcServers,proto3" json:"kdc_servers,omitempty"`
	// Administration server host. Usually, this is the primary Kerberos server.
	AdminServer string `protobuf:"bytes,5,opt,name=admin_server,json=adminServer,proto3" json:"admin_server,omitempty"`
	// Domain that is used for the host name extension. Applicable when Kerberos 4 service members become Kerberos 5 service members (for example, when rcmd.hostname is replaced with host/hostname.domain).
	DefaultDomain string `protobuf:"bytes,6,opt,name=default_domain,json=defaultDomain,proto3" json:"default_domain,omitempty"`
	// Base64 encoded contents of the keytab file.
	KeytabBase64  string `protobuf:"bytes,7,opt,name=keytab_base64,json=keytabBase64,proto3" json:"keytab_base64,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PXFDatasourceKerberos) Reset() {
	*x = PXFDatasourceKerberos{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PXFDatasourceKerberos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXFDatasourceKerberos) ProtoMessage() {}

func (x *PXFDatasourceKerberos) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXFDatasourceKerberos.ProtoReflect.Descriptor instead.
func (*PXFDatasourceKerberos) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescGZIP(), []int{5}
}

func (x *PXFDatasourceKerberos) GetEnable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *PXFDatasourceKerberos) GetPrimary() string {
	if x != nil {
		return x.Primary
	}
	return ""
}

func (x *PXFDatasourceKerberos) GetRealm() string {
	if x != nil {
		return x.Realm
	}
	return ""
}

func (x *PXFDatasourceKerberos) GetKdcServers() []string {
	if x != nil {
		return x.KdcServers
	}
	return nil
}

func (x *PXFDatasourceKerberos) GetAdminServer() string {
	if x != nil {
		return x.AdminServer
	}
	return ""
}

func (x *PXFDatasourceKerberos) GetDefaultDomain() string {
	if x != nil {
		return x.DefaultDomain
	}
	return ""
}

func (x *PXFDatasourceKerberos) GetKeytabBase64() string {
	if x != nil {
		return x.KeytabBase64
	}
	return ""
}

type PXFDatasourceHDFSDfsNamenode struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	RpcAddress        string                 `protobuf:"bytes,1,opt,name=rpc_address,json=rpcAddress,proto3" json:"rpc_address,omitempty"`
	ServiceRpcAddress string                 `protobuf:"bytes,2,opt,name=service_rpc_address,json=serviceRpcAddress,proto3" json:"service_rpc_address,omitempty"`
	HttpAddress       string                 `protobuf:"bytes,3,opt,name=http_address,json=httpAddress,proto3" json:"http_address,omitempty"`
	HttpsAddress      string                 `protobuf:"bytes,4,opt,name=https_address,json=httpsAddress,proto3" json:"https_address,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PXFDatasourceHDFSDfsNamenode) Reset() {
	*x = PXFDatasourceHDFSDfsNamenode{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PXFDatasourceHDFSDfsNamenode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXFDatasourceHDFSDfsNamenode) ProtoMessage() {}

func (x *PXFDatasourceHDFSDfsNamenode) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXFDatasourceHDFSDfsNamenode.ProtoReflect.Descriptor instead.
func (*PXFDatasourceHDFSDfsNamenode) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescGZIP(), []int{6}
}

func (x *PXFDatasourceHDFSDfsNamenode) GetRpcAddress() string {
	if x != nil {
		return x.RpcAddress
	}
	return ""
}

func (x *PXFDatasourceHDFSDfsNamenode) GetServiceRpcAddress() string {
	if x != nil {
		return x.ServiceRpcAddress
	}
	return ""
}

func (x *PXFDatasourceHDFSDfsNamenode) GetHttpAddress() string {
	if x != nil {
		return x.HttpAddress
	}
	return ""
}

func (x *PXFDatasourceHDFSDfsNamenode) GetHttpsAddress() string {
	if x != nil {
		return x.HttpsAddress
	}
	return ""
}

type PXFDatasourceHDFSDfs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Determines whether automatic failover is enabled for the high availability of the file system.
	//
	// The automatic failover is enabled by default.
	HaAutomaticFailoverEnabled *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=ha_automatic_failover_enabled,json=haAutomaticFailoverEnabled,proto3" json:"ha_automatic_failover_enabled,omitempty"`
	// If `true`, access tokens are used as capabilities for accessing datanodes. If `false`, no access tokens are checked on accessing datanodes.
	//
	// The check of access tokens is enabled by default.
	BlockAccessTokenEnabled *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=block_access_token_enabled,json=blockAccessTokenEnabled,proto3" json:"block_access_token_enabled,omitempty"`
	// Determines whether the datanode hostname is used when connecting to datanodes.
	UseDatanodeHostname *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=use_datanode_hostname,json=useDatanodeHostname,proto3" json:"use_datanode_hostname,omitempty"`
	// List of HDFS service logical names.
	//
	// Specify them separated by commas. The names can be arbitrary.
	Namenodes map[string]*PXFDatasourceHDFSDfsNamenode `protobuf:"bytes,4,rep,name=namenodes,proto3" json:"namenodes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Corresponds well-known HDFS client setting "dfs.nameservices" for this datasource
	Nameservices  string `protobuf:"bytes,5,opt,name=nameservices,proto3" json:"nameservices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PXFDatasourceHDFSDfs) Reset() {
	*x = PXFDatasourceHDFSDfs{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PXFDatasourceHDFSDfs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXFDatasourceHDFSDfs) ProtoMessage() {}

func (x *PXFDatasourceHDFSDfs) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXFDatasourceHDFSDfs.ProtoReflect.Descriptor instead.
func (*PXFDatasourceHDFSDfs) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescGZIP(), []int{7}
}

func (x *PXFDatasourceHDFSDfs) GetHaAutomaticFailoverEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.HaAutomaticFailoverEnabled
	}
	return nil
}

func (x *PXFDatasourceHDFSDfs) GetBlockAccessTokenEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.BlockAccessTokenEnabled
	}
	return nil
}

func (x *PXFDatasourceHDFSDfs) GetUseDatanodeHostname() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseDatanodeHostname
	}
	return nil
}

func (x *PXFDatasourceHDFSDfs) GetNamenodes() map[string]*PXFDatasourceHDFSDfsNamenode {
	if x != nil {
		return x.Namenodes
	}
	return nil
}

func (x *PXFDatasourceHDFSDfs) GetNameservices() string {
	if x != nil {
		return x.Nameservices
	}
	return ""
}

type PXFDatasourceHDFSYarnHaRm struct {
	state                                 protoimpl.MessageState `protogen:"open.v1"`
	ResourcemanagerAddress                string                 `protobuf:"bytes,1,opt,name=resourcemanager_address,json=resourcemanagerAddress,proto3" json:"resourcemanager_address,omitempty"`
	ResourcemanagerSchedulerAddress       string                 `protobuf:"bytes,2,opt,name=resourcemanager_scheduler_address,json=resourcemanagerSchedulerAddress,proto3" json:"resourcemanager_scheduler_address,omitempty"`
	ResourcemanagerResourceTrackerAddress string                 `protobuf:"bytes,3,opt,name=resourcemanager_resource_tracker_address,json=resourcemanagerResourceTrackerAddress,proto3" json:"resourcemanager_resource_tracker_address,omitempty"`
	ResourcemanagerAdminAddress           string                 `protobuf:"bytes,4,opt,name=resourcemanager_admin_address,json=resourcemanagerAdminAddress,proto3" json:"resourcemanager_admin_address,omitempty"`
	ResourcemanagerWebappAddress          string                 `protobuf:"bytes,5,opt,name=resourcemanager_webapp_address,json=resourcemanagerWebappAddress,proto3" json:"resourcemanager_webapp_address,omitempty"`
	ResourcemanagerWebappHttpsAddress     string                 `protobuf:"bytes,6,opt,name=resourcemanager_webapp_https_address,json=resourcemanagerWebappHttpsAddress,proto3" json:"resourcemanager_webapp_https_address,omitempty"`
	unknownFields                         protoimpl.UnknownFields
	sizeCache                             protoimpl.SizeCache
}

func (x *PXFDatasourceHDFSYarnHaRm) Reset() {
	*x = PXFDatasourceHDFSYarnHaRm{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PXFDatasourceHDFSYarnHaRm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXFDatasourceHDFSYarnHaRm) ProtoMessage() {}

func (x *PXFDatasourceHDFSYarnHaRm) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXFDatasourceHDFSYarnHaRm.ProtoReflect.Descriptor instead.
func (*PXFDatasourceHDFSYarnHaRm) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescGZIP(), []int{8}
}

func (x *PXFDatasourceHDFSYarnHaRm) GetResourcemanagerAddress() string {
	if x != nil {
		return x.ResourcemanagerAddress
	}
	return ""
}

func (x *PXFDatasourceHDFSYarnHaRm) GetResourcemanagerSchedulerAddress() string {
	if x != nil {
		return x.ResourcemanagerSchedulerAddress
	}
	return ""
}

func (x *PXFDatasourceHDFSYarnHaRm) GetResourcemanagerResourceTrackerAddress() string {
	if x != nil {
		return x.ResourcemanagerResourceTrackerAddress
	}
	return ""
}

func (x *PXFDatasourceHDFSYarnHaRm) GetResourcemanagerAdminAddress() string {
	if x != nil {
		return x.ResourcemanagerAdminAddress
	}
	return ""
}

func (x *PXFDatasourceHDFSYarnHaRm) GetResourcemanagerWebappAddress() string {
	if x != nil {
		return x.ResourcemanagerWebappAddress
	}
	return ""
}

func (x *PXFDatasourceHDFSYarnHaRm) GetResourcemanagerWebappHttpsAddress() string {
	if x != nil {
		return x.ResourcemanagerWebappHttpsAddress
	}
	return ""
}

type PXFDatasourceHDFSYarn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Determines whether high availability is enabled for YARN's ResourceManager services.
	//
	// The high availability is enabled by default.
	ResourcemanagerHaEnabled *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=resourcemanager_ha_enabled,json=resourcemanagerHaEnabled,proto3" json:"resourcemanager_ha_enabled,omitempty"`
	// Determines whether another ResourceManager should automatically become active when the active ResourceManager has failed and does not respond.
	//
	// The switch of ResourceManagers is enabled by default if the high availability is enabled.
	ResourcemanagerHaAutoFailoverEnabled *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=resourcemanager_ha_auto_failover_enabled,json=resourcemanagerHaAutoFailoverEnabled,proto3" json:"resourcemanager_ha_auto_failover_enabled,omitempty"`
	// Determines whether the embedded ActiveStandbyElector method should be used for the election of the active ResourceManager. If the current active ResourceManager has failed and does not respond, the ActiveStandbyElector method makes another ResourceManager active which then takes over.
	ResourcemanagerHaAutoFailoverEmbedded *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=resourcemanager_ha_auto_failover_embedded,json=resourcemanagerHaAutoFailoverEmbedded,proto3" json:"resourcemanager_ha_auto_failover_embedded,omitempty"`
	// Cluster ID. Specify it, so the ResourceManager service does not become active for a different cluster.
	ResourcemanagerClusterId string `protobuf:"bytes,4,opt,name=resourcemanager_cluster_id,json=resourcemanagerClusterId,proto3" json:"resourcemanager_cluster_id,omitempty"`
	// Highly available ResourceManager service.
	HaRm          map[string]*PXFDatasourceHDFSYarnHaRm `protobuf:"bytes,5,rep,name=ha_rm,json=haRm,proto3" json:"ha_rm,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PXFDatasourceHDFSYarn) Reset() {
	*x = PXFDatasourceHDFSYarn{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PXFDatasourceHDFSYarn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXFDatasourceHDFSYarn) ProtoMessage() {}

func (x *PXFDatasourceHDFSYarn) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXFDatasourceHDFSYarn.ProtoReflect.Descriptor instead.
func (*PXFDatasourceHDFSYarn) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescGZIP(), []int{9}
}

func (x *PXFDatasourceHDFSYarn) GetResourcemanagerHaEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.ResourcemanagerHaEnabled
	}
	return nil
}

func (x *PXFDatasourceHDFSYarn) GetResourcemanagerHaAutoFailoverEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.ResourcemanagerHaAutoFailoverEnabled
	}
	return nil
}

func (x *PXFDatasourceHDFSYarn) GetResourcemanagerHaAutoFailoverEmbedded() *wrapperspb.BoolValue {
	if x != nil {
		return x.ResourcemanagerHaAutoFailoverEmbedded
	}
	return nil
}

func (x *PXFDatasourceHDFSYarn) GetResourcemanagerClusterId() string {
	if x != nil {
		return x.ResourcemanagerClusterId
	}
	return ""
}

func (x *PXFDatasourceHDFSYarn) GetHaRm() map[string]*PXFDatasourceHDFSYarnHaRm {
	if x != nil {
		return x.HaRm
	}
	return nil
}

type PXFDatasourceHDFS struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Settings of the file system and security rules.
	Core *PXFDatasourceCore `protobuf:"bytes,1,opt,name=core,proto3" json:"core,omitempty"`
	// Settings of the Kerberos network authentication protocol.
	Kerberos *PXFDatasourceKerberos `protobuf:"bytes,2,opt,name=kerberos,proto3" json:"kerberos,omitempty"`
	// Enables authentication on behalf of the Greenplum® user when connecting to the remote file storage or DBMS.
	//
	// The authentication is disabled by default.
	UserImpersonation *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=user_impersonation,json=userImpersonation,proto3" json:"user_impersonation,omitempty"`
	// Login username for the remote file storage or DBMS if authentication on behalf of the Greenplum® user is enabled.
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// Maximum number of times that PXF retries a SASL connection request after a refused connection returns a `GSS initiate failed` error.
	//
	// The default value is `5`.
	SaslConnectionRetries *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=sasl_connection_retries,json=saslConnectionRetries,proto3" json:"sasl_connection_retries,omitempty"`
	// ZooKeeper server hosts.
	//
	// Specify values in the `<address>:<port>` format.
	ZkHosts []string `protobuf:"bytes,6,rep,name=zk_hosts,json=zkHosts,proto3" json:"zk_hosts,omitempty"`
	// Settings of the distributed file system.
	Dfs *PXFDatasourceHDFSDfs `protobuf:"bytes,7,opt,name=dfs,proto3" json:"dfs,omitempty"`
	// Settings of the ResourceManager service that is responsible for tracking resources in a cluster and scheduling applications (e.g., MapReduce jobs).
	Yarn          *PXFDatasourceHDFSYarn `protobuf:"bytes,8,opt,name=yarn,proto3" json:"yarn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PXFDatasourceHDFS) Reset() {
	*x = PXFDatasourceHDFS{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PXFDatasourceHDFS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXFDatasourceHDFS) ProtoMessage() {}

func (x *PXFDatasourceHDFS) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXFDatasourceHDFS.ProtoReflect.Descriptor instead.
func (*PXFDatasourceHDFS) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescGZIP(), []int{10}
}

func (x *PXFDatasourceHDFS) GetCore() *PXFDatasourceCore {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *PXFDatasourceHDFS) GetKerberos() *PXFDatasourceKerberos {
	if x != nil {
		return x.Kerberos
	}
	return nil
}

func (x *PXFDatasourceHDFS) GetUserImpersonation() *wrapperspb.BoolValue {
	if x != nil {
		return x.UserImpersonation
	}
	return nil
}

func (x *PXFDatasourceHDFS) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PXFDatasourceHDFS) GetSaslConnectionRetries() *wrapperspb.Int64Value {
	if x != nil {
		return x.SaslConnectionRetries
	}
	return nil
}

func (x *PXFDatasourceHDFS) GetZkHosts() []string {
	if x != nil {
		return x.ZkHosts
	}
	return nil
}

func (x *PXFDatasourceHDFS) GetDfs() *PXFDatasourceHDFSDfs {
	if x != nil {
		return x.Dfs
	}
	return nil
}

func (x *PXFDatasourceHDFS) GetYarn() *PXFDatasourceHDFSYarn {
	if x != nil {
		return x.Yarn
	}
	return nil
}

type PXFDatasourceHive struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Settings of the file system and security rules.
	Core *PXFDatasourceCore `protobuf:"bytes,1,opt,name=core,proto3" json:"core,omitempty"`
	// Settings of the Kerberos network authentication protocol.
	Kerberos *PXFDatasourceKerberos `protobuf:"bytes,2,opt,name=kerberos,proto3" json:"kerberos,omitempty"`
	// Enables authentication on behalf of the Greenplum® user when connecting to the remote file storage or DBMS.
	//
	// The authentication is disabled by default.
	UserImpersonation *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=user_impersonation,json=userImpersonation,proto3" json:"user_impersonation,omitempty"`
	// Login username for the remote file storage or DBMS if authentication on behalf of the Greenplum® user is enabled.
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// Maximum number of times that PXF retries a SASL connection request after a refused connection returns a `GSS initiate failed` error.
	//
	// The default value is `5`.
	SaslConnectionRetries *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=sasl_connection_retries,json=saslConnectionRetries,proto3" json:"sasl_connection_retries,omitempty"`
	// ZooKeeper server hosts.
	//
	// Specify values in the `<address>:<port>` format.
	ZkHosts []string `protobuf:"bytes,6,rep,name=zk_hosts,json=zkHosts,proto3" json:"zk_hosts,omitempty"`
	// Specifies if predicate pushdown is enabled for queries on external tables.
	//
	// The predicate pushdown is enabled by default.
	Ppd *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=ppd,proto3" json:"ppd,omitempty"`
	// List of URIs separated by commas. To request metadata, the remote DBMS connects to Metastore by one of these URIs.
	MetastoreUris []string `protobuf:"bytes,8,rep,name=metastore_uris,json=metastoreUris,proto3" json:"metastore_uris,omitempty"`
	// Service principal for the Metastore Thrift server.
	MetastoreKerberosPrincipal string `protobuf:"bytes,9,opt,name=metastore_kerberos_principal,json=metastoreKerberosPrincipal,proto3" json:"metastore_kerberos_principal,omitempty"`
	// Kerberos server principal.
	AuthKerberosPrincipal string `protobuf:"bytes,10,opt,name=auth_kerberos_principal,json=authKerberosPrincipal,proto3" json:"auth_kerberos_principal,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PXFDatasourceHive) Reset() {
	*x = PXFDatasourceHive{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PXFDatasourceHive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXFDatasourceHive) ProtoMessage() {}

func (x *PXFDatasourceHive) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXFDatasourceHive.ProtoReflect.Descriptor instead.
func (*PXFDatasourceHive) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescGZIP(), []int{11}
}

func (x *PXFDatasourceHive) GetCore() *PXFDatasourceCore {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *PXFDatasourceHive) GetKerberos() *PXFDatasourceKerberos {
	if x != nil {
		return x.Kerberos
	}
	return nil
}

func (x *PXFDatasourceHive) GetUserImpersonation() *wrapperspb.BoolValue {
	if x != nil {
		return x.UserImpersonation
	}
	return nil
}

func (x *PXFDatasourceHive) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PXFDatasourceHive) GetSaslConnectionRetries() *wrapperspb.Int64Value {
	if x != nil {
		return x.SaslConnectionRetries
	}
	return nil
}

func (x *PXFDatasourceHive) GetZkHosts() []string {
	if x != nil {
		return x.ZkHosts
	}
	return nil
}

func (x *PXFDatasourceHive) GetPpd() *wrapperspb.BoolValue {
	if x != nil {
		return x.Ppd
	}
	return nil
}

func (x *PXFDatasourceHive) GetMetastoreUris() []string {
	if x != nil {
		return x.MetastoreUris
	}
	return nil
}

func (x *PXFDatasourceHive) GetMetastoreKerberosPrincipal() string {
	if x != nil {
		return x.MetastoreKerberosPrincipal
	}
	return ""
}

func (x *PXFDatasourceHive) GetAuthKerberosPrincipal() string {
	if x != nil {
		return x.AuthKerberosPrincipal
	}
	return ""
}

type PXFDatasource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Data source name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Settings:
	//
	//	*PXFDatasource_S3
	//	*PXFDatasource_Jdbc
	//	*PXFDatasource_Hdfs
	//	*PXFDatasource_Hive
	Settings      isPXFDatasource_Settings `protobuf_oneof:"settings"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PXFDatasource) Reset() {
	*x = PXFDatasource{}
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PXFDatasource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PXFDatasource) ProtoMessage() {}

func (x *PXFDatasource) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PXFDatasource.ProtoReflect.Descriptor instead.
func (*PXFDatasource) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescGZIP(), []int{12}
}

func (x *PXFDatasource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PXFDatasource) GetSettings() isPXFDatasource_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *PXFDatasource) GetS3() *PXFDatasourceS3 {
	if x != nil {
		if x, ok := x.Settings.(*PXFDatasource_S3); ok {
			return x.S3
		}
	}
	return nil
}

func (x *PXFDatasource) GetJdbc() *PXFDatasourceJDBC {
	if x != nil {
		if x, ok := x.Settings.(*PXFDatasource_Jdbc); ok {
			return x.Jdbc
		}
	}
	return nil
}

func (x *PXFDatasource) GetHdfs() *PXFDatasourceHDFS {
	if x != nil {
		if x, ok := x.Settings.(*PXFDatasource_Hdfs); ok {
			return x.Hdfs
		}
	}
	return nil
}

func (x *PXFDatasource) GetHive() *PXFDatasourceHive {
	if x != nil {
		if x, ok := x.Settings.(*PXFDatasource_Hive); ok {
			return x.Hive
		}
	}
	return nil
}

type isPXFDatasource_Settings interface {
	isPXFDatasource_Settings()
}

type PXFDatasource_S3 struct {
	// Settings of an external S3 data source.
	S3 *PXFDatasourceS3 `protobuf:"bytes,2,opt,name=s3,proto3,oneof"`
}

type PXFDatasource_Jdbc struct {
	// Settings of an external JDBC data source.
	Jdbc *PXFDatasourceJDBC `protobuf:"bytes,3,opt,name=jdbc,proto3,oneof"`
}

type PXFDatasource_Hdfs struct {
	// Settings of an external HDFS data source.
	Hdfs *PXFDatasourceHDFS `protobuf:"bytes,4,opt,name=hdfs,proto3,oneof"`
}

type PXFDatasource_Hive struct {
	// Settings of an external Hive data source.
	Hive *PXFDatasourceHive `protobuf:"bytes,5,opt,name=hive,proto3,oneof"`
}

func (*PXFDatasource_S3) isPXFDatasource_Settings() {}

func (*PXFDatasource_Jdbc) isPXFDatasource_Settings() {}

func (*PXFDatasource_Hdfs) isPXFDatasource_Settings() {}

func (*PXFDatasource_Hive) isPXFDatasource_Settings() {}

var File_yandex_cloud_mdb_greenplum_v1_pxf_proto protoreflect.FileDescriptor

const file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDesc = "" +
	"\n" +
	"'yandex/cloud/mdb/greenplum/v1/pxf.proto\x12\x1dyandex.cloud.mdb.greenplum.v1\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1dyandex/cloud/validation.proto\"\xbf\x05\n" +
	"\tPXFConfig\x12U\n" +
	"\x12connection_timeout\x18\x01 \x01(\v2\x1b.google.protobuf.Int64ValueB\t\xfa\xc71\x055-600R\x11connectionTimeout\x12M\n" +
	"\x0eupload_timeout\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueB\t\xfa\xc71\x055-600R\ruploadTimeout\x12H\n" +
	"\vmax_threads\x18\x03 \x01(\v2\x1b.google.protobuf.Int64ValueB\n" +
	"\xfa\xc71\x061-1024R\n" +
	"maxThreads\x12^\n" +
	"\x1epool_allow_core_thread_timeout\x18\x04 \x01(\v2\x1a.google.protobuf.BoolValueR\x1apoolAllowCoreThreadTimeout\x12M\n" +
	"\x0epool_core_size\x18\x05 \x01(\v2\x1b.google.protobuf.Int64ValueB\n" +
	"\xfa\xc71\x061-1024R\fpoolCoreSize\x12T\n" +
	"\x13pool_queue_capacity\x18\x06 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=0R\x11poolQueueCapacity\x12K\n" +
	"\rpool_max_size\x18\a \x01(\v2\x1b.google.protobuf.Int64ValueB\n" +
	"\xfa\xc71\x061-1024R\vpoolMaxSize\x127\n" +
	"\x03xmx\x18\b \x01(\v2\x1b.google.protobuf.Int64ValueB\b\xfa\xc71\x04>=64R\x03xmx\x127\n" +
	"\x03xms\x18\t \x01(\v2\x1b.google.protobuf.Int64ValueB\b\xfa\xc71\x04>=64R\x03xms\"\x85\x02\n" +
	"\fPXFConfigSet\x12Y\n" +
	"\x10effective_config\x18\x01 \x01(\v2(.yandex.cloud.mdb.greenplum.v1.PXFConfigB\x04\xe8\xc71\x01R\x0feffectiveConfig\x12I\n" +
	"\vuser_config\x18\x02 \x01(\v2(.yandex.cloud.mdb.greenplum.v1.PXFConfigR\n" +
	"userConfig\x12O\n" +
	"\x0edefault_config\x18\x03 \x01(\v2(.yandex.cloud.mdb.greenplum.v1.PXFConfigR\rdefaultConfig\"\x8d\x02\n" +
	"\x0fPXFDatasourceS3\x12(\n" +
	"\n" +
	"access_key\x18\x01 \x01(\tB\t\x8a\xc81\x05<=200R\taccessKey\x12(\n" +
	"\n" +
	"secret_key\x18\x02 \x01(\tB\t\x8a\xc81\x05<=200R\tsecretKey\x12;\n" +
	"\vfast_upload\x18\x03 \x01(\v2\x1a.google.protobuf.BoolValueR\n" +
	"fastUpload\x12i\n" +
	"\bendpoint\x18\x04 \x01(\tBM\xf2\xc71@(((s3|https?)://)?([a-z0-9]([a-z0-9-]*[a-z0-9])?[.])+[a-z]{2,})?\x8a\xc81\x05<=200R\bendpoint\"\xdb\x06\n" +
	"\x11PXFDatasourceJDBC\x12 \n" +
	"\x06driver\x18\x01 \x01(\tB\b\x8a\xc81\x04<=50R\x06driver\x12\x1c\n" +
	"\x03url\x18\x02 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x03url\x12\x1d\n" +
	"\x04user\x18\x03 \x01(\tB\t\x8a\xc81\x05<=200R\x04user\x12%\n" +
	"\bpassword\x18\x04 \x01(\tB\t\x8a\xc81\x05<=200R\bpassword\x12Z\n" +
	"\x14statement_batch_size\x18\x05 \x01(\v2\x1b.google.protobuf.Int64ValueB\v\xfa\xc71\a50-1000R\x12statementBatchSize\x12[\n" +
	"\x14statement_fetch_size\x18\x06 \x01(\v2\x1b.google.protobuf.Int64ValueB\f\xfa\xc71\b50-10000R\x12statementFetchSize\x12`\n" +
	"\x17statement_query_timeout\x18\a \x01(\v2\x1b.google.protobuf.Int64ValueB\v\xfa\xc71\a5-43200R\x15statementQueryTimeout\x12=\n" +
	"\fpool_enabled\x18\b \x01(\v2\x1a.google.protobuf.BoolValueR\vpoolEnabled\x12R\n" +
	"\x11pool_maximum_size\x18\t \x01(\v2\x1b.google.protobuf.Int64ValueB\t\xfa\xc71\x051-200R\x0fpoolMaximumSize\x12d\n" +
	"\x17pool_connection_timeout\x18\n" +
	" \x01(\v2\x1b.google.protobuf.Int64ValueB\x0f\xfa\xc71\v5000-600000R\x15poolConnectionTimeout\x12X\n" +
	"\x11pool_idle_timeout\x18\v \x01(\v2\x1b.google.protobuf.Int64ValueB\x0f\xfa\xc71\v5000-600000R\x0fpoolIdleTimeout\x12R\n" +
	"\x11pool_minimum_idle\x18\f \x01(\v2\x1b.google.protobuf.Int64ValueB\t\xfa\xc71\x050-200R\x0fpoolMinimumIdle\"~\n" +
	"\x11PXFDatasourceCore\x12(\n" +
	"\n" +
	"default_fs\x18\x01 \x01(\tB\t\x8a\xc81\x05<=200R\tdefaultFs\x12?\n" +
	"\x16security_auth_to_local\x18\x02 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x13securityAuthToLocal\"\x9d\x03\n" +
	"\x15PXFDatasourceKerberos\x122\n" +
	"\x06enable\x18\x01 \x01(\v2\x1a.google.protobuf.BoolValueR\x06enable\x12#\n" +
	"\aprimary\x18\x02 \x01(\tB\t\x8a\xc81\x05<=128R\aprimary\x12 \n" +
	"\x05realm\x18\x03 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x05realm\x123\n" +
	"\vkdc_servers\x18\x04 \x03(\tB\x12\x82\xc81\x05<=200\x8a\xc81\x051-200R\n" +
	"kdcServers\x12,\n" +
	"\fadmin_server\x18\x05 \x01(\tB\t\x8a\xc81\x05<=128R\vadminServer\x120\n" +
	"\x0edefault_domain\x18\x06 \x01(\tB\t\x8a\xc81\x05<=128R\rdefaultDomain\x12t\n" +
	"\rkeytab_base64\x18\a \x01(\tBO\xf2\xc71@^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$\x8a\xc81\a<=65536R\fkeytabBase64\"\xe7\x01\n" +
	"\x1cPXFDatasourceHDFSDfsNamenode\x12+\n" +
	"\vrpc_address\x18\x01 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\n" +
	"rpcAddress\x12:\n" +
	"\x13service_rpc_address\x18\x02 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x11serviceRpcAddress\x12-\n" +
	"\fhttp_address\x18\x03 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\vhttpAddress\x12/\n" +
	"\rhttps_address\x18\x04 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\fhttpsAddress\"\xac\x04\n" +
	"\x14PXFDatasourceHDFSDfs\x12]\n" +
	"\x1dha_automatic_failover_enabled\x18\x01 \x01(\v2\x1a.google.protobuf.BoolValueR\x1ahaAutomaticFailoverEnabled\x12W\n" +
	"\x1ablock_access_token_enabled\x18\x02 \x01(\v2\x1a.google.protobuf.BoolValueR\x17blockAccessTokenEnabled\x12N\n" +
	"\x15use_datanode_hostname\x18\x03 \x01(\v2\x1a.google.protobuf.BoolValueR\x13useDatanodeHostname\x12m\n" +
	"\tnamenodes\x18\x04 \x03(\v2B.yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSDfs.NamenodesEntryB\v\x82\xc81\a<=10000R\tnamenodes\x12\"\n" +
	"\fnameservices\x18\x05 \x01(\tR\fnameservices\x1ay\n" +
	"\x0eNamenodesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12Q\n" +
	"\x05value\x18\x02 \x01(\v2;.yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSDfsNamenodeR\x05value:\x028\x01\"\xd4\x03\n" +
	"\x19PXFDatasourceHDFSYarnHaRm\x127\n" +
	"\x17resourcemanager_address\x18\x01 \x01(\tR\x16resourcemanagerAddress\x12J\n" +
	"!resourcemanager_scheduler_address\x18\x02 \x01(\tR\x1fresourcemanagerSchedulerAddress\x12W\n" +
	"(resourcemanager_resource_tracker_address\x18\x03 \x01(\tR%resourcemanagerResourceTrackerAddress\x12B\n" +
	"\x1dresourcemanager_admin_address\x18\x04 \x01(\tR\x1bresourcemanagerAdminAddress\x12D\n" +
	"\x1eresourcemanager_webapp_address\x18\x05 \x01(\tR\x1cresourcemanagerWebappAddress\x12O\n" +
	"$resourcemanager_webapp_https_address\x18\x06 \x01(\tR!resourcemanagerWebappHttpsAddress\"\xfa\x04\n" +
	"\x15PXFDatasourceHDFSYarn\x12X\n" +
	"\x1aresourcemanager_ha_enabled\x18\x01 \x01(\v2\x1a.google.protobuf.BoolValueR\x18resourcemanagerHaEnabled\x12r\n" +
	"(resourcemanager_ha_auto_failover_enabled\x18\x02 \x01(\v2\x1a.google.protobuf.BoolValueR$resourcemanagerHaAutoFailoverEnabled\x12t\n" +
	")resourcemanager_ha_auto_failover_embedded\x18\x03 \x01(\v2\x1a.google.protobuf.BoolValueR%resourcemanagerHaAutoFailoverEmbedded\x12H\n" +
	"\x1aresourcemanager_cluster_id\x18\x04 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x18resourcemanagerClusterId\x12`\n" +
	"\x05ha_rm\x18\x05 \x03(\v2>.yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSYarn.HaRmEntryB\v\x82\xc81\a<=10000R\x04haRm\x1aq\n" +
	"\tHaRmEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12N\n" +
	"\x05value\x18\x02 \x01(\v28.yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSYarnHaRmR\x05value:\x028\x01\"\xbc\x04\n" +
	"\x11PXFDatasourceHDFS\x12D\n" +
	"\x04core\x18\x01 \x01(\v20.yandex.cloud.mdb.greenplum.v1.PXFDatasourceCoreR\x04core\x12P\n" +
	"\bkerberos\x18\x02 \x01(\v24.yandex.cloud.mdb.greenplum.v1.PXFDatasourceKerberosR\bkerberos\x12I\n" +
	"\x12user_impersonation\x18\x03 \x01(\v2\x1a.google.protobuf.BoolValueR\x11userImpersonation\x12%\n" +
	"\busername\x18\x04 \x01(\tB\t\x8a\xc81\x05<=128R\busername\x12]\n" +
	"\x17sasl_connection_retries\x18\x05 \x01(\v2\x1b.google.protobuf.Int64ValueB\b\xfa\xc71\x041-50R\x15saslConnectionRetries\x12-\n" +
	"\bzk_hosts\x18\x06 \x03(\tB\x12\x82\xc81\x05<=200\x8a\xc81\x051-200R\azkHosts\x12E\n" +
	"\x03dfs\x18\a \x01(\v23.yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSDfsR\x03dfs\x12H\n" +
	"\x04yarn\x18\b \x01(\v24.yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSYarnR\x04yarn\"\xa6\x05\n" +
	"\x11PXFDatasourceHive\x12D\n" +
	"\x04core\x18\x01 \x01(\v20.yandex.cloud.mdb.greenplum.v1.PXFDatasourceCoreR\x04core\x12P\n" +
	"\bkerberos\x18\x02 \x01(\v24.yandex.cloud.mdb.greenplum.v1.PXFDatasourceKerberosR\bkerberos\x12I\n" +
	"\x12user_impersonation\x18\x03 \x01(\v2\x1a.google.protobuf.BoolValueR\x11userImpersonation\x12%\n" +
	"\busername\x18\x04 \x01(\tB\t\x8a\xc81\x05<=128R\busername\x12]\n" +
	"\x17sasl_connection_retries\x18\x05 \x01(\v2\x1b.google.protobuf.Int64ValueB\b\xfa\xc71\x041-50R\x15saslConnectionRetries\x12-\n" +
	"\bzk_hosts\x18\x06 \x03(\tB\x12\x82\xc81\x05<=200\x8a\xc81\x051-200R\azkHosts\x12,\n" +
	"\x03ppd\x18\a \x01(\v2\x1a.google.protobuf.BoolValueR\x03ppd\x129\n" +
	"\x0emetastore_uris\x18\b \x03(\tB\x12\x82\xc81\x05<=200\x8a\xc81\x051-200R\rmetastoreUris\x12L\n" +
	"\x1cmetastore_kerberos_principal\x18\t \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x1ametastoreKerberosPrincipal\x12B\n" +
	"\x17auth_kerberos_principal\x18\n" +
	" \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x15authKerberosPrincipal\"\xee\x02\n" +
	"\rPXFDatasource\x127\n" +
	"\x04name\x18\x01 \x01(\tB#\xe8\xc71\x01\xf2\xc71\x12^[^\\|/*?.,;\"'<>]+$\x8a\xc81\x053-200R\x04name\x12@\n" +
	"\x02s3\x18\x02 \x01(\v2..yandex.cloud.mdb.greenplum.v1.PXFDatasourceS3H\x00R\x02s3\x12F\n" +
	"\x04jdbc\x18\x03 \x01(\v20.yandex.cloud.mdb.greenplum.v1.PXFDatasourceJDBCH\x00R\x04jdbc\x12F\n" +
	"\x04hdfs\x18\x04 \x01(\v20.yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSH\x00R\x04hdfs\x12F\n" +
	"\x04hive\x18\x05 \x01(\v20.yandex.cloud.mdb.greenplum.v1.PXFDatasourceHiveH\x00R\x04hiveB\n" +
	"\n" +
	"\bsettingsBp\n" +
	"!yandex.cloud.api.mdb.greenplum.v1ZKgithub.com/yandex-cloud/go-genproto/yandex/cloud/mdb/greenplum/v1;greenplumb\x06proto3"

var (
	file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescData []byte
)

func file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDesc), len(file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDesc)))
	})
	return file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDescData
}

var file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_yandex_cloud_mdb_greenplum_v1_pxf_proto_goTypes = []any{
	(*PXFConfig)(nil),                    // 0: yandex.cloud.mdb.greenplum.v1.PXFConfig
	(*PXFConfigSet)(nil),                 // 1: yandex.cloud.mdb.greenplum.v1.PXFConfigSet
	(*PXFDatasourceS3)(nil),              // 2: yandex.cloud.mdb.greenplum.v1.PXFDatasourceS3
	(*PXFDatasourceJDBC)(nil),            // 3: yandex.cloud.mdb.greenplum.v1.PXFDatasourceJDBC
	(*PXFDatasourceCore)(nil),            // 4: yandex.cloud.mdb.greenplum.v1.PXFDatasourceCore
	(*PXFDatasourceKerberos)(nil),        // 5: yandex.cloud.mdb.greenplum.v1.PXFDatasourceKerberos
	(*PXFDatasourceHDFSDfsNamenode)(nil), // 6: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSDfsNamenode
	(*PXFDatasourceHDFSDfs)(nil),         // 7: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSDfs
	(*PXFDatasourceHDFSYarnHaRm)(nil),    // 8: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSYarnHaRm
	(*PXFDatasourceHDFSYarn)(nil),        // 9: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSYarn
	(*PXFDatasourceHDFS)(nil),            // 10: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFS
	(*PXFDatasourceHive)(nil),            // 11: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHive
	(*PXFDatasource)(nil),                // 12: yandex.cloud.mdb.greenplum.v1.PXFDatasource
	nil,                                  // 13: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSDfs.NamenodesEntry
	nil,                                  // 14: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSYarn.HaRmEntry
	(*wrapperspb.Int64Value)(nil),        // 15: google.protobuf.Int64Value
	(*wrapperspb.BoolValue)(nil),         // 16: google.protobuf.BoolValue
}
var file_yandex_cloud_mdb_greenplum_v1_pxf_proto_depIdxs = []int32{
	15, // 0: yandex.cloud.mdb.greenplum.v1.PXFConfig.connection_timeout:type_name -> google.protobuf.Int64Value
	15, // 1: yandex.cloud.mdb.greenplum.v1.PXFConfig.upload_timeout:type_name -> google.protobuf.Int64Value
	15, // 2: yandex.cloud.mdb.greenplum.v1.PXFConfig.max_threads:type_name -> google.protobuf.Int64Value
	16, // 3: yandex.cloud.mdb.greenplum.v1.PXFConfig.pool_allow_core_thread_timeout:type_name -> google.protobuf.BoolValue
	15, // 4: yandex.cloud.mdb.greenplum.v1.PXFConfig.pool_core_size:type_name -> google.protobuf.Int64Value
	15, // 5: yandex.cloud.mdb.greenplum.v1.PXFConfig.pool_queue_capacity:type_name -> google.protobuf.Int64Value
	15, // 6: yandex.cloud.mdb.greenplum.v1.PXFConfig.pool_max_size:type_name -> google.protobuf.Int64Value
	15, // 7: yandex.cloud.mdb.greenplum.v1.PXFConfig.xmx:type_name -> google.protobuf.Int64Value
	15, // 8: yandex.cloud.mdb.greenplum.v1.PXFConfig.xms:type_name -> google.protobuf.Int64Value
	0,  // 9: yandex.cloud.mdb.greenplum.v1.PXFConfigSet.effective_config:type_name -> yandex.cloud.mdb.greenplum.v1.PXFConfig
	0,  // 10: yandex.cloud.mdb.greenplum.v1.PXFConfigSet.user_config:type_name -> yandex.cloud.mdb.greenplum.v1.PXFConfig
	0,  // 11: yandex.cloud.mdb.greenplum.v1.PXFConfigSet.default_config:type_name -> yandex.cloud.mdb.greenplum.v1.PXFConfig
	16, // 12: yandex.cloud.mdb.greenplum.v1.PXFDatasourceS3.fast_upload:type_name -> google.protobuf.BoolValue
	15, // 13: yandex.cloud.mdb.greenplum.v1.PXFDatasourceJDBC.statement_batch_size:type_name -> google.protobuf.Int64Value
	15, // 14: yandex.cloud.mdb.greenplum.v1.PXFDatasourceJDBC.statement_fetch_size:type_name -> google.protobuf.Int64Value
	15, // 15: yandex.cloud.mdb.greenplum.v1.PXFDatasourceJDBC.statement_query_timeout:type_name -> google.protobuf.Int64Value
	16, // 16: yandex.cloud.mdb.greenplum.v1.PXFDatasourceJDBC.pool_enabled:type_name -> google.protobuf.BoolValue
	15, // 17: yandex.cloud.mdb.greenplum.v1.PXFDatasourceJDBC.pool_maximum_size:type_name -> google.protobuf.Int64Value
	15, // 18: yandex.cloud.mdb.greenplum.v1.PXFDatasourceJDBC.pool_connection_timeout:type_name -> google.protobuf.Int64Value
	15, // 19: yandex.cloud.mdb.greenplum.v1.PXFDatasourceJDBC.pool_idle_timeout:type_name -> google.protobuf.Int64Value
	15, // 20: yandex.cloud.mdb.greenplum.v1.PXFDatasourceJDBC.pool_minimum_idle:type_name -> google.protobuf.Int64Value
	16, // 21: yandex.cloud.mdb.greenplum.v1.PXFDatasourceKerberos.enable:type_name -> google.protobuf.BoolValue
	16, // 22: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSDfs.ha_automatic_failover_enabled:type_name -> google.protobuf.BoolValue
	16, // 23: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSDfs.block_access_token_enabled:type_name -> google.protobuf.BoolValue
	16, // 24: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSDfs.use_datanode_hostname:type_name -> google.protobuf.BoolValue
	13, // 25: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSDfs.namenodes:type_name -> yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSDfs.NamenodesEntry
	16, // 26: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSYarn.resourcemanager_ha_enabled:type_name -> google.protobuf.BoolValue
	16, // 27: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSYarn.resourcemanager_ha_auto_failover_enabled:type_name -> google.protobuf.BoolValue
	16, // 28: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSYarn.resourcemanager_ha_auto_failover_embedded:type_name -> google.protobuf.BoolValue
	14, // 29: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSYarn.ha_rm:type_name -> yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSYarn.HaRmEntry
	4,  // 30: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFS.core:type_name -> yandex.cloud.mdb.greenplum.v1.PXFDatasourceCore
	5,  // 31: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFS.kerberos:type_name -> yandex.cloud.mdb.greenplum.v1.PXFDatasourceKerberos
	16, // 32: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFS.user_impersonation:type_name -> google.protobuf.BoolValue
	15, // 33: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFS.sasl_connection_retries:type_name -> google.protobuf.Int64Value
	7,  // 34: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFS.dfs:type_name -> yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSDfs
	9,  // 35: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFS.yarn:type_name -> yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSYarn
	4,  // 36: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHive.core:type_name -> yandex.cloud.mdb.greenplum.v1.PXFDatasourceCore
	5,  // 37: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHive.kerberos:type_name -> yandex.cloud.mdb.greenplum.v1.PXFDatasourceKerberos
	16, // 38: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHive.user_impersonation:type_name -> google.protobuf.BoolValue
	15, // 39: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHive.sasl_connection_retries:type_name -> google.protobuf.Int64Value
	16, // 40: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHive.ppd:type_name -> google.protobuf.BoolValue
	2,  // 41: yandex.cloud.mdb.greenplum.v1.PXFDatasource.s3:type_name -> yandex.cloud.mdb.greenplum.v1.PXFDatasourceS3
	3,  // 42: yandex.cloud.mdb.greenplum.v1.PXFDatasource.jdbc:type_name -> yandex.cloud.mdb.greenplum.v1.PXFDatasourceJDBC
	10, // 43: yandex.cloud.mdb.greenplum.v1.PXFDatasource.hdfs:type_name -> yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFS
	11, // 44: yandex.cloud.mdb.greenplum.v1.PXFDatasource.hive:type_name -> yandex.cloud.mdb.greenplum.v1.PXFDatasourceHive
	6,  // 45: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSDfs.NamenodesEntry.value:type_name -> yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSDfsNamenode
	8,  // 46: yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSYarn.HaRmEntry.value:type_name -> yandex.cloud.mdb.greenplum.v1.PXFDatasourceHDFSYarnHaRm
	47, // [47:47] is the sub-list for method output_type
	47, // [47:47] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_greenplum_v1_pxf_proto_init() }
func file_yandex_cloud_mdb_greenplum_v1_pxf_proto_init() {
	if File_yandex_cloud_mdb_greenplum_v1_pxf_proto != nil {
		return
	}
	file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes[12].OneofWrappers = []any{
		(*PXFDatasource_S3)(nil),
		(*PXFDatasource_Jdbc)(nil),
		(*PXFDatasource_Hdfs)(nil),
		(*PXFDatasource_Hive)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDesc), len(file_yandex_cloud_mdb_greenplum_v1_pxf_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_mdb_greenplum_v1_pxf_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_greenplum_v1_pxf_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_mdb_greenplum_v1_pxf_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_greenplum_v1_pxf_proto = out.File
	file_yandex_cloud_mdb_greenplum_v1_pxf_proto_goTypes = nil
	file_yandex_cloud_mdb_greenplum_v1_pxf_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/mdb/kafka/v1/connector.proto

package kafka

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Connector_Health int32

const (
	// Health of the connector is unknown.
	Connector_HEALTH_UNKNOWN Connector_Health = 0
	// Connector is running.
	Connector_ALIVE Connector_Health = 1
	// Connector has failed to start.
	Connector_DEAD Connector_Health = 2
)

// Enum value maps for Connector_Health.
var (
	Connector_Health_name = map[int32]string{
		0: "HEALTH_UNKNOWN",
		1: "ALIVE",
		2: "DEAD",
	}
	Connector_Health_value = map[string]int32{
		"HEALTH_UNKNOWN": 0,
		"ALIVE":          1,
		"DEAD":           2,
	}
)

func (x Connector_Health) Enum() *Connector_Health {
	p := new(Connector_Health)
	*p = x
	return p
}

func (x Connector_Health) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Connector_Health) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_enumTypes[0].Descriptor()
}

func (Connector_Health) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_kafka_v1_connector_proto_enumTypes[0]
}

func (x Connector_Health) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Connector_Health.Descriptor instead.
func (Connector_Health) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{10, 0}
}

type Connector_Status int32

const (
	// Connector state is unknown.
	Connector_STATUS_UNKNOWN Connector_Status = 0
	// Connector is running normally.
	Connector_RUNNING Connector_Status = 1
	// Connector has encountered a problem and cannot operate.
	Connector_ERROR Connector_Status = 2
	// Connector is paused.
	Connector_PAUSED Connector_Status = 3
)

// Enum value maps for Connector_Status.
var (
	Connector_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "RUNNING",
		2: "ERROR",
		3: "PAUSED",
	}
	Connector_Status_value = map[string]int32{
		"STATUS_UNKNOWN": 0,
		"RUNNING":        1,
		"ERROR":          2,
		"PAUSED":         3,
	}
)

func (x Connector_Status) Enum() *Connector_Status {
	p := new(Connector_Status)
	*p = x
	return p
}

func (x Connector_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Connector_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_enumTypes[1].Descriptor()
}

func (Connector_Status) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_kafka_v1_connector_proto_enumTypes[1]
}

func (x Connector_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Connector_Status.Descriptor instead.
func (Connector_Status) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{10, 1}
}

// An object that represents an Apache Kafka® connector.
//
// See [the documentation](/docs/managed-kafka/concepts/connectors) for details.
type ConnectorSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the connector.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Maximum number of connector tasks. Default value is the number of brokers.
	TasksMax *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=tasks_max,json=tasksMax,proto3" json:"tasks_max,omitempty"`
	// A set of properties passed to Managed Service for Apache Kafka® with the connector configuration.
	// Example: `sync.topics.config.enabled: true`.
	Properties map[string]string `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Additional settings for the connector.
	//
	// Types that are valid to be assigned to ConnectorConfig:
	//
	//	*ConnectorSpec_ConnectorConfigMirrormaker
	//	*ConnectorSpec_ConnectorConfigS3Sink
	ConnectorConfig isConnectorSpec_ConnectorConfig `protobuf_oneof:"connector_config"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ConnectorSpec) Reset() {
	*x = ConnectorSpec{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectorSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorSpec) ProtoMessage() {}

func (x *ConnectorSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorSpec.ProtoReflect.Descriptor instead.
func (*ConnectorSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectorSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConnectorSpec) GetTasksMax() *wrapperspb.Int64Value {
	if x != nil {
		return x.TasksMax
	}
	return nil
}

func (x *ConnectorSpec) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ConnectorSpec) GetConnectorConfig() isConnectorSpec_ConnectorConfig {
	if x != nil {
		return x.ConnectorConfig
	}
	return nil
}

func (x *ConnectorSpec) GetConnectorConfigMirrormaker() *ConnectorConfigMirrorMakerSpec {
	if x != nil {
		if x, ok := x.ConnectorConfig.(*ConnectorSpec_ConnectorConfigMirrormaker); ok {
			return x.ConnectorConfigMirrormaker
		}
	}
	return nil
}

func (x *ConnectorSpec) GetConnectorConfigS3Sink() *ConnectorConfigS3SinkSpec {
	if x != nil {
		if x, ok := x.ConnectorConfig.(*ConnectorSpec_ConnectorConfigS3Sink); ok {
			return x.ConnectorConfigS3Sink
		}
	}
	return nil
}

type isConnectorSpec_ConnectorConfig interface {
	isConnectorSpec_ConnectorConfig()
}

type ConnectorSpec_ConnectorConfigMirrormaker struct {
	// Configuration of the MirrorMaker connector.
	ConnectorConfigMirrormaker *ConnectorConfigMirrorMakerSpec `protobuf:"bytes,10,opt,name=connector_config_mirrormaker,json=connectorConfigMirrormaker,proto3,oneof"`
}

type ConnectorSpec_ConnectorConfigS3Sink struct {
	// Configuration of S3-Sink connector.
	ConnectorConfigS3Sink *ConnectorConfigS3SinkSpec `protobuf:"bytes,11,opt,name=connector_config_s3_sink,json=connectorConfigS3Sink,proto3,oneof"`
}

func (*ConnectorSpec_ConnectorConfigMirrormaker) isConnectorSpec_ConnectorConfig() {}

func (*ConnectorSpec_ConnectorConfigS3Sink) isConnectorSpec_ConnectorConfig() {}

type UpdateConnectorSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Maximum number of connector tasks to update.
	TasksMax *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=tasks_max,json=tasksMax,proto3" json:"tasks_max,omitempty"`
	// A set of new or changed properties to update for the connector. They are passed with the connector configuration to Managed Service for Apache Kafka®.
	// Example: `sync.topics.config.enabled: false`.
	Properties map[string]string `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Updated configuration for the connector.
	//
	// Types that are valid to be assigned to ConnectorConfig:
	//
	//	*UpdateConnectorSpec_ConnectorConfigMirrormaker
	//	*UpdateConnectorSpec_ConnectorConfigS3Sink
	ConnectorConfig isUpdateConnectorSpec_ConnectorConfig `protobuf_oneof:"connector_config"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateConnectorSpec) Reset() {
	*x = UpdateConnectorSpec{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConnectorSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConnectorSpec) ProtoMessage() {}

func (x *UpdateConnectorSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConnectorSpec.ProtoReflect.Descriptor instead.
func (*UpdateConnectorSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateConnectorSpec) GetTasksMax() *wrapperspb.Int64Value {
	if x != nil {
		return x.TasksMax
	}
	return nil
}

func (x *UpdateConnectorSpec) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *UpdateConnectorSpec) GetConnectorConfig() isUpdateConnectorSpec_ConnectorConfig {
	if x != nil {
		return x.ConnectorConfig
	}
	return nil
}

func (x *UpdateConnectorSpec) GetConnectorConfigMirrormaker() *ConnectorConfigMirrorMakerSpec {
	if x != nil {
		if x, ok := x.ConnectorConfig.(*UpdateConnectorSpec_ConnectorConfigMirrormaker); ok {
			return x.ConnectorConfigMirrormaker
		}
	}
	return nil
}

func (x *UpdateConnectorSpec) GetConnectorConfigS3Sink() *UpdateConnectorConfigS3SinkSpec {
	if x != nil {
		if x, ok := x.ConnectorConfig.(*UpdateConnectorSpec_ConnectorConfigS3Sink); ok {
			return x.ConnectorConfigS3Sink
		}
	}
	return nil
}

type isUpdateConnectorSpec_ConnectorConfig interface {
	isUpdateConnectorSpec_ConnectorConfig()
}

type UpdateConnectorSpec_ConnectorConfigMirrormaker struct {
	// Configuration of the MirrorMaker connector.
	ConnectorConfigMirrormaker *ConnectorConfigMirrorMakerSpec `protobuf:"bytes,10,opt,name=connector_config_mirrormaker,json=connectorConfigMirrormaker,proto3,oneof"`
}

type UpdateConnectorSpec_ConnectorConfigS3Sink struct {
	// Update specification for S3-Sink Connector.
	ConnectorConfigS3Sink *UpdateConnectorConfigS3SinkSpec `protobuf:"bytes,11,opt,name=connector_config_s3_sink,json=connectorConfigS3Sink,proto3,oneof"`
}

func (*UpdateConnectorSpec_ConnectorConfigMirrormaker) isUpdateConnectorSpec_ConnectorConfig() {}

func (*UpdateConnectorSpec_ConnectorConfigS3Sink) isUpdateConnectorSpec_ConnectorConfig() {}

type ConnectorConfigMirrorMakerSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Source cluster configuration for the MirrorMaker connector.
	SourceCluster *ClusterConnectionSpec `protobuf:"bytes,1,opt,name=source_cluster,json=sourceCluster,proto3" json:"source_cluster,omitempty"`
	// Target cluster configuration for the MirrorMaker connector.
	TargetCluster *ClusterConnectionSpec `protobuf:"bytes,2,opt,name=target_cluster,json=targetCluster,proto3" json:"target_cluster,omitempty"`
	// List of Kafka topics, separated by `,`.
	Topics string `protobuf:"bytes,3,opt,name=topics,proto3" json:"topics,omitempty"`
	// Replication factor for automatically created topics.
	ReplicationFactor *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ConnectorConfigMirrorMakerSpec) Reset() {
	*x = ConnectorConfigMirrorMakerSpec{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectorConfigMirrorMakerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorConfigMirrorMakerSpec) ProtoMessage() {}

func (x *ConnectorConfigMirrorMakerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorConfigMirrorMakerSpec.ProtoReflect.Descriptor instead.
func (*ConnectorConfigMirrorMakerSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectorConfigMirrorMakerSpec) GetSourceCluster() *ClusterConnectionSpec {
	if x != nil {
		return x.SourceCluster
	}
	return nil
}

func (x *ConnectorConfigMirrorMakerSpec) GetTargetCluster() *ClusterConnectionSpec {
	if x != nil {
		return x.TargetCluster
	}
	return nil
}

func (x *ConnectorConfigMirrorMakerSpec) GetTopics() string {
	if x != nil {
		return x.Topics
	}
	return ""
}

func (x *ConnectorConfigMirrorMakerSpec) GetReplicationFactor() *wrapperspb.Int64Value {
	if x != nil {
		return x.ReplicationFactor
	}
	return nil
}

type ClusterConnectionSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Alias of cluster connection configuration.
	// Examples: `source`, `target`.
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	// Type of connection to Apache Kafka® cluster.
	//
	// Types that are valid to be assigned to ClusterConnection:
	//
	//	*ClusterConnectionSpec_ThisCluster
	//	*ClusterConnectionSpec_ExternalCluster
	ClusterConnection isClusterConnectionSpec_ClusterConnection `protobuf_oneof:"cluster_connection"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ClusterConnectionSpec) Reset() {
	*x = ClusterConnectionSpec{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConnectionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConnectionSpec) ProtoMessage() {}

func (x *ClusterConnectionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConnectionSpec.ProtoReflect.Descriptor instead.
func (*ClusterConnectionSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{3}
}

func (x *ClusterConnectionSpec) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *ClusterConnectionSpec) GetClusterConnection() isClusterConnectionSpec_ClusterConnection {
	if x != nil {
		return x.ClusterConnection
	}
	return nil
}

func (x *ClusterConnectionSpec) GetThisCluster() *ThisClusterSpec {
	if x != nil {
		if x, ok := x.ClusterConnection.(*ClusterConnectionSpec_ThisCluster); ok {
			return x.ThisCluster
		}
	}
	return nil
}

func (x *ClusterConnectionSpec) GetExternalCluster() *ExternalClusterConnectionSpec {
	if x != nil {
		if x, ok := x.ClusterConnection.(*ClusterConnectionSpec_ExternalCluster); ok {
			return x.ExternalCluster
		}
	}
	return nil
}

type isClusterConnectionSpec_ClusterConnection interface {
	isClusterConnectionSpec_ClusterConnection()
}

type ClusterConnectionSpec_ThisCluster struct {
	// Connection configuration of the cluster the connector belongs to. As all credentials are already known, leave this parameter empty.
	ThisCluster *ThisClusterSpec `protobuf:"bytes,2,opt,name=this_cluster,json=thisCluster,proto3,oneof"`
}

type ClusterConnectionSpec_ExternalCluster struct {
	// Configuration of connection to an external cluster with all the necessary credentials.
	ExternalCluster *ExternalClusterConnectionSpec `protobuf:"bytes,3,opt,name=external_cluster,json=externalCluster,proto3,oneof"`
}

func (*ClusterConnectionSpec_ThisCluster) isClusterConnectionSpec_ClusterConnection() {}

func (*ClusterConnectionSpec_ExternalCluster) isClusterConnectionSpec_ClusterConnection() {}

type ThisClusterSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ThisClusterSpec) Reset() {
	*x = ThisClusterSpec{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThisClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThisClusterSpec) ProtoMessage() {}

func (x *ThisClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThisClusterSpec.ProtoReflect.Descriptor instead.
func (*ThisClusterSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{4}
}

type ExternalClusterConnectionSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of bootstrap servers of the cluster, separated by `,`.
	BootstrapServers string `protobuf:"bytes,1,opt,name=bootstrap_servers,json=bootstrapServers,proto3" json:"bootstrap_servers,omitempty"`
	// SASL username to use for connection to the cluster.
	SaslUsername string `protobuf:"bytes,2,opt,name=sasl_username,json=saslUsername,proto3" json:"sasl_username,omitempty"`
	// SASL password to use for connection to the cluster.
	SaslPassword string `protobuf:"bytes,3,opt,name=sasl_password,json=saslPassword,proto3" json:"sasl_password,omitempty"`
	// SASL mechanism to use for connection to the cluster.
	SaslMechanism string `protobuf:"bytes,4,opt,name=sasl_mechanism,json=saslMechanism,proto3" json:"sasl_mechanism,omitempty"`
	// Security protocol to use for connection to the cluster.
	SecurityProtocol string `protobuf:"bytes,5,opt,name=security_protocol,json=securityProtocol,proto3" json:"security_protocol,omitempty"`
	// CA in PEM format to connect to external cluster.
	// Lines of certificate separated by '\n' symbol.
	SslTruststoreCertificates string `protobuf:"bytes,6,opt,name=ssl_truststore_certificates,json=sslTruststoreCertificates,proto3" json:"ssl_truststore_certificates,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *ExternalClusterConnectionSpec) Reset() {
	*x = ExternalClusterConnectionSpec{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalClusterConnectionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalClusterConnectionSpec) ProtoMessage() {}

func (x *ExternalClusterConnectionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalClusterConnectionSpec.ProtoReflect.Descriptor instead.
func (*ExternalClusterConnectionSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{5}
}

func (x *ExternalClusterConnectionSpec) GetBootstrapServers() string {
	if x != nil {
		return x.BootstrapServers
	}
	return ""
}

func (x *ExternalClusterConnectionSpec) GetSaslUsername() string {
	if x != nil {
		return x.SaslUsername
	}
	return ""
}

func (x *ExternalClusterConnectionSpec) GetSaslPassword() string {
	if x != nil {
		return x.SaslPassword
	}
	return ""
}

func (x *ExternalClusterConnectionSpec) GetSaslMechanism() string {
	if x != nil {
		return x.SaslMechanism
	}
	return ""
}

func (x *ExternalClusterConnectionSpec) GetSecurityProtocol() string {
	if x != nil {
		return x.SecurityProtocol
	}
	return ""
}

func (x *ExternalClusterConnectionSpec) GetSslTruststoreCertificates() string {
	if x != nil {
		return x.SslTruststoreCertificates
	}
	return ""
}

// Specification for Kafka S3-Sink Connector.
type ConnectorConfigS3SinkSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of Kafka topics, separated by ','.
	Topics string `protobuf:"bytes,1,opt,name=topics,proto3" json:"topics,omitempty"`
	// The compression type used for files put on GCS.
	// The supported values are: `gzip`, `snappy`, `zstd`, `none`.
	// Optional, the default is `none`.
	FileCompressionType string `protobuf:"bytes,2,opt,name=file_compression_type,json=fileCompressionType,proto3" json:"file_compression_type,omitempty"`
	// Max records per file.
	FileMaxRecords *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=file_max_records,json=fileMaxRecords,proto3" json:"file_max_records,omitempty"`
	// Credentials for connecting to S3 storage.
	S3Connection  *S3ConnectionSpec `protobuf:"bytes,4,opt,name=s3_connection,json=s3Connection,proto3" json:"s3_connection,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectorConfigS3SinkSpec) Reset() {
	*x = ConnectorConfigS3SinkSpec{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectorConfigS3SinkSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorConfigS3SinkSpec) ProtoMessage() {}

func (x *ConnectorConfigS3SinkSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorConfigS3SinkSpec.ProtoReflect.Descriptor instead.
func (*ConnectorConfigS3SinkSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{6}
}

func (x *ConnectorConfigS3SinkSpec) GetTopics() string {
	if x != nil {
		return x.Topics
	}
	return ""
}

func (x *ConnectorConfigS3SinkSpec) GetFileCompressionType() string {
	if x != nil {
		return x.FileCompressionType
	}
	return ""
}

func (x *ConnectorConfigS3SinkSpec) GetFileMaxRecords() *wrapperspb.Int64Value {
	if x != nil {
		return x.FileMaxRecords
	}
	return nil
}

func (x *ConnectorConfigS3SinkSpec) GetS3Connection() *S3ConnectionSpec {
	if x != nil {
		return x.S3Connection
	}
	return nil
}

// Specification for update Kafka S3-Sink Connector.
type UpdateConnectorConfigS3SinkSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of Kafka topics, separated by ','.
	Topics string `protobuf:"bytes,1,opt,name=topics,proto3" json:"topics,omitempty"`
	// Max records per file.
	FileMaxRecords *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=file_max_records,json=fileMaxRecords,proto3" json:"file_max_records,omitempty"`
	// Credentials for connecting to S3 storage.
	S3Connection  *S3ConnectionSpec `protobuf:"bytes,3,opt,name=s3_connection,json=s3Connection,proto3" json:"s3_connection,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateConnectorConfigS3SinkSpec) Reset() {
	*x = UpdateConnectorConfigS3SinkSpec{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConnectorConfigS3SinkSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConnectorConfigS3SinkSpec) ProtoMessage() {}

func (x *UpdateConnectorConfigS3SinkSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConnectorConfigS3SinkSpec.ProtoReflect.Descriptor instead.
func (*UpdateConnectorConfigS3SinkSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateConnectorConfigS3SinkSpec) GetTopics() string {
	if x != nil {
		return x.Topics
	}
	return ""
}

func (x *UpdateConnectorConfigS3SinkSpec) GetFileMaxRecords() *wrapperspb.Int64Value {
	if x != nil {
		return x.FileMaxRecords
	}
	return nil
}

func (x *UpdateConnectorConfigS3SinkSpec) GetS3Connection() *S3ConnectionSpec {
	if x != nil {
		return x.S3Connection
	}
	return nil
}

// Specification for S3Connection -
// settings of connection to AWS-compatible S3 storage, that
// are source or target of Kafka S3-connectors.
// YC Object Storage is AWS-compatible.
type S3ConnectionSpec struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	BucketName string                 `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// Types that are valid to be assigned to Storage:
	//
	//	*S3ConnectionSpec_ExternalS3
	Storage       isS3ConnectionSpec_Storage `protobuf_oneof:"storage"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *S3ConnectionSpec) Reset() {
	*x = S3ConnectionSpec{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3ConnectionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ConnectionSpec) ProtoMessage() {}

func (x *S3ConnectionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ConnectionSpec.ProtoReflect.Descriptor instead.
func (*S3ConnectionSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{8}
}

func (x *S3ConnectionSpec) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *S3ConnectionSpec) GetStorage() isS3ConnectionSpec_Storage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *S3ConnectionSpec) GetExternalS3() *ExternalS3StorageSpec {
	if x != nil {
		if x, ok := x.Storage.(*S3ConnectionSpec_ExternalS3); ok {
			return x.ExternalS3
		}
	}
	return nil
}

type isS3ConnectionSpec_Storage interface {
	isS3ConnectionSpec_Storage()
}

type S3ConnectionSpec_ExternalS3 struct {
	ExternalS3 *ExternalS3StorageSpec `protobuf:"bytes,2,opt,name=external_s3,json=externalS3,proto3,oneof"`
}

func (*S3ConnectionSpec_ExternalS3) isS3ConnectionSpec_Storage() {}

type ExternalS3StorageSpec struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AccessKeyId     string                 `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	SecretAccessKey string                 `protobuf:"bytes,2,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
	Endpoint        string                 `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Default is 'us-east-1'.
	Region        string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExternalS3StorageSpec) Reset() {
	*x = ExternalS3StorageSpec{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalS3StorageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalS3StorageSpec) ProtoMessage() {}

func (x *ExternalS3StorageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalS3StorageSpec.ProtoReflect.Descriptor instead.
func (*ExternalS3StorageSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{9}
}

func (x *ExternalS3StorageSpec) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *ExternalS3StorageSpec) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *ExternalS3StorageSpec) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *ExternalS3StorageSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type Connector struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the connector.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Maximum number of connector tasks. Default value is the number of brokers.
	TasksMax *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=tasks_max,json=tasksMax,proto3" json:"tasks_max,omitempty"`
	// A set of properties passed to Managed Service for Apache Kafka® with the connector configuration.
	// Example: `sync.topics.config.enabled: true`.
	Properties map[string]string `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Connector health.
	Health Connector_Health `protobuf:"varint,4,opt,name=health,proto3,enum=yandex.cloud.mdb.kafka.v1.Connector_Health" json:"health,omitempty"`
	// Current status of the connector.
	Status Connector_Status `protobuf:"varint,5,opt,name=status,proto3,enum=yandex.cloud.mdb.kafka.v1.Connector_Status" json:"status,omitempty"`
	// ID of the Apache Kafka® cluster that the connector belongs to.
	ClusterId string `protobuf:"bytes,6,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Additional settings for the connector.
	//
	// Types that are valid to be assigned to ConnectorConfig:
	//
	//	*Connector_ConnectorConfigMirrormaker
	//	*Connector_ConnectorConfigS3Sink
	ConnectorConfig isConnector_ConnectorConfig `protobuf_oneof:"connector_config"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Connector) Reset() {
	*x = Connector{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connector) ProtoMessage() {}

func (x *Connector) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connector.ProtoReflect.Descriptor instead.
func (*Connector) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{10}
}

func (x *Connector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Connector) GetTasksMax() *wrapperspb.Int64Value {
	if x != nil {
		return x.TasksMax
	}
	return nil
}

func (x *Connector) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Connector) GetHealth() Connector_Health {
	if x != nil {
		return x.Health
	}
	return Connector_HEALTH_UNKNOWN
}

func (x *Connector) GetStatus() Connector_Status {
	if x != nil {
		return x.Status
	}
	return Connector_STATUS_UNKNOWN
}

func (x *Connector) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *Connector) GetConnectorConfig() isConnector_ConnectorConfig {
	if x != nil {
		return x.ConnectorConfig
	}
	return nil
}

func (x *Connector) GetConnectorConfigMirrormaker() *ConnectorConfigMirrorMaker {
	if x != nil {
		if x, ok := x.ConnectorConfig.(*Connector_ConnectorConfigMirrormaker); ok {
			return x.ConnectorConfigMirrormaker
		}
	}
	return nil
}

func (x *Connector) GetConnectorConfigS3Sink() *ConnectorConfigS3Sink {
	if x != nil {
		if x, ok := x.ConnectorConfig.(*Connector_ConnectorConfigS3Sink); ok {
			return x.ConnectorConfigS3Sink
		}
	}
	return nil
}

type isConnector_ConnectorConfig interface {
	isConnector_ConnectorConfig()
}

type Connector_ConnectorConfigMirrormaker struct {
	// Configuration of the MirrorMaker connector.
	ConnectorConfigMirrormaker *ConnectorConfigMirrorMaker `protobuf:"bytes,10,opt,name=connector_config_mirrormaker,json=connectorConfigMirrormaker,proto3,oneof"`
}

type Connector_ConnectorConfigS3Sink struct {
	// Configuration of S3-Sink connector.
	ConnectorConfigS3Sink *ConnectorConfigS3Sink `protobuf:"bytes,11,opt,name=connector_config_s3_sink,json=connectorConfigS3Sink,proto3,oneof"`
}

func (*Connector_ConnectorConfigMirrormaker) isConnector_ConnectorConfig() {}

func (*Connector_ConnectorConfigS3Sink) isConnector_ConnectorConfig() {}

type ConnectorConfigMirrorMaker struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Source cluster connection configuration.
	SourceCluster *ClusterConnection `protobuf:"bytes,1,opt,name=source_cluster,json=sourceCluster,proto3" json:"source_cluster,omitempty"`
	// Target cluster connection configuration.
	TargetCluster *ClusterConnection `protobuf:"bytes,2,opt,name=target_cluster,json=targetCluster,proto3" json:"target_cluster,omitempty"`
	// List of Kafka topics, separated by `,`.
	Topics string `protobuf:"bytes,3,opt,name=topics,proto3" json:"topics,omitempty"`
	// Replication factor for automatically created topics.
	ReplicationFactor *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ConnectorConfigMirrorMaker) Reset() {
	*x = ConnectorConfigMirrorMaker{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectorConfigMirrorMaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorConfigMirrorMaker) ProtoMessage() {}

func (x *ConnectorConfigMirrorMaker) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorConfigMirrorMaker.ProtoReflect.Descriptor instead.
func (*ConnectorConfigMirrorMaker) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{11}
}

func (x *ConnectorConfigMirrorMaker) GetSourceCluster() *ClusterConnection {
	if x != nil {
		return x.SourceCluster
	}
	return nil
}

func (x *ConnectorConfigMirrorMaker) GetTargetCluster() *ClusterConnection {
	if x != nil {
		return x.TargetCluster
	}
	return nil
}

func (x *ConnectorConfigMirrorMaker) GetTopics() string {
	if x != nil {
		return x.Topics
	}
	return ""
}

func (x *ConnectorConfigMirrorMaker) GetReplicationFactor() *wrapperspb.Int64Value {
	if x != nil {
		return x.ReplicationFactor
	}
	return nil
}

type ClusterConnection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Alias of cluster connection configuration.
	// Examples: `source`, `target`.
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	// Type of connection to Apache Kafka® cluster.
	//
	// Types that are valid to be assigned to ClusterConnection:
	//
	//	*ClusterConnection_ThisCluster
	//	*ClusterConnection_ExternalCluster
	ClusterConnection isClusterConnection_ClusterConnection `protobuf_oneof:"cluster_connection"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ClusterConnection) Reset() {
	*x = ClusterConnection{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConnection) ProtoMessage() {}

func (x *ClusterConnection) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConnection.ProtoReflect.Descriptor instead.
func (*ClusterConnection) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{12}
}

func (x *ClusterConnection) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *ClusterConnection) GetClusterConnection() isClusterConnection_ClusterConnection {
	if x != nil {
		return x.ClusterConnection
	}
	return nil
}

func (x *ClusterConnection) GetThisCluster() *ThisCluster {
	if x != nil {
		if x, ok := x.ClusterConnection.(*ClusterConnection_ThisCluster); ok {
			return x.ThisCluster
		}
	}
	return nil
}

func (x *ClusterConnection) GetExternalCluster() *ExternalClusterConnection {
	if x != nil {
		if x, ok := x.ClusterConnection.(*ClusterConnection_ExternalCluster); ok {
			return x.ExternalCluster
		}
	}
	return nil
}

type isClusterConnection_ClusterConnection interface {
	isClusterConnection_ClusterConnection()
}

type ClusterConnection_ThisCluster struct {
	// Connection configuration of the cluster the connector belongs to. As all credentials are already known, leave this parameter empty.
	ThisCluster *ThisCluster `protobuf:"bytes,2,opt,name=this_cluster,json=thisCluster,proto3,oneof"`
}

type ClusterConnection_ExternalCluster struct {
	// Configuration of connection to an external cluster with all the necessary credentials.
	ExternalCluster *ExternalClusterConnection `protobuf:"bytes,3,opt,name=external_cluster,json=externalCluster,proto3,oneof"`
}

func (*ClusterConnection_ThisCluster) isClusterConnection_ClusterConnection() {}

func (*ClusterConnection_ExternalCluster) isClusterConnection_ClusterConnection() {}

type ThisCluster struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ThisCluster) Reset() {
	*x = ThisCluster{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThisCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThisCluster) ProtoMessage() {}

func (x *ThisCluster) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThisCluster.ProtoReflect.Descriptor instead.
func (*ThisCluster) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{13}
}

type ExternalClusterConnection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of bootstrap servers of the cluster, separated by `,`.
	BootstrapServers string `protobuf:"bytes,1,opt,name=bootstrap_servers,json=bootstrapServers,proto3" json:"bootstrap_servers,omitempty"`
	// SASL username to use for connection to the cluster.
	SaslUsername string `protobuf:"bytes,2,opt,name=sasl_username,json=saslUsername,proto3" json:"sasl_username,omitempty"`
	// SASL mechanism to use for connection to the cluster.
	SaslMechanism string `protobuf:"bytes,4,opt,name=sasl_mechanism,json=saslMechanism,proto3" json:"sasl_mechanism,omitempty"`
	// Security protocol to use for connection to the cluster.
	SecurityProtocol string `protobuf:"bytes,5,opt,name=security_protocol,json=securityProtocol,proto3" json:"security_protocol,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ExternalClusterConnection) Reset() {
	*x = ExternalClusterConnection{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalClusterConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalClusterConnection) ProtoMessage() {}

func (x *ExternalClusterConnection) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalClusterConnection.ProtoReflect.Descriptor instead.
func (*ExternalClusterConnection) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{14}
}

func (x *ExternalClusterConnection) GetBootstrapServers() string {
	if x != nil {
		return x.BootstrapServers
	}
	return ""
}

func (x *ExternalClusterConnection) GetSaslUsername() string {
	if x != nil {
		return x.SaslUsername
	}
	return ""
}

func (x *ExternalClusterConnection) GetSaslMechanism() string {
	if x != nil {
		return x.SaslMechanism
	}
	return ""
}

func (x *ExternalClusterConnection) GetSecurityProtocol() string {
	if x != nil {
		return x.SecurityProtocol
	}
	return ""
}

// An Apache Kafka® S3-Sink
// connector resource.
type ConnectorConfigS3Sink struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of Kafka topics, separated by ','.
	Topics string `protobuf:"bytes,1,opt,name=topics,proto3" json:"topics,omitempty"`
	// The compression type used for files put on GCS.
	// The supported values are: `gzip`, `snappy`, `zstd`, `none`.
	// Optional, the default is `none`.
	FileCompressionType string `protobuf:"bytes,2,opt,name=file_compression_type,json=fileCompressionType,proto3" json:"file_compression_type,omitempty"`
	// Max records per file.
	FileMaxRecords *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=file_max_records,json=fileMaxRecords,proto3" json:"file_max_records,omitempty"`
	// Credentials for connecting to S3 storage.
	S3Connection  *S3Connection `protobuf:"bytes,4,opt,name=s3_connection,json=s3Connection,proto3" json:"s3_connection,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectorConfigS3Sink) Reset() {
	*x = ConnectorConfigS3Sink{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectorConfigS3Sink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorConfigS3Sink) ProtoMessage() {}

func (x *ConnectorConfigS3Sink) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorConfigS3Sink.ProtoReflect.Descriptor instead.
func (*ConnectorConfigS3Sink) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{15}
}

func (x *ConnectorConfigS3Sink) GetTopics() string {
	if x != nil {
		return x.Topics
	}
	return ""
}

func (x *ConnectorConfigS3Sink) GetFileCompressionType() string {
	if x != nil {
		return x.FileCompressionType
	}
	return ""
}

func (x *ConnectorConfigS3Sink) GetFileMaxRecords() *wrapperspb.Int64Value {
	if x != nil {
		return x.FileMaxRecords
	}
	return nil
}

func (x *ConnectorConfigS3Sink) GetS3Connection() *S3Connection {
	if x != nil {
		return x.S3Connection
	}
	return nil
}

// Resource for S3Connection -
// settings of connection to AWS-compatible S3 storage, that
// are source or target of Kafka S3-connectors.
// YC Object Storage is AWS-compatible.
type S3Connection struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	BucketName string                 `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// Types that are valid to be assigned to Storage:
	//
	//	*S3Connection_ExternalS3
	Storage       isS3Connection_Storage `protobuf_oneof:"storage"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *S3Connection) Reset() {
	*x = S3Connection{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Connection) ProtoMessage() {}

func (x *S3Connection) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Connection.ProtoReflect.Descriptor instead.
func (*S3Connection) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{16}
}

func (x *S3Connection) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *S3Connection) GetStorage() isS3Connection_Storage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *S3Connection) GetExternalS3() *ExternalS3Storage {
	if x != nil {
		if x, ok := x.Storage.(*S3Connection_ExternalS3); ok {
			return x.ExternalS3
		}
	}
	return nil
}

type isS3Connection_Storage interface {
	isS3Connection_Storage()
}

type S3Connection_ExternalS3 struct {
	ExternalS3 *ExternalS3Storage `protobuf:"bytes,2,opt,name=external_s3,json=externalS3,proto3,oneof"`
}

func (*S3Connection_ExternalS3) isS3Connection_Storage() {}

type ExternalS3Storage struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	AccessKeyId string                 `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	Endpoint    string                 `protobuf:"bytes,2,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Default is 'us-east-1'
	Region        string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExternalS3Storage) Reset() {
	*x = ExternalS3Storage{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalS3Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalS3Storage) ProtoMessage() {}

func (x *ExternalS3Storage) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalS3Storage.ProtoReflect.Descriptor instead.
func (*ExternalS3Storage) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP(), []int{17}
}

func (x *ExternalS3Storage) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *ExternalS3Storage) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *ExternalS3Storage) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

var File_yandex_cloud_mdb_kafka_v1_connector_proto protoreflect.FileDescriptor

const file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDesc = "" +
	"\n" +
	")yandex/cloud/mdb/kafka/v1/connector.proto\x12\x19yandex.cloud.mdb.kafka.v1\x1a\x1egoogle/protobuf/wrappers.proto\"\x80\x04\n" +
	"\rConnectorSpec\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x128\n" +
	"\ttasks_max\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueR\btasksMax\x12X\n" +
	"\n" +
	"properties\x18\x03 \x03(\v28.yandex.cloud.mdb.kafka.v1.ConnectorSpec.PropertiesEntryR\n" +
	"properties\x12}\n" +
	"\x1cconnector_config_mirrormaker\x18\n" +
	" \x01(\v29.yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMakerSpecH\x00R\x1aconnectorConfigMirrormaker\x12o\n" +
	"\x18connector_config_s3_sink\x18\v \x01(\v24.yandex.cloud.mdb.kafka.v1.ConnectorConfigS3SinkSpecH\x00R\x15connectorConfigS3Sink\x1a=\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x12\n" +
	"\x10connector_configJ\x04\b\x04\x10\n" +
	"\"\xfe\x03\n" +
	"\x13UpdateConnectorSpec\x128\n" +
	"\ttasks_max\x18\x01 \x01(\v2\x1b.google.protobuf.Int64ValueR\btasksMax\x12^\n" +
	"\n" +
	"properties\x18\x02 \x03(\v2>.yandex.cloud.mdb.kafka.v1.UpdateConnectorSpec.PropertiesEntryR\n" +
	"properties\x12}\n" +
	"\x1cconnector_config_mirrormaker\x18\n" +
	" \x01(\v29.yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMakerSpecH\x00R\x1aconnectorConfigMirrormaker\x12u\n" +
	"\x18connector_config_s3_sink\x18\v \x01(\v2:.yandex.cloud.mdb.kafka.v1.UpdateConnectorConfigS3SinkSpecH\x00R\x15connectorConfigS3Sink\x1a=\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x12\n" +
	"\x10connector_configJ\x04\b\x03\x10\n" +
	"\"\xb6\x02\n" +
	"\x1eConnectorConfigMirrorMakerSpec\x12W\n" +
	"\x0esource_cluster\x18\x01 \x01(\v20.yandex.cloud.mdb.kafka.v1.ClusterConnectionSpecR\rsourceCluster\x12W\n" +
	"\x0etarget_cluster\x18\x02 \x01(\v20.yandex.cloud.mdb.kafka.v1.ClusterConnectionSpecR\rtargetCluster\x12\x16\n" +
	"\x06topics\x18\x03 \x01(\tR\x06topics\x12J\n" +
	"\x12replication_factor\x18\x04 \x01(\v2\x1b.google.protobuf.Int64ValueR\x11replicationFactor\"\xfb\x01\n" +
	"\x15ClusterConnectionSpec\x12\x14\n" +
	"\x05alias\x18\x01 \x01(\tR\x05alias\x12O\n" +
	"\fthis_cluster\x18\x02 \x01(\v2*.yandex.cloud.mdb.kafka.v1.ThisClusterSpecH\x00R\vthisCluster\x12e\n" +
	"\x10external_cluster\x18\x03 \x01(\v28.yandex.cloud.mdb.kafka.v1.ExternalClusterConnectionSpecH\x00R\x0fexternalClusterB\x14\n" +
	"\x12cluster_connection\"\x11\n" +
	"\x0fThisClusterSpec\"\xaa\x02\n" +
	"\x1dExternalClusterConnectionSpec\x12+\n" +
	"\x11bootstrap_servers\x18\x01 \x01(\tR\x10bootstrapServers\x12#\n" +
	"\rsasl_username\x18\x02 \x01(\tR\fsaslUsername\x12#\n" +
	"\rsasl_password\x18\x03 \x01(\tR\fsaslPassword\x12%\n" +
	"\x0esasl_mechanism\x18\x04 \x01(\tR\rsaslMechanism\x12+\n" +
	"\x11security_protocol\x18\x05 \x01(\tR\x10securityProtocol\x12>\n" +
	"\x1bssl_truststore_certificates\x18\x06 \x01(\tR\x19sslTruststoreCertificates\"\x80\x02\n" +
	"\x19ConnectorConfigS3SinkSpec\x12\x16\n" +
	"\x06topics\x18\x01 \x01(\tR\x06topics\x122\n" +
	"\x15file_compression_type\x18\x02 \x01(\tR\x13fileCompressionType\x12E\n" +
	"\x10file_max_records\x18\x03 \x01(\v2\x1b.google.protobuf.Int64ValueR\x0efileMaxRecords\x12P\n" +
	"\rs3_connection\x18\x04 \x01(\v2+.yandex.cloud.mdb.kafka.v1.S3ConnectionSpecR\fs3Connection\"\xd2\x01\n" +
	"\x1fUpdateConnectorConfigS3SinkSpec\x12\x16\n" +
	"\x06topics\x18\x01 \x01(\tR\x06topics\x12E\n" +
	"\x10file_max_records\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueR\x0efileMaxRecords\x12P\n" +
	"\rs3_connection\x18\x03 \x01(\v2+.yandex.cloud.mdb.kafka.v1.S3ConnectionSpecR\fs3Connection\"\x93\x01\n" +
	"\x10S3ConnectionSpec\x12\x1f\n" +
	"\vbucket_name\x18\x01 \x01(\tR\n" +
	"bucketName\x12S\n" +
	"\vexternal_s3\x18\x02 \x01(\v20.yandex.cloud.mdb.kafka.v1.ExternalS3StorageSpecH\x00R\n" +
	"externalS3B\t\n" +
	"\astorage\"\x9b\x01\n" +
	"\x15ExternalS3StorageSpec\x12\"\n" +
	"\raccess_key_id\x18\x01 \x01(\tR\vaccessKeyId\x12*\n" +
	"\x11secret_access_key\x18\x02 \x01(\tR\x0fsecretAccessKey\x12\x1a\n" +
	"\bendpoint\x18\x03 \x01(\tR\bendpoint\x12\x16\n" +
	"\x06region\x18\x04 \x01(\tR\x06region\"\x8e\x06\n" +
	"\tConnector\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x128\n" +
	"\ttasks_max\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueR\btasksMax\x12T\n" +
	"\n" +
	"properties\x18\x03 \x03(\v24.yandex.cloud.mdb.kafka.v1.Connector.PropertiesEntryR\n" +
	"properties\x12C\n" +
	"\x06health\x18\x04 \x01(\x0e2+.yandex.cloud.mdb.kafka.v1.Connector.HealthR\x06health\x12C\n" +
	"\x06status\x18\x05 \x01(\x0e2+.yandex.cloud.mdb.kafka.v1.Connector.StatusR\x06status\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x06 \x01(\tR\tclusterId\x12y\n" +
	"\x1cconnector_config_mirrormaker\x18\n" +
	" \x01(\v25.yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMakerH\x00R\x1aconnectorConfigMirrormaker\x12k\n" +
	"\x18connector_config_s3_sink\x18\v \x01(\v20.yandex.cloud.mdb.kafka.v1.ConnectorConfigS3SinkH\x00R\x15connectorConfigS3Sink\x1a=\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"1\n" +
	"\x06Health\x12\x12\n" +
	"\x0eHEALTH_UNKNOWN\x10\x00\x12\t\n" +
	"\x05ALIVE\x10\x01\x12\b\n" +
	"\x04DEAD\x10\x02\"@\n" +
	"\x06Status\x12\x12\n" +
	"\x0eSTATUS_UNKNOWN\x10\x00\x12\v\n" +
	"\aRUNNING\x10\x01\x12\t\n" +
	"\x05ERROR\x10\x02\x12\n" +
	"\n" +
	"\x06PAUSED\x10\x03B\x12\n" +
	"\x10connector_configJ\x04\b\a\x10\n" +
	"\"\xaa\x02\n" +
	"\x1aConnectorConfigMirrorMaker\x12S\n" +
	"\x0esource_cluster\x18\x01 \x01(\v2,.yandex.cloud.mdb.kafka.v1.ClusterConnectionR\rsourceCluster\x12S\n" +
	"\x0etarget_cluster\x18\x02 \x01(\v2,.yandex.cloud.mdb.kafka.v1.ClusterConnectionR\rtargetCluster\x12\x16\n" +
	"\x06topics\x18\x03 \x01(\tR\x06topics\x12J\n" +
	"\x12replication_factor\x18\x04 \x01(\v2\x1b.google.protobuf.Int64ValueR\x11replicationFactor\"\xef\x01\n" +
	"\x11ClusterConnection\x12\x14\n" +
	"\x05alias\x18\x01 \x01(\tR\x05alias\x12K\n" +
	"\fthis_cluster\x18\x02 \x01(\v2&.yandex.cloud.mdb.kafka.v1.ThisClusterH\x00R\vthisCluster\x12a\n" +
	"\x10external_cluster\x18\x03 \x01(\v24.yandex.cloud.mdb.kafka.v1.ExternalClusterConnectionH\x00R\x0fexternalClusterB\x14\n" +
	"\x12cluster_connection\"\r\n" +
	"\vThisCluster\"\xc7\x01\n" +
	"\x19ExternalClusterConnection\x12+\n" +
	"\x11bootstrap_servers\x18\x01 \x01(\tR\x10bootstrapServers\x12#\n" +
	"\rsasl_username\x18\x02 \x01(\tR\fsaslUsername\x12%\n" +
	"\x0esasl_mechanism\x18\x04 \x01(\tR\rsaslMechanism\x12+\n" +
	"\x11security_protocol\x18\x05 \x01(\tR\x10securityProtocolJ\x04\b\x03\x10\x04\"\xf8\x01\n" +
	"\x15ConnectorConfigS3Sink\x12\x16\n" +
	"\x06topics\x18\x01 \x01(\tR\x06topics\x122\n" +
	"\x15file_compression_type\x18\x02 \x01(\tR\x13fileCompressionType\x12E\n" +
	"\x10file_max_records\x18\x03 \x01(\v2\x1b.google.protobuf.Int64ValueR\x0efileMaxRecords\x12L\n" +
	"\rs3_connection\x18\x04 \x01(\v2'.yandex.cloud.mdb.kafka.v1.S3ConnectionR\fs3Connection\"\x8b\x01\n" +
	"\fS3Connection\x12\x1f\n" +
	"\vbucket_name\x18\x01 \x01(\tR\n" +
	"bucketName\x12O\n" +
	"\vexternal_s3\x18\x02 \x01(\v2,.yandex.cloud.mdb.kafka.v1.ExternalS3StorageH\x00R\n" +
	"externalS3B\t\n" +
	"\astorage\"k\n" +
	"\x11ExternalS3Storage\x12\"\n" +
	"\raccess_key_id\x18\x01 \x01(\tR\vaccessKeyId\x12\x1a\n" +
	"\bendpoint\x18\x02 \x01(\tR\bendpoint\x12\x16\n" +
	"\x06region\x18\x03 \x01(\tR\x06regionBd\n" +
	"\x1dyandex.cloud.api.mdb.kafka.v1ZCgithub.com/yandex-cloud/go-genproto/yandex/cloud/mdb/kafka/v1;kafkab\x06proto3"

var (
	file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescData []byte
)

func file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDesc), len(file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDesc)))
	})
	return file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDescData
}

var file_yandex_cloud_mdb_kafka_v1_connector_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_yandex_cloud_mdb_kafka_v1_connector_proto_goTypes = []any{
	(Connector_Health)(0),                   // 0: yandex.cloud.mdb.kafka.v1.Connector.Health
	(Connector_Status)(0),                   // 1: yandex.cloud.mdb.kafka.v1.Connector.Status
	(*ConnectorSpec)(nil),                   // 2: yandex.cloud.mdb.kafka.v1.ConnectorSpec
	(*UpdateConnectorSpec)(nil),             // 3: yandex.cloud.mdb.kafka.v1.UpdateConnectorSpec
	(*ConnectorConfigMirrorMakerSpec)(nil),  // 4: yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMakerSpec
	(*ClusterConnectionSpec)(nil),           // 5: yandex.cloud.mdb.kafka.v1.ClusterConnectionSpec
	(*ThisClusterSpec)(nil),                 // 6: yandex.cloud.mdb.kafka.v1.ThisClusterSpec
	(*ExternalClusterConnectionSpec)(nil),   // 7: yandex.cloud.mdb.kafka.v1.ExternalClusterConnectionSpec
	(*ConnectorConfigS3SinkSpec)(nil),       // 8: yandex.cloud.mdb.kafka.v1.ConnectorConfigS3SinkSpec
	(*UpdateConnectorConfigS3SinkSpec)(nil), // 9: yandex.cloud.mdb.kafka.v1.UpdateConnectorConfigS3SinkSpec
	(*S3ConnectionSpec)(nil),                // 10: yandex.cloud.mdb.kafka.v1.S3ConnectionSpec
	(*ExternalS3StorageSpec)(nil),           // 11: yandex.cloud.mdb.kafka.v1.ExternalS3StorageSpec
	(*Connector)(nil),                       // 12: yandex.cloud.mdb.kafka.v1.Connector
	(*ConnectorConfigMirrorMaker)(nil),      // 13: yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMaker
	(*ClusterConnection)(nil),               // 14: yandex.cloud.mdb.kafka.v1.ClusterConnection
	(*ThisCluster)(nil),                     // 15: yandex.cloud.mdb.kafka.v1.ThisCluster
	(*ExternalClusterConnection)(nil),       // 16: yandex.cloud.mdb.kafka.v1.ExternalClusterConnection
	(*ConnectorConfigS3Sink)(nil),           // 17: yandex.cloud.mdb.kafka.v1.ConnectorConfigS3Sink
	(*S3Connection)(nil),                    // 18: yandex.cloud.mdb.kafka.v1.S3Connection
	(*ExternalS3Storage)(nil),               // 19: yandex.cloud.mdb.kafka.v1.ExternalS3Storage
	nil,                                     // 20: yandex.cloud.mdb.kafka.v1.ConnectorSpec.PropertiesEntry
	nil,                                     // 21: yandex.cloud.mdb.kafka.v1.UpdateConnectorSpec.PropertiesEntry
	nil,                                     // 22: yandex.cloud.mdb.kafka.v1.Connector.PropertiesEntry
	(*wrapperspb.Int64Value)(nil),           // 23: google.protobuf.Int64Value
}
var file_yandex_cloud_mdb_kafka_v1_connector_proto_depIdxs = []int32{
	23, // 0: yandex.cloud.mdb.kafka.v1.ConnectorSpec.tasks_max:type_name -> google.protobuf.Int64Value
	20, // 1: yandex.cloud.mdb.kafka.v1.ConnectorSpec.properties:type_name -> yandex.cloud.mdb.kafka.v1.ConnectorSpec.PropertiesEntry
	4,  // 2: yandex.cloud.mdb.kafka.v1.ConnectorSpec.connector_config_mirrormaker:type_name -> yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMakerSpec
	8,  // 3: yandex.cloud.mdb.kafka.v1.ConnectorSpec.connector_config_s3_sink:type_name -> yandex.cloud.mdb.kafka.v1.ConnectorConfigS3SinkSpec
	23, // 4: yandex.cloud.mdb.kafka.v1.UpdateConnectorSpec.tasks_max:type_name -> google.protobuf.Int64Value
	21, // 5: yandex.cloud.mdb.kafka.v1.UpdateConnectorSpec.properties:type_name -> yandex.cloud.mdb.kafka.v1.UpdateConnectorSpec.PropertiesEntry
	4,  // 6: yandex.cloud.mdb.kafka.v1.UpdateConnectorSpec.connector_config_mirrormaker:type_name -> yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMakerSpec
	9,  // 7: yandex.cloud.mdb.kafka.v1.UpdateConnectorSpec.connector_config_s3_sink:type_name -> yandex.cloud.mdb.kafka.v1.UpdateConnectorConfigS3SinkSpec
	5,  // 8: yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMakerSpec.source_cluster:type_name -> yandex.cloud.mdb.kafka.v1.ClusterConnectionSpec
	5,  // 9: yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMakerSpec.target_cluster:type_name -> yandex.cloud.mdb.kafka.v1.ClusterConnectionSpec
	23, // 10: yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMakerSpec.replication_factor:type_name -> google.protobuf.Int64Value
	6,  // 11: yandex.cloud.mdb.kafka.v1.ClusterConnectionSpec.this_cluster:type_name -> yandex.cloud.mdb.kafka.v1.ThisClusterSpec
	7,  // 12: yandex.cloud.mdb.kafka.v1.ClusterConnectionSpec.external_cluster:type_name -> yandex.cloud.mdb.kafka.v1.ExternalClusterConnectionSpec
	23, // 13: yandex.cloud.mdb.kafka.v1.ConnectorConfigS3SinkSpec.file_max_records:type_name -> google.protobuf.Int64Value
	10, // 14: yandex.cloud.mdb.kafka.v1.ConnectorConfigS3SinkSpec.s3_connection:type_name -> yandex.cloud.mdb.kafka.v1.S3ConnectionSpec
	23, // 15: yandex.cloud.mdb.kafka.v1.UpdateConnectorConfigS3SinkSpec.file_max_records:type_name -> google.protobuf.Int64Value
	10, // 16: yandex.cloud.mdb.kafka.v1.UpdateConnectorConfigS3SinkSpec.s3_connection:type_name -> yandex.cloud.mdb.kafka.v1.S3ConnectionSpec
	11, // 17: yandex.cloud.mdb.kafka.v1.S3ConnectionSpec.external_s3:type_name -> yandex.cloud.mdb.kafka.v1.ExternalS3StorageSpec
	23, // 18: yandex.cloud.mdb.kafka.v1.Connector.tasks_max:type_name -> google.protobuf.Int64Value
	22, // 19: yandex.cloud.mdb.kafka.v1.Connector.properties:type_name -> yandex.cloud.mdb.kafka.v1.Connector.PropertiesEntry
	0,  // 20: yandex.cloud.mdb.kafka.v1.Connector.health:type_name -> yandex.cloud.mdb.kafka.v1.Connector.Health
	1,  // 21: yandex.cloud.mdb.kafka.v1.Connector.status:type_name -> yandex.cloud.mdb.kafka.v1.Connector.Status
	13, // 22: yandex.cloud.mdb.kafka.v1.Connector.connector_config_mirrormaker:type_name -> yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMaker
	17, // 23: yandex.cloud.mdb.kafka.v1.Connector.connector_config_s3_sink:type_name -> yandex.cloud.mdb.kafka.v1.ConnectorConfigS3Sink
	14, // 24: yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMaker.source_cluster:type_name -> yandex.cloud.mdb.kafka.v1.ClusterConnection
	14, // 25: yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMaker.target_cluster:type_name -> yandex.cloud.mdb.kafka.v1.ClusterConnection
	23, // 26: yandex.cloud.mdb.kafka.v1.ConnectorConfigMirrorMaker.replication_factor:type_name -> google.protobuf.Int64Value
	15, // 27: yandex.cloud.mdb.kafka.v1.ClusterConnection.this_cluster:type_name -> yandex.cloud.mdb.kafka.v1.ThisCluster
	16, // 28: yandex.cloud.mdb.kafka.v1.ClusterConnection.external_cluster:type_name -> yandex.cloud.mdb.kafka.v1.ExternalClusterConnection
	23, // 29: yandex.cloud.mdb.kafka.v1.ConnectorConfigS3Sink.file_max_records:type_name -> google.protobuf.Int64Value
	18, // 30: yandex.cloud.mdb.kafka.v1.ConnectorConfigS3Sink.s3_connection:type_name -> yandex.cloud.mdb.kafka.v1.S3Connection
	19, // 31: yandex.cloud.mdb.kafka.v1.S3Connection.external_s3:type_name -> yandex.cloud.mdb.kafka.v1.ExternalS3Storage
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_kafka_v1_connector_proto_init() }
func file_yandex_cloud_mdb_kafka_v1_connector_proto_init() {
	if File_yandex_cloud_mdb_kafka_v1_connector_proto != nil {
		return
	}
	file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[0].OneofWrappers = []any{
		(*ConnectorSpec_ConnectorConfigMirrormaker)(nil),
		(*ConnectorSpec_ConnectorConfigS3Sink)(nil),
	}
	file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[1].OneofWrappers = []any{
		(*UpdateConnectorSpec_ConnectorConfigMirrormaker)(nil),
		(*UpdateConnectorSpec_ConnectorConfigS3Sink)(nil),
	}
	file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[3].OneofWrappers = []any{
		(*ClusterConnectionSpec_ThisCluster)(nil),
		(*ClusterConnectionSpec_ExternalCluster)(nil),
	}
	file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[8].OneofWrappers = []any{
		(*S3ConnectionSpec_ExternalS3)(nil),
	}
	file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[10].OneofWrappers = []any{
		(*Connector_ConnectorConfigMirrormaker)(nil),
		(*Connector_ConnectorConfigS3Sink)(nil),
	}
	file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[12].OneofWrappers = []any{
		(*ClusterConnection_ThisCluster)(nil),
		(*ClusterConnection_ExternalCluster)(nil),
	}
	file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes[16].OneofWrappers = []any{
		(*S3Connection_ExternalS3)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDesc), len(file_yandex_cloud_mdb_kafka_v1_connector_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_mdb_kafka_v1_connector_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_kafka_v1_connector_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_kafka_v1_connector_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_kafka_v1_connector_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_kafka_v1_connector_proto = out.File
	file_yandex_cloud_mdb_kafka_v1_connector_proto_goTypes = nil
	file_yandex_cloud_mdb_kafka_v1_connector_proto_depIdxs = nil
}

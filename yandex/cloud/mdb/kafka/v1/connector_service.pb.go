// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/mdb/kafka/v1/connector_service.proto

package kafka

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetConnectorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Apache Kafka® cluster the connector belongs to.
	//
	// To get this ID, make a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the Apache Kafka® connector to return information about.
	//
	// To get this name, make a [ConnectorService.List] request.
	ConnectorName string `protobuf:"bytes,2,opt,name=connector_name,json=connectorName,proto3" json:"connector_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConnectorRequest) Reset() {
	*x = GetConnectorRequest{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectorRequest) ProtoMessage() {}

func (x *GetConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectorRequest.ProtoReflect.Descriptor instead.
func (*GetConnectorRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetConnectorRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetConnectorRequest) GetConnectorName() string {
	if x != nil {
		return x.ConnectorName
	}
	return ""
}

type ListConnectorsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Apache Kafka® cluster to list connectors in.
	//
	// To get this ID, make a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return.
	//
	// If the number of available results is larger than [page_size], the API returns a [ListConnectorsResponse.next_page_token] that can be used to get the next page of results in the subsequent [ConnectorService.List] requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token that can be used to iterate through multiple pages of results.
	//
	// To get the next page of results, set [page_token] to the [ListConnectorsResponse.next_page_token] returned by the previous [ConnectorService.List] request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListConnectorsRequest) Reset() {
	*x = ListConnectorsRequest{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConnectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectorsRequest) ProtoMessage() {}

func (x *ListConnectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectorsRequest.ProtoReflect.Descriptor instead.
func (*ListConnectorsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListConnectorsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListConnectorsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListConnectorsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListConnectorsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of Apache Kafka® Connectors.
	Connectors []*Connector `protobuf:"bytes,1,rep,name=connectors,proto3" json:"connectors,omitempty"`
	// The token that can be used to get the next page of results.
	//
	// If the number of results is larger than [ListConnectorsRequest.page_size], use the [next_page_token] as the value for the [ListConnectorsRequest.page_token] in the subsequent [ConnectorService.List] request to iterate through multiple pages of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListConnectorsResponse) Reset() {
	*x = ListConnectorsResponse{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConnectorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectorsResponse) ProtoMessage() {}

func (x *ListConnectorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectorsResponse.ProtoReflect.Descriptor instead.
func (*ListConnectorsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListConnectorsResponse) GetConnectors() []*Connector {
	if x != nil {
		return x.Connectors
	}
	return nil
}

func (x *ListConnectorsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateConnectorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Apache Kafka® cluster to create the connector in.
	//
	// To get this ID, make a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Configuration of the connector to create.
	ConnectorSpec *ConnectorSpec `protobuf:"bytes,2,opt,name=connector_spec,json=connectorSpec,proto3" json:"connector_spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateConnectorRequest) Reset() {
	*x = CreateConnectorRequest{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnectorRequest) ProtoMessage() {}

func (x *CreateConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnectorRequest.ProtoReflect.Descriptor instead.
func (*CreateConnectorRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateConnectorRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateConnectorRequest) GetConnectorSpec() *ConnectorSpec {
	if x != nil {
		return x.ConnectorSpec
	}
	return nil
}

type CreateConnectorMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Apache Kafka® cluster the connector is being created in.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the Apache Kafka® connector that is being created.
	ConnectorName string `protobuf:"bytes,2,opt,name=connector_name,json=connectorName,proto3" json:"connector_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateConnectorMetadata) Reset() {
	*x = CreateConnectorMetadata{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConnectorMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnectorMetadata) ProtoMessage() {}

func (x *CreateConnectorMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnectorMetadata.ProtoReflect.Descriptor instead.
func (*CreateConnectorMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateConnectorMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateConnectorMetadata) GetConnectorName() string {
	if x != nil {
		return x.ConnectorName
	}
	return ""
}

type UpdateConnectorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Apache Kafka® cluster to update the connector in.
	//
	// To get this ID, make a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the connector to update.
	//
	// To get this name, make a [ConnectorService.List] request.
	ConnectorName string `protobuf:"bytes,2,opt,name=connector_name,json=connectorName,proto3" json:"connector_name,omitempty"`
	// Field mask that specifies which settings of the connector should be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Configuration of the connector to update.
	ConnectorSpec *UpdateConnectorSpec `protobuf:"bytes,4,opt,name=connector_spec,json=connectorSpec,proto3" json:"connector_spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateConnectorRequest) Reset() {
	*x = UpdateConnectorRequest{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConnectorRequest) ProtoMessage() {}

func (x *UpdateConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConnectorRequest.ProtoReflect.Descriptor instead.
func (*UpdateConnectorRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateConnectorRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateConnectorRequest) GetConnectorName() string {
	if x != nil {
		return x.ConnectorName
	}
	return ""
}

func (x *UpdateConnectorRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateConnectorRequest) GetConnectorSpec() *UpdateConnectorSpec {
	if x != nil {
		return x.ConnectorSpec
	}
	return nil
}

type UpdateConnectorMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Apache Kafka® cluster the connector is being updated in.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the Apache Kafka® connector that is being updated.
	ConnectorName string `protobuf:"bytes,2,opt,name=connector_name,json=connectorName,proto3" json:"connector_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateConnectorMetadata) Reset() {
	*x = UpdateConnectorMetadata{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConnectorMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConnectorMetadata) ProtoMessage() {}

func (x *UpdateConnectorMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConnectorMetadata.ProtoReflect.Descriptor instead.
func (*UpdateConnectorMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateConnectorMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateConnectorMetadata) GetConnectorName() string {
	if x != nil {
		return x.ConnectorName
	}
	return ""
}

type DeleteConnectorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Apache Kafka® cluster to delete the connector from.
	//
	// To get this ID, make a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the connector to delete.
	//
	// To get this name, make a [ConnectorService.List] request.
	ConnectorName string `protobuf:"bytes,2,opt,name=connector_name,json=connectorName,proto3" json:"connector_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteConnectorRequest) Reset() {
	*x = DeleteConnectorRequest{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConnectorRequest) ProtoMessage() {}

func (x *DeleteConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConnectorRequest.ProtoReflect.Descriptor instead.
func (*DeleteConnectorRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteConnectorRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteConnectorRequest) GetConnectorName() string {
	if x != nil {
		return x.ConnectorName
	}
	return ""
}

type DeleteConnectorMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Apache Kafka® cluster the connector is being deleted from.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the Apache Kafka® connector that is being deleted.
	ConnectorName string `protobuf:"bytes,2,opt,name=connector_name,json=connectorName,proto3" json:"connector_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteConnectorMetadata) Reset() {
	*x = DeleteConnectorMetadata{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteConnectorMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConnectorMetadata) ProtoMessage() {}

func (x *DeleteConnectorMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConnectorMetadata.ProtoReflect.Descriptor instead.
func (*DeleteConnectorMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteConnectorMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteConnectorMetadata) GetConnectorName() string {
	if x != nil {
		return x.ConnectorName
	}
	return ""
}

type ResumeConnectorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Apache Kafka® cluster to resume the connector in.
	//
	// To get this ID, make a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the Apache Kafka® connector to resume.
	//
	// To get this name, make a [ConnectorService.List] request.
	ConnectorName string `protobuf:"bytes,2,opt,name=connector_name,json=connectorName,proto3" json:"connector_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResumeConnectorRequest) Reset() {
	*x = ResumeConnectorRequest{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumeConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeConnectorRequest) ProtoMessage() {}

func (x *ResumeConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeConnectorRequest.ProtoReflect.Descriptor instead.
func (*ResumeConnectorRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDescGZIP(), []int{9}
}

func (x *ResumeConnectorRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ResumeConnectorRequest) GetConnectorName() string {
	if x != nil {
		return x.ConnectorName
	}
	return ""
}

type ResumeConnectorMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Apache Kafka® cluster the connector is being resumed in.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the Apache Kafka® connector that is beign resumed.
	ConnectorName string `protobuf:"bytes,2,opt,name=connector_name,json=connectorName,proto3" json:"connector_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResumeConnectorMetadata) Reset() {
	*x = ResumeConnectorMetadata{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumeConnectorMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeConnectorMetadata) ProtoMessage() {}

func (x *ResumeConnectorMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeConnectorMetadata.ProtoReflect.Descriptor instead.
func (*ResumeConnectorMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDescGZIP(), []int{10}
}

func (x *ResumeConnectorMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ResumeConnectorMetadata) GetConnectorName() string {
	if x != nil {
		return x.ConnectorName
	}
	return ""
}

type PauseConnectorRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Apache Kafka® cluster to pause the connector in.
	//
	// To get this ID, make a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the Apache Kafka® connector to pause.
	//
	// To get this name, make a [ConnectorService.List] request.
	ConnectorName string `protobuf:"bytes,2,opt,name=connector_name,json=connectorName,proto3" json:"connector_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PauseConnectorRequest) Reset() {
	*x = PauseConnectorRequest{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseConnectorRequest) ProtoMessage() {}

func (x *PauseConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseConnectorRequest.ProtoReflect.Descriptor instead.
func (*PauseConnectorRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDescGZIP(), []int{11}
}

func (x *PauseConnectorRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *PauseConnectorRequest) GetConnectorName() string {
	if x != nil {
		return x.ConnectorName
	}
	return ""
}

type PauseConnectorMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Apache Kafka® cluster the connector is being paused in.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the Apache Kafka® connector that is being paused.
	ConnectorName string `protobuf:"bytes,2,opt,name=connector_name,json=connectorName,proto3" json:"connector_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PauseConnectorMetadata) Reset() {
	*x = PauseConnectorMetadata{}
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseConnectorMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseConnectorMetadata) ProtoMessage() {}

func (x *PauseConnectorMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseConnectorMetadata.ProtoReflect.Descriptor instead.
func (*PauseConnectorMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDescGZIP(), []int{12}
}

func (x *PauseConnectorMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *PauseConnectorMetadata) GetConnectorName() string {
	if x != nil {
		return x.ConnectorName
	}
	return ""
}

var File_yandex_cloud_mdb_kafka_v1_connector_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDesc = "" +
	"\n" +
	"1yandex/cloud/mdb/kafka/v1/connector_service.proto\x12\x19yandex.cloud.mdb.kafka.v1\x1a\x1cgoogle/api/annotations.proto\x1a google/protobuf/field_mask.proto\x1a yandex/cloud/api/operation.proto\x1a&yandex/cloud/operation/operation.proto\x1a\x1dyandex/cloud/validation.proto\x1a)yandex/cloud/mdb/kafka/v1/connector.proto\"\x8b\x01\n" +
	"\x13GetConnectorRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12G\n" +
	"\x0econnector_name\x18\x02 \x01(\tB \xe8\xc71\x01\xf2\xc71\x0f[-_.a-zA-Z0-9]*\x8a\xc81\x05<=256R\rconnectorName\"\x97\x01\n" +
	"\x15ListConnectorsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x86\x01\n" +
	"\x16ListConnectorsResponse\x12D\n" +
	"\n" +
	"connectors\x18\x01 \x03(\v2$.yandex.cloud.mdb.kafka.v1.ConnectorR\n" +
	"connectors\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x9c\x01\n" +
	"\x16CreateConnectorRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12U\n" +
	"\x0econnector_spec\x18\x02 \x01(\v2(.yandex.cloud.mdb.kafka.v1.ConnectorSpecB\x04\xe8\xc71\x01R\rconnectorSpec\"\x81\x01\n" +
	"\x17CreateConnectorMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12G\n" +
	"\x0econnector_name\x18\x02 \x01(\tB \xe8\xc71\x01\xf2\xc71\x0f[-_.a-zA-Z0-9]*\x8a\xc81\x05<=256R\rconnectorName\"\xa8\x02\n" +
	"\x16UpdateConnectorRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12G\n" +
	"\x0econnector_name\x18\x02 \x01(\tB \xe8\xc71\x01\xf2\xc71\x0f[-_.a-zA-Z0-9]*\x8a\xc81\x05<=256R\rconnectorName\x12;\n" +
	"\vupdate_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12[\n" +
	"\x0econnector_spec\x18\x04 \x01(\v2..yandex.cloud.mdb.kafka.v1.UpdateConnectorSpecB\x04\xe8\xc71\x01R\rconnectorSpec\"\x8f\x01\n" +
	"\x17UpdateConnectorMetadata\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12G\n" +
	"\x0econnector_name\x18\x02 \x01(\tB \xe8\xc71\x01\xf2\xc71\x0f[-_.a-zA-Z0-9]*\x8a\xc81\x05<=256R\rconnectorName\"\x8e\x01\n" +
	"\x16DeleteConnectorRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12G\n" +
	"\x0econnector_name\x18\x02 \x01(\tB \xe8\xc71\x01\xf2\xc71\x0f[-_.a-zA-Z0-9]*\x8a\xc81\x05<=256R\rconnectorName\"_\n" +
	"\x17DeleteConnectorMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12%\n" +
	"\x0econnector_name\x18\x02 \x01(\tR\rconnectorName\"\x8e\x01\n" +
	"\x16ResumeConnectorRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12G\n" +
	"\x0econnector_name\x18\x02 \x01(\tB \xe8\xc71\x01\xf2\xc71\x0f[-_.a-zA-Z0-9]*\x8a\xc81\x05<=256R\rconnectorName\"\x81\x01\n" +
	"\x17ResumeConnectorMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12G\n" +
	"\x0econnector_name\x18\x02 \x01(\tB \xe8\xc71\x01\xf2\xc71\x0f[-_.a-zA-Z0-9]*\x8a\xc81\x05<=256R\rconnectorName\"\x8d\x01\n" +
	"\x15PauseConnectorRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12G\n" +
	"\x0econnector_name\x18\x02 \x01(\tB \xe8\xc71\x01\xf2\xc71\x0f[-_.a-zA-Z0-9]*\x8a\xc81\x05<=256R\rconnectorName\"\x80\x01\n" +
	"\x16PauseConnectorMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12G\n" +
	"\x0econnector_name\x18\x02 \x01(\tB \xe8\xc71\x01\xf2\xc71\x0f[-_.a-zA-Z0-9]*\x8a\xc81\x05<=256R\rconnectorName2\xa6\v\n" +
	"\x10ConnectorService\x12\xa8\x01\n" +
	"\x03Get\x12..yandex.cloud.mdb.kafka.v1.GetConnectorRequest\x1a$.yandex.cloud.mdb.kafka.v1.Connector\"K\x82\xd3\xe4\x93\x02E\x12C/managed-kafka/v1/clusters/{cluster_id}/connectors/{connector_name}\x12\xa7\x01\n" +
	"\x04List\x120.yandex.cloud.mdb.kafka.v1.ListConnectorsRequest\x1a1.yandex.cloud.mdb.kafka.v1.ListConnectorsResponse\":\x82\xd3\xe4\x93\x024\x122/managed-kafka/v1/clusters/{cluster_id}/connectors\x12\xc5\x01\n" +
	"\x06Create\x121.yandex.cloud.mdb.kafka.v1.CreateConnectorRequest\x1a!.yandex.cloud.operation.Operation\"e\xb2\xd2*$\n" +
	"\x17CreateConnectorMetadata\x12\tConnector\x82\xd3\xe4\x93\x027:\x01*\"2/managed-kafka/v1/clusters/{cluster_id}/connectors\x12\xd6\x01\n" +
	"\x06Update\x121.yandex.cloud.mdb.kafka.v1.UpdateConnectorRequest\x1a!.yandex.cloud.operation.Operation\"v\xb2\xd2*$\n" +
	"\x17UpdateConnectorMetadata\x12\tConnector\x82\xd3\xe4\x93\x02H:\x01*2C/managed-kafka/v1/clusters/{cluster_id}/connectors/{connector_name}\x12\xdf\x01\n" +
	"\x06Delete\x121.yandex.cloud.mdb.kafka.v1.DeleteConnectorRequest\x1a!.yandex.cloud.operation.Operation\"\x7f\xb2\xd2*0\n" +
	"\x17DeleteConnectorMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02E*C/managed-kafka/v1/clusters/{cluster_id}/connectors/{connector_name}\x12\xdd\x01\n" +
	"\x06Resume\x121.yandex.cloud.mdb.kafka.v1.ResumeConnectorRequest\x1a!.yandex.cloud.operation.Operation\"}\xb2\xd2*$\n" +
	"\x17ResumeConnectorMetadata\x12\tConnector\x82\xd3\xe4\x93\x02O:\x01*\"J/managed-kafka/v1/clusters/{cluster_id}/connectors/resume/{connector_name}\x12\xd9\x01\n" +
	"\x05Pause\x120.yandex.cloud.mdb.kafka.v1.PauseConnectorRequest\x1a!.yandex.cloud.operation.Operation\"{\xb2\xd2*#\n" +
	"\x16PauseConnectorMetadata\x12\tConnector\x82\xd3\xe4\x93\x02N:\x01*\"I/managed-kafka/v1/clusters/{cluster_id}/connectors/pause/{connector_name}Bd\n" +
	"\x1dyandex.cloud.api.mdb.kafka.v1ZCgithub.com/yandex-cloud/go-genproto/yandex/cloud/mdb/kafka/v1;kafkab\x06proto3"

var (
	file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDescData []byte
)

func file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDesc), len(file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDesc)))
	})
	return file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDescData
}

var file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_yandex_cloud_mdb_kafka_v1_connector_service_proto_goTypes = []any{
	(*GetConnectorRequest)(nil),     // 0: yandex.cloud.mdb.kafka.v1.GetConnectorRequest
	(*ListConnectorsRequest)(nil),   // 1: yandex.cloud.mdb.kafka.v1.ListConnectorsRequest
	(*ListConnectorsResponse)(nil),  // 2: yandex.cloud.mdb.kafka.v1.ListConnectorsResponse
	(*CreateConnectorRequest)(nil),  // 3: yandex.cloud.mdb.kafka.v1.CreateConnectorRequest
	(*CreateConnectorMetadata)(nil), // 4: yandex.cloud.mdb.kafka.v1.CreateConnectorMetadata
	(*UpdateConnectorRequest)(nil),  // 5: yandex.cloud.mdb.kafka.v1.UpdateConnectorRequest
	(*UpdateConnectorMetadata)(nil), // 6: yandex.cloud.mdb.kafka.v1.UpdateConnectorMetadata
	(*DeleteConnectorRequest)(nil),  // 7: yandex.cloud.mdb.kafka.v1.DeleteConnectorRequest
	(*DeleteConnectorMetadata)(nil), // 8: yandex.cloud.mdb.kafka.v1.DeleteConnectorMetadata
	(*ResumeConnectorRequest)(nil),  // 9: yandex.cloud.mdb.kafka.v1.ResumeConnectorRequest
	(*ResumeConnectorMetadata)(nil), // 10: yandex.cloud.mdb.kafka.v1.ResumeConnectorMetadata
	(*PauseConnectorRequest)(nil),   // 11: yandex.cloud.mdb.kafka.v1.PauseConnectorRequest
	(*PauseConnectorMetadata)(nil),  // 12: yandex.cloud.mdb.kafka.v1.PauseConnectorMetadata
	(*Connector)(nil),               // 13: yandex.cloud.mdb.kafka.v1.Connector
	(*ConnectorSpec)(nil),           // 14: yandex.cloud.mdb.kafka.v1.ConnectorSpec
	(*fieldmaskpb.FieldMask)(nil),   // 15: google.protobuf.FieldMask
	(*UpdateConnectorSpec)(nil),     // 16: yandex.cloud.mdb.kafka.v1.UpdateConnectorSpec
	(*operation.Operation)(nil),     // 17: yandex.cloud.operation.Operation
}
var file_yandex_cloud_mdb_kafka_v1_connector_service_proto_depIdxs = []int32{
	13, // 0: yandex.cloud.mdb.kafka.v1.ListConnectorsResponse.connectors:type_name -> yandex.cloud.mdb.kafka.v1.Connector
	14, // 1: yandex.cloud.mdb.kafka.v1.CreateConnectorRequest.connector_spec:type_name -> yandex.cloud.mdb.kafka.v1.ConnectorSpec
	15, // 2: yandex.cloud.mdb.kafka.v1.UpdateConnectorRequest.update_mask:type_name -> google.protobuf.FieldMask
	16, // 3: yandex.cloud.mdb.kafka.v1.UpdateConnectorRequest.connector_spec:type_name -> yandex.cloud.mdb.kafka.v1.UpdateConnectorSpec
	0,  // 4: yandex.cloud.mdb.kafka.v1.ConnectorService.Get:input_type -> yandex.cloud.mdb.kafka.v1.GetConnectorRequest
	1,  // 5: yandex.cloud.mdb.kafka.v1.ConnectorService.List:input_type -> yandex.cloud.mdb.kafka.v1.ListConnectorsRequest
	3,  // 6: yandex.cloud.mdb.kafka.v1.ConnectorService.Create:input_type -> yandex.cloud.mdb.kafka.v1.CreateConnectorRequest
	5,  // 7: yandex.cloud.mdb.kafka.v1.ConnectorService.Update:input_type -> yandex.cloud.mdb.kafka.v1.UpdateConnectorRequest
	7,  // 8: yandex.cloud.mdb.kafka.v1.ConnectorService.Delete:input_type -> yandex.cloud.mdb.kafka.v1.DeleteConnectorRequest
	9,  // 9: yandex.cloud.mdb.kafka.v1.ConnectorService.Resume:input_type -> yandex.cloud.mdb.kafka.v1.ResumeConnectorRequest
	11, // 10: yandex.cloud.mdb.kafka.v1.ConnectorService.Pause:input_type -> yandex.cloud.mdb.kafka.v1.PauseConnectorRequest
	13, // 11: yandex.cloud.mdb.kafka.v1.ConnectorService.Get:output_type -> yandex.cloud.mdb.kafka.v1.Connector
	2,  // 12: yandex.cloud.mdb.kafka.v1.ConnectorService.List:output_type -> yandex.cloud.mdb.kafka.v1.ListConnectorsResponse
	17, // 13: yandex.cloud.mdb.kafka.v1.ConnectorService.Create:output_type -> yandex.cloud.operation.Operation
	17, // 14: yandex.cloud.mdb.kafka.v1.ConnectorService.Update:output_type -> yandex.cloud.operation.Operation
	17, // 15: yandex.cloud.mdb.kafka.v1.ConnectorService.Delete:output_type -> yandex.cloud.operation.Operation
	17, // 16: yandex.cloud.mdb.kafka.v1.ConnectorService.Resume:output_type -> yandex.cloud.operation.Operation
	17, // 17: yandex.cloud.mdb.kafka.v1.ConnectorService.Pause:output_type -> yandex.cloud.operation.Operation
	11, // [11:18] is the sub-list for method output_type
	4,  // [4:11] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_kafka_v1_connector_service_proto_init() }
func file_yandex_cloud_mdb_kafka_v1_connector_service_proto_init() {
	if File_yandex_cloud_mdb_kafka_v1_connector_service_proto != nil {
		return
	}
	file_yandex_cloud_mdb_kafka_v1_connector_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDesc), len(file_yandex_cloud_mdb_kafka_v1_connector_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_mdb_kafka_v1_connector_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_kafka_v1_connector_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_mdb_kafka_v1_connector_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_kafka_v1_connector_service_proto = out.File
	file_yandex_cloud_mdb_kafka_v1_connector_service_proto_goTypes = nil
	file_yandex_cloud_mdb_kafka_v1_connector_service_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/mdb/kafka/v1/topic_service.proto

package kafka

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetTopicRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Apache Kafka速 cluster that the topic belongs to.
	//
	// To get the cluster ID, make a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the Kafka topic resource to return.
	//
	// To get the name of the topic, make a [TopicService.List] request.
	TopicName     string `protobuf:"bytes,2,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTopicRequest) Reset() {
	*x = GetTopicRequest{}
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopicRequest) ProtoMessage() {}

func (x *GetTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopicRequest.ProtoReflect.Descriptor instead.
func (*GetTopicRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_topic_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetTopicRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetTopicRequest) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

type ListTopicsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Apache Kafka速 cluster to list topics in.
	//
	// To get the cluster ID, make a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return.
	//
	// If the number of available results is larger than [page_size], the service returns a [ListTopicsResponse.next_page_token] that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token.
	//
	// To get the next page of results, set [page_token] to the [ListTopicsResponse.next_page_token] returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTopicsRequest) Reset() {
	*x = ListTopicsRequest{}
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTopicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTopicsRequest) ProtoMessage() {}

func (x *ListTopicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTopicsRequest.ProtoReflect.Descriptor instead.
func (*ListTopicsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_topic_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListTopicsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListTopicsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTopicsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListTopicsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of Kafka topics.
	Topics []*Topic `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	// This token allows you to get the next page of results for list requests.
	//
	// If the number of results is larger than [ListTopicsRequest.page_size], use the [next_page_token] as the value for the [ListTopicsRequest.page_token] parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTopicsResponse) Reset() {
	*x = ListTopicsResponse{}
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTopicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTopicsResponse) ProtoMessage() {}

func (x *ListTopicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTopicsResponse.ProtoReflect.Descriptor instead.
func (*ListTopicsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_topic_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListTopicsResponse) GetTopics() []*Topic {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *ListTopicsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateTopicRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Apache Kafka速 cluster to create a topic in.
	//
	// To get the cluster ID, make a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Configuration of the topic to create.
	TopicSpec     *TopicSpec `protobuf:"bytes,2,opt,name=topic_spec,json=topicSpec,proto3" json:"topic_spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTopicRequest) Reset() {
	*x = CreateTopicRequest{}
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopicRequest) ProtoMessage() {}

func (x *CreateTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopicRequest.ProtoReflect.Descriptor instead.
func (*CreateTopicRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_topic_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateTopicRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateTopicRequest) GetTopicSpec() *TopicSpec {
	if x != nil {
		return x.TopicSpec
	}
	return nil
}

type CreateTopicMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Apache Kafka速 cluster where a topic is being created.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the Kafka topic that is being created.
	TopicName     string `protobuf:"bytes,2,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTopicMetadata) Reset() {
	*x = CreateTopicMetadata{}
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTopicMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopicMetadata) ProtoMessage() {}

func (x *CreateTopicMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopicMetadata.ProtoReflect.Descriptor instead.
func (*CreateTopicMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_topic_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTopicMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateTopicMetadata) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

type UpdateTopicRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Apache Kafka速 cluster to update a topic in.
	//
	// To get the cluster ID, make a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the topic to update.
	//
	// To get the name of the topic, make a [TopicService.List] request.
	TopicName  string                 `protobuf:"bytes,2,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// New configuration of the topic.
	//
	// Use [update_mask] to prevent reverting all topic settings that are not listed in [topic_spec] to their default values.
	TopicSpec     *TopicSpec `protobuf:"bytes,4,opt,name=topic_spec,json=topicSpec,proto3" json:"topic_spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTopicRequest) Reset() {
	*x = UpdateTopicRequest{}
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopicRequest) ProtoMessage() {}

func (x *UpdateTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopicRequest.ProtoReflect.Descriptor instead.
func (*UpdateTopicRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_topic_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateTopicRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateTopicRequest) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *UpdateTopicRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateTopicRequest) GetTopicSpec() *TopicSpec {
	if x != nil {
		return x.TopicSpec
	}
	return nil
}

type UpdateTopicMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Apache Kafka速 cluster where a topic is being updated.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the Kafka topic that is being updated.
	TopicName     string `protobuf:"bytes,2,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTopicMetadata) Reset() {
	*x = UpdateTopicMetadata{}
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTopicMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopicMetadata) ProtoMessage() {}

func (x *UpdateTopicMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopicMetadata.ProtoReflect.Descriptor instead.
func (*UpdateTopicMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_topic_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateTopicMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateTopicMetadata) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

type DeleteTopicRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Apache Kafka速 cluster to delete a topic in.
	//
	// To get the cluster ID, make a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the topic to delete.
	//
	// To get the name of the topic, make a [TopicService.List] request.
	TopicName     string `protobuf:"bytes,2,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTopicRequest) Reset() {
	*x = DeleteTopicRequest{}
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTopicRequest) ProtoMessage() {}

func (x *DeleteTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTopicRequest.ProtoReflect.Descriptor instead.
func (*DeleteTopicRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_topic_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteTopicRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteTopicRequest) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

type DeleteTopicMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Apache Kafka速 cluster where a topic is being deleted.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the Kafka topic that is being deleted.
	TopicName     string `protobuf:"bytes,2,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTopicMetadata) Reset() {
	*x = DeleteTopicMetadata{}
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTopicMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTopicMetadata) ProtoMessage() {}

func (x *DeleteTopicMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_kafka_v1_topic_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTopicMetadata.ProtoReflect.Descriptor instead.
func (*DeleteTopicMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_kafka_v1_topic_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteTopicMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteTopicMetadata) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

var File_yandex_cloud_mdb_kafka_v1_topic_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_mdb_kafka_v1_topic_service_proto_rawDesc = "" +
	"\n" +
	"-yandex/cloud/mdb/kafka/v1/topic_service.proto\x12\x19yandex.cloud.mdb.kafka.v1\x1a\x1cgoogle/api/annotations.proto\x1a google/protobuf/field_mask.proto\x1a yandex/cloud/api/operation.proto\x1a&yandex/cloud/operation/operation.proto\x1a\x1dyandex/cloud/validation.proto\x1a%yandex/cloud/mdb/kafka/v1/topic.proto\"~\n" +
	"\x0fGetTopicRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12>\n" +
	"\n" +
	"topic_name\x18\x02 \x01(\tB\x1f\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x051-256R\ttopicName\"\x93\x01\n" +
	"\x11ListTopicsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"v\n" +
	"\x12ListTopicsResponse\x128\n" +
	"\x06topics\x18\x01 \x03(\v2 .yandex.cloud.mdb.kafka.v1.TopicR\x06topics\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x8c\x01\n" +
	"\x12CreateTopicRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12I\n" +
	"\n" +
	"topic_spec\x18\x02 \x01(\v2$.yandex.cloud.mdb.kafka.v1.TopicSpecB\x04\xe8\xc71\x01R\ttopicSpec\"t\n" +
	"\x13CreateTopicMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12>\n" +
	"\n" +
	"topic_name\x18\x02 \x01(\tB\x1f\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x05<=256R\ttopicName\"\x83\x02\n" +
	"\x12UpdateTopicRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12>\n" +
	"\n" +
	"topic_name\x18\x02 \x01(\tB\x1f\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x051-256R\ttopicName\x12;\n" +
	"\vupdate_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12C\n" +
	"\n" +
	"topic_spec\x18\x04 \x01(\v2$.yandex.cloud.mdb.kafka.v1.TopicSpecR\ttopicSpec\"S\n" +
	"\x13UpdateTopicMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"topic_name\x18\x02 \x01(\tR\ttopicName\"\x81\x01\n" +
	"\x12DeleteTopicRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12>\n" +
	"\n" +
	"topic_name\x18\x02 \x01(\tB\x1f\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x051-256R\ttopicName\"S\n" +
	"\x13DeleteTopicMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"topic_name\x18\x02 \x01(\tR\ttopicName2\x96\a\n" +
	"\fTopicService\x12\x98\x01\n" +
	"\x03Get\x12*.yandex.cloud.mdb.kafka.v1.GetTopicRequest\x1a .yandex.cloud.mdb.kafka.v1.Topic\"C\x82\xd3\xe4\x93\x02=\x12;/managed-kafka/v1/clusters/{cluster_id}/topics/{topic_name}\x12\x9b\x01\n" +
	"\x04List\x12,.yandex.cloud.mdb.kafka.v1.ListTopicsRequest\x1a-.yandex.cloud.mdb.kafka.v1.ListTopicsResponse\"6\x82\xd3\xe4\x93\x020\x12./managed-kafka/v1/clusters/{cluster_id}/topics\x12\xb5\x01\n" +
	"\x06Create\x12-.yandex.cloud.mdb.kafka.v1.CreateTopicRequest\x1a!.yandex.cloud.operation.Operation\"Y\xb2\xd2*\x1c\n" +
	"\x13CreateTopicMetadata\x12\x05Topic\x82\xd3\xe4\x93\x023:\x01*\"./managed-kafka/v1/clusters/{cluster_id}/topics\x12\xc2\x01\n" +
	"\x06Update\x12-.yandex.cloud.mdb.kafka.v1.UpdateTopicRequest\x1a!.yandex.cloud.operation.Operation\"f\xb2\xd2*\x1c\n" +
	"\x13UpdateTopicMetadata\x12\x05Topic\x82\xd3\xe4\x93\x02@:\x01*2;/managed-kafka/v1/clusters/{cluster_id}/topics/{topic_name}\x12\xcf\x01\n" +
	"\x06Delete\x12-.yandex.cloud.mdb.kafka.v1.DeleteTopicRequest\x1a!.yandex.cloud.operation.Operation\"s\xb2\xd2*,\n" +
	"\x13DeleteTopicMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02=*;/managed-kafka/v1/clusters/{cluster_id}/topics/{topic_name}Bd\n" +
	"\x1dyandex.cloud.api.mdb.kafka.v1ZCgithub.com/yandex-cloud/go-genproto/yandex/cloud/mdb/kafka/v1;kafkab\x06proto3"

var (
	file_yandex_cloud_mdb_kafka_v1_topic_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_kafka_v1_topic_service_proto_rawDescData []byte
)

func file_yandex_cloud_mdb_kafka_v1_topic_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_kafka_v1_topic_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_kafka_v1_topic_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_kafka_v1_topic_service_proto_rawDesc), len(file_yandex_cloud_mdb_kafka_v1_topic_service_proto_rawDesc)))
	})
	return file_yandex_cloud_mdb_kafka_v1_topic_service_proto_rawDescData
}

var file_yandex_cloud_mdb_kafka_v1_topic_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_yandex_cloud_mdb_kafka_v1_topic_service_proto_goTypes = []any{
	(*GetTopicRequest)(nil),       // 0: yandex.cloud.mdb.kafka.v1.GetTopicRequest
	(*ListTopicsRequest)(nil),     // 1: yandex.cloud.mdb.kafka.v1.ListTopicsRequest
	(*ListTopicsResponse)(nil),    // 2: yandex.cloud.mdb.kafka.v1.ListTopicsResponse
	(*CreateTopicRequest)(nil),    // 3: yandex.cloud.mdb.kafka.v1.CreateTopicRequest
	(*CreateTopicMetadata)(nil),   // 4: yandex.cloud.mdb.kafka.v1.CreateTopicMetadata
	(*UpdateTopicRequest)(nil),    // 5: yandex.cloud.mdb.kafka.v1.UpdateTopicRequest
	(*UpdateTopicMetadata)(nil),   // 6: yandex.cloud.mdb.kafka.v1.UpdateTopicMetadata
	(*DeleteTopicRequest)(nil),    // 7: yandex.cloud.mdb.kafka.v1.DeleteTopicRequest
	(*DeleteTopicMetadata)(nil),   // 8: yandex.cloud.mdb.kafka.v1.DeleteTopicMetadata
	(*Topic)(nil),                 // 9: yandex.cloud.mdb.kafka.v1.Topic
	(*TopicSpec)(nil),             // 10: yandex.cloud.mdb.kafka.v1.TopicSpec
	(*fieldmaskpb.FieldMask)(nil), // 11: google.protobuf.FieldMask
	(*operation.Operation)(nil),   // 12: yandex.cloud.operation.Operation
}
var file_yandex_cloud_mdb_kafka_v1_topic_service_proto_depIdxs = []int32{
	9,  // 0: yandex.cloud.mdb.kafka.v1.ListTopicsResponse.topics:type_name -> yandex.cloud.mdb.kafka.v1.Topic
	10, // 1: yandex.cloud.mdb.kafka.v1.CreateTopicRequest.topic_spec:type_name -> yandex.cloud.mdb.kafka.v1.TopicSpec
	11, // 2: yandex.cloud.mdb.kafka.v1.UpdateTopicRequest.update_mask:type_name -> google.protobuf.FieldMask
	10, // 3: yandex.cloud.mdb.kafka.v1.UpdateTopicRequest.topic_spec:type_name -> yandex.cloud.mdb.kafka.v1.TopicSpec
	0,  // 4: yandex.cloud.mdb.kafka.v1.TopicService.Get:input_type -> yandex.cloud.mdb.kafka.v1.GetTopicRequest
	1,  // 5: yandex.cloud.mdb.kafka.v1.TopicService.List:input_type -> yandex.cloud.mdb.kafka.v1.ListTopicsRequest
	3,  // 6: yandex.cloud.mdb.kafka.v1.TopicService.Create:input_type -> yandex.cloud.mdb.kafka.v1.CreateTopicRequest
	5,  // 7: yandex.cloud.mdb.kafka.v1.TopicService.Update:input_type -> yandex.cloud.mdb.kafka.v1.UpdateTopicRequest
	7,  // 8: yandex.cloud.mdb.kafka.v1.TopicService.Delete:input_type -> yandex.cloud.mdb.kafka.v1.DeleteTopicRequest
	9,  // 9: yandex.cloud.mdb.kafka.v1.TopicService.Get:output_type -> yandex.cloud.mdb.kafka.v1.Topic
	2,  // 10: yandex.cloud.mdb.kafka.v1.TopicService.List:output_type -> yandex.cloud.mdb.kafka.v1.ListTopicsResponse
	12, // 11: yandex.cloud.mdb.kafka.v1.TopicService.Create:output_type -> yandex.cloud.operation.Operation
	12, // 12: yandex.cloud.mdb.kafka.v1.TopicService.Update:output_type -> yandex.cloud.operation.Operation
	12, // 13: yandex.cloud.mdb.kafka.v1.TopicService.Delete:output_type -> yandex.cloud.operation.Operation
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_kafka_v1_topic_service_proto_init() }
func file_yandex_cloud_mdb_kafka_v1_topic_service_proto_init() {
	if File_yandex_cloud_mdb_kafka_v1_topic_service_proto != nil {
		return
	}
	file_yandex_cloud_mdb_kafka_v1_topic_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_kafka_v1_topic_service_proto_rawDesc), len(file_yandex_cloud_mdb_kafka_v1_topic_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_mdb_kafka_v1_topic_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_kafka_v1_topic_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_mdb_kafka_v1_topic_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_kafka_v1_topic_service_proto = out.File
	file_yandex_cloud_mdb_kafka_v1_topic_service_proto_goTypes = nil
	file_yandex_cloud_mdb_kafka_v1_topic_service_proto_depIdxs = nil
}

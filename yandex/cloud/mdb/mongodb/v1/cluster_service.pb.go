// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/mdb/mongodb/v1/cluster_service.proto

package mongodb

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	config "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/mongodb/v1/config"
	v1 "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/operationlog/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	timeofday "google.golang.org/genproto/googleapis/type/timeofday"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RescheduleMaintenanceRequest_RescheduleType int32

const (
	RescheduleMaintenanceRequest_RESCHEDULE_TYPE_UNSPECIFIED RescheduleMaintenanceRequest_RescheduleType = 0
	// Start the maintenance operation immediately.
	RescheduleMaintenanceRequest_IMMEDIATE RescheduleMaintenanceRequest_RescheduleType = 1
	// Start the maintenance operation within the next available maintenance window.
	RescheduleMaintenanceRequest_NEXT_AVAILABLE_WINDOW RescheduleMaintenanceRequest_RescheduleType = 2
	// Start the maintenance operation at the specific time.
	RescheduleMaintenanceRequest_SPECIFIC_TIME RescheduleMaintenanceRequest_RescheduleType = 3
)

// Enum value maps for RescheduleMaintenanceRequest_RescheduleType.
var (
	RescheduleMaintenanceRequest_RescheduleType_name = map[int32]string{
		0: "RESCHEDULE_TYPE_UNSPECIFIED",
		1: "IMMEDIATE",
		2: "NEXT_AVAILABLE_WINDOW",
		3: "SPECIFIC_TIME",
	}
	RescheduleMaintenanceRequest_RescheduleType_value = map[string]int32{
		"RESCHEDULE_TYPE_UNSPECIFIED": 0,
		"IMMEDIATE":                   1,
		"NEXT_AVAILABLE_WINDOW":       2,
		"SPECIFIC_TIME":               3,
	}
)

func (x RescheduleMaintenanceRequest_RescheduleType) Enum() *RescheduleMaintenanceRequest_RescheduleType {
	p := new(RescheduleMaintenanceRequest_RescheduleType)
	*p = x
	return p
}

func (x RescheduleMaintenanceRequest_RescheduleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RescheduleMaintenanceRequest_RescheduleType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_enumTypes[0].Descriptor()
}

func (RescheduleMaintenanceRequest_RescheduleType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_enumTypes[0]
}

func (x RescheduleMaintenanceRequest_RescheduleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RescheduleMaintenanceRequest_RescheduleType.Descriptor instead.
func (RescheduleMaintenanceRequest_RescheduleType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{19, 0}
}

type ListClusterLogsRequest_ServiceType int32

const (
	ListClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED ListClusterLogsRequest_ServiceType = 0
	// Logs of MongoDB activity.
	ListClusterLogsRequest_MONGOD   ListClusterLogsRequest_ServiceType = 1
	ListClusterLogsRequest_MONGOS   ListClusterLogsRequest_ServiceType = 2
	ListClusterLogsRequest_MONGOCFG ListClusterLogsRequest_ServiceType = 3
	// MongoDB Enterprise audit logs
	ListClusterLogsRequest_AUDIT ListClusterLogsRequest_ServiceType = 4
)

// Enum value maps for ListClusterLogsRequest_ServiceType.
var (
	ListClusterLogsRequest_ServiceType_name = map[int32]string{
		0: "SERVICE_TYPE_UNSPECIFIED",
		1: "MONGOD",
		2: "MONGOS",
		3: "MONGOCFG",
		4: "AUDIT",
	}
	ListClusterLogsRequest_ServiceType_value = map[string]int32{
		"SERVICE_TYPE_UNSPECIFIED": 0,
		"MONGOD":                   1,
		"MONGOS":                   2,
		"MONGOCFG":                 3,
		"AUDIT":                    4,
	}
)

func (x ListClusterLogsRequest_ServiceType) Enum() *ListClusterLogsRequest_ServiceType {
	p := new(ListClusterLogsRequest_ServiceType)
	*p = x
	return p
}

func (x ListClusterLogsRequest_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListClusterLogsRequest_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_enumTypes[1].Descriptor()
}

func (ListClusterLogsRequest_ServiceType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_enumTypes[1]
}

func (x ListClusterLogsRequest_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListClusterLogsRequest_ServiceType.Descriptor instead.
func (ListClusterLogsRequest_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{22, 0}
}

type StreamClusterLogsRequest_ServiceType int32

const (
	StreamClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED StreamClusterLogsRequest_ServiceType = 0
	// Logs of MongoDB activity.
	StreamClusterLogsRequest_MONGOD   StreamClusterLogsRequest_ServiceType = 1
	StreamClusterLogsRequest_MONGOS   StreamClusterLogsRequest_ServiceType = 2
	StreamClusterLogsRequest_MONGOCFG StreamClusterLogsRequest_ServiceType = 3
	// MongoDB Enterprise audit logs
	StreamClusterLogsRequest_AUDIT StreamClusterLogsRequest_ServiceType = 4
)

// Enum value maps for StreamClusterLogsRequest_ServiceType.
var (
	StreamClusterLogsRequest_ServiceType_name = map[int32]string{
		0: "SERVICE_TYPE_UNSPECIFIED",
		1: "MONGOD",
		2: "MONGOS",
		3: "MONGOCFG",
		4: "AUDIT",
	}
	StreamClusterLogsRequest_ServiceType_value = map[string]int32{
		"SERVICE_TYPE_UNSPECIFIED": 0,
		"MONGOD":                   1,
		"MONGOS":                   2,
		"MONGOCFG":                 3,
		"AUDIT":                    4,
	}
)

func (x StreamClusterLogsRequest_ServiceType) Enum() *StreamClusterLogsRequest_ServiceType {
	p := new(StreamClusterLogsRequest_ServiceType)
	*p = x
	return p
}

func (x StreamClusterLogsRequest_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamClusterLogsRequest_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_enumTypes[2].Descriptor()
}

func (StreamClusterLogsRequest_ServiceType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_enumTypes[2]
}

func (x StreamClusterLogsRequest_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamClusterLogsRequest_ServiceType.Descriptor instead.
func (StreamClusterLogsRequest_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{25, 0}
}

type GetClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB Cluster resource to return.
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterRequest) Reset() {
	*x = GetClusterRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterRequest) ProtoMessage() {}

func (x *GetClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterRequest.ProtoReflect.Descriptor instead.
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ListClustersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to list MongoDB clusters in.
	// To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClustersResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Acceptable values are 0 to 1000, inclusive. Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token]
	// to the [ListClustersResponse.next_page_token] returned by the previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression must specify:
	// 1. The field name. Currently you can only use filtering with the [Cluster.name] field.
	// 2. An `=` operator.
	// 3. The value in double quotes (`"`). Must be 1-63 characters long and match the regular expression `[a-zA-Z0-9_-]+`.
	Filter        string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListClustersRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListClustersRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClustersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListClustersRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListClustersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of MongoDB Cluster resources.
	Clusters []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClustersRequest.page_size], use the [next_page_token] as the value
	// for the [ListClustersRequest.page_token] parameter in the next list request. Each subsequent
	// list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersResponse) Reset() {
	*x = ListClustersResponse{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersResponse) ProtoMessage() {}

func (x *ListClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersResponse.ProtoReflect.Descriptor instead.
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListClustersResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ListClustersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to create MongoDB cluster in.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the MongoDB cluster. The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the MongoDB cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the MongoDB cluster as “ key:value “ pairs. Maximum 64 per resource.
	// For example, "project": "mvp" or "source": "dictionary".
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Deployment environment of the MongoDB cluster.
	Environment Cluster_Environment `protobuf:"varint,5,opt,name=environment,proto3,enum=yandex.cloud.mdb.mongodb.v1.Cluster_Environment" json:"environment,omitempty"`
	// Configuration and resources for hosts that should be created for the MongoDB cluster.
	ConfigSpec *ConfigSpec `protobuf:"bytes,6,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// Descriptions of databases to be created in the MongoDB cluster.
	DatabaseSpecs []*DatabaseSpec `protobuf:"bytes,7,rep,name=database_specs,json=databaseSpecs,proto3" json:"database_specs,omitempty"`
	// Descriptions of database users to be created in the MongoDB cluster.
	UserSpecs []*UserSpec `protobuf:"bytes,8,rep,name=user_specs,json=userSpecs,proto3" json:"user_specs,omitempty"`
	// Individual configurations for hosts that should be created for the MongoDB cluster.
	HostSpecs []*HostSpec `protobuf:"bytes,9,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// ID of the network to create the cluster in.
	NetworkId string `protobuf:"bytes,10,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// User security groups
	SecurityGroupIds []string `protobuf:"bytes,11,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// Deletion Protection inhibits deletion of the cluster
	DeletionProtection bool `protobuf:"varint,12,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// Maintenance window settings for the cluster.
	MaintenanceWindow *MaintenanceWindow `protobuf:"bytes,13,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"`
	// ID of the key to encrypt cluster disks.
	DiskEncryptionKeyId *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=disk_encryption_key_id,json=diskEncryptionKeyId,proto3" json:"disk_encryption_key_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CreateClusterRequest) Reset() {
	*x = CreateClusterRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterRequest) ProtoMessage() {}

func (x *CreateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateClusterRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateClusterRequest) GetEnvironment() Cluster_Environment {
	if x != nil {
		return x.Environment
	}
	return Cluster_ENVIRONMENT_UNSPECIFIED
}

func (x *CreateClusterRequest) GetConfigSpec() *ConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *CreateClusterRequest) GetDatabaseSpecs() []*DatabaseSpec {
	if x != nil {
		return x.DatabaseSpecs
	}
	return nil
}

func (x *CreateClusterRequest) GetUserSpecs() []*UserSpec {
	if x != nil {
		return x.UserSpecs
	}
	return nil
}

func (x *CreateClusterRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

func (x *CreateClusterRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *CreateClusterRequest) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *CreateClusterRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *CreateClusterRequest) GetMaintenanceWindow() *MaintenanceWindow {
	if x != nil {
		return x.MaintenanceWindow
	}
	return nil
}

func (x *CreateClusterRequest) GetDiskEncryptionKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.DiskEncryptionKeyId
	}
	return nil
}

type CreateClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster that is being created.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Log of actions during operation
	OperationLog  *v1.OperationLog `protobuf:"bytes,2,opt,name=operation_log,json=operationLog,proto3" json:"operation_log,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClusterMetadata) Reset() {
	*x = CreateClusterMetadata{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterMetadata) ProtoMessage() {}

func (x *CreateClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterMetadata.ProtoReflect.Descriptor instead.
func (*CreateClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CreateClusterMetadata) GetOperationLog() *v1.OperationLog {
	if x != nil {
		return x.OperationLog
	}
	return nil
}

type UpdateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB Cluster resource to update.
	// To get the MongoDB cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Field mask that specifies which fields of the MongoDB Cluster resource should be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// New description of the MongoDB cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the MongoDB cluster as “ key:value “ pairs. Maximum 64 per resource.
	// For example, "project": "mvp" or "source": "dictionary".
	//
	// The new set of labels will completely replace the old ones. To add a label, request the current
	// set with the [ClusterService.Get] method, then send an [ClusterService.Update] request with the new label added to the set.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// New configuration and resources for hosts in the cluster.
	ConfigSpec *ConfigSpec `protobuf:"bytes,5,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// New name for the cluster.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// New maintenance window settings for the cluster.
	MaintenanceWindow *MaintenanceWindow `protobuf:"bytes,7,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"`
	// User security groups
	SecurityGroupIds []string `protobuf:"bytes,8,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// Deletion Protection inhibits deletion of the cluster
	DeletionProtection bool `protobuf:"varint,9,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// ID of the network to move the cluster to.
	NetworkId     string `protobuf:"bytes,10,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterRequest) Reset() {
	*x = UpdateClusterRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterRequest) ProtoMessage() {}

func (x *UpdateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateClusterRequest) GetConfigSpec() *ConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *UpdateClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateClusterRequest) GetMaintenanceWindow() *MaintenanceWindow {
	if x != nil {
		return x.MaintenanceWindow
	}
	return nil
}

func (x *UpdateClusterRequest) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *UpdateClusterRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *UpdateClusterRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type UpdateClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB Cluster resource that is being updated.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Log of actions during operation
	OperationLog  *v1.OperationLog `protobuf:"bytes,2,opt,name=operation_log,json=operationLog,proto3" json:"operation_log,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterMetadata) Reset() {
	*x = UpdateClusterMetadata{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterMetadata) ProtoMessage() {}

func (x *UpdateClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterMetadata.ProtoReflect.Descriptor instead.
func (*UpdateClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterMetadata) GetOperationLog() *v1.OperationLog {
	if x != nil {
		return x.OperationLog
	}
	return nil
}

type DeleteClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster to delete.
	// To get the MongoDB cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type DeleteClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster that is being deleted.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterMetadata) Reset() {
	*x = DeleteClusterMetadata{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterMetadata) ProtoMessage() {}

func (x *DeleteClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterMetadata.ProtoReflect.Descriptor instead.
func (*DeleteClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StartClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster to start.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterRequest) Reset() {
	*x = StartClusterRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterRequest) ProtoMessage() {}

func (x *StartClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterRequest.ProtoReflect.Descriptor instead.
func (*StartClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{9}
}

func (x *StartClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StartClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterMetadata) Reset() {
	*x = StartClusterMetadata{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterMetadata) ProtoMessage() {}

func (x *StartClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterMetadata.ProtoReflect.Descriptor instead.
func (*StartClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{10}
}

func (x *StartClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StopClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster to stop.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopClusterRequest) Reset() {
	*x = StopClusterRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClusterRequest) ProtoMessage() {}

func (x *StopClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClusterRequest.ProtoReflect.Descriptor instead.
func (*StopClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{11}
}

func (x *StopClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StopClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopClusterMetadata) Reset() {
	*x = StopClusterMetadata{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClusterMetadata) ProtoMessage() {}

func (x *StopClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClusterMetadata.ProtoReflect.Descriptor instead.
func (*StopClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{12}
}

func (x *StopClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type MoveClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster to move.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the destination folder.
	DestinationFolderId string `protobuf:"bytes,2,opt,name=destination_folder_id,json=destinationFolderId,proto3" json:"destination_folder_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MoveClusterRequest) Reset() {
	*x = MoveClusterRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveClusterRequest) ProtoMessage() {}

func (x *MoveClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveClusterRequest.ProtoReflect.Descriptor instead.
func (*MoveClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{13}
}

func (x *MoveClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *MoveClusterRequest) GetDestinationFolderId() string {
	if x != nil {
		return x.DestinationFolderId
	}
	return ""
}

type MoveClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster being moved.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the source folder.
	SourceFolderId string `protobuf:"bytes,2,opt,name=source_folder_id,json=sourceFolderId,proto3" json:"source_folder_id,omitempty"`
	// ID of the destnation folder.
	DestinationFolderId string `protobuf:"bytes,3,opt,name=destination_folder_id,json=destinationFolderId,proto3" json:"destination_folder_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MoveClusterMetadata) Reset() {
	*x = MoveClusterMetadata{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveClusterMetadata) ProtoMessage() {}

func (x *MoveClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveClusterMetadata.ProtoReflect.Descriptor instead.
func (*MoveClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{14}
}

func (x *MoveClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *MoveClusterMetadata) GetSourceFolderId() string {
	if x != nil {
		return x.SourceFolderId
	}
	return ""
}

func (x *MoveClusterMetadata) GetDestinationFolderId() string {
	if x != nil {
		return x.DestinationFolderId
	}
	return ""
}

type BackupClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster to back up.
	// To get the MongoDB cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupClusterRequest) Reset() {
	*x = BackupClusterRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupClusterRequest) ProtoMessage() {}

func (x *BackupClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupClusterRequest.ProtoReflect.Descriptor instead.
func (*BackupClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{15}
}

func (x *BackupClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type BackupClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster that is being backed up.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupClusterMetadata) Reset() {
	*x = BackupClusterMetadata{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupClusterMetadata) ProtoMessage() {}

func (x *BackupClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupClusterMetadata.ProtoReflect.Descriptor instead.
func (*BackupClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{16}
}

func (x *BackupClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type RestoreClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the backup to create a cluster from.
	// To get the backup ID, use a [ClusterService.ListBackups] request.
	BackupId string `protobuf:"bytes,1,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	// Name of the new MongoDB cluster. The name must be unique within the folder.
	// The name can't be changed after the MongoDB cluster is created.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the new MongoDB cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the MongoDB cluster as “ key:value “ pairs. Maximum 64 per resource.
	// For example, "project": "mvp" or "source": "dictionary".
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Deployment environment of the new MongoDB cluster.
	Environment Cluster_Environment `protobuf:"varint,5,opt,name=environment,proto3,enum=yandex.cloud.mdb.mongodb.v1.Cluster_Environment" json:"environment,omitempty"`
	// Configuration for the MongoDB cluster to be created.
	ConfigSpec *ConfigSpec `protobuf:"bytes,6,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// Configurations for MongoDB hosts that should be created for
	// the cluster that is being created from the backup.
	HostSpecs []*HostSpec `protobuf:"bytes,7,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// ID of the network to create the MongoDB cluster in.
	NetworkId string `protobuf:"bytes,8,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Required. ID of the folder to create the MongoDB cluster in.
	FolderId string `protobuf:"bytes,9,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Specification of the moment to which the MongoDB cluster should be restored.
	RecoveryTargetSpec *RestoreClusterRequest_RecoveryTargetSpec `protobuf:"bytes,10,opt,name=recovery_target_spec,json=recoveryTargetSpec,proto3" json:"recovery_target_spec,omitempty"`
	// User security groups
	SecurityGroupIds []string `protobuf:"bytes,11,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// Deletion Protection inhibits deletion of the cluster
	DeletionProtection bool `protobuf:"varint,12,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// Maintenance window settings for the cluster.
	MaintenanceWindow *MaintenanceWindow `protobuf:"bytes,13,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"`
	// ID of the key to encrypt cluster disks.
	DiskEncryptionKeyId *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=disk_encryption_key_id,json=diskEncryptionKeyId,proto3" json:"disk_encryption_key_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RestoreClusterRequest) Reset() {
	*x = RestoreClusterRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreClusterRequest) ProtoMessage() {}

func (x *RestoreClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreClusterRequest.ProtoReflect.Descriptor instead.
func (*RestoreClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{17}
}

func (x *RestoreClusterRequest) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

func (x *RestoreClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RestoreClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RestoreClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RestoreClusterRequest) GetEnvironment() Cluster_Environment {
	if x != nil {
		return x.Environment
	}
	return Cluster_ENVIRONMENT_UNSPECIFIED
}

func (x *RestoreClusterRequest) GetConfigSpec() *ConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *RestoreClusterRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

func (x *RestoreClusterRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *RestoreClusterRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *RestoreClusterRequest) GetRecoveryTargetSpec() *RestoreClusterRequest_RecoveryTargetSpec {
	if x != nil {
		return x.RecoveryTargetSpec
	}
	return nil
}

func (x *RestoreClusterRequest) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *RestoreClusterRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *RestoreClusterRequest) GetMaintenanceWindow() *MaintenanceWindow {
	if x != nil {
		return x.MaintenanceWindow
	}
	return nil
}

func (x *RestoreClusterRequest) GetDiskEncryptionKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.DiskEncryptionKeyId
	}
	return nil
}

type RestoreClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the new MongoDB cluster that is being created from a backup.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the backup that is being used for creating a cluster.
	BackupId      string `protobuf:"bytes,2,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestoreClusterMetadata) Reset() {
	*x = RestoreClusterMetadata{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreClusterMetadata) ProtoMessage() {}

func (x *RestoreClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreClusterMetadata.ProtoReflect.Descriptor instead.
func (*RestoreClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{18}
}

func (x *RestoreClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RestoreClusterMetadata) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

type RescheduleMaintenanceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster to reschedule the maintenance operation for.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The type of reschedule request.
	RescheduleType RescheduleMaintenanceRequest_RescheduleType `protobuf:"varint,2,opt,name=reschedule_type,json=rescheduleType,proto3,enum=yandex.cloud.mdb.mongodb.v1.RescheduleMaintenanceRequest_RescheduleType" json:"reschedule_type,omitempty"`
	// The time until which this maintenance operation should be delayed. The value should be ahead of the first time when the maintenance operation has been scheduled for no more than two weeks. The value can also point to the past moment of time if [reschedule_type.IMMEDIATE] reschedule type is chosen.
	DelayedUntil  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=delayed_until,json=delayedUntil,proto3" json:"delayed_until,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RescheduleMaintenanceRequest) Reset() {
	*x = RescheduleMaintenanceRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RescheduleMaintenanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RescheduleMaintenanceRequest) ProtoMessage() {}

func (x *RescheduleMaintenanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RescheduleMaintenanceRequest.ProtoReflect.Descriptor instead.
func (*RescheduleMaintenanceRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{19}
}

func (x *RescheduleMaintenanceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RescheduleMaintenanceRequest) GetRescheduleType() RescheduleMaintenanceRequest_RescheduleType {
	if x != nil {
		return x.RescheduleType
	}
	return RescheduleMaintenanceRequest_RESCHEDULE_TYPE_UNSPECIFIED
}

func (x *RescheduleMaintenanceRequest) GetDelayedUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.DelayedUntil
	}
	return nil
}

// Rescheduled maintenance operation metadata.
type RescheduleMaintenanceMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ID of the MongoDB cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required. The time until which this maintenance operation is to be delayed.
	DelayedUntil  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=delayed_until,json=delayedUntil,proto3" json:"delayed_until,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RescheduleMaintenanceMetadata) Reset() {
	*x = RescheduleMaintenanceMetadata{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RescheduleMaintenanceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RescheduleMaintenanceMetadata) ProtoMessage() {}

func (x *RescheduleMaintenanceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RescheduleMaintenanceMetadata.ProtoReflect.Descriptor instead.
func (*RescheduleMaintenanceMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{20}
}

func (x *RescheduleMaintenanceMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RescheduleMaintenanceMetadata) GetDelayedUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.DelayedUntil
	}
	return nil
}

type LogRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Log record timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Contents of the log record.
	Message       map[string]string `protobuf:"bytes,2,rep,name=message,proto3" json:"message,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogRecord) Reset() {
	*x = LogRecord{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRecord) ProtoMessage() {}

func (x *LogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRecord.ProtoReflect.Descriptor instead.
func (*LogRecord) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{21}
}

func (x *LogRecord) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LogRecord) GetMessage() map[string]string {
	if x != nil {
		return x.Message
	}
	return nil
}

type ListClusterLogsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster to request logs for.
	// To get the MongoDB cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Columns from the logs table to request.
	// If no columns are specified, entire log records are returned.
	ColumnFilter []string `protobuf:"bytes,2,rep,name=column_filter,json=columnFilter,proto3" json:"column_filter,omitempty"`
	// Type of the service to request logs about.
	ServiceType ListClusterLogsRequest_ServiceType `protobuf:"varint,3,opt,name=service_type,json=serviceType,proto3,enum=yandex.cloud.mdb.mongodb.v1.ListClusterLogsRequest_ServiceType" json:"service_type,omitempty"`
	// Start timestamp for the logs request, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	FromTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=from_time,json=fromTime,proto3" json:"from_time,omitempty"`
	// End timestamp for the logs request, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	ToTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=to_time,json=toTime,proto3" json:"to_time,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterLogsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Acceptable values are 0 to 1000, inclusive. Default value: 100.
	PageSize int64 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListClusterLogsResponse.next_page_token] returned by the previous list request.
	PageToken     string `protobuf:"bytes,7,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterLogsRequest) Reset() {
	*x = ListClusterLogsRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterLogsRequest) ProtoMessage() {}

func (x *ListClusterLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterLogsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterLogsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{22}
}

func (x *ListClusterLogsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterLogsRequest) GetColumnFilter() []string {
	if x != nil {
		return x.ColumnFilter
	}
	return nil
}

func (x *ListClusterLogsRequest) GetServiceType() ListClusterLogsRequest_ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return ListClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED
}

func (x *ListClusterLogsRequest) GetFromTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FromTime
	}
	return nil
}

func (x *ListClusterLogsRequest) GetToTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ToTime
	}
	return nil
}

func (x *ListClusterLogsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterLogsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterLogsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Requested log records.
	Logs []*LogRecord `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterLogsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterLogsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	// This value is interchangeable with `next_record_token` from StreamLogs method.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterLogsResponse) Reset() {
	*x = ListClusterLogsResponse{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterLogsResponse) ProtoMessage() {}

func (x *ListClusterLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterLogsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterLogsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{23}
}

func (x *ListClusterLogsResponse) GetLogs() []*LogRecord {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *ListClusterLogsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type StreamLogRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// One of the requested log records.
	Record *LogRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	// This token allows you to continue streaming logs starting from the exact
	// same record. To continue streaming, specify value of `next_record_token`
	// as value for `record_token` parameter in the next StreamLogs request.
	// This value is interchangeable with `next_page_token` from ListLogs method.
	NextRecordToken string `protobuf:"bytes,2,opt,name=next_record_token,json=nextRecordToken,proto3" json:"next_record_token,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StreamLogRecord) Reset() {
	*x = StreamLogRecord{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamLogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamLogRecord) ProtoMessage() {}

func (x *StreamLogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamLogRecord.ProtoReflect.Descriptor instead.
func (*StreamLogRecord) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{24}
}

func (x *StreamLogRecord) GetRecord() *LogRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *StreamLogRecord) GetNextRecordToken() string {
	if x != nil {
		return x.NextRecordToken
	}
	return ""
}

type StreamClusterLogsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ID of the MongoDB cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Columns from logs table to get in the response.
	ColumnFilter []string                             `protobuf:"bytes,2,rep,name=column_filter,json=columnFilter,proto3" json:"column_filter,omitempty"`
	ServiceType  StreamClusterLogsRequest_ServiceType `protobuf:"varint,3,opt,name=service_type,json=serviceType,proto3,enum=yandex.cloud.mdb.mongodb.v1.StreamClusterLogsRequest_ServiceType" json:"service_type,omitempty"`
	// Start timestamp for the logs request.
	FromTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=from_time,json=fromTime,proto3" json:"from_time,omitempty"`
	// End timestamp for the logs request.
	// If this field is not set, all existing logs will be sent and then the new ones as
	// they appear. In essence it has 'tail -f' semantics.
	ToTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=to_time,json=toTime,proto3" json:"to_time,omitempty"`
	// Record token. Set `record_token` to the `next_record_token` returned by a previous StreamLogs
	// request to start streaming from next log record.
	RecordToken string `protobuf:"bytes,6,opt,name=record_token,json=recordToken,proto3" json:"record_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression must specify:
	// 1. The field name. Currently filtering can be applied to the [LogRecord.logs.message.hostname], [LogRecord.logs.message.severity] fields.
	// 2. An `=` operator.
	// 3. The value in double quotes (`"`). Must be 1-63 characters long and match the regular expression `[a-z0-9.-]{1,61}`.
	// Examples of a filter: `message.hostname='node1.db.cloud.yandex.net'`, `message.severity IN ('E', 'F')`
	Filter        string `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamClusterLogsRequest) Reset() {
	*x = StreamClusterLogsRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamClusterLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamClusterLogsRequest) ProtoMessage() {}

func (x *StreamClusterLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamClusterLogsRequest.ProtoReflect.Descriptor instead.
func (*StreamClusterLogsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{25}
}

func (x *StreamClusterLogsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *StreamClusterLogsRequest) GetColumnFilter() []string {
	if x != nil {
		return x.ColumnFilter
	}
	return nil
}

func (x *StreamClusterLogsRequest) GetServiceType() StreamClusterLogsRequest_ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return StreamClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED
}

func (x *StreamClusterLogsRequest) GetFromTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FromTime
	}
	return nil
}

func (x *StreamClusterLogsRequest) GetToTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ToTime
	}
	return nil
}

func (x *StreamClusterLogsRequest) GetRecordToken() string {
	if x != nil {
		return x.RecordToken
	}
	return ""
}

func (x *StreamClusterLogsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListClusterOperationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB Cluster resource to list operations for.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterOperationsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Acceptable values are 0 to 1000, inclusive. Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListClusterOperationsResponse.next_page_token] returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterOperationsRequest) Reset() {
	*x = ListClusterOperationsRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterOperationsRequest) ProtoMessage() {}

func (x *ListClusterOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterOperationsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{26}
}

func (x *ListClusterOperationsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterOperationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterOperationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterOperationsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of Operation resources for the specified MongoDB cluster.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterOperationsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterOperationsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterOperationsResponse) Reset() {
	*x = ListClusterOperationsResponse{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterOperationsResponse) ProtoMessage() {}

func (x *ListClusterOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterOperationsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{27}
}

func (x *ListClusterOperationsResponse) GetOperations() []*operation.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListClusterOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListClusterBackupsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster.
	// To get the MongoDB cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterBackupsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Acceptable values are 0 to 1000, inclusive. Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token.  To get the next page of results, set [page_token] to the
	// [ListClusterBackupsResponse.next_page_token] returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterBackupsRequest) Reset() {
	*x = ListClusterBackupsRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterBackupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterBackupsRequest) ProtoMessage() {}

func (x *ListClusterBackupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterBackupsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterBackupsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{28}
}

func (x *ListClusterBackupsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterBackupsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterBackupsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterBackupsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of MongoDB Backup resources.
	Backups []*Backup `protobuf:"bytes,1,rep,name=backups,proto3" json:"backups,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterBackupsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterBackupsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterBackupsResponse) Reset() {
	*x = ListClusterBackupsResponse{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterBackupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterBackupsResponse) ProtoMessage() {}

func (x *ListClusterBackupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterBackupsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterBackupsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{29}
}

func (x *ListClusterBackupsResponse) GetBackups() []*Backup {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *ListClusterBackupsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster.
	// To get the MongoDB cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterHostsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Acceptable values are 0 to 1000, inclusive. Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListClusterHostsResponse.next_page_token] returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterHostsRequest) Reset() {
	*x = ListClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterHostsRequest) ProtoMessage() {}

func (x *ListClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{30}
}

func (x *ListClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterHostsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterHostsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterHostsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of Host resources.
	Hosts []*Host `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterHostsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterHostsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterHostsResponse) Reset() {
	*x = ListClusterHostsResponse{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterHostsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterHostsResponse) ProtoMessage() {}

func (x *ListClusterHostsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterHostsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterHostsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{31}
}

func (x *ListClusterHostsResponse) GetHosts() []*Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *ListClusterHostsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type AddClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster to add hosts to.
	// To get the MongoDB cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Configurations for MongoDB hosts that should be added to the cluster.
	HostSpecs     []*HostSpec `protobuf:"bytes,2,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterHostsRequest) Reset() {
	*x = AddClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterHostsRequest) ProtoMessage() {}

func (x *AddClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*AddClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{32}
}

func (x *AddClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterHostsRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

type AddClusterHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster to which the hosts are being added.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts that are being added to the cluster.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterHostsMetadata) Reset() {
	*x = AddClusterHostsMetadata{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterHostsMetadata) ProtoMessage() {}

func (x *AddClusterHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterHostsMetadata.ProtoReflect.Descriptor instead.
func (*AddClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{33}
}

func (x *AddClusterHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterHostsMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type DeleteClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster to remove hosts from.
	// To get the MongoDB cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts to delete.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterHostsRequest) Reset() {
	*x = DeleteClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterHostsRequest) ProtoMessage() {}

func (x *DeleteClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterHostsRequest) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type DeleteClusterHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster to remove hosts from.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts that are being deleted.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterHostsMetadata) Reset() {
	*x = DeleteClusterHostsMetadata{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterHostsMetadata) ProtoMessage() {}

func (x *DeleteClusterHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterHostsMetadata.ProtoReflect.Descriptor instead.
func (*DeleteClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteClusterHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterHostsMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type UpdateClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster to update hosts from.
	// To get the MongoDB cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// New configurations to apply to hosts of a Managed Service for MongoDB cluster.
	UpdateHostSpecs []*UpdateHostSpec `protobuf:"bytes,2,rep,name=update_host_specs,json=updateHostSpecs,proto3" json:"update_host_specs,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateClusterHostsRequest) Reset() {
	*x = UpdateClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterHostsRequest) ProtoMessage() {}

func (x *UpdateClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterHostsRequest) GetUpdateHostSpecs() []*UpdateHostSpec {
	if x != nil {
		return x.UpdateHostSpecs
	}
	return nil
}

type UpdateClusterHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster to update host from.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of host that are being updated.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterHostsMetadata) Reset() {
	*x = UpdateClusterHostsMetadata{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterHostsMetadata) ProtoMessage() {}

func (x *UpdateClusterHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterHostsMetadata.ProtoReflect.Descriptor instead.
func (*UpdateClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateClusterHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterHostsMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type UpdateHostSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Host to be updated. Specify the [host FQDN](https://yandex.cloud/en/docs/managed-mongodb/operations/connect/#fqdn).
	HostName string `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// Determines if the host is a hidden replica set member.
	//
	// Such members cannot become primary in a replica set, and they are invisible to client applications. However, hidden members can participate in elections of the primary host. For more information, see the [MongoDB documentation](https://www.mongodb.com/docs/manual/core/replica-set-hidden-member/).
	Hidden *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// The time, in seconds, by which the given replica set member lags behind the primary host.
	SecondaryDelaySecs *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=secondary_delay_secs,json=secondaryDelaySecs,proto3" json:"secondary_delay_secs,omitempty"`
	// Priority of the host to be elected as the primary in the replica set.
	//
	// The minimum value is `0` if the Managed Service for MongoDB cluster contains three or more secondary hosts. Otherwise, the minimum value is `1`.
	Priority *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=priority,proto3" json:"priority,omitempty"`
	// Determines whether the host should get a public IP address after the update.
	AssignPublicIp bool `protobuf:"varint,5,opt,name=assign_public_ip,json=assignPublicIp,proto3" json:"assign_public_ip,omitempty"`
	// Field mask that specifies which fields of the MongoDB host should be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,6,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Host tag list that contains key-value pairs for the given replica set member. For more information about how to specify the tags and what values to choose, see the [MongoDB documentation](https://www.mongodb.com/docs/manual/reference/replica-configuration/#mongodb-rsconf-rsconf.members-n-.tags).
	Tags          map[string]string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateHostSpec) Reset() {
	*x = UpdateHostSpec{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHostSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHostSpec) ProtoMessage() {}

func (x *UpdateHostSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHostSpec.ProtoReflect.Descriptor instead.
func (*UpdateHostSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateHostSpec) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *UpdateHostSpec) GetHidden() *wrapperspb.BoolValue {
	if x != nil {
		return x.Hidden
	}
	return nil
}

func (x *UpdateHostSpec) GetSecondaryDelaySecs() *wrapperspb.Int64Value {
	if x != nil {
		return x.SecondaryDelaySecs
	}
	return nil
}

func (x *UpdateHostSpec) GetPriority() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *UpdateHostSpec) GetAssignPublicIp() bool {
	if x != nil {
		return x.AssignPublicIp
	}
	return false
}

func (x *UpdateHostSpec) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateHostSpec) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type EnableClusterShardingRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster to enable sharding for.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// mongocfg specification for sharding.
	Mongocfg *EnableClusterShardingRequest_MongoCfg `protobuf:"bytes,2,opt,name=mongocfg,proto3" json:"mongocfg,omitempty"`
	// mongos specification for sharding.
	Mongos *EnableClusterShardingRequest_Mongos `protobuf:"bytes,3,opt,name=mongos,proto3" json:"mongos,omitempty"`
	// Configurations for mongos and mongocfg hosts.
	HostSpecs []*HostSpec `protobuf:"bytes,4,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// mongos specification for sharding.
	Mongoinfra    *EnableClusterShardingRequest_MongoInfra `protobuf:"bytes,5,opt,name=mongoinfra,proto3" json:"mongoinfra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableClusterShardingRequest) Reset() {
	*x = EnableClusterShardingRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableClusterShardingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableClusterShardingRequest) ProtoMessage() {}

func (x *EnableClusterShardingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableClusterShardingRequest.ProtoReflect.Descriptor instead.
func (*EnableClusterShardingRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{39}
}

func (x *EnableClusterShardingRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *EnableClusterShardingRequest) GetMongocfg() *EnableClusterShardingRequest_MongoCfg {
	if x != nil {
		return x.Mongocfg
	}
	return nil
}

func (x *EnableClusterShardingRequest) GetMongos() *EnableClusterShardingRequest_Mongos {
	if x != nil {
		return x.Mongos
	}
	return nil
}

func (x *EnableClusterShardingRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

func (x *EnableClusterShardingRequest) GetMongoinfra() *EnableClusterShardingRequest_MongoInfra {
	if x != nil {
		return x.Mongoinfra
	}
	return nil
}

type EnableClusterShardingMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster that sharding is being enabled for.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableClusterShardingMetadata) Reset() {
	*x = EnableClusterShardingMetadata{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableClusterShardingMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableClusterShardingMetadata) ProtoMessage() {}

func (x *EnableClusterShardingMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableClusterShardingMetadata.ProtoReflect.Descriptor instead.
func (*EnableClusterShardingMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{40}
}

func (x *EnableClusterShardingMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type GetClusterShardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster that the shard belongs to.
	// To get the cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the MongoDB shard to return.
	// To get the name of the shard use a [ClusterService.ListShards] request.
	ShardName     string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterShardRequest) Reset() {
	*x = GetClusterShardRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterShardRequest) ProtoMessage() {}

func (x *GetClusterShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterShardRequest.ProtoReflect.Descriptor instead.
func (*GetClusterShardRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{41}
}

func (x *GetClusterShardRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetClusterShardRequest) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

type ListClusterShardsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster to list databases in.
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterShardsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListClusterShardsResponse.next_page_token] returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterShardsRequest) Reset() {
	*x = ListClusterShardsRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterShardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterShardsRequest) ProtoMessage() {}

func (x *ListClusterShardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterShardsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterShardsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{42}
}

func (x *ListClusterShardsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterShardsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterShardsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterShardsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of MongoDB shards.
	Shards []*Shard `protobuf:"bytes,1,rep,name=shards,proto3" json:"shards,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterShardsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterShardsRequest.page_token] parameter in the next list request. Each subsequent
	// list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterShardsResponse) Reset() {
	*x = ListClusterShardsResponse{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterShardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterShardsResponse) ProtoMessage() {}

func (x *ListClusterShardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterShardsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterShardsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{43}
}

func (x *ListClusterShardsResponse) GetShards() []*Shard {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *ListClusterShardsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type AddClusterShardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster to add a shard to.
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the MongoDB shard to create.
	ShardName string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	// Configurations for mongod hosts to be created with the shard.
	HostSpecs     []*HostSpec `protobuf:"bytes,3,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterShardRequest) Reset() {
	*x = AddClusterShardRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterShardRequest) ProtoMessage() {}

func (x *AddClusterShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterShardRequest.ProtoReflect.Descriptor instead.
func (*AddClusterShardRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{44}
}

func (x *AddClusterShardRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterShardRequest) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

func (x *AddClusterShardRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

type AddClusterShardMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster that a shard is being added to.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the shard being added.
	ShardName     string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterShardMetadata) Reset() {
	*x = AddClusterShardMetadata{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterShardMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterShardMetadata) ProtoMessage() {}

func (x *AddClusterShardMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterShardMetadata.ProtoReflect.Descriptor instead.
func (*AddClusterShardMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{45}
}

func (x *AddClusterShardMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterShardMetadata) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

type DeleteClusterShardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster to delete a shard in.
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the MongoDB shard to delete.
	// To get the name of the shard use a [ClusterService.ListShards] request.
	ShardName     string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterShardRequest) Reset() {
	*x = DeleteClusterShardRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterShardRequest) ProtoMessage() {}

func (x *DeleteClusterShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterShardRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterShardRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{46}
}

func (x *DeleteClusterShardRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterShardRequest) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

type DeleteClusterShardMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MongoDB cluster that a shard is being deleted in.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the shard being deleted.
	ShardName     string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterShardMetadata) Reset() {
	*x = DeleteClusterShardMetadata{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterShardMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterShardMetadata) ProtoMessage() {}

func (x *DeleteClusterShardMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterShardMetadata.ProtoReflect.Descriptor instead.
func (*DeleteClusterShardMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{47}
}

func (x *DeleteClusterShardMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterShardMetadata) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

type ResetupHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ID of the MongoDB cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required. Name of the hosts to resetup.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetupHostsRequest) Reset() {
	*x = ResetupHostsRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetupHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetupHostsRequest) ProtoMessage() {}

func (x *ResetupHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetupHostsRequest.ProtoReflect.Descriptor instead.
func (*ResetupHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{48}
}

func (x *ResetupHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ResetupHostsRequest) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type ResetupHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ID of the MongoDB cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required. The name of hosts to resetup.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetupHostsMetadata) Reset() {
	*x = ResetupHostsMetadata{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetupHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetupHostsMetadata) ProtoMessage() {}

func (x *ResetupHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetupHostsMetadata.ProtoReflect.Descriptor instead.
func (*ResetupHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{49}
}

func (x *ResetupHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ResetupHostsMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type RestartHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ID of the MongoDB cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required. Name of the hosts to restart.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestartHostsRequest) Reset() {
	*x = RestartHostsRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestartHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartHostsRequest) ProtoMessage() {}

func (x *RestartHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartHostsRequest.ProtoReflect.Descriptor instead.
func (*RestartHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{50}
}

func (x *RestartHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RestartHostsRequest) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type RestartHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ID of the MongoDB cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required. The name of hosts to restart.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestartHostsMetadata) Reset() {
	*x = RestartHostsMetadata{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestartHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartHostsMetadata) ProtoMessage() {}

func (x *RestartHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartHostsMetadata.ProtoReflect.Descriptor instead.
func (*RestartHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{51}
}

func (x *RestartHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RestartHostsMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type StepdownHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ID of the MongoDB cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required. Name of the hosts to resetup.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepdownHostsRequest) Reset() {
	*x = StepdownHostsRequest{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepdownHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepdownHostsRequest) ProtoMessage() {}

func (x *StepdownHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepdownHostsRequest.ProtoReflect.Descriptor instead.
func (*StepdownHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{52}
}

func (x *StepdownHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *StepdownHostsRequest) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type StepdownHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ID of the MongoDB cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required. The name of hosts to resetup.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepdownHostsMetadata) Reset() {
	*x = StepdownHostsMetadata{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepdownHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepdownHostsMetadata) ProtoMessage() {}

func (x *StepdownHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepdownHostsMetadata.ProtoReflect.Descriptor instead.
func (*StepdownHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{53}
}

func (x *StepdownHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *StepdownHostsMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type HostSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the availability zone where the host resides.
	// To get a list of available zones, use the [yandex.cloud.compute.v1.ZoneService.List] request.
	ZoneId string `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// ID of the subnet that the host should belong to. This subnet should be a part
	// of the network that the cluster belongs to.
	// The network ID is set in the [Cluster.network_id] field.
	SubnetId string `protobuf:"bytes,2,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// Whether the host should get a public IP address on creation.
	//
	// After a host has been created, this setting cannot be changed. To remove an assigned public IP, or to assign
	// a public IP to a host without one, recreate the host with [assign_public_ip] set as needed.
	//
	// Possible values:
	// * false - don't assign a public IP to the host.
	// * true - the host should have a public IP address.
	AssignPublicIp bool `protobuf:"varint,3,opt,name=assign_public_ip,json=assignPublicIp,proto3" json:"assign_public_ip,omitempty"`
	// Type of the host to be deployed.
	Type Host_Type `protobuf:"varint,4,opt,name=type,proto3,enum=yandex.cloud.mdb.mongodb.v1.Host_Type" json:"type,omitempty"`
	// Name of the shard that the host belongs to.
	ShardName string `protobuf:"bytes,5,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	// Is host hidden in replSet
	Hidden *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// The number of seconds "behind" the primary that this replica set member should "lag"
	SecondaryDelaySecs *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=secondary_delay_secs,json=secondaryDelaySecs,proto3" json:"secondary_delay_secs,omitempty"`
	// Priority of host for the election in replSet
	Priority *wrapperspb.DoubleValue `protobuf:"bytes,8,opt,name=priority,proto3" json:"priority,omitempty"`
	// Host tags
	Tags          map[string]string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostSpec) Reset() {
	*x = HostSpec{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostSpec) ProtoMessage() {}

func (x *HostSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostSpec.ProtoReflect.Descriptor instead.
func (*HostSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{54}
}

func (x *HostSpec) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *HostSpec) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *HostSpec) GetAssignPublicIp() bool {
	if x != nil {
		return x.AssignPublicIp
	}
	return false
}

func (x *HostSpec) GetType() Host_Type {
	if x != nil {
		return x.Type
	}
	return Host_TYPE_UNSPECIFIED
}

func (x *HostSpec) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

func (x *HostSpec) GetHidden() *wrapperspb.BoolValue {
	if x != nil {
		return x.Hidden
	}
	return nil
}

func (x *HostSpec) GetSecondaryDelaySecs() *wrapperspb.Int64Value {
	if x != nil {
		return x.SecondaryDelaySecs
	}
	return nil
}

func (x *HostSpec) GetPriority() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *HostSpec) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type MongodbSpec3_6 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration and resource allocation for mongod 3.6 hosts.
	Mongod *MongodbSpec3_6_Mongod `protobuf:"bytes,1,opt,name=mongod,proto3" json:"mongod,omitempty"`
	// Configuration and resource allocation for mongocfg 3.6 hosts.
	Mongocfg *MongodbSpec3_6_MongoCfg `protobuf:"bytes,2,opt,name=mongocfg,proto3" json:"mongocfg,omitempty"`
	// Configuration and resource allocation for mongos 3.6 hosts.
	Mongos *MongodbSpec3_6_Mongos `protobuf:"bytes,3,opt,name=mongos,proto3" json:"mongos,omitempty"`
	// Configuration and resource allocation for mongoinfra (mongos+mongocfg) 3.6 hosts.
	Mongoinfra    *MongodbSpec3_6_MongoInfra `protobuf:"bytes,4,opt,name=mongoinfra,proto3" json:"mongoinfra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MongodbSpec3_6) Reset() {
	*x = MongodbSpec3_6{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec3_6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec3_6) ProtoMessage() {}

func (x *MongodbSpec3_6) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec3_6.ProtoReflect.Descriptor instead.
func (*MongodbSpec3_6) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{55}
}

func (x *MongodbSpec3_6) GetMongod() *MongodbSpec3_6_Mongod {
	if x != nil {
		return x.Mongod
	}
	return nil
}

func (x *MongodbSpec3_6) GetMongocfg() *MongodbSpec3_6_MongoCfg {
	if x != nil {
		return x.Mongocfg
	}
	return nil
}

func (x *MongodbSpec3_6) GetMongos() *MongodbSpec3_6_Mongos {
	if x != nil {
		return x.Mongos
	}
	return nil
}

func (x *MongodbSpec3_6) GetMongoinfra() *MongodbSpec3_6_MongoInfra {
	if x != nil {
		return x.Mongoinfra
	}
	return nil
}

type MongodbSpec4_0 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration and resource allocation for mongod 4.0 hosts.
	Mongod *MongodbSpec4_0_Mongod `protobuf:"bytes,1,opt,name=mongod,proto3" json:"mongod,omitempty"`
	// Configuration and resource allocation for mongocfg 4.0 hosts.
	Mongocfg *MongodbSpec4_0_MongoCfg `protobuf:"bytes,2,opt,name=mongocfg,proto3" json:"mongocfg,omitempty"`
	// Configuration and resource allocation for mongos 4.0 hosts.
	Mongos *MongodbSpec4_0_Mongos `protobuf:"bytes,3,opt,name=mongos,proto3" json:"mongos,omitempty"`
	// Configuration and resource allocation for mongoinfra (mongos+mongocfg) 4.0 hosts.
	Mongoinfra    *MongodbSpec4_0_MongoInfra `protobuf:"bytes,4,opt,name=mongoinfra,proto3" json:"mongoinfra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MongodbSpec4_0) Reset() {
	*x = MongodbSpec4_0{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec4_0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec4_0) ProtoMessage() {}

func (x *MongodbSpec4_0) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec4_0.ProtoReflect.Descriptor instead.
func (*MongodbSpec4_0) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{56}
}

func (x *MongodbSpec4_0) GetMongod() *MongodbSpec4_0_Mongod {
	if x != nil {
		return x.Mongod
	}
	return nil
}

func (x *MongodbSpec4_0) GetMongocfg() *MongodbSpec4_0_MongoCfg {
	if x != nil {
		return x.Mongocfg
	}
	return nil
}

func (x *MongodbSpec4_0) GetMongos() *MongodbSpec4_0_Mongos {
	if x != nil {
		return x.Mongos
	}
	return nil
}

func (x *MongodbSpec4_0) GetMongoinfra() *MongodbSpec4_0_MongoInfra {
	if x != nil {
		return x.Mongoinfra
	}
	return nil
}

type MongodbSpec4_2 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration and resource allocation for mongod 4.2 hosts.
	Mongod *MongodbSpec4_2_Mongod `protobuf:"bytes,1,opt,name=mongod,proto3" json:"mongod,omitempty"`
	// Configuration and resource allocation for mongocfg 4.2 hosts.
	Mongocfg *MongodbSpec4_2_MongoCfg `protobuf:"bytes,2,opt,name=mongocfg,proto3" json:"mongocfg,omitempty"`
	// Configuration and resource allocation for mongos 4.2 hosts.
	Mongos *MongodbSpec4_2_Mongos `protobuf:"bytes,3,opt,name=mongos,proto3" json:"mongos,omitempty"`
	// Configuration and resource allocation for mongoinfra (mongos+mongocfg) 4.2 hosts.
	Mongoinfra    *MongodbSpec4_2_MongoInfra `protobuf:"bytes,4,opt,name=mongoinfra,proto3" json:"mongoinfra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MongodbSpec4_2) Reset() {
	*x = MongodbSpec4_2{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec4_2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec4_2) ProtoMessage() {}

func (x *MongodbSpec4_2) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec4_2.ProtoReflect.Descriptor instead.
func (*MongodbSpec4_2) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{57}
}

func (x *MongodbSpec4_2) GetMongod() *MongodbSpec4_2_Mongod {
	if x != nil {
		return x.Mongod
	}
	return nil
}

func (x *MongodbSpec4_2) GetMongocfg() *MongodbSpec4_2_MongoCfg {
	if x != nil {
		return x.Mongocfg
	}
	return nil
}

func (x *MongodbSpec4_2) GetMongos() *MongodbSpec4_2_Mongos {
	if x != nil {
		return x.Mongos
	}
	return nil
}

func (x *MongodbSpec4_2) GetMongoinfra() *MongodbSpec4_2_MongoInfra {
	if x != nil {
		return x.Mongoinfra
	}
	return nil
}

type MongodbSpec4_4 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration and resource allocation for mongod 4.4 hosts.
	Mongod *MongodbSpec4_4_Mongod `protobuf:"bytes,1,opt,name=mongod,proto3" json:"mongod,omitempty"`
	// Configuration and resource allocation for mongocfg 4.4 hosts.
	Mongocfg *MongodbSpec4_4_MongoCfg `protobuf:"bytes,2,opt,name=mongocfg,proto3" json:"mongocfg,omitempty"`
	// Configuration and resource allocation for mongos 4.4 hosts.
	Mongos *MongodbSpec4_4_Mongos `protobuf:"bytes,3,opt,name=mongos,proto3" json:"mongos,omitempty"`
	// Configuration and resource allocation for mongoinfra (mongos+mongocfg) 4.4 hosts.
	Mongoinfra    *MongodbSpec4_4_MongoInfra `protobuf:"bytes,4,opt,name=mongoinfra,proto3" json:"mongoinfra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MongodbSpec4_4) Reset() {
	*x = MongodbSpec4_4{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec4_4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec4_4) ProtoMessage() {}

func (x *MongodbSpec4_4) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec4_4.ProtoReflect.Descriptor instead.
func (*MongodbSpec4_4) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{58}
}

func (x *MongodbSpec4_4) GetMongod() *MongodbSpec4_4_Mongod {
	if x != nil {
		return x.Mongod
	}
	return nil
}

func (x *MongodbSpec4_4) GetMongocfg() *MongodbSpec4_4_MongoCfg {
	if x != nil {
		return x.Mongocfg
	}
	return nil
}

func (x *MongodbSpec4_4) GetMongos() *MongodbSpec4_4_Mongos {
	if x != nil {
		return x.Mongos
	}
	return nil
}

func (x *MongodbSpec4_4) GetMongoinfra() *MongodbSpec4_4_MongoInfra {
	if x != nil {
		return x.Mongoinfra
	}
	return nil
}

type MongodbSpec4_4Enterprise struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration and resource allocation for mongod 4.4 hosts.
	Mongod *MongodbSpec4_4Enterprise_Mongod `protobuf:"bytes,1,opt,name=mongod,proto3" json:"mongod,omitempty"`
	// Configuration and resource allocation for mongocfg 4.4 hosts.
	Mongocfg *MongodbSpec4_4Enterprise_MongoCfg `protobuf:"bytes,2,opt,name=mongocfg,proto3" json:"mongocfg,omitempty"`
	// Configuration and resource allocation for mongos 4.4 hosts.
	Mongos *MongodbSpec4_4Enterprise_Mongos `protobuf:"bytes,3,opt,name=mongos,proto3" json:"mongos,omitempty"`
	// Configuration and resource allocation for mongoinfra (mongos+mongocfg) 4.4 hosts.
	Mongoinfra    *MongodbSpec4_4Enterprise_MongoInfra `protobuf:"bytes,4,opt,name=mongoinfra,proto3" json:"mongoinfra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MongodbSpec4_4Enterprise) Reset() {
	*x = MongodbSpec4_4Enterprise{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec4_4Enterprise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec4_4Enterprise) ProtoMessage() {}

func (x *MongodbSpec4_4Enterprise) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec4_4Enterprise.ProtoReflect.Descriptor instead.
func (*MongodbSpec4_4Enterprise) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{59}
}

func (x *MongodbSpec4_4Enterprise) GetMongod() *MongodbSpec4_4Enterprise_Mongod {
	if x != nil {
		return x.Mongod
	}
	return nil
}

func (x *MongodbSpec4_4Enterprise) GetMongocfg() *MongodbSpec4_4Enterprise_MongoCfg {
	if x != nil {
		return x.Mongocfg
	}
	return nil
}

func (x *MongodbSpec4_4Enterprise) GetMongos() *MongodbSpec4_4Enterprise_Mongos {
	if x != nil {
		return x.Mongos
	}
	return nil
}

func (x *MongodbSpec4_4Enterprise) GetMongoinfra() *MongodbSpec4_4Enterprise_MongoInfra {
	if x != nil {
		return x.Mongoinfra
	}
	return nil
}

type MongodbSpec5_0 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration and resource allocation for mongod 5.0 hosts.
	Mongod *MongodbSpec5_0_Mongod `protobuf:"bytes,1,opt,name=mongod,proto3" json:"mongod,omitempty"`
	// Configuration and resource allocation for mongocfg 5.0 hosts.
	Mongocfg *MongodbSpec5_0_MongoCfg `protobuf:"bytes,2,opt,name=mongocfg,proto3" json:"mongocfg,omitempty"`
	// Configuration and resource allocation for mongos 5.0 hosts.
	Mongos *MongodbSpec5_0_Mongos `protobuf:"bytes,3,opt,name=mongos,proto3" json:"mongos,omitempty"`
	// Configuration and resource allocation for mongoinfra (mongos+mongocfg) 5.0 hosts.
	Mongoinfra    *MongodbSpec5_0_MongoInfra `protobuf:"bytes,4,opt,name=mongoinfra,proto3" json:"mongoinfra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MongodbSpec5_0) Reset() {
	*x = MongodbSpec5_0{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec5_0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec5_0) ProtoMessage() {}

func (x *MongodbSpec5_0) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec5_0.ProtoReflect.Descriptor instead.
func (*MongodbSpec5_0) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{60}
}

func (x *MongodbSpec5_0) GetMongod() *MongodbSpec5_0_Mongod {
	if x != nil {
		return x.Mongod
	}
	return nil
}

func (x *MongodbSpec5_0) GetMongocfg() *MongodbSpec5_0_MongoCfg {
	if x != nil {
		return x.Mongocfg
	}
	return nil
}

func (x *MongodbSpec5_0) GetMongos() *MongodbSpec5_0_Mongos {
	if x != nil {
		return x.Mongos
	}
	return nil
}

func (x *MongodbSpec5_0) GetMongoinfra() *MongodbSpec5_0_MongoInfra {
	if x != nil {
		return x.Mongoinfra
	}
	return nil
}

type MongodbSpec5_0Enterprise struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration and resource allocation for mongod 5.0 hosts.
	Mongod *MongodbSpec5_0Enterprise_Mongod `protobuf:"bytes,1,opt,name=mongod,proto3" json:"mongod,omitempty"`
	// Configuration and resource allocation for mongocfg 5.0 hosts.
	Mongocfg *MongodbSpec5_0Enterprise_MongoCfg `protobuf:"bytes,2,opt,name=mongocfg,proto3" json:"mongocfg,omitempty"`
	// Configuration and resource allocation for mongos 5.0 hosts.
	Mongos *MongodbSpec5_0Enterprise_Mongos `protobuf:"bytes,3,opt,name=mongos,proto3" json:"mongos,omitempty"`
	// Configuration and resource allocation for mongoinfra (mongos+mongocfg) 5.0 hosts.
	Mongoinfra    *MongodbSpec5_0Enterprise_MongoInfra `protobuf:"bytes,4,opt,name=mongoinfra,proto3" json:"mongoinfra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MongodbSpec5_0Enterprise) Reset() {
	*x = MongodbSpec5_0Enterprise{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec5_0Enterprise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec5_0Enterprise) ProtoMessage() {}

func (x *MongodbSpec5_0Enterprise) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec5_0Enterprise.ProtoReflect.Descriptor instead.
func (*MongodbSpec5_0Enterprise) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{61}
}

func (x *MongodbSpec5_0Enterprise) GetMongod() *MongodbSpec5_0Enterprise_Mongod {
	if x != nil {
		return x.Mongod
	}
	return nil
}

func (x *MongodbSpec5_0Enterprise) GetMongocfg() *MongodbSpec5_0Enterprise_MongoCfg {
	if x != nil {
		return x.Mongocfg
	}
	return nil
}

func (x *MongodbSpec5_0Enterprise) GetMongos() *MongodbSpec5_0Enterprise_Mongos {
	if x != nil {
		return x.Mongos
	}
	return nil
}

func (x *MongodbSpec5_0Enterprise) GetMongoinfra() *MongodbSpec5_0Enterprise_MongoInfra {
	if x != nil {
		return x.Mongoinfra
	}
	return nil
}

type MongodbSpec6_0 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration and resource allocation for mongod 6.0 hosts.
	Mongod *MongodbSpec6_0_Mongod `protobuf:"bytes,1,opt,name=mongod,proto3" json:"mongod,omitempty"`
	// Configuration and resource allocation for mongocfg 6.0 hosts.
	Mongocfg *MongodbSpec6_0_MongoCfg `protobuf:"bytes,2,opt,name=mongocfg,proto3" json:"mongocfg,omitempty"`
	// Configuration and resource allocation for mongos 6.0 hosts.
	Mongos *MongodbSpec6_0_Mongos `protobuf:"bytes,3,opt,name=mongos,proto3" json:"mongos,omitempty"`
	// Configuration and resource allocation for mongoinfra (mongos+mongocfg) 6.0 hosts.
	Mongoinfra    *MongodbSpec6_0_MongoInfra `protobuf:"bytes,4,opt,name=mongoinfra,proto3" json:"mongoinfra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MongodbSpec6_0) Reset() {
	*x = MongodbSpec6_0{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec6_0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec6_0) ProtoMessage() {}

func (x *MongodbSpec6_0) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec6_0.ProtoReflect.Descriptor instead.
func (*MongodbSpec6_0) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{62}
}

func (x *MongodbSpec6_0) GetMongod() *MongodbSpec6_0_Mongod {
	if x != nil {
		return x.Mongod
	}
	return nil
}

func (x *MongodbSpec6_0) GetMongocfg() *MongodbSpec6_0_MongoCfg {
	if x != nil {
		return x.Mongocfg
	}
	return nil
}

func (x *MongodbSpec6_0) GetMongos() *MongodbSpec6_0_Mongos {
	if x != nil {
		return x.Mongos
	}
	return nil
}

func (x *MongodbSpec6_0) GetMongoinfra() *MongodbSpec6_0_MongoInfra {
	if x != nil {
		return x.Mongoinfra
	}
	return nil
}

type MongodbSpec6_0Enterprise struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration and resource allocation for mongod 6.0 hosts.
	Mongod *MongodbSpec6_0Enterprise_Mongod `protobuf:"bytes,1,opt,name=mongod,proto3" json:"mongod,omitempty"`
	// Configuration and resource allocation for mongocfg 6.0 hosts.
	Mongocfg *MongodbSpec6_0Enterprise_MongoCfg `protobuf:"bytes,2,opt,name=mongocfg,proto3" json:"mongocfg,omitempty"`
	// Configuration and resource allocation for mongos 6.0 hosts.
	Mongos *MongodbSpec6_0Enterprise_Mongos `protobuf:"bytes,3,opt,name=mongos,proto3" json:"mongos,omitempty"`
	// Configuration and resource allocation for mongoinfra (mongos+mongocfg) 6.0 hosts.
	Mongoinfra    *MongodbSpec6_0Enterprise_MongoInfra `protobuf:"bytes,4,opt,name=mongoinfra,proto3" json:"mongoinfra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MongodbSpec6_0Enterprise) Reset() {
	*x = MongodbSpec6_0Enterprise{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec6_0Enterprise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec6_0Enterprise) ProtoMessage() {}

func (x *MongodbSpec6_0Enterprise) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec6_0Enterprise.ProtoReflect.Descriptor instead.
func (*MongodbSpec6_0Enterprise) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{63}
}

func (x *MongodbSpec6_0Enterprise) GetMongod() *MongodbSpec6_0Enterprise_Mongod {
	if x != nil {
		return x.Mongod
	}
	return nil
}

func (x *MongodbSpec6_0Enterprise) GetMongocfg() *MongodbSpec6_0Enterprise_MongoCfg {
	if x != nil {
		return x.Mongocfg
	}
	return nil
}

func (x *MongodbSpec6_0Enterprise) GetMongos() *MongodbSpec6_0Enterprise_Mongos {
	if x != nil {
		return x.Mongos
	}
	return nil
}

func (x *MongodbSpec6_0Enterprise) GetMongoinfra() *MongodbSpec6_0Enterprise_MongoInfra {
	if x != nil {
		return x.Mongoinfra
	}
	return nil
}

type MongodbSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration and resource allocation for mongod hosts.
	Mongod *MongodbSpec_Mongod `protobuf:"bytes,1,opt,name=mongod,proto3" json:"mongod,omitempty"`
	// Configuration and resource allocation for mongocfg hosts.
	Mongocfg *MongodbSpec_MongoCfg `protobuf:"bytes,2,opt,name=mongocfg,proto3" json:"mongocfg,omitempty"`
	// Configuration and resource allocation for mongos hosts.
	Mongos *MongodbSpec_Mongos `protobuf:"bytes,3,opt,name=mongos,proto3" json:"mongos,omitempty"`
	// Configuration and resource allocation for mongoinfra (mongos+mongocfg) hosts.
	Mongoinfra    *MongodbSpec_MongoInfra `protobuf:"bytes,4,opt,name=mongoinfra,proto3" json:"mongoinfra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MongodbSpec) Reset() {
	*x = MongodbSpec{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec) ProtoMessage() {}

func (x *MongodbSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec.ProtoReflect.Descriptor instead.
func (*MongodbSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{64}
}

func (x *MongodbSpec) GetMongod() *MongodbSpec_Mongod {
	if x != nil {
		return x.Mongod
	}
	return nil
}

func (x *MongodbSpec) GetMongocfg() *MongodbSpec_MongoCfg {
	if x != nil {
		return x.Mongocfg
	}
	return nil
}

func (x *MongodbSpec) GetMongos() *MongodbSpec_Mongos {
	if x != nil {
		return x.Mongos
	}
	return nil
}

func (x *MongodbSpec) GetMongoinfra() *MongodbSpec_MongoInfra {
	if x != nil {
		return x.Mongoinfra
	}
	return nil
}

type ConfigSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version of MongoDB used in the cluster. Possible values: `3.6`, `4.0`, `4.2`, `4.4`, `4.4-enterprise`, `5.0`, `5.0-enterprise`, `6.0`, `6.0-enterprise`.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// MongoDB feature compatibility version. See usage details in [MongoDB documentation](https://docs.mongodb.com/manual/reference/command/setFeatureCompatibilityVersion/).
	//
	// Possible values:
	// * `3.6` - persist data compatibility for version 3.6. After setting this option the data will not be compatible with 3.4 or older.
	// * `4.0` - persist data compatibility for version 4.0. After setting this option the data will not be compatible with 3.6 or older.
	// * `4.2` - persist data compatibility for version 4.2. After setting this option the data will not be compatible with 4.0 or older.
	// * `4.4` - persist data compatibility for version 4.4. After setting this option the data will not be compatible with 4.2 or older.
	// * `5.0` - persist data compatibility for version 5.0. After setting this option the data will not be compatible with 4.4 or older.
	// * `6.0` - persist data compatibility for version 6.0. After setting this option the data will not be compatible with 5.0 or older.
	FeatureCompatibilityVersion string `protobuf:"bytes,5,opt,name=feature_compatibility_version,json=featureCompatibilityVersion,proto3" json:"feature_compatibility_version,omitempty"`
	// Types that are valid to be assigned to MongodbSpec:
	//
	//	*ConfigSpec_MongodbSpec_3_6
	//	*ConfigSpec_MongodbSpec_4_0
	//	*ConfigSpec_MongodbSpec_4_2
	//	*ConfigSpec_MongodbSpec_4_4
	//	*ConfigSpec_MongodbSpec_5_0
	//	*ConfigSpec_MongodbSpec_6_0
	//	*ConfigSpec_MongodbSpec_4_4Enterprise
	//	*ConfigSpec_MongodbSpec_5_0Enterprise
	//	*ConfigSpec_MongodbSpec_6_0Enterprise
	MongodbSpec isConfigSpec_MongodbSpec `protobuf_oneof:"mongodb_spec"`
	// Time to start the daily backup, in the UTC timezone.
	BackupWindowStart *timeofday.TimeOfDay `protobuf:"bytes,3,opt,name=backup_window_start,json=backupWindowStart,proto3" json:"backup_window_start,omitempty"`
	// Retain period of automatically created backup in days
	BackupRetainPeriodDays *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=backup_retain_period_days,json=backupRetainPeriodDays,proto3" json:"backup_retain_period_days,omitempty"`
	// Performance Diagnosics configuration
	PerformanceDiagnostics *PerformanceDiagnosticsConfig `protobuf:"bytes,13,opt,name=performance_diagnostics,json=performanceDiagnostics,proto3" json:"performance_diagnostics,omitempty"`
	// Access policy to DB
	Access *Access `protobuf:"bytes,6,opt,name=access,proto3" json:"access,omitempty"`
	// Configuration and resource allocation for a MongoDB 7.0 Enterprise cluster.
	Mongodb       *MongodbSpec `protobuf:"bytes,20,opt,name=mongodb,proto3" json:"mongodb,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigSpec) Reset() {
	*x = ConfigSpec{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSpec) ProtoMessage() {}

func (x *ConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSpec.ProtoReflect.Descriptor instead.
func (*ConfigSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{65}
}

func (x *ConfigSpec) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ConfigSpec) GetFeatureCompatibilityVersion() string {
	if x != nil {
		return x.FeatureCompatibilityVersion
	}
	return ""
}

func (x *ConfigSpec) GetMongodbSpec() isConfigSpec_MongodbSpec {
	if x != nil {
		return x.MongodbSpec
	}
	return nil
}

func (x *ConfigSpec) GetMongodbSpec_3_6() *MongodbSpec3_6 {
	if x != nil {
		if x, ok := x.MongodbSpec.(*ConfigSpec_MongodbSpec_3_6); ok {
			return x.MongodbSpec_3_6
		}
	}
	return nil
}

func (x *ConfigSpec) GetMongodbSpec_4_0() *MongodbSpec4_0 {
	if x != nil {
		if x, ok := x.MongodbSpec.(*ConfigSpec_MongodbSpec_4_0); ok {
			return x.MongodbSpec_4_0
		}
	}
	return nil
}

func (x *ConfigSpec) GetMongodbSpec_4_2() *MongodbSpec4_2 {
	if x != nil {
		if x, ok := x.MongodbSpec.(*ConfigSpec_MongodbSpec_4_2); ok {
			return x.MongodbSpec_4_2
		}
	}
	return nil
}

func (x *ConfigSpec) GetMongodbSpec_4_4() *MongodbSpec4_4 {
	if x != nil {
		if x, ok := x.MongodbSpec.(*ConfigSpec_MongodbSpec_4_4); ok {
			return x.MongodbSpec_4_4
		}
	}
	return nil
}

func (x *ConfigSpec) GetMongodbSpec_5_0() *MongodbSpec5_0 {
	if x != nil {
		if x, ok := x.MongodbSpec.(*ConfigSpec_MongodbSpec_5_0); ok {
			return x.MongodbSpec_5_0
		}
	}
	return nil
}

func (x *ConfigSpec) GetMongodbSpec_6_0() *MongodbSpec6_0 {
	if x != nil {
		if x, ok := x.MongodbSpec.(*ConfigSpec_MongodbSpec_6_0); ok {
			return x.MongodbSpec_6_0
		}
	}
	return nil
}

func (x *ConfigSpec) GetMongodbSpec_4_4Enterprise() *MongodbSpec4_4Enterprise {
	if x != nil {
		if x, ok := x.MongodbSpec.(*ConfigSpec_MongodbSpec_4_4Enterprise); ok {
			return x.MongodbSpec_4_4Enterprise
		}
	}
	return nil
}

func (x *ConfigSpec) GetMongodbSpec_5_0Enterprise() *MongodbSpec5_0Enterprise {
	if x != nil {
		if x, ok := x.MongodbSpec.(*ConfigSpec_MongodbSpec_5_0Enterprise); ok {
			return x.MongodbSpec_5_0Enterprise
		}
	}
	return nil
}

func (x *ConfigSpec) GetMongodbSpec_6_0Enterprise() *MongodbSpec6_0Enterprise {
	if x != nil {
		if x, ok := x.MongodbSpec.(*ConfigSpec_MongodbSpec_6_0Enterprise); ok {
			return x.MongodbSpec_6_0Enterprise
		}
	}
	return nil
}

func (x *ConfigSpec) GetBackupWindowStart() *timeofday.TimeOfDay {
	if x != nil {
		return x.BackupWindowStart
	}
	return nil
}

func (x *ConfigSpec) GetBackupRetainPeriodDays() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackupRetainPeriodDays
	}
	return nil
}

func (x *ConfigSpec) GetPerformanceDiagnostics() *PerformanceDiagnosticsConfig {
	if x != nil {
		return x.PerformanceDiagnostics
	}
	return nil
}

func (x *ConfigSpec) GetAccess() *Access {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *ConfigSpec) GetMongodb() *MongodbSpec {
	if x != nil {
		return x.Mongodb
	}
	return nil
}

type isConfigSpec_MongodbSpec interface {
	isConfigSpec_MongodbSpec()
}

type ConfigSpec_MongodbSpec_3_6 struct {
	// Configuration and resource allocation for a MongoDB 3.6 cluster.
	MongodbSpec_3_6 *MongodbSpec3_6 `protobuf:"bytes,2,opt,name=mongodb_spec_3_6,json=mongodbSpec_3_6,proto3,oneof"`
}

type ConfigSpec_MongodbSpec_4_0 struct {
	// Configuration and resource allocation for a MongoDB 4.0 cluster.
	MongodbSpec_4_0 *MongodbSpec4_0 `protobuf:"bytes,4,opt,name=mongodb_spec_4_0,json=mongodbSpec_4_0,proto3,oneof"`
}

type ConfigSpec_MongodbSpec_4_2 struct {
	// Configuration and resource allocation for a MongoDB 4.2 cluster.
	MongodbSpec_4_2 *MongodbSpec4_2 `protobuf:"bytes,7,opt,name=mongodb_spec_4_2,json=mongodbSpec_4_2,proto3,oneof"`
}

type ConfigSpec_MongodbSpec_4_4 struct {
	// Configuration and resource allocation for a MongoDB 4.4 cluster.
	MongodbSpec_4_4 *MongodbSpec4_4 `protobuf:"bytes,8,opt,name=mongodb_spec_4_4,json=mongodbSpec_4_4,proto3,oneof"`
}

type ConfigSpec_MongodbSpec_5_0 struct {
	// Configuration and resource allocation for a MongoDB 5.0 cluster.
	MongodbSpec_5_0 *MongodbSpec5_0 `protobuf:"bytes,10,opt,name=mongodb_spec_5_0,json=mongodbSpec_5_0,proto3,oneof"`
}

type ConfigSpec_MongodbSpec_6_0 struct {
	// Configuration and resource allocation for a MongoDB 6.0 cluster.
	MongodbSpec_6_0 *MongodbSpec6_0 `protobuf:"bytes,14,opt,name=mongodb_spec_6_0,json=mongodbSpec_6_0,proto3,oneof"`
}

type ConfigSpec_MongodbSpec_4_4Enterprise struct {
	// Configuration and resource allocation for a MongoDB 4.4 Enterprise cluster.
	MongodbSpec_4_4Enterprise *MongodbSpec4_4Enterprise `protobuf:"bytes,11,opt,name=mongodb_spec_4_4_enterprise,json=mongodbSpec_4_4_enterprise,proto3,oneof"`
}

type ConfigSpec_MongodbSpec_5_0Enterprise struct {
	// Configuration and resource allocation for a MongoDB 5.0 Enterprise cluster.
	MongodbSpec_5_0Enterprise *MongodbSpec5_0Enterprise `protobuf:"bytes,12,opt,name=mongodb_spec_5_0_enterprise,json=mongodbSpec_5_0_enterprise,proto3,oneof"`
}

type ConfigSpec_MongodbSpec_6_0Enterprise struct {
	// Configuration and resource allocation for a MongoDB 6.0 Enterprise cluster.
	MongodbSpec_6_0Enterprise *MongodbSpec6_0Enterprise `protobuf:"bytes,15,opt,name=mongodb_spec_6_0_enterprise,json=mongodbSpec_6_0_enterprise,proto3,oneof"`
}

func (*ConfigSpec_MongodbSpec_3_6) isConfigSpec_MongodbSpec() {}

func (*ConfigSpec_MongodbSpec_4_0) isConfigSpec_MongodbSpec() {}

func (*ConfigSpec_MongodbSpec_4_2) isConfigSpec_MongodbSpec() {}

func (*ConfigSpec_MongodbSpec_4_4) isConfigSpec_MongodbSpec() {}

func (*ConfigSpec_MongodbSpec_5_0) isConfigSpec_MongodbSpec() {}

func (*ConfigSpec_MongodbSpec_6_0) isConfigSpec_MongodbSpec() {}

func (*ConfigSpec_MongodbSpec_4_4Enterprise) isConfigSpec_MongodbSpec() {}

func (*ConfigSpec_MongodbSpec_5_0Enterprise) isConfigSpec_MongodbSpec() {}

func (*ConfigSpec_MongodbSpec_6_0Enterprise) isConfigSpec_MongodbSpec() {}

type RestoreClusterRequest_RecoveryTargetSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timestamp of the recovery target
	Timestamp     int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestoreClusterRequest_RecoveryTargetSpec) Reset() {
	*x = RestoreClusterRequest_RecoveryTargetSpec{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreClusterRequest_RecoveryTargetSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreClusterRequest_RecoveryTargetSpec) ProtoMessage() {}

func (x *RestoreClusterRequest_RecoveryTargetSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreClusterRequest_RecoveryTargetSpec.ProtoReflect.Descriptor instead.
func (*RestoreClusterRequest_RecoveryTargetSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{17, 1}
}

func (x *RestoreClusterRequest_RecoveryTargetSpec) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type EnableClusterShardingRequest_MongoCfg struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resources for mongocfg hosts.
	Resources     *Resources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableClusterShardingRequest_MongoCfg) Reset() {
	*x = EnableClusterShardingRequest_MongoCfg{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableClusterShardingRequest_MongoCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableClusterShardingRequest_MongoCfg) ProtoMessage() {}

func (x *EnableClusterShardingRequest_MongoCfg) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableClusterShardingRequest_MongoCfg.ProtoReflect.Descriptor instead.
func (*EnableClusterShardingRequest_MongoCfg) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{39, 0}
}

func (x *EnableClusterShardingRequest_MongoCfg) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

type EnableClusterShardingRequest_Mongos struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resources for mongos hosts.
	Resources     *Resources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableClusterShardingRequest_Mongos) Reset() {
	*x = EnableClusterShardingRequest_Mongos{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableClusterShardingRequest_Mongos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableClusterShardingRequest_Mongos) ProtoMessage() {}

func (x *EnableClusterShardingRequest_Mongos) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableClusterShardingRequest_Mongos.ProtoReflect.Descriptor instead.
func (*EnableClusterShardingRequest_Mongos) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{39, 1}
}

func (x *EnableClusterShardingRequest_Mongos) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

type EnableClusterShardingRequest_MongoInfra struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resources for mongoinfra (mongos+mongocfg) hosts.
	Resources     *Resources `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableClusterShardingRequest_MongoInfra) Reset() {
	*x = EnableClusterShardingRequest_MongoInfra{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableClusterShardingRequest_MongoInfra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableClusterShardingRequest_MongoInfra) ProtoMessage() {}

func (x *EnableClusterShardingRequest_MongoInfra) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableClusterShardingRequest_MongoInfra.ProtoReflect.Descriptor instead.
func (*EnableClusterShardingRequest_MongoInfra) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{39, 2}
}

func (x *EnableClusterShardingRequest_MongoInfra) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

type MongodbSpec3_6_Mongod struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongod 3.6 hosts.
	Config *config.MongodConfig3_6 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongod host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec3_6_Mongod) Reset() {
	*x = MongodbSpec3_6_Mongod{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec3_6_Mongod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec3_6_Mongod) ProtoMessage() {}

func (x *MongodbSpec3_6_Mongod) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec3_6_Mongod.ProtoReflect.Descriptor instead.
func (*MongodbSpec3_6_Mongod) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{55, 0}
}

func (x *MongodbSpec3_6_Mongod) GetConfig() *config.MongodConfig3_6 {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec3_6_Mongod) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec3_6_Mongod) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec3_6_MongoCfg struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongocfg 3.6 hosts.
	Config *config.MongoCfgConfig3_6 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongocfg host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec3_6_MongoCfg) Reset() {
	*x = MongodbSpec3_6_MongoCfg{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec3_6_MongoCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec3_6_MongoCfg) ProtoMessage() {}

func (x *MongodbSpec3_6_MongoCfg) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec3_6_MongoCfg.ProtoReflect.Descriptor instead.
func (*MongodbSpec3_6_MongoCfg) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{55, 1}
}

func (x *MongodbSpec3_6_MongoCfg) GetConfig() *config.MongoCfgConfig3_6 {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec3_6_MongoCfg) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec3_6_MongoCfg) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec3_6_Mongos struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongos 3.6 hosts.
	Config *config.MongosConfig3_6 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongos host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec3_6_Mongos) Reset() {
	*x = MongodbSpec3_6_Mongos{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec3_6_Mongos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec3_6_Mongos) ProtoMessage() {}

func (x *MongodbSpec3_6_Mongos) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec3_6_Mongos.ProtoReflect.Descriptor instead.
func (*MongodbSpec3_6_Mongos) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{55, 2}
}

func (x *MongodbSpec3_6_Mongos) GetConfig() *config.MongosConfig3_6 {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec3_6_Mongos) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec3_6_Mongos) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec3_6_MongoInfra struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongoinfra 3.6 hosts.
	ConfigMongos   *config.MongosConfig3_6   `protobuf:"bytes,1,opt,name=config_mongos,json=configMongos,proto3" json:"config_mongos,omitempty"`
	ConfigMongocfg *config.MongoCfgConfig3_6 `protobuf:"bytes,2,opt,name=config_mongocfg,json=configMongocfg,proto3" json:"config_mongocfg,omitempty"`
	// Resources allocated to each mongoinfra (mongos+mongocfg) host.
	Resources *Resources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,4,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec3_6_MongoInfra) Reset() {
	*x = MongodbSpec3_6_MongoInfra{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec3_6_MongoInfra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec3_6_MongoInfra) ProtoMessage() {}

func (x *MongodbSpec3_6_MongoInfra) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec3_6_MongoInfra.ProtoReflect.Descriptor instead.
func (*MongodbSpec3_6_MongoInfra) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{55, 3}
}

func (x *MongodbSpec3_6_MongoInfra) GetConfigMongos() *config.MongosConfig3_6 {
	if x != nil {
		return x.ConfigMongos
	}
	return nil
}

func (x *MongodbSpec3_6_MongoInfra) GetConfigMongocfg() *config.MongoCfgConfig3_6 {
	if x != nil {
		return x.ConfigMongocfg
	}
	return nil
}

func (x *MongodbSpec3_6_MongoInfra) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec3_6_MongoInfra) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec4_0_Mongod struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongod 4.0 hosts.
	Config *config.MongodConfig4_0 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongod host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec4_0_Mongod) Reset() {
	*x = MongodbSpec4_0_Mongod{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec4_0_Mongod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec4_0_Mongod) ProtoMessage() {}

func (x *MongodbSpec4_0_Mongod) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec4_0_Mongod.ProtoReflect.Descriptor instead.
func (*MongodbSpec4_0_Mongod) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{56, 0}
}

func (x *MongodbSpec4_0_Mongod) GetConfig() *config.MongodConfig4_0 {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec4_0_Mongod) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec4_0_Mongod) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec4_0_MongoCfg struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongocfg 4.0 hosts.
	Config *config.MongoCfgConfig4_0 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongocfg host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec4_0_MongoCfg) Reset() {
	*x = MongodbSpec4_0_MongoCfg{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec4_0_MongoCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec4_0_MongoCfg) ProtoMessage() {}

func (x *MongodbSpec4_0_MongoCfg) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec4_0_MongoCfg.ProtoReflect.Descriptor instead.
func (*MongodbSpec4_0_MongoCfg) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{56, 1}
}

func (x *MongodbSpec4_0_MongoCfg) GetConfig() *config.MongoCfgConfig4_0 {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec4_0_MongoCfg) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec4_0_MongoCfg) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec4_0_Mongos struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongos 4.0 hosts.
	Config *config.MongosConfig4_0 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongos host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec4_0_Mongos) Reset() {
	*x = MongodbSpec4_0_Mongos{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec4_0_Mongos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec4_0_Mongos) ProtoMessage() {}

func (x *MongodbSpec4_0_Mongos) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec4_0_Mongos.ProtoReflect.Descriptor instead.
func (*MongodbSpec4_0_Mongos) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{56, 2}
}

func (x *MongodbSpec4_0_Mongos) GetConfig() *config.MongosConfig4_0 {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec4_0_Mongos) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec4_0_Mongos) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec4_0_MongoInfra struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongoinfra 4.0 hosts.
	ConfigMongos   *config.MongosConfig4_0   `protobuf:"bytes,1,opt,name=config_mongos,json=configMongos,proto3" json:"config_mongos,omitempty"`
	ConfigMongocfg *config.MongoCfgConfig4_0 `protobuf:"bytes,2,opt,name=config_mongocfg,json=configMongocfg,proto3" json:"config_mongocfg,omitempty"`
	// Resources allocated to each mongoinfra (mongos+mongocfg) host.
	Resources *Resources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,4,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec4_0_MongoInfra) Reset() {
	*x = MongodbSpec4_0_MongoInfra{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec4_0_MongoInfra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec4_0_MongoInfra) ProtoMessage() {}

func (x *MongodbSpec4_0_MongoInfra) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec4_0_MongoInfra.ProtoReflect.Descriptor instead.
func (*MongodbSpec4_0_MongoInfra) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{56, 3}
}

func (x *MongodbSpec4_0_MongoInfra) GetConfigMongos() *config.MongosConfig4_0 {
	if x != nil {
		return x.ConfigMongos
	}
	return nil
}

func (x *MongodbSpec4_0_MongoInfra) GetConfigMongocfg() *config.MongoCfgConfig4_0 {
	if x != nil {
		return x.ConfigMongocfg
	}
	return nil
}

func (x *MongodbSpec4_0_MongoInfra) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec4_0_MongoInfra) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec4_2_Mongod struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongod 4.2 hosts.
	Config *config.MongodConfig4_2 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongod host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec4_2_Mongod) Reset() {
	*x = MongodbSpec4_2_Mongod{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec4_2_Mongod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec4_2_Mongod) ProtoMessage() {}

func (x *MongodbSpec4_2_Mongod) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec4_2_Mongod.ProtoReflect.Descriptor instead.
func (*MongodbSpec4_2_Mongod) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{57, 0}
}

func (x *MongodbSpec4_2_Mongod) GetConfig() *config.MongodConfig4_2 {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec4_2_Mongod) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec4_2_Mongod) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec4_2_MongoCfg struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongocfg 4.2 hosts.
	Config *config.MongoCfgConfig4_2 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongocfg host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec4_2_MongoCfg) Reset() {
	*x = MongodbSpec4_2_MongoCfg{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec4_2_MongoCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec4_2_MongoCfg) ProtoMessage() {}

func (x *MongodbSpec4_2_MongoCfg) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec4_2_MongoCfg.ProtoReflect.Descriptor instead.
func (*MongodbSpec4_2_MongoCfg) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{57, 1}
}

func (x *MongodbSpec4_2_MongoCfg) GetConfig() *config.MongoCfgConfig4_2 {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec4_2_MongoCfg) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec4_2_MongoCfg) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec4_2_Mongos struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongos 4.2 hosts.
	Config *config.MongosConfig4_2 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongos host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec4_2_Mongos) Reset() {
	*x = MongodbSpec4_2_Mongos{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec4_2_Mongos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec4_2_Mongos) ProtoMessage() {}

func (x *MongodbSpec4_2_Mongos) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec4_2_Mongos.ProtoReflect.Descriptor instead.
func (*MongodbSpec4_2_Mongos) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{57, 2}
}

func (x *MongodbSpec4_2_Mongos) GetConfig() *config.MongosConfig4_2 {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec4_2_Mongos) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec4_2_Mongos) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec4_2_MongoInfra struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongoinfra 4.2 hosts.
	ConfigMongos   *config.MongosConfig4_2   `protobuf:"bytes,1,opt,name=config_mongos,json=configMongos,proto3" json:"config_mongos,omitempty"`
	ConfigMongocfg *config.MongoCfgConfig4_2 `protobuf:"bytes,2,opt,name=config_mongocfg,json=configMongocfg,proto3" json:"config_mongocfg,omitempty"`
	// Resources allocated to each mongoinfra (mongos+mongocfg) host.
	Resources *Resources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,4,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec4_2_MongoInfra) Reset() {
	*x = MongodbSpec4_2_MongoInfra{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec4_2_MongoInfra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec4_2_MongoInfra) ProtoMessage() {}

func (x *MongodbSpec4_2_MongoInfra) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec4_2_MongoInfra.ProtoReflect.Descriptor instead.
func (*MongodbSpec4_2_MongoInfra) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{57, 3}
}

func (x *MongodbSpec4_2_MongoInfra) GetConfigMongos() *config.MongosConfig4_2 {
	if x != nil {
		return x.ConfigMongos
	}
	return nil
}

func (x *MongodbSpec4_2_MongoInfra) GetConfigMongocfg() *config.MongoCfgConfig4_2 {
	if x != nil {
		return x.ConfigMongocfg
	}
	return nil
}

func (x *MongodbSpec4_2_MongoInfra) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec4_2_MongoInfra) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec4_4_Mongod struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongod 4.4 hosts.
	Config *config.MongodConfig4_4 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongod host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec4_4_Mongod) Reset() {
	*x = MongodbSpec4_4_Mongod{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec4_4_Mongod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec4_4_Mongod) ProtoMessage() {}

func (x *MongodbSpec4_4_Mongod) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec4_4_Mongod.ProtoReflect.Descriptor instead.
func (*MongodbSpec4_4_Mongod) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{58, 0}
}

func (x *MongodbSpec4_4_Mongod) GetConfig() *config.MongodConfig4_4 {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec4_4_Mongod) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec4_4_Mongod) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec4_4_MongoCfg struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongocfg 4.4 hosts.
	Config *config.MongoCfgConfig4_4 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongocfg host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec4_4_MongoCfg) Reset() {
	*x = MongodbSpec4_4_MongoCfg{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec4_4_MongoCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec4_4_MongoCfg) ProtoMessage() {}

func (x *MongodbSpec4_4_MongoCfg) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec4_4_MongoCfg.ProtoReflect.Descriptor instead.
func (*MongodbSpec4_4_MongoCfg) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{58, 1}
}

func (x *MongodbSpec4_4_MongoCfg) GetConfig() *config.MongoCfgConfig4_4 {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec4_4_MongoCfg) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec4_4_MongoCfg) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec4_4_Mongos struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongos 4.4 hosts.
	Config *config.MongosConfig4_4 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongos host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec4_4_Mongos) Reset() {
	*x = MongodbSpec4_4_Mongos{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec4_4_Mongos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec4_4_Mongos) ProtoMessage() {}

func (x *MongodbSpec4_4_Mongos) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec4_4_Mongos.ProtoReflect.Descriptor instead.
func (*MongodbSpec4_4_Mongos) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{58, 2}
}

func (x *MongodbSpec4_4_Mongos) GetConfig() *config.MongosConfig4_4 {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec4_4_Mongos) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec4_4_Mongos) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec4_4_MongoInfra struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongoinfra 4.4 hosts.
	ConfigMongos   *config.MongosConfig4_4   `protobuf:"bytes,1,opt,name=config_mongos,json=configMongos,proto3" json:"config_mongos,omitempty"`
	ConfigMongocfg *config.MongoCfgConfig4_4 `protobuf:"bytes,2,opt,name=config_mongocfg,json=configMongocfg,proto3" json:"config_mongocfg,omitempty"`
	// Resources allocated to each mongoinfra (mongos+mongocfg) host.
	Resources *Resources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,4,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec4_4_MongoInfra) Reset() {
	*x = MongodbSpec4_4_MongoInfra{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec4_4_MongoInfra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec4_4_MongoInfra) ProtoMessage() {}

func (x *MongodbSpec4_4_MongoInfra) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec4_4_MongoInfra.ProtoReflect.Descriptor instead.
func (*MongodbSpec4_4_MongoInfra) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{58, 3}
}

func (x *MongodbSpec4_4_MongoInfra) GetConfigMongos() *config.MongosConfig4_4 {
	if x != nil {
		return x.ConfigMongos
	}
	return nil
}

func (x *MongodbSpec4_4_MongoInfra) GetConfigMongocfg() *config.MongoCfgConfig4_4 {
	if x != nil {
		return x.ConfigMongocfg
	}
	return nil
}

func (x *MongodbSpec4_4_MongoInfra) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec4_4_MongoInfra) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec4_4Enterprise_Mongod struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongod 4.4 hosts.
	Config *config.MongodConfig4_4Enterprise `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongod host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec4_4Enterprise_Mongod) Reset() {
	*x = MongodbSpec4_4Enterprise_Mongod{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec4_4Enterprise_Mongod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec4_4Enterprise_Mongod) ProtoMessage() {}

func (x *MongodbSpec4_4Enterprise_Mongod) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec4_4Enterprise_Mongod.ProtoReflect.Descriptor instead.
func (*MongodbSpec4_4Enterprise_Mongod) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{59, 0}
}

func (x *MongodbSpec4_4Enterprise_Mongod) GetConfig() *config.MongodConfig4_4Enterprise {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec4_4Enterprise_Mongod) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec4_4Enterprise_Mongod) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec4_4Enterprise_MongoCfg struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongocfg 4.4 hosts.
	Config *config.MongoCfgConfig4_4Enterprise `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongocfg host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec4_4Enterprise_MongoCfg) Reset() {
	*x = MongodbSpec4_4Enterprise_MongoCfg{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec4_4Enterprise_MongoCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec4_4Enterprise_MongoCfg) ProtoMessage() {}

func (x *MongodbSpec4_4Enterprise_MongoCfg) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec4_4Enterprise_MongoCfg.ProtoReflect.Descriptor instead.
func (*MongodbSpec4_4Enterprise_MongoCfg) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{59, 1}
}

func (x *MongodbSpec4_4Enterprise_MongoCfg) GetConfig() *config.MongoCfgConfig4_4Enterprise {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec4_4Enterprise_MongoCfg) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec4_4Enterprise_MongoCfg) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec4_4Enterprise_Mongos struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongos 4.4 hosts.
	Config *config.MongosConfig4_4Enterprise `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongos host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec4_4Enterprise_Mongos) Reset() {
	*x = MongodbSpec4_4Enterprise_Mongos{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec4_4Enterprise_Mongos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec4_4Enterprise_Mongos) ProtoMessage() {}

func (x *MongodbSpec4_4Enterprise_Mongos) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec4_4Enterprise_Mongos.ProtoReflect.Descriptor instead.
func (*MongodbSpec4_4Enterprise_Mongos) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{59, 2}
}

func (x *MongodbSpec4_4Enterprise_Mongos) GetConfig() *config.MongosConfig4_4Enterprise {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec4_4Enterprise_Mongos) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec4_4Enterprise_Mongos) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec4_4Enterprise_MongoInfra struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongoinfra 4.4 hosts.
	ConfigMongos   *config.MongosConfig4_4Enterprise   `protobuf:"bytes,1,opt,name=config_mongos,json=configMongos,proto3" json:"config_mongos,omitempty"`
	ConfigMongocfg *config.MongoCfgConfig4_4Enterprise `protobuf:"bytes,2,opt,name=config_mongocfg,json=configMongocfg,proto3" json:"config_mongocfg,omitempty"`
	// Resources allocated to each mongoinfra (mongos+mongocfg) host.
	Resources *Resources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,4,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec4_4Enterprise_MongoInfra) Reset() {
	*x = MongodbSpec4_4Enterprise_MongoInfra{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec4_4Enterprise_MongoInfra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec4_4Enterprise_MongoInfra) ProtoMessage() {}

func (x *MongodbSpec4_4Enterprise_MongoInfra) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec4_4Enterprise_MongoInfra.ProtoReflect.Descriptor instead.
func (*MongodbSpec4_4Enterprise_MongoInfra) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{59, 3}
}

func (x *MongodbSpec4_4Enterprise_MongoInfra) GetConfigMongos() *config.MongosConfig4_4Enterprise {
	if x != nil {
		return x.ConfigMongos
	}
	return nil
}

func (x *MongodbSpec4_4Enterprise_MongoInfra) GetConfigMongocfg() *config.MongoCfgConfig4_4Enterprise {
	if x != nil {
		return x.ConfigMongocfg
	}
	return nil
}

func (x *MongodbSpec4_4Enterprise_MongoInfra) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec4_4Enterprise_MongoInfra) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec5_0_Mongod struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongod 5.0 hosts.
	Config *config.MongodConfig5_0 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongod host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec5_0_Mongod) Reset() {
	*x = MongodbSpec5_0_Mongod{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec5_0_Mongod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec5_0_Mongod) ProtoMessage() {}

func (x *MongodbSpec5_0_Mongod) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec5_0_Mongod.ProtoReflect.Descriptor instead.
func (*MongodbSpec5_0_Mongod) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{60, 0}
}

func (x *MongodbSpec5_0_Mongod) GetConfig() *config.MongodConfig5_0 {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec5_0_Mongod) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec5_0_Mongod) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec5_0_MongoCfg struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongocfg 5.0 hosts.
	Config *config.MongoCfgConfig5_0 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongocfg host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec5_0_MongoCfg) Reset() {
	*x = MongodbSpec5_0_MongoCfg{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec5_0_MongoCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec5_0_MongoCfg) ProtoMessage() {}

func (x *MongodbSpec5_0_MongoCfg) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec5_0_MongoCfg.ProtoReflect.Descriptor instead.
func (*MongodbSpec5_0_MongoCfg) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{60, 1}
}

func (x *MongodbSpec5_0_MongoCfg) GetConfig() *config.MongoCfgConfig5_0 {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec5_0_MongoCfg) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec5_0_MongoCfg) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec5_0_Mongos struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongos 5.0 hosts.
	Config *config.MongosConfig5_0 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongos host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec5_0_Mongos) Reset() {
	*x = MongodbSpec5_0_Mongos{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec5_0_Mongos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec5_0_Mongos) ProtoMessage() {}

func (x *MongodbSpec5_0_Mongos) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec5_0_Mongos.ProtoReflect.Descriptor instead.
func (*MongodbSpec5_0_Mongos) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{60, 2}
}

func (x *MongodbSpec5_0_Mongos) GetConfig() *config.MongosConfig5_0 {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec5_0_Mongos) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec5_0_Mongos) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec5_0_MongoInfra struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongoinfra 5.0 hosts.
	ConfigMongos   *config.MongosConfig5_0   `protobuf:"bytes,1,opt,name=config_mongos,json=configMongos,proto3" json:"config_mongos,omitempty"`
	ConfigMongocfg *config.MongoCfgConfig5_0 `protobuf:"bytes,2,opt,name=config_mongocfg,json=configMongocfg,proto3" json:"config_mongocfg,omitempty"`
	// Resources allocated to each mongoinfra (mongos+mongocfg) host.
	Resources *Resources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,4,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec5_0_MongoInfra) Reset() {
	*x = MongodbSpec5_0_MongoInfra{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec5_0_MongoInfra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec5_0_MongoInfra) ProtoMessage() {}

func (x *MongodbSpec5_0_MongoInfra) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec5_0_MongoInfra.ProtoReflect.Descriptor instead.
func (*MongodbSpec5_0_MongoInfra) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{60, 3}
}

func (x *MongodbSpec5_0_MongoInfra) GetConfigMongos() *config.MongosConfig5_0 {
	if x != nil {
		return x.ConfigMongos
	}
	return nil
}

func (x *MongodbSpec5_0_MongoInfra) GetConfigMongocfg() *config.MongoCfgConfig5_0 {
	if x != nil {
		return x.ConfigMongocfg
	}
	return nil
}

func (x *MongodbSpec5_0_MongoInfra) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec5_0_MongoInfra) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec5_0Enterprise_Mongod struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongod 5.0 hosts.
	Config *config.MongodConfig5_0Enterprise `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongod host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec5_0Enterprise_Mongod) Reset() {
	*x = MongodbSpec5_0Enterprise_Mongod{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec5_0Enterprise_Mongod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec5_0Enterprise_Mongod) ProtoMessage() {}

func (x *MongodbSpec5_0Enterprise_Mongod) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec5_0Enterprise_Mongod.ProtoReflect.Descriptor instead.
func (*MongodbSpec5_0Enterprise_Mongod) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{61, 0}
}

func (x *MongodbSpec5_0Enterprise_Mongod) GetConfig() *config.MongodConfig5_0Enterprise {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec5_0Enterprise_Mongod) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec5_0Enterprise_Mongod) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec5_0Enterprise_MongoCfg struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongocfg 5.0 hosts.
	Config *config.MongoCfgConfig5_0Enterprise `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongocfg host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec5_0Enterprise_MongoCfg) Reset() {
	*x = MongodbSpec5_0Enterprise_MongoCfg{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec5_0Enterprise_MongoCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec5_0Enterprise_MongoCfg) ProtoMessage() {}

func (x *MongodbSpec5_0Enterprise_MongoCfg) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec5_0Enterprise_MongoCfg.ProtoReflect.Descriptor instead.
func (*MongodbSpec5_0Enterprise_MongoCfg) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{61, 1}
}

func (x *MongodbSpec5_0Enterprise_MongoCfg) GetConfig() *config.MongoCfgConfig5_0Enterprise {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec5_0Enterprise_MongoCfg) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec5_0Enterprise_MongoCfg) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec5_0Enterprise_Mongos struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongos 5.0 hosts.
	Config *config.MongosConfig5_0Enterprise `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongos host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec5_0Enterprise_Mongos) Reset() {
	*x = MongodbSpec5_0Enterprise_Mongos{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec5_0Enterprise_Mongos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec5_0Enterprise_Mongos) ProtoMessage() {}

func (x *MongodbSpec5_0Enterprise_Mongos) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec5_0Enterprise_Mongos.ProtoReflect.Descriptor instead.
func (*MongodbSpec5_0Enterprise_Mongos) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{61, 2}
}

func (x *MongodbSpec5_0Enterprise_Mongos) GetConfig() *config.MongosConfig5_0Enterprise {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec5_0Enterprise_Mongos) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec5_0Enterprise_Mongos) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec5_0Enterprise_MongoInfra struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongoinfra 5.0 hosts.
	ConfigMongos   *config.MongosConfig5_0Enterprise   `protobuf:"bytes,1,opt,name=config_mongos,json=configMongos,proto3" json:"config_mongos,omitempty"`
	ConfigMongocfg *config.MongoCfgConfig5_0Enterprise `protobuf:"bytes,2,opt,name=config_mongocfg,json=configMongocfg,proto3" json:"config_mongocfg,omitempty"`
	// Resources allocated to each mongoinfra (mongos+mongocfg) host.
	Resources *Resources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,4,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec5_0Enterprise_MongoInfra) Reset() {
	*x = MongodbSpec5_0Enterprise_MongoInfra{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec5_0Enterprise_MongoInfra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec5_0Enterprise_MongoInfra) ProtoMessage() {}

func (x *MongodbSpec5_0Enterprise_MongoInfra) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec5_0Enterprise_MongoInfra.ProtoReflect.Descriptor instead.
func (*MongodbSpec5_0Enterprise_MongoInfra) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{61, 3}
}

func (x *MongodbSpec5_0Enterprise_MongoInfra) GetConfigMongos() *config.MongosConfig5_0Enterprise {
	if x != nil {
		return x.ConfigMongos
	}
	return nil
}

func (x *MongodbSpec5_0Enterprise_MongoInfra) GetConfigMongocfg() *config.MongoCfgConfig5_0Enterprise {
	if x != nil {
		return x.ConfigMongocfg
	}
	return nil
}

func (x *MongodbSpec5_0Enterprise_MongoInfra) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec5_0Enterprise_MongoInfra) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec6_0_Mongod struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongod 6.0 hosts.
	Config *config.MongodConfig6_0 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongod host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec6_0_Mongod) Reset() {
	*x = MongodbSpec6_0_Mongod{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec6_0_Mongod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec6_0_Mongod) ProtoMessage() {}

func (x *MongodbSpec6_0_Mongod) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec6_0_Mongod.ProtoReflect.Descriptor instead.
func (*MongodbSpec6_0_Mongod) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{62, 0}
}

func (x *MongodbSpec6_0_Mongod) GetConfig() *config.MongodConfig6_0 {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec6_0_Mongod) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec6_0_Mongod) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec6_0_MongoCfg struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongocfg 6.0 hosts.
	Config *config.MongoCfgConfig6_0 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongocfg host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec6_0_MongoCfg) Reset() {
	*x = MongodbSpec6_0_MongoCfg{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec6_0_MongoCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec6_0_MongoCfg) ProtoMessage() {}

func (x *MongodbSpec6_0_MongoCfg) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec6_0_MongoCfg.ProtoReflect.Descriptor instead.
func (*MongodbSpec6_0_MongoCfg) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{62, 1}
}

func (x *MongodbSpec6_0_MongoCfg) GetConfig() *config.MongoCfgConfig6_0 {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec6_0_MongoCfg) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec6_0_MongoCfg) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec6_0_Mongos struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongos 6.0 hosts.
	Config *config.MongosConfig6_0 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongos host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec6_0_Mongos) Reset() {
	*x = MongodbSpec6_0_Mongos{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec6_0_Mongos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec6_0_Mongos) ProtoMessage() {}

func (x *MongodbSpec6_0_Mongos) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec6_0_Mongos.ProtoReflect.Descriptor instead.
func (*MongodbSpec6_0_Mongos) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{62, 2}
}

func (x *MongodbSpec6_0_Mongos) GetConfig() *config.MongosConfig6_0 {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec6_0_Mongos) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec6_0_Mongos) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec6_0_MongoInfra struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongoinfra 6.0 hosts.
	ConfigMongos   *config.MongosConfig6_0   `protobuf:"bytes,1,opt,name=config_mongos,json=configMongos,proto3" json:"config_mongos,omitempty"`
	ConfigMongocfg *config.MongoCfgConfig6_0 `protobuf:"bytes,2,opt,name=config_mongocfg,json=configMongocfg,proto3" json:"config_mongocfg,omitempty"`
	// Resources allocated to each mongoinfra (mongos+mongocfg) host.
	Resources *Resources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,4,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec6_0_MongoInfra) Reset() {
	*x = MongodbSpec6_0_MongoInfra{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec6_0_MongoInfra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec6_0_MongoInfra) ProtoMessage() {}

func (x *MongodbSpec6_0_MongoInfra) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec6_0_MongoInfra.ProtoReflect.Descriptor instead.
func (*MongodbSpec6_0_MongoInfra) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{62, 3}
}

func (x *MongodbSpec6_0_MongoInfra) GetConfigMongos() *config.MongosConfig6_0 {
	if x != nil {
		return x.ConfigMongos
	}
	return nil
}

func (x *MongodbSpec6_0_MongoInfra) GetConfigMongocfg() *config.MongoCfgConfig6_0 {
	if x != nil {
		return x.ConfigMongocfg
	}
	return nil
}

func (x *MongodbSpec6_0_MongoInfra) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec6_0_MongoInfra) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec6_0Enterprise_Mongod struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongod 6.0 hosts.
	Config *config.MongodConfig6_0Enterprise `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongod host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec6_0Enterprise_Mongod) Reset() {
	*x = MongodbSpec6_0Enterprise_Mongod{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec6_0Enterprise_Mongod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec6_0Enterprise_Mongod) ProtoMessage() {}

func (x *MongodbSpec6_0Enterprise_Mongod) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec6_0Enterprise_Mongod.ProtoReflect.Descriptor instead.
func (*MongodbSpec6_0Enterprise_Mongod) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{63, 0}
}

func (x *MongodbSpec6_0Enterprise_Mongod) GetConfig() *config.MongodConfig6_0Enterprise {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec6_0Enterprise_Mongod) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec6_0Enterprise_Mongod) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec6_0Enterprise_MongoCfg struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongocfg 6.0 hosts.
	Config *config.MongoCfgConfig6_0Enterprise `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongocfg host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec6_0Enterprise_MongoCfg) Reset() {
	*x = MongodbSpec6_0Enterprise_MongoCfg{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec6_0Enterprise_MongoCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec6_0Enterprise_MongoCfg) ProtoMessage() {}

func (x *MongodbSpec6_0Enterprise_MongoCfg) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec6_0Enterprise_MongoCfg.ProtoReflect.Descriptor instead.
func (*MongodbSpec6_0Enterprise_MongoCfg) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{63, 1}
}

func (x *MongodbSpec6_0Enterprise_MongoCfg) GetConfig() *config.MongoCfgConfig6_0Enterprise {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec6_0Enterprise_MongoCfg) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec6_0Enterprise_MongoCfg) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec6_0Enterprise_Mongos struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongos 6.0 hosts.
	Config *config.MongosConfig6_0Enterprise `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongos host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec6_0Enterprise_Mongos) Reset() {
	*x = MongodbSpec6_0Enterprise_Mongos{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec6_0Enterprise_Mongos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec6_0Enterprise_Mongos) ProtoMessage() {}

func (x *MongodbSpec6_0Enterprise_Mongos) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec6_0Enterprise_Mongos.ProtoReflect.Descriptor instead.
func (*MongodbSpec6_0Enterprise_Mongos) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{63, 2}
}

func (x *MongodbSpec6_0Enterprise_Mongos) GetConfig() *config.MongosConfig6_0Enterprise {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec6_0Enterprise_Mongos) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec6_0Enterprise_Mongos) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec6_0Enterprise_MongoInfra struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongoinfra 6.0 hosts.
	ConfigMongos   *config.MongosConfig6_0Enterprise   `protobuf:"bytes,1,opt,name=config_mongos,json=configMongos,proto3" json:"config_mongos,omitempty"`
	ConfigMongocfg *config.MongoCfgConfig6_0Enterprise `protobuf:"bytes,2,opt,name=config_mongocfg,json=configMongocfg,proto3" json:"config_mongocfg,omitempty"`
	// Resources allocated to each mongoinfra (mongos+mongocfg) host.
	Resources *Resources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,4,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec6_0Enterprise_MongoInfra) Reset() {
	*x = MongodbSpec6_0Enterprise_MongoInfra{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec6_0Enterprise_MongoInfra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec6_0Enterprise_MongoInfra) ProtoMessage() {}

func (x *MongodbSpec6_0Enterprise_MongoInfra) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec6_0Enterprise_MongoInfra.ProtoReflect.Descriptor instead.
func (*MongodbSpec6_0Enterprise_MongoInfra) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{63, 3}
}

func (x *MongodbSpec6_0Enterprise_MongoInfra) GetConfigMongos() *config.MongosConfig6_0Enterprise {
	if x != nil {
		return x.ConfigMongos
	}
	return nil
}

func (x *MongodbSpec6_0Enterprise_MongoInfra) GetConfigMongocfg() *config.MongoCfgConfig6_0Enterprise {
	if x != nil {
		return x.ConfigMongocfg
	}
	return nil
}

func (x *MongodbSpec6_0Enterprise_MongoInfra) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec6_0Enterprise_MongoInfra) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec_Mongod struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Config *config.MongodConfig   `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongod host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec_Mongod) Reset() {
	*x = MongodbSpec_Mongod{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec_Mongod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec_Mongod) ProtoMessage() {}

func (x *MongodbSpec_Mongod) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec_Mongod.ProtoReflect.Descriptor instead.
func (*MongodbSpec_Mongod) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{64, 0}
}

func (x *MongodbSpec_Mongod) GetConfig() *config.MongodConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec_Mongod) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec_Mongod) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec_MongoCfg struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongocfg hosts.
	Config *config.MongoCfgConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongocfg host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec_MongoCfg) Reset() {
	*x = MongodbSpec_MongoCfg{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec_MongoCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec_MongoCfg) ProtoMessage() {}

func (x *MongodbSpec_MongoCfg) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec_MongoCfg.ProtoReflect.Descriptor instead.
func (*MongodbSpec_MongoCfg) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{64, 1}
}

func (x *MongodbSpec_MongoCfg) GetConfig() *config.MongoCfgConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec_MongoCfg) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec_MongoCfg) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec_Mongos struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongos hosts.
	Config *config.MongosConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each mongos host.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,3,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec_Mongos) Reset() {
	*x = MongodbSpec_Mongos{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec_Mongos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec_Mongos) ProtoMessage() {}

func (x *MongodbSpec_Mongos) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec_Mongos.ProtoReflect.Descriptor instead.
func (*MongodbSpec_Mongos) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{64, 2}
}

func (x *MongodbSpec_Mongos) GetConfig() *config.MongosConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *MongodbSpec_Mongos) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec_Mongos) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

type MongodbSpec_MongoInfra struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for mongoinfra hosts.
	ConfigMongos   *config.MongosConfig   `protobuf:"bytes,1,opt,name=config_mongos,json=configMongos,proto3" json:"config_mongos,omitempty"`
	ConfigMongocfg *config.MongoCfgConfig `protobuf:"bytes,2,opt,name=config_mongocfg,json=configMongocfg,proto3" json:"config_mongocfg,omitempty"`
	// Resources allocated to each mongoinfra (mongos+mongocfg) host.
	Resources *Resources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,4,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MongodbSpec_MongoInfra) Reset() {
	*x = MongodbSpec_MongoInfra{}
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MongodbSpec_MongoInfra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MongodbSpec_MongoInfra) ProtoMessage() {}

func (x *MongodbSpec_MongoInfra) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MongodbSpec_MongoInfra.ProtoReflect.Descriptor instead.
func (*MongodbSpec_MongoInfra) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP(), []int{64, 3}
}

func (x *MongodbSpec_MongoInfra) GetConfigMongos() *config.MongosConfig {
	if x != nil {
		return x.ConfigMongos
	}
	return nil
}

func (x *MongodbSpec_MongoInfra) GetConfigMongocfg() *config.MongoCfgConfig {
	if x != nil {
		return x.ConfigMongocfg
	}
	return nil
}

func (x *MongodbSpec_MongoInfra) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MongodbSpec_MongoInfra) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

var File_yandex_cloud_mdb_mongodb_v1_cluster_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDesc = "" +
	"\n" +
	"1yandex/cloud/mdb/mongodb/v1/cluster_service.proto\x12\x1byandex.cloud.mdb.mongodb.v1\x1a\x1cgoogle/api/annotations.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1bgoogle/type/timeofday.proto\x1a yandex/cloud/access/access.proto\x1a yandex/cloud/api/operation.proto\x1a4yandex/cloud/mdb/operationlog/v1/operation_log.proto\x1a(yandex/cloud/mdb/mongodb/v1/backup.proto\x1a)yandex/cloud/mdb/mongodb/v1/cluster.proto\x1a0yandex/cloud/mdb/mongodb/v1/config/mongodb.proto\x1a3yandex/cloud/mdb/mongodb/v1/config/mongodb3_6.proto\x1a3yandex/cloud/mdb/mongodb/v1/config/mongodb4_0.proto\x1a3yandex/cloud/mdb/mongodb/v1/config/mongodb4_2.proto\x1a3yandex/cloud/mdb/mongodb/v1/config/mongodb4_4.proto\x1a>yandex/cloud/mdb/mongodb/v1/config/mongodb4_4_enterprise.proto\x1a3yandex/cloud/mdb/mongodb/v1/config/mongodb5_0.proto\x1a>yandex/cloud/mdb/mongodb/v1/config/mongodb5_0_enterprise.proto\x1a3yandex/cloud/mdb/mongodb/v1/config/mongodb6_0.proto\x1a>yandex/cloud/mdb/mongodb/v1/config/mongodb6_0_enterprise.proto\x1a*yandex/cloud/mdb/mongodb/v1/database.proto\x1a-yandex/cloud/mdb/mongodb/v1/maintenance.proto\x1a&yandex/cloud/mdb/mongodb/v1/user.proto\x1a&yandex/cloud/operation/operation.proto\x1a\x1dyandex/cloud/validation.proto\"@\n" +
	"\x11GetClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"\xb7\x01\n" +
	"\x13ListClustersRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\x12\"\n" +
	"\x06filter\x18\x04 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"\x80\x01\n" +
	"\x14ListClustersResponse\x12@\n" +
	"\bclusters\x18\x01 \x03(\v2$.yandex.cloud.mdb.mongodb.v1.ClusterR\bclusters\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xd0\b\n" +
	"\x14CreateClusterRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x122\n" +
	"\x04name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x04name\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x92\x01\n" +
	"\x06labels\x18\x04 \x03(\v2=.yandex.cloud.mdb.mongodb.v1.CreateClusterRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x04<=63R\x06labels\x12X\n" +
	"\venvironment\x18\x05 \x01(\x0e20.yandex.cloud.mdb.mongodb.v1.Cluster.EnvironmentB\x04\xe8\xc71\x01R\venvironment\x12N\n" +
	"\vconfig_spec\x18\x06 \x01(\v2'.yandex.cloud.mdb.mongodb.v1.ConfigSpecB\x04\xe8\xc71\x01R\n" +
	"configSpec\x12X\n" +
	"\x0edatabase_specs\x18\a \x03(\v2).yandex.cloud.mdb.mongodb.v1.DatabaseSpecB\x06\x82\xc81\x02>0R\rdatabaseSpecs\x12L\n" +
	"\n" +
	"user_specs\x18\b \x03(\v2%.yandex.cloud.mdb.mongodb.v1.UserSpecB\x06\x82\xc81\x02>0R\tuserSpecs\x12L\n" +
	"\n" +
	"host_specs\x18\t \x03(\v2%.yandex.cloud.mdb.mongodb.v1.HostSpecB\x06\x82\xc81\x02>0R\thostSpecs\x12+\n" +
	"\n" +
	"network_id\x18\n" +
	" \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tnetworkId\x12,\n" +
	"\x12security_group_ids\x18\v \x03(\tR\x10securityGroupIds\x12/\n" +
	"\x13deletion_protection\x18\f \x01(\bR\x12deletionProtection\x12]\n" +
	"\x12maintenance_window\x18\r \x01(\v2..yandex.cloud.mdb.mongodb.v1.MaintenanceWindowR\x11maintenanceWindow\x12Q\n" +
	"\x16disk_encryption_key_id\x18\x0e \x01(\v2\x1c.google.protobuf.StringValueR\x13diskEncryptionKeyId\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8b\x01\n" +
	"\x15CreateClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12S\n" +
	"\roperation_log\x18\x02 \x01(\v2..yandex.cloud.mdb.operationlog.v1.OperationLogR\foperationLog\"\xde\x05\n" +
	"\x14UpdateClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x92\x01\n" +
	"\x06labels\x18\x04 \x03(\v2=.yandex.cloud.mdb.mongodb.v1.UpdateClusterRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x04<=63R\x06labels\x12H\n" +
	"\vconfig_spec\x18\x05 \x01(\v2'.yandex.cloud.mdb.mongodb.v1.ConfigSpecR\n" +
	"configSpec\x12.\n" +
	"\x04name\x18\x06 \x01(\tB\x1a\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x04name\x12]\n" +
	"\x12maintenance_window\x18\a \x01(\v2..yandex.cloud.mdb.mongodb.v1.MaintenanceWindowR\x11maintenanceWindow\x12,\n" +
	"\x12security_group_ids\x18\b \x03(\tR\x10securityGroupIds\x12/\n" +
	"\x13deletion_protection\x18\t \x01(\bR\x12deletionProtection\x12'\n" +
	"\n" +
	"network_id\x18\n" +
	" \x01(\tB\b\x8a\xc81\x04<=50R\tnetworkId\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8b\x01\n" +
	"\x15UpdateClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12S\n" +
	"\roperation_log\x18\x02 \x01(\v2..yandex.cloud.mdb.operationlog.v1.OperationLogR\foperationLog\"C\n" +
	"\x14DeleteClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"6\n" +
	"\x15DeleteClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"B\n" +
	"\x13StartClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"5\n" +
	"\x14StartClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"A\n" +
	"\x12StopClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"4\n" +
	"\x13StopClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\x83\x01\n" +
	"\x12MoveClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12@\n" +
	"\x15destination_folder_id\x18\x02 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x13destinationFolderId\"\x92\x01\n" +
	"\x13MoveClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12(\n" +
	"\x10source_folder_id\x18\x02 \x01(\tR\x0esourceFolderId\x122\n" +
	"\x15destination_folder_id\x18\x03 \x01(\tR\x13destinationFolderId\"C\n" +
	"\x14BackupClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"6\n" +
	"\x15BackupClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\xfe\b\n" +
	"\x15RestoreClusterRequest\x12!\n" +
	"\tbackup_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\bbackupId\x122\n" +
	"\x04name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x04name\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x93\x01\n" +
	"\x06labels\x18\x04 \x03(\v2>.yandex.cloud.mdb.mongodb.v1.RestoreClusterRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x04<=63R\x06labels\x12X\n" +
	"\venvironment\x18\x05 \x01(\x0e20.yandex.cloud.mdb.mongodb.v1.Cluster.EnvironmentB\x04\xe8\xc71\x01R\venvironment\x12N\n" +
	"\vconfig_spec\x18\x06 \x01(\v2'.yandex.cloud.mdb.mongodb.v1.ConfigSpecB\x04\xe8\xc71\x01R\n" +
	"configSpec\x12L\n" +
	"\n" +
	"host_specs\x18\a \x03(\v2%.yandex.cloud.mdb.mongodb.v1.HostSpecB\x06\x82\xc81\x02>0R\thostSpecs\x12+\n" +
	"\n" +
	"network_id\x18\b \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tnetworkId\x12%\n" +
	"\tfolder_id\x18\t \x01(\tB\b\x8a\xc81\x04<=50R\bfolderId\x12w\n" +
	"\x14recovery_target_spec\x18\n" +
	" \x01(\v2E.yandex.cloud.mdb.mongodb.v1.RestoreClusterRequest.RecoveryTargetSpecR\x12recoveryTargetSpec\x12,\n" +
	"\x12security_group_ids\x18\v \x03(\tR\x10securityGroupIds\x12/\n" +
	"\x13deletion_protection\x18\f \x01(\bR\x12deletionProtection\x12]\n" +
	"\x12maintenance_window\x18\r \x01(\v2..yandex.cloud.mdb.mongodb.v1.MaintenanceWindowR\x11maintenanceWindow\x12Q\n" +
	"\x16disk_encryption_key_id\x18\x0e \x01(\v2\x1c.google.protobuf.StringValueR\x13diskEncryptionKeyId\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a:\n" +
	"\x12RecoveryTargetSpec\x12$\n" +
	"\ttimestamp\x18\x01 \x01(\x03B\x06\xfa\xc71\x02>0R\ttimestamp\"T\n" +
	"\x16RestoreClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1b\n" +
	"\tbackup_id\x18\x02 \x01(\tR\bbackupId\"\xf5\x02\n" +
	"\x1cRescheduleMaintenanceRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12w\n" +
	"\x0freschedule_type\x18\x02 \x01(\x0e2H.yandex.cloud.mdb.mongodb.v1.RescheduleMaintenanceRequest.RescheduleTypeB\x04\xe8\xc71\x01R\x0erescheduleType\x12?\n" +
	"\rdelayed_until\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\fdelayedUntil\"n\n" +
	"\x0eRescheduleType\x12\x1f\n" +
	"\x1bRESCHEDULE_TYPE_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tIMMEDIATE\x10\x01\x12\x19\n" +
	"\x15NEXT_AVAILABLE_WINDOW\x10\x02\x12\x11\n" +
	"\rSPECIFIC_TIME\x10\x03\"\x85\x01\n" +
	"\x1dRescheduleMaintenanceMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12?\n" +
	"\rdelayed_until\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\fdelayedUntilJ\x04\b\x02\x10\x04\"\xd0\x01\n" +
	"\tLogRecord\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12M\n" +
	"\amessage\x18\x02 \x03(\v23.yandex.cloud.mdb.mongodb.v1.LogRecord.MessageEntryR\amessage\x1a:\n" +
	"\fMessageEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xed\x03\n" +
	"\x16ListClusterLogsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12#\n" +
	"\rcolumn_filter\x18\x02 \x03(\tR\fcolumnFilter\x12b\n" +
	"\fservice_type\x18\x03 \x01(\x0e2?.yandex.cloud.mdb.mongodb.v1.ListClusterLogsRequest.ServiceTypeR\vserviceType\x127\n" +
	"\tfrom_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\bfromTime\x123\n" +
	"\ato_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x06toTime\x12'\n" +
	"\tpage_size\x18\x06 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\a \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\\\n" +
	"\vServiceType\x12\x1c\n" +
	"\x18SERVICE_TYPE_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06MONGOD\x10\x01\x12\n" +
	"\n" +
	"\x06MONGOS\x10\x02\x12\f\n" +
	"\bMONGOCFG\x10\x03\x12\t\n" +
	"\x05AUDIT\x10\x04\"}\n" +
	"\x17ListClusterLogsResponse\x12:\n" +
	"\x04logs\x18\x01 \x03(\v2&.yandex.cloud.mdb.mongodb.v1.LogRecordR\x04logs\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"}\n" +
	"\x0fStreamLogRecord\x12>\n" +
	"\x06record\x18\x01 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.LogRecordR\x06record\x12*\n" +
	"\x11next_record_token\x18\x02 \x01(\tR\x0fnextRecordToken\"\xf0\x03\n" +
	"\x18StreamClusterLogsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12#\n" +
	"\rcolumn_filter\x18\x02 \x03(\tR\fcolumnFilter\x12d\n" +
	"\fservice_type\x18\x03 \x01(\x0e2A.yandex.cloud.mdb.mongodb.v1.StreamClusterLogsRequest.ServiceTypeR\vserviceType\x127\n" +
	"\tfrom_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\bfromTime\x123\n" +
	"\ato_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x06toTime\x12,\n" +
	"\frecord_token\x18\x06 \x01(\tB\t\x8a\xc81\x05<=100R\vrecordToken\x12\"\n" +
	"\x06filter\x18\a \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"\\\n" +
	"\vServiceType\x12\x1c\n" +
	"\x18SERVICE_TYPE_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06MONGOD\x10\x01\x12\n" +
	"\n" +
	"\x06MONGOS\x10\x02\x12\f\n" +
	"\bMONGOCFG\x10\x03\x12\t\n" +
	"\x05AUDIT\x10\x04\"\x9e\x01\n" +
	"\x1cListClusterOperationsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x8a\x01\n" +
	"\x1dListClusterOperationsResponse\x12A\n" +
	"\n" +
	"operations\x18\x01 \x03(\v2!.yandex.cloud.operation.OperationR\n" +
	"operations\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x9b\x01\n" +
	"\x19ListClusterBackupsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x83\x01\n" +
	"\x1aListClusterBackupsResponse\x12=\n" +
	"\abackups\x18\x01 \x03(\v2#.yandex.cloud.mdb.mongodb.v1.BackupR\abackups\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x99\x01\n" +
	"\x17ListClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"{\n" +
	"\x18ListClusterHostsResponse\x127\n" +
	"\x05hosts\x18\x01 \x03(\v2!.yandex.cloud.mdb.mongodb.v1.HostR\x05hosts\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x93\x01\n" +
	"\x16AddClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12L\n" +
	"\n" +
	"host_specs\x18\x02 \x03(\v2%.yandex.cloud.mdb.mongodb.v1.HostSpecB\x06\x82\xc81\x02>0R\thostSpecs\"W\n" +
	"\x17AddClusterHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"x\n" +
	"\x19DeleteClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12.\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tB\x0f\x82\xc81\x02>0\x8a\xc81\x05<=253R\thostNames\"Z\n" +
	"\x1aDeleteClusterHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"\xa9\x01\n" +
	"\x19UpdateClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12_\n" +
	"\x11update_host_specs\x18\x02 \x03(\v2+.yandex.cloud.mdb.mongodb.v1.UpdateHostSpecB\x06\x82\xc81\x02>0R\x0fupdateHostSpecs\"Z\n" +
	"\x1aUpdateClusterHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"\xe4\x03\n" +
	"\x0eUpdateHostSpec\x12*\n" +
	"\thost_name\x18\x01 \x01(\tB\r\xe8\xc71\x01\x8a\xc81\x05<=253R\bhostName\x122\n" +
	"\x06hidden\x18\x02 \x01(\v2\x1a.google.protobuf.BoolValueR\x06hidden\x12M\n" +
	"\x14secondary_delay_secs\x18\x03 \x01(\v2\x1b.google.protobuf.Int64ValueR\x12secondaryDelaySecs\x128\n" +
	"\bpriority\x18\x04 \x01(\v2\x1c.google.protobuf.DoubleValueR\bpriority\x12(\n" +
	"\x10assign_public_ip\x18\x05 \x01(\bR\x0eassignPublicIp\x12;\n" +
	"\vupdate_mask\x18\x06 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12I\n" +
	"\x04tags\x18\a \x03(\v25.yandex.cloud.mdb.mongodb.v1.UpdateHostSpec.TagsEntryR\x04tags\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc1\x05\n" +
	"\x1cEnableClusterShardingRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12^\n" +
	"\bmongocfg\x18\x02 \x01(\v2B.yandex.cloud.mdb.mongodb.v1.EnableClusterShardingRequest.MongoCfgR\bmongocfg\x12X\n" +
	"\x06mongos\x18\x03 \x01(\v2@.yandex.cloud.mdb.mongodb.v1.EnableClusterShardingRequest.MongosR\x06mongos\x12L\n" +
	"\n" +
	"host_specs\x18\x04 \x03(\v2%.yandex.cloud.mdb.mongodb.v1.HostSpecB\x06\x82\xc81\x02>0R\thostSpecs\x12d\n" +
	"\n" +
	"mongoinfra\x18\x05 \x01(\v2D.yandex.cloud.mdb.mongodb.v1.EnableClusterShardingRequest.MongoInfraR\n" +
	"mongoinfra\x1aV\n" +
	"\bMongoCfg\x12J\n" +
	"\tresources\x18\x01 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesB\x04\xe8\xc71\x01R\tresources\x1aT\n" +
	"\x06Mongos\x12J\n" +
	"\tresources\x18\x01 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesB\x04\xe8\xc71\x01R\tresources\x1aX\n" +
	"\n" +
	"MongoInfra\x12J\n" +
	"\tresources\x18\x01 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesB\x04\xe8\xc71\x01R\tresources\">\n" +
	"\x1dEnableClusterShardingMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\x84\x01\n" +
	"\x16GetClusterShardRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12=\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\tshardName\"\x9a\x01\n" +
	"\x18ListClusterShardsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x7f\n" +
	"\x19ListClusterShardsResponse\x12:\n" +
	"\x06shards\x18\x01 \x03(\v2\".yandex.cloud.mdb.mongodb.v1.ShardR\x06shards\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xd2\x01\n" +
	"\x16AddClusterShardRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12=\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\tshardName\x12L\n" +
	"\n" +
	"host_specs\x18\x03 \x03(\v2%.yandex.cloud.mdb.mongodb.v1.HostSpecB\x06\x82\xc81\x02>0R\thostSpecs\"W\n" +
	"\x17AddClusterShardMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tR\tshardName\"\x87\x01\n" +
	"\x19DeleteClusterShardRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12=\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\tshardName\"Z\n" +
	"\x1aDeleteClusterShardMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tR\tshardName\"r\n" +
	"\x13ResetupHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12.\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tB\x0f\x82\xc81\x02>0\x8a\xc81\x05<=253R\thostNames\"T\n" +
	"\x14ResetupHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"r\n" +
	"\x13RestartHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12.\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tB\x0f\x82\xc81\x02>0\x8a\xc81\x05<=253R\thostNames\"T\n" +
	"\x14RestartHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"s\n" +
	"\x14StepdownHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12.\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tB\x0f\x82\xc81\x02>0\x8a\xc81\x05<=253R\thostNames\"U\n" +
	"\x15StepdownHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"\xb0\x04\n" +
	"\bHostSpec\x12!\n" +
	"\azone_id\x18\x01 \x01(\tB\b\x8a\xc81\x04<=50R\x06zoneId\x12%\n" +
	"\tsubnet_id\x18\x02 \x01(\tB\b\x8a\xc81\x04<=50R\bsubnetId\x12(\n" +
	"\x10assign_public_ip\x18\x03 \x01(\bR\x0eassignPublicIp\x12:\n" +
	"\x04type\x18\x04 \x01(\x0e2&.yandex.cloud.mdb.mongodb.v1.Host.TypeR\x04type\x129\n" +
	"\n" +
	"shard_name\x18\x05 \x01(\tB\x1a\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\tshardName\x122\n" +
	"\x06hidden\x18\x06 \x01(\v2\x1a.google.protobuf.BoolValueR\x06hidden\x12M\n" +
	"\x14secondary_delay_secs\x18\a \x01(\v2\x1b.google.protobuf.Int64ValueR\x12secondaryDelaySecs\x128\n" +
	"\bpriority\x18\b \x01(\v2\x1c.google.protobuf.DoubleValueR\bpriority\x12C\n" +
	"\x04tags\x18\t \x03(\v2/.yandex.cloud.mdb.mongodb.v1.HostSpec.TagsEntryR\x04tags\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd7\v\n" +
	"\x0eMongodbSpec3_6\x12J\n" +
	"\x06mongod\x18\x01 \x01(\v22.yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.MongodR\x06mongod\x12P\n" +
	"\bmongocfg\x18\x02 \x01(\v24.yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.MongoCfgR\bmongocfg\x12J\n" +
	"\x06mongos\x18\x03 \x01(\v22.yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.MongosR\x06mongos\x12V\n" +
	"\n" +
	"mongoinfra\x18\x04 \x01(\v26.yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.MongoInfraR\n" +
	"mongoinfra\x1a\x81\x02\n" +
	"\x06Mongod\x12K\n" +
	"\x06config\x18\x01 \x01(\v23.yandex.cloud.mdb.mongodb.v1.config.MongodConfig3_6R\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x85\x02\n" +
	"\bMongoCfg\x12M\n" +
	"\x06config\x18\x01 \x01(\v25.yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig3_6R\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x81\x02\n" +
	"\x06Mongos\x12K\n" +
	"\x06config\x18\x01 \x01(\v23.yandex.cloud.mdb.mongodb.v1.config.MongosConfig3_6R\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\xf2\x02\n" +
	"\n" +
	"MongoInfra\x12X\n" +
	"\rconfig_mongos\x18\x01 \x01(\v23.yandex.cloud.mdb.mongodb.v1.config.MongosConfig3_6R\fconfigMongos\x12^\n" +
	"\x0fconfig_mongocfg\x18\x02 \x01(\v25.yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig3_6R\x0econfigMongocfg\x12D\n" +
	"\tresources\x18\x03 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x04 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\"\xd7\v\n" +
	"\x0eMongodbSpec4_0\x12J\n" +
	"\x06mongod\x18\x01 \x01(\v22.yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.MongodR\x06mongod\x12P\n" +
	"\bmongocfg\x18\x02 \x01(\v24.yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.MongoCfgR\bmongocfg\x12J\n" +
	"\x06mongos\x18\x03 \x01(\v22.yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.MongosR\x06mongos\x12V\n" +
	"\n" +
	"mongoinfra\x18\x04 \x01(\v26.yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.MongoInfraR\n" +
	"mongoinfra\x1a\x81\x02\n" +
	"\x06Mongod\x12K\n" +
	"\x06config\x18\x01 \x01(\v23.yandex.cloud.mdb.mongodb.v1.config.MongodConfig4_0R\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x85\x02\n" +
	"\bMongoCfg\x12M\n" +
	"\x06config\x18\x01 \x01(\v25.yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig4_0R\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x81\x02\n" +
	"\x06Mongos\x12K\n" +
	"\x06config\x18\x01 \x01(\v23.yandex.cloud.mdb.mongodb.v1.config.MongosConfig4_0R\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\xf2\x02\n" +
	"\n" +
	"MongoInfra\x12X\n" +
	"\rconfig_mongos\x18\x01 \x01(\v23.yandex.cloud.mdb.mongodb.v1.config.MongosConfig4_0R\fconfigMongos\x12^\n" +
	"\x0fconfig_mongocfg\x18\x02 \x01(\v25.yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig4_0R\x0econfigMongocfg\x12D\n" +
	"\tresources\x18\x03 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x04 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\"\xd7\v\n" +
	"\x0eMongodbSpec4_2\x12J\n" +
	"\x06mongod\x18\x01 \x01(\v22.yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.MongodR\x06mongod\x12P\n" +
	"\bmongocfg\x18\x02 \x01(\v24.yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.MongoCfgR\bmongocfg\x12J\n" +
	"\x06mongos\x18\x03 \x01(\v22.yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.MongosR\x06mongos\x12V\n" +
	"\n" +
	"mongoinfra\x18\x04 \x01(\v26.yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.MongoInfraR\n" +
	"mongoinfra\x1a\x81\x02\n" +
	"\x06Mongod\x12K\n" +
	"\x06config\x18\x01 \x01(\v23.yandex.cloud.mdb.mongodb.v1.config.MongodConfig4_2R\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x85\x02\n" +
	"\bMongoCfg\x12M\n" +
	"\x06config\x18\x01 \x01(\v25.yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig4_2R\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x81\x02\n" +
	"\x06Mongos\x12K\n" +
	"\x06config\x18\x01 \x01(\v23.yandex.cloud.mdb.mongodb.v1.config.MongosConfig4_2R\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\xf2\x02\n" +
	"\n" +
	"MongoInfra\x12X\n" +
	"\rconfig_mongos\x18\x01 \x01(\v23.yandex.cloud.mdb.mongodb.v1.config.MongosConfig4_2R\fconfigMongos\x12^\n" +
	"\x0fconfig_mongocfg\x18\x02 \x01(\v25.yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig4_2R\x0econfigMongocfg\x12D\n" +
	"\tresources\x18\x03 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x04 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\"\xd7\v\n" +
	"\x0eMongodbSpec4_4\x12J\n" +
	"\x06mongod\x18\x01 \x01(\v22.yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.MongodR\x06mongod\x12P\n" +
	"\bmongocfg\x18\x02 \x01(\v24.yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.MongoCfgR\bmongocfg\x12J\n" +
	"\x06mongos\x18\x03 \x01(\v22.yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.MongosR\x06mongos\x12V\n" +
	"\n" +
	"mongoinfra\x18\x04 \x01(\v26.yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.MongoInfraR\n" +
	"mongoinfra\x1a\x81\x02\n" +
	"\x06Mongod\x12K\n" +
	"\x06config\x18\x01 \x01(\v23.yandex.cloud.mdb.mongodb.v1.config.MongodConfig4_4R\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x85\x02\n" +
	"\bMongoCfg\x12M\n" +
	"\x06config\x18\x01 \x01(\v25.yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig4_4R\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x81\x02\n" +
	"\x06Mongos\x12K\n" +
	"\x06config\x18\x01 \x01(\v23.yandex.cloud.mdb.mongodb.v1.config.MongosConfig4_4R\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\xf2\x02\n" +
	"\n" +
	"MongoInfra\x12X\n" +
	"\rconfig_mongos\x18\x01 \x01(\v23.yandex.cloud.mdb.mongodb.v1.config.MongosConfig4_4R\fconfigMongos\x12^\n" +
	"\x0fconfig_mongocfg\x18\x02 \x01(\v25.yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig4_4R\x0econfigMongocfg\x12D\n" +
	"\tresources\x18\x03 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x04 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\"\xc5\f\n" +
	"\x19MongodbSpec4_4_enterprise\x12U\n" +
	"\x06mongod\x18\x01 \x01(\v2=.yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.MongodR\x06mongod\x12[\n" +
	"\bmongocfg\x18\x02 \x01(\v2?.yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.MongoCfgR\bmongocfg\x12U\n" +
	"\x06mongos\x18\x03 \x01(\v2=.yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.MongosR\x06mongos\x12a\n" +
	"\n" +
	"mongoinfra\x18\x04 \x01(\v2A.yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.MongoInfraR\n" +
	"mongoinfra\x1a\x8c\x02\n" +
	"\x06Mongod\x12V\n" +
	"\x06config\x18\x01 \x01(\v2>.yandex.cloud.mdb.mongodb.v1.config.MongodConfig4_4_enterpriseR\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x90\x02\n" +
	"\bMongoCfg\x12X\n" +
	"\x06config\x18\x01 \x01(\v2@.yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig4_4_enterpriseR\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x8c\x02\n" +
	"\x06Mongos\x12V\n" +
	"\x06config\x18\x01 \x01(\v2>.yandex.cloud.mdb.mongodb.v1.config.MongosConfig4_4_enterpriseR\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x88\x03\n" +
	"\n" +
	"MongoInfra\x12c\n" +
	"\rconfig_mongos\x18\x01 \x01(\v2>.yandex.cloud.mdb.mongodb.v1.config.MongosConfig4_4_enterpriseR\fconfigMongos\x12i\n" +
	"\x0fconfig_mongocfg\x18\x02 \x01(\v2@.yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig4_4_enterpriseR\x0econfigMongocfg\x12D\n" +
	"\tresources\x18\x03 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x04 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\"\xd7\v\n" +
	"\x0eMongodbSpec5_0\x12J\n" +
	"\x06mongod\x18\x01 \x01(\v22.yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.MongodR\x06mongod\x12P\n" +
	"\bmongocfg\x18\x02 \x01(\v24.yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.MongoCfgR\bmongocfg\x12J\n" +
	"\x06mongos\x18\x03 \x01(\v22.yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.MongosR\x06mongos\x12V\n" +
	"\n" +
	"mongoinfra\x18\x04 \x01(\v26.yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.MongoInfraR\n" +
	"mongoinfra\x1a\x81\x02\n" +
	"\x06Mongod\x12K\n" +
	"\x06config\x18\x01 \x01(\v23.yandex.cloud.mdb.mongodb.v1.config.MongodConfig5_0R\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x85\x02\n" +
	"\bMongoCfg\x12M\n" +
	"\x06config\x18\x01 \x01(\v25.yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig5_0R\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x81\x02\n" +
	"\x06Mongos\x12K\n" +
	"\x06config\x18\x01 \x01(\v23.yandex.cloud.mdb.mongodb.v1.config.MongosConfig5_0R\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\xf2\x02\n" +
	"\n" +
	"MongoInfra\x12X\n" +
	"\rconfig_mongos\x18\x01 \x01(\v23.yandex.cloud.mdb.mongodb.v1.config.MongosConfig5_0R\fconfigMongos\x12^\n" +
	"\x0fconfig_mongocfg\x18\x02 \x01(\v25.yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig5_0R\x0econfigMongocfg\x12D\n" +
	"\tresources\x18\x03 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x04 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\"\xc5\f\n" +
	"\x19MongodbSpec5_0_enterprise\x12U\n" +
	"\x06mongod\x18\x01 \x01(\v2=.yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.MongodR\x06mongod\x12[\n" +
	"\bmongocfg\x18\x02 \x01(\v2?.yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.MongoCfgR\bmongocfg\x12U\n" +
	"\x06mongos\x18\x03 \x01(\v2=.yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.MongosR\x06mongos\x12a\n" +
	"\n" +
	"mongoinfra\x18\x04 \x01(\v2A.yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.MongoInfraR\n" +
	"mongoinfra\x1a\x8c\x02\n" +
	"\x06Mongod\x12V\n" +
	"\x06config\x18\x01 \x01(\v2>.yandex.cloud.mdb.mongodb.v1.config.MongodConfig5_0_enterpriseR\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x90\x02\n" +
	"\bMongoCfg\x12X\n" +
	"\x06config\x18\x01 \x01(\v2@.yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig5_0_enterpriseR\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x8c\x02\n" +
	"\x06Mongos\x12V\n" +
	"\x06config\x18\x01 \x01(\v2>.yandex.cloud.mdb.mongodb.v1.config.MongosConfig5_0_enterpriseR\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x88\x03\n" +
	"\n" +
	"MongoInfra\x12c\n" +
	"\rconfig_mongos\x18\x01 \x01(\v2>.yandex.cloud.mdb.mongodb.v1.config.MongosConfig5_0_enterpriseR\fconfigMongos\x12i\n" +
	"\x0fconfig_mongocfg\x18\x02 \x01(\v2@.yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig5_0_enterpriseR\x0econfigMongocfg\x12D\n" +
	"\tresources\x18\x03 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x04 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\"\xd7\v\n" +
	"\x0eMongodbSpec6_0\x12J\n" +
	"\x06mongod\x18\x01 \x01(\v22.yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.MongodR\x06mongod\x12P\n" +
	"\bmongocfg\x18\x02 \x01(\v24.yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.MongoCfgR\bmongocfg\x12J\n" +
	"\x06mongos\x18\x03 \x01(\v22.yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.MongosR\x06mongos\x12V\n" +
	"\n" +
	"mongoinfra\x18\x04 \x01(\v26.yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.MongoInfraR\n" +
	"mongoinfra\x1a\x81\x02\n" +
	"\x06Mongod\x12K\n" +
	"\x06config\x18\x01 \x01(\v23.yandex.cloud.mdb.mongodb.v1.config.MongodConfig6_0R\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x85\x02\n" +
	"\bMongoCfg\x12M\n" +
	"\x06config\x18\x01 \x01(\v25.yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig6_0R\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x81\x02\n" +
	"\x06Mongos\x12K\n" +
	"\x06config\x18\x01 \x01(\v23.yandex.cloud.mdb.mongodb.v1.config.MongosConfig6_0R\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\xf2\x02\n" +
	"\n" +
	"MongoInfra\x12X\n" +
	"\rconfig_mongos\x18\x01 \x01(\v23.yandex.cloud.mdb.mongodb.v1.config.MongosConfig6_0R\fconfigMongos\x12^\n" +
	"\x0fconfig_mongocfg\x18\x02 \x01(\v25.yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig6_0R\x0econfigMongocfg\x12D\n" +
	"\tresources\x18\x03 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x04 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\"\xc5\f\n" +
	"\x19MongodbSpec6_0_enterprise\x12U\n" +
	"\x06mongod\x18\x01 \x01(\v2=.yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.MongodR\x06mongod\x12[\n" +
	"\bmongocfg\x18\x02 \x01(\v2?.yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.MongoCfgR\bmongocfg\x12U\n" +
	"\x06mongos\x18\x03 \x01(\v2=.yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.MongosR\x06mongos\x12a\n" +
	"\n" +
	"mongoinfra\x18\x04 \x01(\v2A.yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.MongoInfraR\n" +
	"mongoinfra\x1a\x8c\x02\n" +
	"\x06Mongod\x12V\n" +
	"\x06config\x18\x01 \x01(\v2>.yandex.cloud.mdb.mongodb.v1.config.MongodConfig6_0_enterpriseR\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x90\x02\n" +
	"\bMongoCfg\x12X\n" +
	"\x06config\x18\x01 \x01(\v2@.yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig6_0_enterpriseR\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x8c\x02\n" +
	"\x06Mongos\x12V\n" +
	"\x06config\x18\x01 \x01(\v2>.yandex.cloud.mdb.mongodb.v1.config.MongosConfig6_0_enterpriseR\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x88\x03\n" +
	"\n" +
	"MongoInfra\x12c\n" +
	"\rconfig_mongos\x18\x01 \x01(\v2>.yandex.cloud.mdb.mongodb.v1.config.MongosConfig6_0_enterpriseR\fconfigMongos\x12i\n" +
	"\x0fconfig_mongocfg\x18\x02 \x01(\v2@.yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig6_0_enterpriseR\x0econfigMongocfg\x12D\n" +
	"\tresources\x18\x03 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x04 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\"\xb9\v\n" +
	"\vMongodbSpec\x12G\n" +
	"\x06mongod\x18\x01 \x01(\v2/.yandex.cloud.mdb.mongodb.v1.MongodbSpec.MongodR\x06mongod\x12M\n" +
	"\bmongocfg\x18\x02 \x01(\v21.yandex.cloud.mdb.mongodb.v1.MongodbSpec.MongoCfgR\bmongocfg\x12G\n" +
	"\x06mongos\x18\x03 \x01(\v2/.yandex.cloud.mdb.mongodb.v1.MongodbSpec.MongosR\x06mongos\x12S\n" +
	"\n" +
	"mongoinfra\x18\x04 \x01(\v23.yandex.cloud.mdb.mongodb.v1.MongodbSpec.MongoInfraR\n" +
	"mongoinfra\x1a\xfe\x01\n" +
	"\x06Mongod\x12H\n" +
	"\x06config\x18\x01 \x01(\v20.yandex.cloud.mdb.mongodb.v1.config.MongodConfigR\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\x82\x02\n" +
	"\bMongoCfg\x12J\n" +
	"\x06config\x18\x01 \x01(\v22.yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfigR\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\xfe\x01\n" +
	"\x06Mongos\x12H\n" +
	"\x06config\x18\x01 \x01(\v20.yandex.cloud.mdb.mongodb.v1.config.MongosConfigR\x06config\x12D\n" +
	"\tresources\x18\x02 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x03 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x1a\xec\x02\n" +
	"\n" +
	"MongoInfra\x12U\n" +
	"\rconfig_mongos\x18\x01 \x01(\v20.yandex.cloud.mdb.mongodb.v1.config.MongosConfigR\fconfigMongos\x12[\n" +
	"\x0fconfig_mongocfg\x18\x02 \x01(\v22.yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfigR\x0econfigMongocfg\x12D\n" +
	"\tresources\x18\x03 \x01(\v2&.yandex.cloud.mdb.mongodb.v1.ResourcesR\tresources\x12d\n" +
	"\x15disk_size_autoscaling\x18\x04 \x01(\v20.yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\"\xac\v\n" +
	"\n" +
	"ConfigSpec\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12B\n" +
	"\x1dfeature_compatibility_version\x18\x05 \x01(\tR\x1bfeatureCompatibilityVersion\x12X\n" +
	"\x10mongodb_spec_3_6\x18\x02 \x01(\v2+.yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6H\x00R\x0fmongodbSpec_3_6\x12X\n" +
	"\x10mongodb_spec_4_0\x18\x04 \x01(\v2+.yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0H\x00R\x0fmongodbSpec_4_0\x12X\n" +
	"\x10mongodb_spec_4_2\x18\a \x01(\v2+.yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2H\x00R\x0fmongodbSpec_4_2\x12X\n" +
	"\x10mongodb_spec_4_4\x18\b \x01(\v2+.yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4H\x00R\x0fmongodbSpec_4_4\x12X\n" +
	"\x10mongodb_spec_5_0\x18\n" +
	" \x01(\v2+.yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0H\x00R\x0fmongodbSpec_5_0\x12X\n" +
	"\x10mongodb_spec_6_0\x18\x0e \x01(\v2+.yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0H\x00R\x0fmongodbSpec_6_0\x12y\n" +
	"\x1bmongodb_spec_4_4_enterprise\x18\v \x01(\v26.yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterpriseH\x00R\x1amongodbSpec_4_4_enterprise\x12y\n" +
	"\x1bmongodb_spec_5_0_enterprise\x18\f \x01(\v26.yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterpriseH\x00R\x1amongodbSpec_5_0_enterprise\x12y\n" +
	"\x1bmongodb_spec_6_0_enterprise\x18\x0f \x01(\v26.yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterpriseH\x00R\x1amongodbSpec_6_0_enterprise\x12F\n" +
	"\x13backup_window_start\x18\x03 \x01(\v2\x16.google.type.TimeOfDayR\x11backupWindowStart\x12`\n" +
	"\x19backup_retain_period_days\x18\t \x01(\v2\x1b.google.protobuf.Int64ValueB\b\xfa\xc71\x047-35R\x16backupRetainPeriodDays\x12r\n" +
	"\x17performance_diagnostics\x18\r \x01(\v29.yandex.cloud.mdb.mongodb.v1.PerformanceDiagnosticsConfigR\x16performanceDiagnostics\x12;\n" +
	"\x06access\x18\x06 \x01(\v2#.yandex.cloud.mdb.mongodb.v1.AccessR\x06access\x12B\n" +
	"\amongodb\x18\x14 \x01(\v2(.yandex.cloud.mdb.mongodb.v1.MongodbSpecR\amongodbB\x0e\n" +
	"\fmongodb_specJ\x04\b\x10\x10\x142\xa7/\n" +
	"\x0eClusterService\x12\x8e\x01\n" +
	"\x03Get\x12..yandex.cloud.mdb.mongodb.v1.GetClusterRequest\x1a$.yandex.cloud.mdb.mongodb.v1.Cluster\"1\x82\xd3\xe4\x93\x02+\x12)/managed-mongodb/v1/clusters/{cluster_id}\x12\x91\x01\n" +
	"\x04List\x120.yandex.cloud.mdb.mongodb.v1.ListClustersRequest\x1a1.yandex.cloud.mdb.mongodb.v1.ListClustersResponse\"$\x82\xd3\xe4\x93\x02\x1e\x12\x1c/managed-mongodb/v1/clusters\x12\xab\x01\n" +
	"\x06Create\x121.yandex.cloud.mdb.mongodb.v1.CreateClusterRequest\x1a!.yandex.cloud.operation.Operation\"K\xb2\xd2* \n" +
	"\x15CreateClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02!:\x01*\"\x1c/managed-mongodb/v1/clusters\x12\xb8\x01\n" +
	"\x06Update\x121.yandex.cloud.mdb.mongodb.v1.UpdateClusterRequest\x1a!.yandex.cloud.operation.Operation\"X\xb2\xd2* \n" +
	"\x15UpdateClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02.:\x01*2)/managed-mongodb/v1/clusters/{cluster_id}\x12\xc3\x01\n" +
	"\x06Delete\x121.yandex.cloud.mdb.mongodb.v1.DeleteClusterRequest\x1a!.yandex.cloud.operation.Operation\"c\xb2\xd2*.\n" +
	"\x15DeleteClusterMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02+*)/managed-mongodb/v1/clusters/{cluster_id}\x12\xb8\x01\n" +
	"\x05Start\x120.yandex.cloud.mdb.mongodb.v1.StartClusterRequest\x1a!.yandex.cloud.operation.Operation\"Z\xb2\xd2*\x1f\n" +
	"\x14StartClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x021\"//managed-mongodb/v1/clusters/{cluster_id}:start\x12\xb4\x01\n" +
	"\x04Stop\x12/.yandex.cloud.mdb.mongodb.v1.StopClusterRequest\x1a!.yandex.cloud.operation.Operation\"X\xb2\xd2*\x1e\n" +
	"\x13StopClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x020\"./managed-mongodb/v1/clusters/{cluster_id}:stop\x12\xb7\x01\n" +
	"\x04Move\x12/.yandex.cloud.mdb.mongodb.v1.MoveClusterRequest\x1a!.yandex.cloud.operation.Operation\"[\xb2\xd2*\x1e\n" +
	"\x13MoveClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x023:\x01*\"./managed-mongodb/v1/clusters/{cluster_id}:move\x12\xbc\x01\n" +
	"\x06Backup\x121.yandex.cloud.mdb.mongodb.v1.BackupClusterRequest\x1a!.yandex.cloud.operation.Operation\"\\\xb2\xd2* \n" +
	"\x15BackupClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x022\"0/managed-mongodb/v1/clusters/{cluster_id}:backup\x12\xb6\x01\n" +
	"\aRestore\x122.yandex.cloud.mdb.mongodb.v1.RestoreClusterRequest\x1a!.yandex.cloud.operation.Operation\"T\xb2\xd2*!\n" +
	"\x16RestoreClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02):\x01*\"$/managed-mongodb/v1/clusters:restore\x12\xed\x01\n" +
	"\x15RescheduleMaintenance\x129.yandex.cloud.mdb.mongodb.v1.RescheduleMaintenanceRequest\x1a!.yandex.cloud.operation.Operation\"v\xb2\xd2*(\n" +
	"\x1dRescheduleMaintenanceMetadata\x12\aCluster\x82\xd3\xe4\x93\x02D:\x01*\"?/managed-mongodb/v1/clusters/{cluster_id}:rescheduleMaintenance\x12\xad\x01\n" +
	"\bListLogs\x123.yandex.cloud.mdb.mongodb.v1.ListClusterLogsRequest\x1a4.yandex.cloud.mdb.mongodb.v1.ListClusterLogsResponse\"6\x82\xd3\xe4\x93\x020\x12./managed-mongodb/v1/clusters/{cluster_id}:logs\x12\xb2\x01\n" +
	"\n" +
	"StreamLogs\x125.yandex.cloud.mdb.mongodb.v1.StreamClusterLogsRequest\x1a,.yandex.cloud.mdb.mongodb.v1.StreamLogRecord\"=\x82\xd3\xe4\x93\x027\x125/managed-mongodb/v1/clusters/{cluster_id}:stream_logs0\x01\x12\xc5\x01\n" +
	"\x0eListOperations\x129.yandex.cloud.mdb.mongodb.v1.ListClusterOperationsRequest\x1a:.yandex.cloud.mdb.mongodb.v1.ListClusterOperationsResponse\"<\x82\xd3\xe4\x93\x026\x124/managed-mongodb/v1/clusters/{cluster_id}/operations\x12\xb9\x01\n" +
	"\vListBackups\x126.yandex.cloud.mdb.mongodb.v1.ListClusterBackupsRequest\x1a7.yandex.cloud.mdb.mongodb.v1.ListClusterBackupsResponse\"9\x82\xd3\xe4\x93\x023\x121/managed-mongodb/v1/clusters/{cluster_id}/backups\x12\xb1\x01\n" +
	"\tListHosts\x124.yandex.cloud.mdb.mongodb.v1.ListClusterHostsRequest\x1a5.yandex.cloud.mdb.mongodb.v1.ListClusterHostsResponse\"7\x82\xd3\xe4\x93\x021\x12//managed-mongodb/v1/clusters/{cluster_id}/hosts\x12\xde\x01\n" +
	"\bAddHosts\x123.yandex.cloud.mdb.mongodb.v1.AddClusterHostsRequest\x1a!.yandex.cloud.operation.Operation\"z\xb2\xd2*0\n" +
	"\x17AddClusterHostsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02@:\x01*\";/managed-mongodb/v1/clusters/{cluster_id}/hosts:batchCreate\x12\xe7\x01\n" +
	"\vDeleteHosts\x126.yandex.cloud.mdb.mongodb.v1.DeleteClusterHostsRequest\x1a!.yandex.cloud.operation.Operation\"}\xb2\xd2*3\n" +
	"\x1aDeleteClusterHostsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02@:\x01*\";/managed-mongodb/v1/clusters/{cluster_id}/hosts:batchDelete\x12\xe7\x01\n" +
	"\vUpdateHosts\x126.yandex.cloud.mdb.mongodb.v1.UpdateClusterHostsRequest\x1a!.yandex.cloud.operation.Operation\"}\xb2\xd2*3\n" +
	"\x1aUpdateClusterHostsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02@:\x01*\";/managed-mongodb/v1/clusters/{cluster_id}/hosts:batchUpdate\x12\xed\x01\n" +
	"\x0eEnableSharding\x129.yandex.cloud.mdb.mongodb.v1.EnableClusterShardingRequest\x1a!.yandex.cloud.operation.Operation\"}\xb2\xd2*6\n" +
	"\x1dEnableClusterShardingMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02=:\x01*\"8/managed-mongodb/v1/clusters/{cluster_id}:enableSharding\x12\xaa\x01\n" +
	"\bGetShard\x123.yandex.cloud.mdb.mongodb.v1.GetClusterShardRequest\x1a\".yandex.cloud.mdb.mongodb.v1.Shard\"E\x82\xd3\xe4\x93\x02?\x12=/managed-mongodb/v1/clusters/{cluster_id}/shards/{shard_name}\x12\xb5\x01\n" +
	"\n" +
	"ListShards\x125.yandex.cloud.mdb.mongodb.v1.ListClusterShardsRequest\x1a6.yandex.cloud.mdb.mongodb.v1.ListClusterShardsResponse\"8\x82\xd3\xe4\x93\x022\x120/managed-mongodb/v1/clusters/{cluster_id}/shards\x12\xc3\x01\n" +
	"\bAddShard\x123.yandex.cloud.mdb.mongodb.v1.AddClusterShardRequest\x1a!.yandex.cloud.operation.Operation\"_\xb2\xd2* \n" +
	"\x17AddClusterShardMetadata\x12\x05Shard\x82\xd3\xe4\x93\x025:\x01*\"0/managed-mongodb/v1/clusters/{cluster_id}/shards\x12\xe6\x01\n" +
	"\vDeleteShard\x126.yandex.cloud.mdb.mongodb.v1.DeleteClusterShardRequest\x1a!.yandex.cloud.operation.Operation\"|\xb2\xd2*3\n" +
	"\x1aDeleteClusterShardMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02?*=/managed-mongodb/v1/clusters/{cluster_id}/shards/{shard_name}\x12\xd7\x01\n" +
	"\fResetupHosts\x120.yandex.cloud.mdb.mongodb.v1.ResetupHostsRequest\x1a!.yandex.cloud.operation.Operation\"r\xb2\xd2*-\n" +
	"\x14ResetupHostsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02;:\x01*\"6/managed-mongodb/v1/clusters/{cluster_id}:resetupHosts\x12\xd7\x01\n" +
	"\fRestartHosts\x120.yandex.cloud.mdb.mongodb.v1.RestartHostsRequest\x1a!.yandex.cloud.operation.Operation\"r\xb2\xd2*-\n" +
	"\x14RestartHostsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02;:\x01*\"6/managed-mongodb/v1/clusters/{cluster_id}:restartHosts\x12\xdb\x01\n" +
	"\rStepdownHosts\x121.yandex.cloud.mdb.mongodb.v1.StepdownHostsRequest\x1a!.yandex.cloud.operation.Operation\"t\xb2\xd2*.\n" +
	"\x15StepdownHostsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02<:\x01*\"7/managed-mongodb/v1/clusters/{cluster_id}:stepdownHosts\x12\xbc\x01\n" +
	"\x12ListAccessBindings\x12..yandex.cloud.access.ListAccessBindingsRequest\x1a/.yandex.cloud.access.ListAccessBindingsResponse\"E\x82\xd3\xe4\x93\x02?\x12=/managed-mongodb/v1/clusters/{resource_id}:listAccessBindings\x12\xfb\x01\n" +
	"\x11SetAccessBindings\x12-.yandex.cloud.access.SetAccessBindingsRequest\x1a!.yandex.cloud.operation.Operation\"\x93\x01\xb2\xd2*H\n" +
	" access.SetAccessBindingsMetadata\x12$access.AccessBindingsOperationResult\x82\xd3\xe4\x93\x02A:\x01*\"</managed-mongodb/v1/clusters/{resource_id}:setAccessBindings\x12\x87\x02\n" +
	"\x14UpdateAccessBindings\x120.yandex.cloud.access.UpdateAccessBindingsRequest\x1a!.yandex.cloud.operation.Operation\"\x99\x01\xb2\xd2*K\n" +
	"#access.UpdateAccessBindingsMetadata\x12$access.AccessBindingsOperationResult\x82\xd3\xe4\x93\x02D:\x01*2?/managed-mongodb/v1/clusters/{resource_id}:updateAccessBindingsBj\n" +
	"\x1fyandex.cloud.api.mdb.mongodb.v1ZGgithub.com/yandex-cloud/go-genproto/yandex/cloud/mdb/mongodb/v1;mongodbb\x06proto3"

var (
	file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescData []byte
)

func file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDesc), len(file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDesc)))
	})
	return file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDescData
}

var file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes = make([]protoimpl.MessageInfo, 116)
var file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_goTypes = []any{
	(RescheduleMaintenanceRequest_RescheduleType)(0), // 0: yandex.cloud.mdb.mongodb.v1.RescheduleMaintenanceRequest.RescheduleType
	(ListClusterLogsRequest_ServiceType)(0),          // 1: yandex.cloud.mdb.mongodb.v1.ListClusterLogsRequest.ServiceType
	(StreamClusterLogsRequest_ServiceType)(0),        // 2: yandex.cloud.mdb.mongodb.v1.StreamClusterLogsRequest.ServiceType
	(*GetClusterRequest)(nil),                        // 3: yandex.cloud.mdb.mongodb.v1.GetClusterRequest
	(*ListClustersRequest)(nil),                      // 4: yandex.cloud.mdb.mongodb.v1.ListClustersRequest
	(*ListClustersResponse)(nil),                     // 5: yandex.cloud.mdb.mongodb.v1.ListClustersResponse
	(*CreateClusterRequest)(nil),                     // 6: yandex.cloud.mdb.mongodb.v1.CreateClusterRequest
	(*CreateClusterMetadata)(nil),                    // 7: yandex.cloud.mdb.mongodb.v1.CreateClusterMetadata
	(*UpdateClusterRequest)(nil),                     // 8: yandex.cloud.mdb.mongodb.v1.UpdateClusterRequest
	(*UpdateClusterMetadata)(nil),                    // 9: yandex.cloud.mdb.mongodb.v1.UpdateClusterMetadata
	(*DeleteClusterRequest)(nil),                     // 10: yandex.cloud.mdb.mongodb.v1.DeleteClusterRequest
	(*DeleteClusterMetadata)(nil),                    // 11: yandex.cloud.mdb.mongodb.v1.DeleteClusterMetadata
	(*StartClusterRequest)(nil),                      // 12: yandex.cloud.mdb.mongodb.v1.StartClusterRequest
	(*StartClusterMetadata)(nil),                     // 13: yandex.cloud.mdb.mongodb.v1.StartClusterMetadata
	(*StopClusterRequest)(nil),                       // 14: yandex.cloud.mdb.mongodb.v1.StopClusterRequest
	(*StopClusterMetadata)(nil),                      // 15: yandex.cloud.mdb.mongodb.v1.StopClusterMetadata
	(*MoveClusterRequest)(nil),                       // 16: yandex.cloud.mdb.mongodb.v1.MoveClusterRequest
	(*MoveClusterMetadata)(nil),                      // 17: yandex.cloud.mdb.mongodb.v1.MoveClusterMetadata
	(*BackupClusterRequest)(nil),                     // 18: yandex.cloud.mdb.mongodb.v1.BackupClusterRequest
	(*BackupClusterMetadata)(nil),                    // 19: yandex.cloud.mdb.mongodb.v1.BackupClusterMetadata
	(*RestoreClusterRequest)(nil),                    // 20: yandex.cloud.mdb.mongodb.v1.RestoreClusterRequest
	(*RestoreClusterMetadata)(nil),                   // 21: yandex.cloud.mdb.mongodb.v1.RestoreClusterMetadata
	(*RescheduleMaintenanceRequest)(nil),             // 22: yandex.cloud.mdb.mongodb.v1.RescheduleMaintenanceRequest
	(*RescheduleMaintenanceMetadata)(nil),            // 23: yandex.cloud.mdb.mongodb.v1.RescheduleMaintenanceMetadata
	(*LogRecord)(nil),                                // 24: yandex.cloud.mdb.mongodb.v1.LogRecord
	(*ListClusterLogsRequest)(nil),                   // 25: yandex.cloud.mdb.mongodb.v1.ListClusterLogsRequest
	(*ListClusterLogsResponse)(nil),                  // 26: yandex.cloud.mdb.mongodb.v1.ListClusterLogsResponse
	(*StreamLogRecord)(nil),                          // 27: yandex.cloud.mdb.mongodb.v1.StreamLogRecord
	(*StreamClusterLogsRequest)(nil),                 // 28: yandex.cloud.mdb.mongodb.v1.StreamClusterLogsRequest
	(*ListClusterOperationsRequest)(nil),             // 29: yandex.cloud.mdb.mongodb.v1.ListClusterOperationsRequest
	(*ListClusterOperationsResponse)(nil),            // 30: yandex.cloud.mdb.mongodb.v1.ListClusterOperationsResponse
	(*ListClusterBackupsRequest)(nil),                // 31: yandex.cloud.mdb.mongodb.v1.ListClusterBackupsRequest
	(*ListClusterBackupsResponse)(nil),               // 32: yandex.cloud.mdb.mongodb.v1.ListClusterBackupsResponse
	(*ListClusterHostsRequest)(nil),                  // 33: yandex.cloud.mdb.mongodb.v1.ListClusterHostsRequest
	(*ListClusterHostsResponse)(nil),                 // 34: yandex.cloud.mdb.mongodb.v1.ListClusterHostsResponse
	(*AddClusterHostsRequest)(nil),                   // 35: yandex.cloud.mdb.mongodb.v1.AddClusterHostsRequest
	(*AddClusterHostsMetadata)(nil),                  // 36: yandex.cloud.mdb.mongodb.v1.AddClusterHostsMetadata
	(*DeleteClusterHostsRequest)(nil),                // 37: yandex.cloud.mdb.mongodb.v1.DeleteClusterHostsRequest
	(*DeleteClusterHostsMetadata)(nil),               // 38: yandex.cloud.mdb.mongodb.v1.DeleteClusterHostsMetadata
	(*UpdateClusterHostsRequest)(nil),                // 39: yandex.cloud.mdb.mongodb.v1.UpdateClusterHostsRequest
	(*UpdateClusterHostsMetadata)(nil),               // 40: yandex.cloud.mdb.mongodb.v1.UpdateClusterHostsMetadata
	(*UpdateHostSpec)(nil),                           // 41: yandex.cloud.mdb.mongodb.v1.UpdateHostSpec
	(*EnableClusterShardingRequest)(nil),             // 42: yandex.cloud.mdb.mongodb.v1.EnableClusterShardingRequest
	(*EnableClusterShardingMetadata)(nil),            // 43: yandex.cloud.mdb.mongodb.v1.EnableClusterShardingMetadata
	(*GetClusterShardRequest)(nil),                   // 44: yandex.cloud.mdb.mongodb.v1.GetClusterShardRequest
	(*ListClusterShardsRequest)(nil),                 // 45: yandex.cloud.mdb.mongodb.v1.ListClusterShardsRequest
	(*ListClusterShardsResponse)(nil),                // 46: yandex.cloud.mdb.mongodb.v1.ListClusterShardsResponse
	(*AddClusterShardRequest)(nil),                   // 47: yandex.cloud.mdb.mongodb.v1.AddClusterShardRequest
	(*AddClusterShardMetadata)(nil),                  // 48: yandex.cloud.mdb.mongodb.v1.AddClusterShardMetadata
	(*DeleteClusterShardRequest)(nil),                // 49: yandex.cloud.mdb.mongodb.v1.DeleteClusterShardRequest
	(*DeleteClusterShardMetadata)(nil),               // 50: yandex.cloud.mdb.mongodb.v1.DeleteClusterShardMetadata
	(*ResetupHostsRequest)(nil),                      // 51: yandex.cloud.mdb.mongodb.v1.ResetupHostsRequest
	(*ResetupHostsMetadata)(nil),                     // 52: yandex.cloud.mdb.mongodb.v1.ResetupHostsMetadata
	(*RestartHostsRequest)(nil),                      // 53: yandex.cloud.mdb.mongodb.v1.RestartHostsRequest
	(*RestartHostsMetadata)(nil),                     // 54: yandex.cloud.mdb.mongodb.v1.RestartHostsMetadata
	(*StepdownHostsRequest)(nil),                     // 55: yandex.cloud.mdb.mongodb.v1.StepdownHostsRequest
	(*StepdownHostsMetadata)(nil),                    // 56: yandex.cloud.mdb.mongodb.v1.StepdownHostsMetadata
	(*HostSpec)(nil),                                 // 57: yandex.cloud.mdb.mongodb.v1.HostSpec
	(*MongodbSpec3_6)(nil),                           // 58: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6
	(*MongodbSpec4_0)(nil),                           // 59: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0
	(*MongodbSpec4_2)(nil),                           // 60: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2
	(*MongodbSpec4_4)(nil),                           // 61: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4
	(*MongodbSpec4_4Enterprise)(nil),                 // 62: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise
	(*MongodbSpec5_0)(nil),                           // 63: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0
	(*MongodbSpec5_0Enterprise)(nil),                 // 64: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise
	(*MongodbSpec6_0)(nil),                           // 65: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0
	(*MongodbSpec6_0Enterprise)(nil),                 // 66: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise
	(*MongodbSpec)(nil),                              // 67: yandex.cloud.mdb.mongodb.v1.MongodbSpec
	(*ConfigSpec)(nil),                               // 68: yandex.cloud.mdb.mongodb.v1.ConfigSpec
	nil,                                              // 69: yandex.cloud.mdb.mongodb.v1.CreateClusterRequest.LabelsEntry
	nil,                                              // 70: yandex.cloud.mdb.mongodb.v1.UpdateClusterRequest.LabelsEntry
	nil,                                              // 71: yandex.cloud.mdb.mongodb.v1.RestoreClusterRequest.LabelsEntry
	(*RestoreClusterRequest_RecoveryTargetSpec)(nil), // 72: yandex.cloud.mdb.mongodb.v1.RestoreClusterRequest.RecoveryTargetSpec
	nil, // 73: yandex.cloud.mdb.mongodb.v1.LogRecord.MessageEntry
	nil, // 74: yandex.cloud.mdb.mongodb.v1.UpdateHostSpec.TagsEntry
	(*EnableClusterShardingRequest_MongoCfg)(nil),   // 75: yandex.cloud.mdb.mongodb.v1.EnableClusterShardingRequest.MongoCfg
	(*EnableClusterShardingRequest_Mongos)(nil),     // 76: yandex.cloud.mdb.mongodb.v1.EnableClusterShardingRequest.Mongos
	(*EnableClusterShardingRequest_MongoInfra)(nil), // 77: yandex.cloud.mdb.mongodb.v1.EnableClusterShardingRequest.MongoInfra
	nil,                                         // 78: yandex.cloud.mdb.mongodb.v1.HostSpec.TagsEntry
	(*MongodbSpec3_6_Mongod)(nil),               // 79: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.Mongod
	(*MongodbSpec3_6_MongoCfg)(nil),             // 80: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.MongoCfg
	(*MongodbSpec3_6_Mongos)(nil),               // 81: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.Mongos
	(*MongodbSpec3_6_MongoInfra)(nil),           // 82: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.MongoInfra
	(*MongodbSpec4_0_Mongod)(nil),               // 83: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.Mongod
	(*MongodbSpec4_0_MongoCfg)(nil),             // 84: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.MongoCfg
	(*MongodbSpec4_0_Mongos)(nil),               // 85: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.Mongos
	(*MongodbSpec4_0_MongoInfra)(nil),           // 86: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.MongoInfra
	(*MongodbSpec4_2_Mongod)(nil),               // 87: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.Mongod
	(*MongodbSpec4_2_MongoCfg)(nil),             // 88: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.MongoCfg
	(*MongodbSpec4_2_Mongos)(nil),               // 89: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.Mongos
	(*MongodbSpec4_2_MongoInfra)(nil),           // 90: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.MongoInfra
	(*MongodbSpec4_4_Mongod)(nil),               // 91: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.Mongod
	(*MongodbSpec4_4_MongoCfg)(nil),             // 92: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.MongoCfg
	(*MongodbSpec4_4_Mongos)(nil),               // 93: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.Mongos
	(*MongodbSpec4_4_MongoInfra)(nil),           // 94: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.MongoInfra
	(*MongodbSpec4_4Enterprise_Mongod)(nil),     // 95: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.Mongod
	(*MongodbSpec4_4Enterprise_MongoCfg)(nil),   // 96: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.MongoCfg
	(*MongodbSpec4_4Enterprise_Mongos)(nil),     // 97: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.Mongos
	(*MongodbSpec4_4Enterprise_MongoInfra)(nil), // 98: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.MongoInfra
	(*MongodbSpec5_0_Mongod)(nil),               // 99: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.Mongod
	(*MongodbSpec5_0_MongoCfg)(nil),             // 100: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.MongoCfg
	(*MongodbSpec5_0_Mongos)(nil),               // 101: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.Mongos
	(*MongodbSpec5_0_MongoInfra)(nil),           // 102: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.MongoInfra
	(*MongodbSpec5_0Enterprise_Mongod)(nil),     // 103: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.Mongod
	(*MongodbSpec5_0Enterprise_MongoCfg)(nil),   // 104: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.MongoCfg
	(*MongodbSpec5_0Enterprise_Mongos)(nil),     // 105: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.Mongos
	(*MongodbSpec5_0Enterprise_MongoInfra)(nil), // 106: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.MongoInfra
	(*MongodbSpec6_0_Mongod)(nil),               // 107: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.Mongod
	(*MongodbSpec6_0_MongoCfg)(nil),             // 108: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.MongoCfg
	(*MongodbSpec6_0_Mongos)(nil),               // 109: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.Mongos
	(*MongodbSpec6_0_MongoInfra)(nil),           // 110: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.MongoInfra
	(*MongodbSpec6_0Enterprise_Mongod)(nil),     // 111: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.Mongod
	(*MongodbSpec6_0Enterprise_MongoCfg)(nil),   // 112: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.MongoCfg
	(*MongodbSpec6_0Enterprise_Mongos)(nil),     // 113: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.Mongos
	(*MongodbSpec6_0Enterprise_MongoInfra)(nil), // 114: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.MongoInfra
	(*MongodbSpec_Mongod)(nil),                  // 115: yandex.cloud.mdb.mongodb.v1.MongodbSpec.Mongod
	(*MongodbSpec_MongoCfg)(nil),                // 116: yandex.cloud.mdb.mongodb.v1.MongodbSpec.MongoCfg
	(*MongodbSpec_Mongos)(nil),                  // 117: yandex.cloud.mdb.mongodb.v1.MongodbSpec.Mongos
	(*MongodbSpec_MongoInfra)(nil),              // 118: yandex.cloud.mdb.mongodb.v1.MongodbSpec.MongoInfra
	(*Cluster)(nil),                             // 119: yandex.cloud.mdb.mongodb.v1.Cluster
	(Cluster_Environment)(0),                    // 120: yandex.cloud.mdb.mongodb.v1.Cluster.Environment
	(*DatabaseSpec)(nil),                        // 121: yandex.cloud.mdb.mongodb.v1.DatabaseSpec
	(*UserSpec)(nil),                            // 122: yandex.cloud.mdb.mongodb.v1.UserSpec
	(*MaintenanceWindow)(nil),                   // 123: yandex.cloud.mdb.mongodb.v1.MaintenanceWindow
	(*wrapperspb.StringValue)(nil),              // 124: google.protobuf.StringValue
	(*v1.OperationLog)(nil),                     // 125: yandex.cloud.mdb.operationlog.v1.OperationLog
	(*fieldmaskpb.FieldMask)(nil),               // 126: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),               // 127: google.protobuf.Timestamp
	(*operation.Operation)(nil),                 // 128: yandex.cloud.operation.Operation
	(*Backup)(nil),                              // 129: yandex.cloud.mdb.mongodb.v1.Backup
	(*Host)(nil),                                // 130: yandex.cloud.mdb.mongodb.v1.Host
	(*wrapperspb.BoolValue)(nil),                // 131: google.protobuf.BoolValue
	(*wrapperspb.Int64Value)(nil),               // 132: google.protobuf.Int64Value
	(*wrapperspb.DoubleValue)(nil),              // 133: google.protobuf.DoubleValue
	(*Shard)(nil),                               // 134: yandex.cloud.mdb.mongodb.v1.Shard
	(Host_Type)(0),                              // 135: yandex.cloud.mdb.mongodb.v1.Host.Type
	(*timeofday.TimeOfDay)(nil),                 // 136: google.type.TimeOfDay
	(*PerformanceDiagnosticsConfig)(nil),        // 137: yandex.cloud.mdb.mongodb.v1.PerformanceDiagnosticsConfig
	(*Access)(nil),                              // 138: yandex.cloud.mdb.mongodb.v1.Access
	(*Resources)(nil),                           // 139: yandex.cloud.mdb.mongodb.v1.Resources
	(*config.MongodConfig3_6)(nil),              // 140: yandex.cloud.mdb.mongodb.v1.config.MongodConfig3_6
	(*DiskSizeAutoscaling)(nil),                 // 141: yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	(*config.MongoCfgConfig3_6)(nil),            // 142: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig3_6
	(*config.MongosConfig3_6)(nil),              // 143: yandex.cloud.mdb.mongodb.v1.config.MongosConfig3_6
	(*config.MongodConfig4_0)(nil),              // 144: yandex.cloud.mdb.mongodb.v1.config.MongodConfig4_0
	(*config.MongoCfgConfig4_0)(nil),            // 145: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig4_0
	(*config.MongosConfig4_0)(nil),              // 146: yandex.cloud.mdb.mongodb.v1.config.MongosConfig4_0
	(*config.MongodConfig4_2)(nil),              // 147: yandex.cloud.mdb.mongodb.v1.config.MongodConfig4_2
	(*config.MongoCfgConfig4_2)(nil),            // 148: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig4_2
	(*config.MongosConfig4_2)(nil),              // 149: yandex.cloud.mdb.mongodb.v1.config.MongosConfig4_2
	(*config.MongodConfig4_4)(nil),              // 150: yandex.cloud.mdb.mongodb.v1.config.MongodConfig4_4
	(*config.MongoCfgConfig4_4)(nil),            // 151: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig4_4
	(*config.MongosConfig4_4)(nil),              // 152: yandex.cloud.mdb.mongodb.v1.config.MongosConfig4_4
	(*config.MongodConfig4_4Enterprise)(nil),    // 153: yandex.cloud.mdb.mongodb.v1.config.MongodConfig4_4_enterprise
	(*config.MongoCfgConfig4_4Enterprise)(nil),  // 154: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig4_4_enterprise
	(*config.MongosConfig4_4Enterprise)(nil),    // 155: yandex.cloud.mdb.mongodb.v1.config.MongosConfig4_4_enterprise
	(*config.MongodConfig5_0)(nil),              // 156: yandex.cloud.mdb.mongodb.v1.config.MongodConfig5_0
	(*config.MongoCfgConfig5_0)(nil),            // 157: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig5_0
	(*config.MongosConfig5_0)(nil),              // 158: yandex.cloud.mdb.mongodb.v1.config.MongosConfig5_0
	(*config.MongodConfig5_0Enterprise)(nil),    // 159: yandex.cloud.mdb.mongodb.v1.config.MongodConfig5_0_enterprise
	(*config.MongoCfgConfig5_0Enterprise)(nil),  // 160: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig5_0_enterprise
	(*config.MongosConfig5_0Enterprise)(nil),    // 161: yandex.cloud.mdb.mongodb.v1.config.MongosConfig5_0_enterprise
	(*config.MongodConfig6_0)(nil),              // 162: yandex.cloud.mdb.mongodb.v1.config.MongodConfig6_0
	(*config.MongoCfgConfig6_0)(nil),            // 163: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig6_0
	(*config.MongosConfig6_0)(nil),              // 164: yandex.cloud.mdb.mongodb.v1.config.MongosConfig6_0
	(*config.MongodConfig6_0Enterprise)(nil),    // 165: yandex.cloud.mdb.mongodb.v1.config.MongodConfig6_0_enterprise
	(*config.MongoCfgConfig6_0Enterprise)(nil),  // 166: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig6_0_enterprise
	(*config.MongosConfig6_0Enterprise)(nil),    // 167: yandex.cloud.mdb.mongodb.v1.config.MongosConfig6_0_enterprise
	(*config.MongodConfig)(nil),                 // 168: yandex.cloud.mdb.mongodb.v1.config.MongodConfig
	(*config.MongoCfgConfig)(nil),               // 169: yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig
	(*config.MongosConfig)(nil),                 // 170: yandex.cloud.mdb.mongodb.v1.config.MongosConfig
	(*access.ListAccessBindingsRequest)(nil),    // 171: yandex.cloud.access.ListAccessBindingsRequest
	(*access.SetAccessBindingsRequest)(nil),     // 172: yandex.cloud.access.SetAccessBindingsRequest
	(*access.UpdateAccessBindingsRequest)(nil),  // 173: yandex.cloud.access.UpdateAccessBindingsRequest
	(*access.ListAccessBindingsResponse)(nil),   // 174: yandex.cloud.access.ListAccessBindingsResponse
}
var file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_depIdxs = []int32{
	119, // 0: yandex.cloud.mdb.mongodb.v1.ListClustersResponse.clusters:type_name -> yandex.cloud.mdb.mongodb.v1.Cluster
	69,  // 1: yandex.cloud.mdb.mongodb.v1.CreateClusterRequest.labels:type_name -> yandex.cloud.mdb.mongodb.v1.CreateClusterRequest.LabelsEntry
	120, // 2: yandex.cloud.mdb.mongodb.v1.CreateClusterRequest.environment:type_name -> yandex.cloud.mdb.mongodb.v1.Cluster.Environment
	68,  // 3: yandex.cloud.mdb.mongodb.v1.CreateClusterRequest.config_spec:type_name -> yandex.cloud.mdb.mongodb.v1.ConfigSpec
	121, // 4: yandex.cloud.mdb.mongodb.v1.CreateClusterRequest.database_specs:type_name -> yandex.cloud.mdb.mongodb.v1.DatabaseSpec
	122, // 5: yandex.cloud.mdb.mongodb.v1.CreateClusterRequest.user_specs:type_name -> yandex.cloud.mdb.mongodb.v1.UserSpec
	57,  // 6: yandex.cloud.mdb.mongodb.v1.CreateClusterRequest.host_specs:type_name -> yandex.cloud.mdb.mongodb.v1.HostSpec
	123, // 7: yandex.cloud.mdb.mongodb.v1.CreateClusterRequest.maintenance_window:type_name -> yandex.cloud.mdb.mongodb.v1.MaintenanceWindow
	124, // 8: yandex.cloud.mdb.mongodb.v1.CreateClusterRequest.disk_encryption_key_id:type_name -> google.protobuf.StringValue
	125, // 9: yandex.cloud.mdb.mongodb.v1.CreateClusterMetadata.operation_log:type_name -> yandex.cloud.mdb.operationlog.v1.OperationLog
	126, // 10: yandex.cloud.mdb.mongodb.v1.UpdateClusterRequest.update_mask:type_name -> google.protobuf.FieldMask
	70,  // 11: yandex.cloud.mdb.mongodb.v1.UpdateClusterRequest.labels:type_name -> yandex.cloud.mdb.mongodb.v1.UpdateClusterRequest.LabelsEntry
	68,  // 12: yandex.cloud.mdb.mongodb.v1.UpdateClusterRequest.config_spec:type_name -> yandex.cloud.mdb.mongodb.v1.ConfigSpec
	123, // 13: yandex.cloud.mdb.mongodb.v1.UpdateClusterRequest.maintenance_window:type_name -> yandex.cloud.mdb.mongodb.v1.MaintenanceWindow
	125, // 14: yandex.cloud.mdb.mongodb.v1.UpdateClusterMetadata.operation_log:type_name -> yandex.cloud.mdb.operationlog.v1.OperationLog
	71,  // 15: yandex.cloud.mdb.mongodb.v1.RestoreClusterRequest.labels:type_name -> yandex.cloud.mdb.mongodb.v1.RestoreClusterRequest.LabelsEntry
	120, // 16: yandex.cloud.mdb.mongodb.v1.RestoreClusterRequest.environment:type_name -> yandex.cloud.mdb.mongodb.v1.Cluster.Environment
	68,  // 17: yandex.cloud.mdb.mongodb.v1.RestoreClusterRequest.config_spec:type_name -> yandex.cloud.mdb.mongodb.v1.ConfigSpec
	57,  // 18: yandex.cloud.mdb.mongodb.v1.RestoreClusterRequest.host_specs:type_name -> yandex.cloud.mdb.mongodb.v1.HostSpec
	72,  // 19: yandex.cloud.mdb.mongodb.v1.RestoreClusterRequest.recovery_target_spec:type_name -> yandex.cloud.mdb.mongodb.v1.RestoreClusterRequest.RecoveryTargetSpec
	123, // 20: yandex.cloud.mdb.mongodb.v1.RestoreClusterRequest.maintenance_window:type_name -> yandex.cloud.mdb.mongodb.v1.MaintenanceWindow
	124, // 21: yandex.cloud.mdb.mongodb.v1.RestoreClusterRequest.disk_encryption_key_id:type_name -> google.protobuf.StringValue
	0,   // 22: yandex.cloud.mdb.mongodb.v1.RescheduleMaintenanceRequest.reschedule_type:type_name -> yandex.cloud.mdb.mongodb.v1.RescheduleMaintenanceRequest.RescheduleType
	127, // 23: yandex.cloud.mdb.mongodb.v1.RescheduleMaintenanceRequest.delayed_until:type_name -> google.protobuf.Timestamp
	127, // 24: yandex.cloud.mdb.mongodb.v1.RescheduleMaintenanceMetadata.delayed_until:type_name -> google.protobuf.Timestamp
	127, // 25: yandex.cloud.mdb.mongodb.v1.LogRecord.timestamp:type_name -> google.protobuf.Timestamp
	73,  // 26: yandex.cloud.mdb.mongodb.v1.LogRecord.message:type_name -> yandex.cloud.mdb.mongodb.v1.LogRecord.MessageEntry
	1,   // 27: yandex.cloud.mdb.mongodb.v1.ListClusterLogsRequest.service_type:type_name -> yandex.cloud.mdb.mongodb.v1.ListClusterLogsRequest.ServiceType
	127, // 28: yandex.cloud.mdb.mongodb.v1.ListClusterLogsRequest.from_time:type_name -> google.protobuf.Timestamp
	127, // 29: yandex.cloud.mdb.mongodb.v1.ListClusterLogsRequest.to_time:type_name -> google.protobuf.Timestamp
	24,  // 30: yandex.cloud.mdb.mongodb.v1.ListClusterLogsResponse.logs:type_name -> yandex.cloud.mdb.mongodb.v1.LogRecord
	24,  // 31: yandex.cloud.mdb.mongodb.v1.StreamLogRecord.record:type_name -> yandex.cloud.mdb.mongodb.v1.LogRecord
	2,   // 32: yandex.cloud.mdb.mongodb.v1.StreamClusterLogsRequest.service_type:type_name -> yandex.cloud.mdb.mongodb.v1.StreamClusterLogsRequest.ServiceType
	127, // 33: yandex.cloud.mdb.mongodb.v1.StreamClusterLogsRequest.from_time:type_name -> google.protobuf.Timestamp
	127, // 34: yandex.cloud.mdb.mongodb.v1.StreamClusterLogsRequest.to_time:type_name -> google.protobuf.Timestamp
	128, // 35: yandex.cloud.mdb.mongodb.v1.ListClusterOperationsResponse.operations:type_name -> yandex.cloud.operation.Operation
	129, // 36: yandex.cloud.mdb.mongodb.v1.ListClusterBackupsResponse.backups:type_name -> yandex.cloud.mdb.mongodb.v1.Backup
	130, // 37: yandex.cloud.mdb.mongodb.v1.ListClusterHostsResponse.hosts:type_name -> yandex.cloud.mdb.mongodb.v1.Host
	57,  // 38: yandex.cloud.mdb.mongodb.v1.AddClusterHostsRequest.host_specs:type_name -> yandex.cloud.mdb.mongodb.v1.HostSpec
	41,  // 39: yandex.cloud.mdb.mongodb.v1.UpdateClusterHostsRequest.update_host_specs:type_name -> yandex.cloud.mdb.mongodb.v1.UpdateHostSpec
	131, // 40: yandex.cloud.mdb.mongodb.v1.UpdateHostSpec.hidden:type_name -> google.protobuf.BoolValue
	132, // 41: yandex.cloud.mdb.mongodb.v1.UpdateHostSpec.secondary_delay_secs:type_name -> google.protobuf.Int64Value
	133, // 42: yandex.cloud.mdb.mongodb.v1.UpdateHostSpec.priority:type_name -> google.protobuf.DoubleValue
	126, // 43: yandex.cloud.mdb.mongodb.v1.UpdateHostSpec.update_mask:type_name -> google.protobuf.FieldMask
	74,  // 44: yandex.cloud.mdb.mongodb.v1.UpdateHostSpec.tags:type_name -> yandex.cloud.mdb.mongodb.v1.UpdateHostSpec.TagsEntry
	75,  // 45: yandex.cloud.mdb.mongodb.v1.EnableClusterShardingRequest.mongocfg:type_name -> yandex.cloud.mdb.mongodb.v1.EnableClusterShardingRequest.MongoCfg
	76,  // 46: yandex.cloud.mdb.mongodb.v1.EnableClusterShardingRequest.mongos:type_name -> yandex.cloud.mdb.mongodb.v1.EnableClusterShardingRequest.Mongos
	57,  // 47: yandex.cloud.mdb.mongodb.v1.EnableClusterShardingRequest.host_specs:type_name -> yandex.cloud.mdb.mongodb.v1.HostSpec
	77,  // 48: yandex.cloud.mdb.mongodb.v1.EnableClusterShardingRequest.mongoinfra:type_name -> yandex.cloud.mdb.mongodb.v1.EnableClusterShardingRequest.MongoInfra
	134, // 49: yandex.cloud.mdb.mongodb.v1.ListClusterShardsResponse.shards:type_name -> yandex.cloud.mdb.mongodb.v1.Shard
	57,  // 50: yandex.cloud.mdb.mongodb.v1.AddClusterShardRequest.host_specs:type_name -> yandex.cloud.mdb.mongodb.v1.HostSpec
	135, // 51: yandex.cloud.mdb.mongodb.v1.HostSpec.type:type_name -> yandex.cloud.mdb.mongodb.v1.Host.Type
	131, // 52: yandex.cloud.mdb.mongodb.v1.HostSpec.hidden:type_name -> google.protobuf.BoolValue
	132, // 53: yandex.cloud.mdb.mongodb.v1.HostSpec.secondary_delay_secs:type_name -> google.protobuf.Int64Value
	133, // 54: yandex.cloud.mdb.mongodb.v1.HostSpec.priority:type_name -> google.protobuf.DoubleValue
	78,  // 55: yandex.cloud.mdb.mongodb.v1.HostSpec.tags:type_name -> yandex.cloud.mdb.mongodb.v1.HostSpec.TagsEntry
	79,  // 56: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.mongod:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.Mongod
	80,  // 57: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.mongocfg:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.MongoCfg
	81,  // 58: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.mongos:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.Mongos
	82,  // 59: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.mongoinfra:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.MongoInfra
	83,  // 60: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.mongod:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.Mongod
	84,  // 61: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.mongocfg:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.MongoCfg
	85,  // 62: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.mongos:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.Mongos
	86,  // 63: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.mongoinfra:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.MongoInfra
	87,  // 64: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.mongod:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.Mongod
	88,  // 65: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.mongocfg:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.MongoCfg
	89,  // 66: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.mongos:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.Mongos
	90,  // 67: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.mongoinfra:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.MongoInfra
	91,  // 68: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.mongod:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.Mongod
	92,  // 69: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.mongocfg:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.MongoCfg
	93,  // 70: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.mongos:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.Mongos
	94,  // 71: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.mongoinfra:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.MongoInfra
	95,  // 72: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.mongod:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.Mongod
	96,  // 73: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.mongocfg:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.MongoCfg
	97,  // 74: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.mongos:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.Mongos
	98,  // 75: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.mongoinfra:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.MongoInfra
	99,  // 76: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.mongod:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.Mongod
	100, // 77: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.mongocfg:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.MongoCfg
	101, // 78: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.mongos:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.Mongos
	102, // 79: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.mongoinfra:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.MongoInfra
	103, // 80: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.mongod:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.Mongod
	104, // 81: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.mongocfg:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.MongoCfg
	105, // 82: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.mongos:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.Mongos
	106, // 83: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.mongoinfra:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.MongoInfra
	107, // 84: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.mongod:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.Mongod
	108, // 85: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.mongocfg:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.MongoCfg
	109, // 86: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.mongos:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.Mongos
	110, // 87: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.mongoinfra:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.MongoInfra
	111, // 88: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.mongod:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.Mongod
	112, // 89: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.mongocfg:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.MongoCfg
	113, // 90: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.mongos:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.Mongos
	114, // 91: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.mongoinfra:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.MongoInfra
	115, // 92: yandex.cloud.mdb.mongodb.v1.MongodbSpec.mongod:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec.Mongod
	116, // 93: yandex.cloud.mdb.mongodb.v1.MongodbSpec.mongocfg:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec.MongoCfg
	117, // 94: yandex.cloud.mdb.mongodb.v1.MongodbSpec.mongos:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec.Mongos
	118, // 95: yandex.cloud.mdb.mongodb.v1.MongodbSpec.mongoinfra:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec.MongoInfra
	58,  // 96: yandex.cloud.mdb.mongodb.v1.ConfigSpec.mongodb_spec_3_6:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6
	59,  // 97: yandex.cloud.mdb.mongodb.v1.ConfigSpec.mongodb_spec_4_0:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0
	60,  // 98: yandex.cloud.mdb.mongodb.v1.ConfigSpec.mongodb_spec_4_2:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2
	61,  // 99: yandex.cloud.mdb.mongodb.v1.ConfigSpec.mongodb_spec_4_4:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4
	63,  // 100: yandex.cloud.mdb.mongodb.v1.ConfigSpec.mongodb_spec_5_0:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0
	65,  // 101: yandex.cloud.mdb.mongodb.v1.ConfigSpec.mongodb_spec_6_0:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0
	62,  // 102: yandex.cloud.mdb.mongodb.v1.ConfigSpec.mongodb_spec_4_4_enterprise:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise
	64,  // 103: yandex.cloud.mdb.mongodb.v1.ConfigSpec.mongodb_spec_5_0_enterprise:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise
	66,  // 104: yandex.cloud.mdb.mongodb.v1.ConfigSpec.mongodb_spec_6_0_enterprise:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise
	136, // 105: yandex.cloud.mdb.mongodb.v1.ConfigSpec.backup_window_start:type_name -> google.type.TimeOfDay
	132, // 106: yandex.cloud.mdb.mongodb.v1.ConfigSpec.backup_retain_period_days:type_name -> google.protobuf.Int64Value
	137, // 107: yandex.cloud.mdb.mongodb.v1.ConfigSpec.performance_diagnostics:type_name -> yandex.cloud.mdb.mongodb.v1.PerformanceDiagnosticsConfig
	138, // 108: yandex.cloud.mdb.mongodb.v1.ConfigSpec.access:type_name -> yandex.cloud.mdb.mongodb.v1.Access
	67,  // 109: yandex.cloud.mdb.mongodb.v1.ConfigSpec.mongodb:type_name -> yandex.cloud.mdb.mongodb.v1.MongodbSpec
	139, // 110: yandex.cloud.mdb.mongodb.v1.EnableClusterShardingRequest.MongoCfg.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	139, // 111: yandex.cloud.mdb.mongodb.v1.EnableClusterShardingRequest.Mongos.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	139, // 112: yandex.cloud.mdb.mongodb.v1.EnableClusterShardingRequest.MongoInfra.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	140, // 113: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.Mongod.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig3_6
	139, // 114: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.Mongod.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 115: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.Mongod.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	142, // 116: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.MongoCfg.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig3_6
	139, // 117: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.MongoCfg.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 118: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.MongoCfg.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	143, // 119: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.Mongos.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig3_6
	139, // 120: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.Mongos.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 121: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.Mongos.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	143, // 122: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.MongoInfra.config_mongos:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig3_6
	142, // 123: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.MongoInfra.config_mongocfg:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig3_6
	139, // 124: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.MongoInfra.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 125: yandex.cloud.mdb.mongodb.v1.MongodbSpec3_6.MongoInfra.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	144, // 126: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.Mongod.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig4_0
	139, // 127: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.Mongod.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 128: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.Mongod.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	145, // 129: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.MongoCfg.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig4_0
	139, // 130: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.MongoCfg.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 131: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.MongoCfg.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	146, // 132: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.Mongos.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig4_0
	139, // 133: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.Mongos.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 134: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.Mongos.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	146, // 135: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.MongoInfra.config_mongos:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig4_0
	145, // 136: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.MongoInfra.config_mongocfg:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig4_0
	139, // 137: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.MongoInfra.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 138: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_0.MongoInfra.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	147, // 139: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.Mongod.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig4_2
	139, // 140: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.Mongod.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 141: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.Mongod.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	148, // 142: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.MongoCfg.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig4_2
	139, // 143: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.MongoCfg.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 144: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.MongoCfg.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	149, // 145: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.Mongos.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig4_2
	139, // 146: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.Mongos.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 147: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.Mongos.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	149, // 148: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.MongoInfra.config_mongos:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig4_2
	148, // 149: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.MongoInfra.config_mongocfg:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig4_2
	139, // 150: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.MongoInfra.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 151: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_2.MongoInfra.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	150, // 152: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.Mongod.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig4_4
	139, // 153: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.Mongod.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 154: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.Mongod.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	151, // 155: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.MongoCfg.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig4_4
	139, // 156: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.MongoCfg.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 157: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.MongoCfg.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	152, // 158: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.Mongos.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig4_4
	139, // 159: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.Mongos.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 160: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.Mongos.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	152, // 161: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.MongoInfra.config_mongos:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig4_4
	151, // 162: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.MongoInfra.config_mongocfg:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig4_4
	139, // 163: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.MongoInfra.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 164: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4.MongoInfra.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	153, // 165: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.Mongod.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig4_4_enterprise
	139, // 166: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.Mongod.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 167: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.Mongod.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	154, // 168: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.MongoCfg.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig4_4_enterprise
	139, // 169: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.MongoCfg.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 170: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.MongoCfg.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	155, // 171: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.Mongos.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig4_4_enterprise
	139, // 172: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.Mongos.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 173: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.Mongos.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	155, // 174: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.MongoInfra.config_mongos:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig4_4_enterprise
	154, // 175: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.MongoInfra.config_mongocfg:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig4_4_enterprise
	139, // 176: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.MongoInfra.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 177: yandex.cloud.mdb.mongodb.v1.MongodbSpec4_4_enterprise.MongoInfra.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	156, // 178: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.Mongod.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig5_0
	139, // 179: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.Mongod.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 180: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.Mongod.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	157, // 181: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.MongoCfg.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig5_0
	139, // 182: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.MongoCfg.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 183: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.MongoCfg.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	158, // 184: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.Mongos.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig5_0
	139, // 185: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.Mongos.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 186: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.Mongos.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	158, // 187: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.MongoInfra.config_mongos:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig5_0
	157, // 188: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.MongoInfra.config_mongocfg:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig5_0
	139, // 189: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.MongoInfra.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 190: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0.MongoInfra.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	159, // 191: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.Mongod.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig5_0_enterprise
	139, // 192: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.Mongod.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 193: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.Mongod.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	160, // 194: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.MongoCfg.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig5_0_enterprise
	139, // 195: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.MongoCfg.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 196: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.MongoCfg.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	161, // 197: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.Mongos.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig5_0_enterprise
	139, // 198: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.Mongos.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 199: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.Mongos.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	161, // 200: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.MongoInfra.config_mongos:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig5_0_enterprise
	160, // 201: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.MongoInfra.config_mongocfg:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig5_0_enterprise
	139, // 202: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.MongoInfra.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 203: yandex.cloud.mdb.mongodb.v1.MongodbSpec5_0_enterprise.MongoInfra.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	162, // 204: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.Mongod.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig6_0
	139, // 205: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.Mongod.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 206: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.Mongod.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	163, // 207: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.MongoCfg.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig6_0
	139, // 208: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.MongoCfg.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 209: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.MongoCfg.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	164, // 210: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.Mongos.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig6_0
	139, // 211: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.Mongos.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 212: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.Mongos.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	164, // 213: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.MongoInfra.config_mongos:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig6_0
	163, // 214: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.MongoInfra.config_mongocfg:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig6_0
	139, // 215: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.MongoInfra.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 216: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0.MongoInfra.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	165, // 217: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.Mongod.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig6_0_enterprise
	139, // 218: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.Mongod.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 219: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.Mongod.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	166, // 220: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.MongoCfg.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig6_0_enterprise
	139, // 221: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.MongoCfg.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 222: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.MongoCfg.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	167, // 223: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.Mongos.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig6_0_enterprise
	139, // 224: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.Mongos.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 225: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.Mongos.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	167, // 226: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.MongoInfra.config_mongos:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig6_0_enterprise
	166, // 227: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.MongoInfra.config_mongocfg:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig6_0_enterprise
	139, // 228: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.MongoInfra.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 229: yandex.cloud.mdb.mongodb.v1.MongodbSpec6_0_enterprise.MongoInfra.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	168, // 230: yandex.cloud.mdb.mongodb.v1.MongodbSpec.Mongod.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongodConfig
	139, // 231: yandex.cloud.mdb.mongodb.v1.MongodbSpec.Mongod.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 232: yandex.cloud.mdb.mongodb.v1.MongodbSpec.Mongod.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	169, // 233: yandex.cloud.mdb.mongodb.v1.MongodbSpec.MongoCfg.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig
	139, // 234: yandex.cloud.mdb.mongodb.v1.MongodbSpec.MongoCfg.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 235: yandex.cloud.mdb.mongodb.v1.MongodbSpec.MongoCfg.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	170, // 236: yandex.cloud.mdb.mongodb.v1.MongodbSpec.Mongos.config:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig
	139, // 237: yandex.cloud.mdb.mongodb.v1.MongodbSpec.Mongos.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 238: yandex.cloud.mdb.mongodb.v1.MongodbSpec.Mongos.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	170, // 239: yandex.cloud.mdb.mongodb.v1.MongodbSpec.MongoInfra.config_mongos:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongosConfig
	169, // 240: yandex.cloud.mdb.mongodb.v1.MongodbSpec.MongoInfra.config_mongocfg:type_name -> yandex.cloud.mdb.mongodb.v1.config.MongoCfgConfig
	139, // 241: yandex.cloud.mdb.mongodb.v1.MongodbSpec.MongoInfra.resources:type_name -> yandex.cloud.mdb.mongodb.v1.Resources
	141, // 242: yandex.cloud.mdb.mongodb.v1.MongodbSpec.MongoInfra.disk_size_autoscaling:type_name -> yandex.cloud.mdb.mongodb.v1.DiskSizeAutoscaling
	3,   // 243: yandex.cloud.mdb.mongodb.v1.ClusterService.Get:input_type -> yandex.cloud.mdb.mongodb.v1.GetClusterRequest
	4,   // 244: yandex.cloud.mdb.mongodb.v1.ClusterService.List:input_type -> yandex.cloud.mdb.mongodb.v1.ListClustersRequest
	6,   // 245: yandex.cloud.mdb.mongodb.v1.ClusterService.Create:input_type -> yandex.cloud.mdb.mongodb.v1.CreateClusterRequest
	8,   // 246: yandex.cloud.mdb.mongodb.v1.ClusterService.Update:input_type -> yandex.cloud.mdb.mongodb.v1.UpdateClusterRequest
	10,  // 247: yandex.cloud.mdb.mongodb.v1.ClusterService.Delete:input_type -> yandex.cloud.mdb.mongodb.v1.DeleteClusterRequest
	12,  // 248: yandex.cloud.mdb.mongodb.v1.ClusterService.Start:input_type -> yandex.cloud.mdb.mongodb.v1.StartClusterRequest
	14,  // 249: yandex.cloud.mdb.mongodb.v1.ClusterService.Stop:input_type -> yandex.cloud.mdb.mongodb.v1.StopClusterRequest
	16,  // 250: yandex.cloud.mdb.mongodb.v1.ClusterService.Move:input_type -> yandex.cloud.mdb.mongodb.v1.MoveClusterRequest
	18,  // 251: yandex.cloud.mdb.mongodb.v1.ClusterService.Backup:input_type -> yandex.cloud.mdb.mongodb.v1.BackupClusterRequest
	20,  // 252: yandex.cloud.mdb.mongodb.v1.ClusterService.Restore:input_type -> yandex.cloud.mdb.mongodb.v1.RestoreClusterRequest
	22,  // 253: yandex.cloud.mdb.mongodb.v1.ClusterService.RescheduleMaintenance:input_type -> yandex.cloud.mdb.mongodb.v1.RescheduleMaintenanceRequest
	25,  // 254: yandex.cloud.mdb.mongodb.v1.ClusterService.ListLogs:input_type -> yandex.cloud.mdb.mongodb.v1.ListClusterLogsRequest
	28,  // 255: yandex.cloud.mdb.mongodb.v1.ClusterService.StreamLogs:input_type -> yandex.cloud.mdb.mongodb.v1.StreamClusterLogsRequest
	29,  // 256: yandex.cloud.mdb.mongodb.v1.ClusterService.ListOperations:input_type -> yandex.cloud.mdb.mongodb.v1.ListClusterOperationsRequest
	31,  // 257: yandex.cloud.mdb.mongodb.v1.ClusterService.ListBackups:input_type -> yandex.cloud.mdb.mongodb.v1.ListClusterBackupsRequest
	33,  // 258: yandex.cloud.mdb.mongodb.v1.ClusterService.ListHosts:input_type -> yandex.cloud.mdb.mongodb.v1.ListClusterHostsRequest
	35,  // 259: yandex.cloud.mdb.mongodb.v1.ClusterService.AddHosts:input_type -> yandex.cloud.mdb.mongodb.v1.AddClusterHostsRequest
	37,  // 260: yandex.cloud.mdb.mongodb.v1.ClusterService.DeleteHosts:input_type -> yandex.cloud.mdb.mongodb.v1.DeleteClusterHostsRequest
	39,  // 261: yandex.cloud.mdb.mongodb.v1.ClusterService.UpdateHosts:input_type -> yandex.cloud.mdb.mongodb.v1.UpdateClusterHostsRequest
	42,  // 262: yandex.cloud.mdb.mongodb.v1.ClusterService.EnableSharding:input_type -> yandex.cloud.mdb.mongodb.v1.EnableClusterShardingRequest
	44,  // 263: yandex.cloud.mdb.mongodb.v1.ClusterService.GetShard:input_type -> yandex.cloud.mdb.mongodb.v1.GetClusterShardRequest
	45,  // 264: yandex.cloud.mdb.mongodb.v1.ClusterService.ListShards:input_type -> yandex.cloud.mdb.mongodb.v1.ListClusterShardsRequest
	47,  // 265: yandex.cloud.mdb.mongodb.v1.ClusterService.AddShard:input_type -> yandex.cloud.mdb.mongodb.v1.AddClusterShardRequest
	49,  // 266: yandex.cloud.mdb.mongodb.v1.ClusterService.DeleteShard:input_type -> yandex.cloud.mdb.mongodb.v1.DeleteClusterShardRequest
	51,  // 267: yandex.cloud.mdb.mongodb.v1.ClusterService.ResetupHosts:input_type -> yandex.cloud.mdb.mongodb.v1.ResetupHostsRequest
	53,  // 268: yandex.cloud.mdb.mongodb.v1.ClusterService.RestartHosts:input_type -> yandex.cloud.mdb.mongodb.v1.RestartHostsRequest
	55,  // 269: yandex.cloud.mdb.mongodb.v1.ClusterService.StepdownHosts:input_type -> yandex.cloud.mdb.mongodb.v1.StepdownHostsRequest
	171, // 270: yandex.cloud.mdb.mongodb.v1.ClusterService.ListAccessBindings:input_type -> yandex.cloud.access.ListAccessBindingsRequest
	172, // 271: yandex.cloud.mdb.mongodb.v1.ClusterService.SetAccessBindings:input_type -> yandex.cloud.access.SetAccessBindingsRequest
	173, // 272: yandex.cloud.mdb.mongodb.v1.ClusterService.UpdateAccessBindings:input_type -> yandex.cloud.access.UpdateAccessBindingsRequest
	119, // 273: yandex.cloud.mdb.mongodb.v1.ClusterService.Get:output_type -> yandex.cloud.mdb.mongodb.v1.Cluster
	5,   // 274: yandex.cloud.mdb.mongodb.v1.ClusterService.List:output_type -> yandex.cloud.mdb.mongodb.v1.ListClustersResponse
	128, // 275: yandex.cloud.mdb.mongodb.v1.ClusterService.Create:output_type -> yandex.cloud.operation.Operation
	128, // 276: yandex.cloud.mdb.mongodb.v1.ClusterService.Update:output_type -> yandex.cloud.operation.Operation
	128, // 277: yandex.cloud.mdb.mongodb.v1.ClusterService.Delete:output_type -> yandex.cloud.operation.Operation
	128, // 278: yandex.cloud.mdb.mongodb.v1.ClusterService.Start:output_type -> yandex.cloud.operation.Operation
	128, // 279: yandex.cloud.mdb.mongodb.v1.ClusterService.Stop:output_type -> yandex.cloud.operation.Operation
	128, // 280: yandex.cloud.mdb.mongodb.v1.ClusterService.Move:output_type -> yandex.cloud.operation.Operation
	128, // 281: yandex.cloud.mdb.mongodb.v1.ClusterService.Backup:output_type -> yandex.cloud.operation.Operation
	128, // 282: yandex.cloud.mdb.mongodb.v1.ClusterService.Restore:output_type -> yandex.cloud.operation.Operation
	128, // 283: yandex.cloud.mdb.mongodb.v1.ClusterService.RescheduleMaintenance:output_type -> yandex.cloud.operation.Operation
	26,  // 284: yandex.cloud.mdb.mongodb.v1.ClusterService.ListLogs:output_type -> yandex.cloud.mdb.mongodb.v1.ListClusterLogsResponse
	27,  // 285: yandex.cloud.mdb.mongodb.v1.ClusterService.StreamLogs:output_type -> yandex.cloud.mdb.mongodb.v1.StreamLogRecord
	30,  // 286: yandex.cloud.mdb.mongodb.v1.ClusterService.ListOperations:output_type -> yandex.cloud.mdb.mongodb.v1.ListClusterOperationsResponse
	32,  // 287: yandex.cloud.mdb.mongodb.v1.ClusterService.ListBackups:output_type -> yandex.cloud.mdb.mongodb.v1.ListClusterBackupsResponse
	34,  // 288: yandex.cloud.mdb.mongodb.v1.ClusterService.ListHosts:output_type -> yandex.cloud.mdb.mongodb.v1.ListClusterHostsResponse
	128, // 289: yandex.cloud.mdb.mongodb.v1.ClusterService.AddHosts:output_type -> yandex.cloud.operation.Operation
	128, // 290: yandex.cloud.mdb.mongodb.v1.ClusterService.DeleteHosts:output_type -> yandex.cloud.operation.Operation
	128, // 291: yandex.cloud.mdb.mongodb.v1.ClusterService.UpdateHosts:output_type -> yandex.cloud.operation.Operation
	128, // 292: yandex.cloud.mdb.mongodb.v1.ClusterService.EnableSharding:output_type -> yandex.cloud.operation.Operation
	134, // 293: yandex.cloud.mdb.mongodb.v1.ClusterService.GetShard:output_type -> yandex.cloud.mdb.mongodb.v1.Shard
	46,  // 294: yandex.cloud.mdb.mongodb.v1.ClusterService.ListShards:output_type -> yandex.cloud.mdb.mongodb.v1.ListClusterShardsResponse
	128, // 295: yandex.cloud.mdb.mongodb.v1.ClusterService.AddShard:output_type -> yandex.cloud.operation.Operation
	128, // 296: yandex.cloud.mdb.mongodb.v1.ClusterService.DeleteShard:output_type -> yandex.cloud.operation.Operation
	128, // 297: yandex.cloud.mdb.mongodb.v1.ClusterService.ResetupHosts:output_type -> yandex.cloud.operation.Operation
	128, // 298: yandex.cloud.mdb.mongodb.v1.ClusterService.RestartHosts:output_type -> yandex.cloud.operation.Operation
	128, // 299: yandex.cloud.mdb.mongodb.v1.ClusterService.StepdownHosts:output_type -> yandex.cloud.operation.Operation
	174, // 300: yandex.cloud.mdb.mongodb.v1.ClusterService.ListAccessBindings:output_type -> yandex.cloud.access.ListAccessBindingsResponse
	128, // 301: yandex.cloud.mdb.mongodb.v1.ClusterService.SetAccessBindings:output_type -> yandex.cloud.operation.Operation
	128, // 302: yandex.cloud.mdb.mongodb.v1.ClusterService.UpdateAccessBindings:output_type -> yandex.cloud.operation.Operation
	273, // [273:303] is the sub-list for method output_type
	243, // [243:273] is the sub-list for method input_type
	243, // [243:243] is the sub-list for extension type_name
	243, // [243:243] is the sub-list for extension extendee
	0,   // [0:243] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_init() }
func file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_init() {
	if File_yandex_cloud_mdb_mongodb_v1_cluster_service_proto != nil {
		return
	}
	file_yandex_cloud_mdb_mongodb_v1_backup_proto_init()
	file_yandex_cloud_mdb_mongodb_v1_cluster_proto_init()
	file_yandex_cloud_mdb_mongodb_v1_database_proto_init()
	file_yandex_cloud_mdb_mongodb_v1_maintenance_proto_init()
	file_yandex_cloud_mdb_mongodb_v1_user_proto_init()
	file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes[65].OneofWrappers = []any{
		(*ConfigSpec_MongodbSpec_3_6)(nil),
		(*ConfigSpec_MongodbSpec_4_0)(nil),
		(*ConfigSpec_MongodbSpec_4_2)(nil),
		(*ConfigSpec_MongodbSpec_4_4)(nil),
		(*ConfigSpec_MongodbSpec_5_0)(nil),
		(*ConfigSpec_MongodbSpec_6_0)(nil),
		(*ConfigSpec_MongodbSpec_4_4Enterprise)(nil),
		(*ConfigSpec_MongodbSpec_5_0Enterprise)(nil),
		(*ConfigSpec_MongodbSpec_6_0Enterprise)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDesc), len(file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   116,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_mongodb_v1_cluster_service_proto = out.File
	file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_goTypes = nil
	file_yandex_cloud_mdb_mongodb_v1_cluster_service_proto_depIdxs = nil
}

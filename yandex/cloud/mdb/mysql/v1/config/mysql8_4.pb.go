// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/mdb/mysql/v1/config/mysql8_4.proto

package mysql

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MysqlConfig8_4_SQLMode int32

const (
	MysqlConfig8_4_SQLMODE_UNSPECIFIED        MysqlConfig8_4_SQLMode = 0
	MysqlConfig8_4_ALLOW_INVALID_DATES        MysqlConfig8_4_SQLMode = 1
	MysqlConfig8_4_ANSI_QUOTES                MysqlConfig8_4_SQLMode = 2
	MysqlConfig8_4_ERROR_FOR_DIVISION_BY_ZERO MysqlConfig8_4_SQLMode = 3
	MysqlConfig8_4_HIGH_NOT_PRECEDENCE        MysqlConfig8_4_SQLMode = 4
	MysqlConfig8_4_IGNORE_SPACE               MysqlConfig8_4_SQLMode = 5
	MysqlConfig8_4_NO_AUTO_VALUE_ON_ZERO      MysqlConfig8_4_SQLMode = 6
	MysqlConfig8_4_NO_BACKSLASH_ESCAPES       MysqlConfig8_4_SQLMode = 7
	MysqlConfig8_4_NO_ENGINE_SUBSTITUTION     MysqlConfig8_4_SQLMode = 8
	MysqlConfig8_4_NO_UNSIGNED_SUBTRACTION    MysqlConfig8_4_SQLMode = 9
	MysqlConfig8_4_NO_ZERO_DATE               MysqlConfig8_4_SQLMode = 10
	MysqlConfig8_4_NO_ZERO_IN_DATE            MysqlConfig8_4_SQLMode = 11
	MysqlConfig8_4_ONLY_FULL_GROUP_BY         MysqlConfig8_4_SQLMode = 15
	MysqlConfig8_4_PAD_CHAR_TO_FULL_LENGTH    MysqlConfig8_4_SQLMode = 16
	MysqlConfig8_4_PIPES_AS_CONCAT            MysqlConfig8_4_SQLMode = 17
	MysqlConfig8_4_REAL_AS_FLOAT              MysqlConfig8_4_SQLMode = 18
	MysqlConfig8_4_STRICT_ALL_TABLES          MysqlConfig8_4_SQLMode = 19
	MysqlConfig8_4_STRICT_TRANS_TABLES        MysqlConfig8_4_SQLMode = 20
	MysqlConfig8_4_TIME_TRUNCATE_FRACTIONAL   MysqlConfig8_4_SQLMode = 21
	MysqlConfig8_4_ANSI                       MysqlConfig8_4_SQLMode = 22
	MysqlConfig8_4_TRADITIONAL                MysqlConfig8_4_SQLMode = 23
	MysqlConfig8_4_NO_DIR_IN_CREATE           MysqlConfig8_4_SQLMode = 24
)

// Enum value maps for MysqlConfig8_4_SQLMode.
var (
	MysqlConfig8_4_SQLMode_name = map[int32]string{
		0:  "SQLMODE_UNSPECIFIED",
		1:  "ALLOW_INVALID_DATES",
		2:  "ANSI_QUOTES",
		3:  "ERROR_FOR_DIVISION_BY_ZERO",
		4:  "HIGH_NOT_PRECEDENCE",
		5:  "IGNORE_SPACE",
		6:  "NO_AUTO_VALUE_ON_ZERO",
		7:  "NO_BACKSLASH_ESCAPES",
		8:  "NO_ENGINE_SUBSTITUTION",
		9:  "NO_UNSIGNED_SUBTRACTION",
		10: "NO_ZERO_DATE",
		11: "NO_ZERO_IN_DATE",
		15: "ONLY_FULL_GROUP_BY",
		16: "PAD_CHAR_TO_FULL_LENGTH",
		17: "PIPES_AS_CONCAT",
		18: "REAL_AS_FLOAT",
		19: "STRICT_ALL_TABLES",
		20: "STRICT_TRANS_TABLES",
		21: "TIME_TRUNCATE_FRACTIONAL",
		22: "ANSI",
		23: "TRADITIONAL",
		24: "NO_DIR_IN_CREATE",
	}
	MysqlConfig8_4_SQLMode_value = map[string]int32{
		"SQLMODE_UNSPECIFIED":        0,
		"ALLOW_INVALID_DATES":        1,
		"ANSI_QUOTES":                2,
		"ERROR_FOR_DIVISION_BY_ZERO": 3,
		"HIGH_NOT_PRECEDENCE":        4,
		"IGNORE_SPACE":               5,
		"NO_AUTO_VALUE_ON_ZERO":      6,
		"NO_BACKSLASH_ESCAPES":       7,
		"NO_ENGINE_SUBSTITUTION":     8,
		"NO_UNSIGNED_SUBTRACTION":    9,
		"NO_ZERO_DATE":               10,
		"NO_ZERO_IN_DATE":            11,
		"ONLY_FULL_GROUP_BY":         15,
		"PAD_CHAR_TO_FULL_LENGTH":    16,
		"PIPES_AS_CONCAT":            17,
		"REAL_AS_FLOAT":              18,
		"STRICT_ALL_TABLES":          19,
		"STRICT_TRANS_TABLES":        20,
		"TIME_TRUNCATE_FRACTIONAL":   21,
		"ANSI":                       22,
		"TRADITIONAL":                23,
		"NO_DIR_IN_CREATE":           24,
	}
)

func (x MysqlConfig8_4_SQLMode) Enum() *MysqlConfig8_4_SQLMode {
	p := new(MysqlConfig8_4_SQLMode)
	*p = x
	return p
}

func (x MysqlConfig8_4_SQLMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig8_4_SQLMode) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_enumTypes[0].Descriptor()
}

func (MysqlConfig8_4_SQLMode) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_enumTypes[0]
}

func (x MysqlConfig8_4_SQLMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig8_4_SQLMode.Descriptor instead.
func (MysqlConfig8_4_SQLMode) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDescGZIP(), []int{0, 0}
}

type MysqlConfig8_4_AuthPlugin int32

const (
	MysqlConfig8_4_AUTH_PLUGIN_UNSPECIFIED MysqlConfig8_4_AuthPlugin = 0
	MysqlConfig8_4_MYSQL_NATIVE_PASSWORD   MysqlConfig8_4_AuthPlugin = 1
	MysqlConfig8_4_CACHING_SHA2_PASSWORD   MysqlConfig8_4_AuthPlugin = 2
	MysqlConfig8_4_SHA256_PASSWORD         MysqlConfig8_4_AuthPlugin = 3
	MysqlConfig8_4_MYSQL_NO_LOGIN          MysqlConfig8_4_AuthPlugin = 4
	MysqlConfig8_4_MDB_IAMPROXY_AUTH       MysqlConfig8_4_AuthPlugin = 5
)

// Enum value maps for MysqlConfig8_4_AuthPlugin.
var (
	MysqlConfig8_4_AuthPlugin_name = map[int32]string{
		0: "AUTH_PLUGIN_UNSPECIFIED",
		1: "MYSQL_NATIVE_PASSWORD",
		2: "CACHING_SHA2_PASSWORD",
		3: "SHA256_PASSWORD",
		4: "MYSQL_NO_LOGIN",
		5: "MDB_IAMPROXY_AUTH",
	}
	MysqlConfig8_4_AuthPlugin_value = map[string]int32{
		"AUTH_PLUGIN_UNSPECIFIED": 0,
		"MYSQL_NATIVE_PASSWORD":   1,
		"CACHING_SHA2_PASSWORD":   2,
		"SHA256_PASSWORD":         3,
		"MYSQL_NO_LOGIN":          4,
		"MDB_IAMPROXY_AUTH":       5,
	}
)

func (x MysqlConfig8_4_AuthPlugin) Enum() *MysqlConfig8_4_AuthPlugin {
	p := new(MysqlConfig8_4_AuthPlugin)
	*p = x
	return p
}

func (x MysqlConfig8_4_AuthPlugin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig8_4_AuthPlugin) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_enumTypes[1].Descriptor()
}

func (MysqlConfig8_4_AuthPlugin) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_enumTypes[1]
}

func (x MysqlConfig8_4_AuthPlugin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig8_4_AuthPlugin.Descriptor instead.
func (MysqlConfig8_4_AuthPlugin) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDescGZIP(), []int{0, 1}
}

type MysqlConfig8_4_TransactionIsolation int32

const (
	MysqlConfig8_4_TRANSACTION_ISOLATION_UNSPECIFIED MysqlConfig8_4_TransactionIsolation = 0
	MysqlConfig8_4_READ_COMMITTED                    MysqlConfig8_4_TransactionIsolation = 1
	MysqlConfig8_4_REPEATABLE_READ                   MysqlConfig8_4_TransactionIsolation = 2
	MysqlConfig8_4_SERIALIZABLE                      MysqlConfig8_4_TransactionIsolation = 3
)

// Enum value maps for MysqlConfig8_4_TransactionIsolation.
var (
	MysqlConfig8_4_TransactionIsolation_name = map[int32]string{
		0: "TRANSACTION_ISOLATION_UNSPECIFIED",
		1: "READ_COMMITTED",
		2: "REPEATABLE_READ",
		3: "SERIALIZABLE",
	}
	MysqlConfig8_4_TransactionIsolation_value = map[string]int32{
		"TRANSACTION_ISOLATION_UNSPECIFIED": 0,
		"READ_COMMITTED":                    1,
		"REPEATABLE_READ":                   2,
		"SERIALIZABLE":                      3,
	}
)

func (x MysqlConfig8_4_TransactionIsolation) Enum() *MysqlConfig8_4_TransactionIsolation {
	p := new(MysqlConfig8_4_TransactionIsolation)
	*p = x
	return p
}

func (x MysqlConfig8_4_TransactionIsolation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig8_4_TransactionIsolation) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_enumTypes[2].Descriptor()
}

func (MysqlConfig8_4_TransactionIsolation) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_enumTypes[2]
}

func (x MysqlConfig8_4_TransactionIsolation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig8_4_TransactionIsolation.Descriptor instead.
func (MysqlConfig8_4_TransactionIsolation) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDescGZIP(), []int{0, 2}
}

type MysqlConfig8_4_BinlogRowImage int32

const (
	MysqlConfig8_4_BINLOG_ROW_IMAGE_UNSPECIFIED MysqlConfig8_4_BinlogRowImage = 0
	MysqlConfig8_4_FULL                         MysqlConfig8_4_BinlogRowImage = 1
	MysqlConfig8_4_MINIMAL                      MysqlConfig8_4_BinlogRowImage = 2
	MysqlConfig8_4_NOBLOB                       MysqlConfig8_4_BinlogRowImage = 3
)

// Enum value maps for MysqlConfig8_4_BinlogRowImage.
var (
	MysqlConfig8_4_BinlogRowImage_name = map[int32]string{
		0: "BINLOG_ROW_IMAGE_UNSPECIFIED",
		1: "FULL",
		2: "MINIMAL",
		3: "NOBLOB",
	}
	MysqlConfig8_4_BinlogRowImage_value = map[string]int32{
		"BINLOG_ROW_IMAGE_UNSPECIFIED": 0,
		"FULL":                         1,
		"MINIMAL":                      2,
		"NOBLOB":                       3,
	}
)

func (x MysqlConfig8_4_BinlogRowImage) Enum() *MysqlConfig8_4_BinlogRowImage {
	p := new(MysqlConfig8_4_BinlogRowImage)
	*p = x
	return p
}

func (x MysqlConfig8_4_BinlogRowImage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig8_4_BinlogRowImage) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_enumTypes[3].Descriptor()
}

func (MysqlConfig8_4_BinlogRowImage) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_enumTypes[3]
}

func (x MysqlConfig8_4_BinlogRowImage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig8_4_BinlogRowImage.Descriptor instead.
func (MysqlConfig8_4_BinlogRowImage) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDescGZIP(), []int{0, 3}
}

type MysqlConfig8_4_SlaveParallelType int32

const (
	MysqlConfig8_4_SLAVE_PARALLEL_TYPE_UNSPECIFIED MysqlConfig8_4_SlaveParallelType = 0
	MysqlConfig8_4_DATABASE                        MysqlConfig8_4_SlaveParallelType = 1
	MysqlConfig8_4_LOGICAL_CLOCK                   MysqlConfig8_4_SlaveParallelType = 2
)

// Enum value maps for MysqlConfig8_4_SlaveParallelType.
var (
	MysqlConfig8_4_SlaveParallelType_name = map[int32]string{
		0: "SLAVE_PARALLEL_TYPE_UNSPECIFIED",
		1: "DATABASE",
		2: "LOGICAL_CLOCK",
	}
	MysqlConfig8_4_SlaveParallelType_value = map[string]int32{
		"SLAVE_PARALLEL_TYPE_UNSPECIFIED": 0,
		"DATABASE":                        1,
		"LOGICAL_CLOCK":                   2,
	}
)

func (x MysqlConfig8_4_SlaveParallelType) Enum() *MysqlConfig8_4_SlaveParallelType {
	p := new(MysqlConfig8_4_SlaveParallelType)
	*p = x
	return p
}

func (x MysqlConfig8_4_SlaveParallelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig8_4_SlaveParallelType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_enumTypes[4].Descriptor()
}

func (MysqlConfig8_4_SlaveParallelType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_enumTypes[4]
}

func (x MysqlConfig8_4_SlaveParallelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig8_4_SlaveParallelType.Descriptor instead.
func (MysqlConfig8_4_SlaveParallelType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDescGZIP(), []int{0, 4}
}

type MysqlConfig8_4_LogSlowRateType int32

const (
	MysqlConfig8_4_LOG_SLOW_RATE_TYPE_UNSPECIFIED MysqlConfig8_4_LogSlowRateType = 0
	MysqlConfig8_4_SESSION                        MysqlConfig8_4_LogSlowRateType = 1
	MysqlConfig8_4_QUERY                          MysqlConfig8_4_LogSlowRateType = 2
)

// Enum value maps for MysqlConfig8_4_LogSlowRateType.
var (
	MysqlConfig8_4_LogSlowRateType_name = map[int32]string{
		0: "LOG_SLOW_RATE_TYPE_UNSPECIFIED",
		1: "SESSION",
		2: "QUERY",
	}
	MysqlConfig8_4_LogSlowRateType_value = map[string]int32{
		"LOG_SLOW_RATE_TYPE_UNSPECIFIED": 0,
		"SESSION":                        1,
		"QUERY":                          2,
	}
)

func (x MysqlConfig8_4_LogSlowRateType) Enum() *MysqlConfig8_4_LogSlowRateType {
	p := new(MysqlConfig8_4_LogSlowRateType)
	*p = x
	return p
}

func (x MysqlConfig8_4_LogSlowRateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig8_4_LogSlowRateType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_enumTypes[5].Descriptor()
}

func (MysqlConfig8_4_LogSlowRateType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_enumTypes[5]
}

func (x MysqlConfig8_4_LogSlowRateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig8_4_LogSlowRateType.Descriptor instead.
func (MysqlConfig8_4_LogSlowRateType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDescGZIP(), []int{0, 5}
}

type MysqlConfig8_4_LogSlowFilterType int32

const (
	MysqlConfig8_4_LOG_SLOW_FILTER_TYPE_UNSPECIFIED MysqlConfig8_4_LogSlowFilterType = 0
	MysqlConfig8_4_FULL_SCAN                        MysqlConfig8_4_LogSlowFilterType = 1
	MysqlConfig8_4_FULL_JOIN                        MysqlConfig8_4_LogSlowFilterType = 2
	MysqlConfig8_4_TMP_TABLE                        MysqlConfig8_4_LogSlowFilterType = 3
	MysqlConfig8_4_TMP_TABLE_ON_DISK                MysqlConfig8_4_LogSlowFilterType = 4
	MysqlConfig8_4_FILESORT                         MysqlConfig8_4_LogSlowFilterType = 5
	MysqlConfig8_4_FILESORT_ON_DISK                 MysqlConfig8_4_LogSlowFilterType = 6
)

// Enum value maps for MysqlConfig8_4_LogSlowFilterType.
var (
	MysqlConfig8_4_LogSlowFilterType_name = map[int32]string{
		0: "LOG_SLOW_FILTER_TYPE_UNSPECIFIED",
		1: "FULL_SCAN",
		2: "FULL_JOIN",
		3: "TMP_TABLE",
		4: "TMP_TABLE_ON_DISK",
		5: "FILESORT",
		6: "FILESORT_ON_DISK",
	}
	MysqlConfig8_4_LogSlowFilterType_value = map[string]int32{
		"LOG_SLOW_FILTER_TYPE_UNSPECIFIED": 0,
		"FULL_SCAN":                        1,
		"FULL_JOIN":                        2,
		"TMP_TABLE":                        3,
		"TMP_TABLE_ON_DISK":                4,
		"FILESORT":                         5,
		"FILESORT_ON_DISK":                 6,
	}
)

func (x MysqlConfig8_4_LogSlowFilterType) Enum() *MysqlConfig8_4_LogSlowFilterType {
	p := new(MysqlConfig8_4_LogSlowFilterType)
	*p = x
	return p
}

func (x MysqlConfig8_4_LogSlowFilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig8_4_LogSlowFilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_enumTypes[6].Descriptor()
}

func (MysqlConfig8_4_LogSlowFilterType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_enumTypes[6]
}

func (x MysqlConfig8_4_LogSlowFilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig8_4_LogSlowFilterType.Descriptor instead.
func (MysqlConfig8_4_LogSlowFilterType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDescGZIP(), []int{0, 6}
}

type MysqlConfig8_4_AuditLogPolicy int32

const (
	MysqlConfig8_4_AUDIT_LOG_POLICY_UNSPECIFIED MysqlConfig8_4_AuditLogPolicy = 0
	MysqlConfig8_4_ALL                          MysqlConfig8_4_AuditLogPolicy = 1
	MysqlConfig8_4_LOGINS                       MysqlConfig8_4_AuditLogPolicy = 2
	MysqlConfig8_4_QUERIES                      MysqlConfig8_4_AuditLogPolicy = 3
	MysqlConfig8_4_NONE                         MysqlConfig8_4_AuditLogPolicy = 4
)

// Enum value maps for MysqlConfig8_4_AuditLogPolicy.
var (
	MysqlConfig8_4_AuditLogPolicy_name = map[int32]string{
		0: "AUDIT_LOG_POLICY_UNSPECIFIED",
		1: "ALL",
		2: "LOGINS",
		3: "QUERIES",
		4: "NONE",
	}
	MysqlConfig8_4_AuditLogPolicy_value = map[string]int32{
		"AUDIT_LOG_POLICY_UNSPECIFIED": 0,
		"ALL":                          1,
		"LOGINS":                       2,
		"QUERIES":                      3,
		"NONE":                         4,
	}
)

func (x MysqlConfig8_4_AuditLogPolicy) Enum() *MysqlConfig8_4_AuditLogPolicy {
	p := new(MysqlConfig8_4_AuditLogPolicy)
	*p = x
	return p
}

func (x MysqlConfig8_4_AuditLogPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig8_4_AuditLogPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_enumTypes[7].Descriptor()
}

func (MysqlConfig8_4_AuditLogPolicy) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_enumTypes[7]
}

func (x MysqlConfig8_4_AuditLogPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig8_4_AuditLogPolicy.Descriptor instead.
func (MysqlConfig8_4_AuditLogPolicy) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDescGZIP(), []int{0, 7}
}

type MysqlConfig8_4_InnodbChangeBuffering int32

const (
	MysqlConfig8_4_INNODB_CHANGE_BUFFERING_UNSPECIFIED MysqlConfig8_4_InnodbChangeBuffering = 0
	MysqlConfig8_4_INNODB_CHANGE_BUFFERING_NONE        MysqlConfig8_4_InnodbChangeBuffering = 1
	MysqlConfig8_4_INNODB_CHANGE_BUFFERING_INSERTS     MysqlConfig8_4_InnodbChangeBuffering = 2
	MysqlConfig8_4_INNODB_CHANGE_BUFFERING_DELETES     MysqlConfig8_4_InnodbChangeBuffering = 3
	MysqlConfig8_4_INNODB_CHANGE_BUFFERING_CHANGES     MysqlConfig8_4_InnodbChangeBuffering = 4
	MysqlConfig8_4_INNODB_CHANGE_BUFFERING_PURGES      MysqlConfig8_4_InnodbChangeBuffering = 5
	MysqlConfig8_4_INNODB_CHANGE_BUFFERING_ALL         MysqlConfig8_4_InnodbChangeBuffering = 6
)

// Enum value maps for MysqlConfig8_4_InnodbChangeBuffering.
var (
	MysqlConfig8_4_InnodbChangeBuffering_name = map[int32]string{
		0: "INNODB_CHANGE_BUFFERING_UNSPECIFIED",
		1: "INNODB_CHANGE_BUFFERING_NONE",
		2: "INNODB_CHANGE_BUFFERING_INSERTS",
		3: "INNODB_CHANGE_BUFFERING_DELETES",
		4: "INNODB_CHANGE_BUFFERING_CHANGES",
		5: "INNODB_CHANGE_BUFFERING_PURGES",
		6: "INNODB_CHANGE_BUFFERING_ALL",
	}
	MysqlConfig8_4_InnodbChangeBuffering_value = map[string]int32{
		"INNODB_CHANGE_BUFFERING_UNSPECIFIED": 0,
		"INNODB_CHANGE_BUFFERING_NONE":        1,
		"INNODB_CHANGE_BUFFERING_INSERTS":     2,
		"INNODB_CHANGE_BUFFERING_DELETES":     3,
		"INNODB_CHANGE_BUFFERING_CHANGES":     4,
		"INNODB_CHANGE_BUFFERING_PURGES":      5,
		"INNODB_CHANGE_BUFFERING_ALL":         6,
	}
)

func (x MysqlConfig8_4_InnodbChangeBuffering) Enum() *MysqlConfig8_4_InnodbChangeBuffering {
	p := new(MysqlConfig8_4_InnodbChangeBuffering)
	*p = x
	return p
}

func (x MysqlConfig8_4_InnodbChangeBuffering) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MysqlConfig8_4_InnodbChangeBuffering) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_enumTypes[8].Descriptor()
}

func (MysqlConfig8_4_InnodbChangeBuffering) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_enumTypes[8]
}

func (x MysqlConfig8_4_InnodbChangeBuffering) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MysqlConfig8_4_InnodbChangeBuffering.Descriptor instead.
func (MysqlConfig8_4_InnodbChangeBuffering) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDescGZIP(), []int{0, 8}
}

// Options and structure of `MysqlConfig8_4` reflects MySQL 8.4 configuration file
type MysqlConfig8_4 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Size of the InnoDB buffer pool used for caching table and index data.
	//
	// For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
	InnodbBufferPoolSize *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=innodb_buffer_pool_size,json=innodbBufferPoolSize,proto3" json:"innodb_buffer_pool_size,omitempty"`
	// The maximum permitted number of simultaneous client connections.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_max_connections).
	MaxConnections *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=max_connections,json=maxConnections,proto3" json:"max_connections,omitempty"`
	// Time that it takes to process a query before it is considered slow.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_long_query_time).
	LongQueryTime *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=long_query_time,json=longQueryTime,proto3" json:"long_query_time,omitempty"`
	// Enable writing of audit log of MySQL.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/audit-log-reference.html#audit-log-options-variables).
	AuditLog *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=audit_log,json=auditLog,proto3" json:"audit_log,omitempty"`
	// Server SQL mode of MySQL.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/sql-mode.html#sql-mode-setting).
	SqlMode []MysqlConfig8_4_SQLMode `protobuf:"varint,6,rep,packed,name=sql_mode,json=sqlMode,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4_SQLMode" json:"sql_mode,omitempty"`
	// The maximum size in bytes of one packet.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_max_allowed_packet).
	MaxAllowedPacket *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=max_allowed_packet,json=maxAllowedPacket,proto3" json:"max_allowed_packet,omitempty"`
	// Transaction log flush behaviour.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit)
	InnodbFlushLogAtTrxCommit *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=innodb_flush_log_at_trx_commit,json=innodbFlushLogAtTrxCommit,proto3" json:"innodb_flush_log_at_trx_commit,omitempty"`
	// Max time in seconds for a transaction to wait for a row lock
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_lock_wait_timeout)
	InnodbLockWaitTimeout *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=innodb_lock_wait_timeout,json=innodbLockWaitTimeout,proto3" json:"innodb_lock_wait_timeout,omitempty"`
	// Default transaction isolation level.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_transaction_isolation)
	TransactionIsolation MysqlConfig8_4_TransactionIsolation `protobuf:"varint,10,opt,name=transaction_isolation,json=transactionIsolation,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4_TransactionIsolation" json:"transaction_isolation,omitempty"`
	// Print information about deadlocks in error log
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks)
	InnodbPrintAllDeadlocks *wrapperspb.BoolValue `protobuf:"bytes,11,opt,name=innodb_print_all_deadlocks,json=innodbPrintAllDeadlocks,proto3" json:"innodb_print_all_deadlocks,omitempty"`
	// The number of seconds to wait for more data from a connection before aborting the read.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_net_read_timeout)
	NetReadTimeout *wrapperspb.Int64Value `protobuf:"bytes,12,opt,name=net_read_timeout,json=netReadTimeout,proto3" json:"net_read_timeout,omitempty"`
	// The number of seconds to wait for a block to be written to a connection before aborting the write.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_net_write_timeout)
	NetWriteTimeout *wrapperspb.Int64Value `protobuf:"bytes,13,opt,name=net_write_timeout,json=netWriteTimeout,proto3" json:"net_write_timeout,omitempty"`
	// The maximum permitted result length in bytes for the GROUP_CONCAT() function.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_group_concat_max_len)
	GroupConcatMaxLen *wrapperspb.Int64Value `protobuf:"bytes,14,opt,name=group_concat_max_len,json=groupConcatMaxLen,proto3" json:"group_concat_max_len,omitempty"`
	// The maximum size of internal in-memory temporary tables.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_tmp_table_size)
	TmpTableSize *wrapperspb.Int64Value `protobuf:"bytes,15,opt,name=tmp_table_size,json=tmpTableSize,proto3" json:"tmp_table_size,omitempty"`
	// This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_max_heap_table_size)
	MaxHeapTableSize *wrapperspb.Int64Value `protobuf:"bytes,16,opt,name=max_heap_table_size,json=maxHeapTableSize,proto3" json:"max_heap_table_size,omitempty"`
	// The servers default time zone.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-options.html#option_mysqld_default-time-zone)
	DefaultTimeZone string `protobuf:"bytes,17,opt,name=default_time_zone,json=defaultTimeZone,proto3" json:"default_time_zone,omitempty"`
	// The servers default character set.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_character_set_server)
	CharacterSetServer string `protobuf:"bytes,18,opt,name=character_set_server,json=characterSetServer,proto3" json:"character_set_server,omitempty"`
	// Set the default server collation.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_collation_server)
	CollationServer string `protobuf:"bytes,19,opt,name=collation_server,json=collationServer,proto3" json:"collation_server,omitempty"`
	// Enables Innodb adaptive hash index
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_adaptive_hash_index)
	InnodbAdaptiveHashIndex *wrapperspb.BoolValue `protobuf:"bytes,20,opt,name=innodb_adaptive_hash_index,json=innodbAdaptiveHashIndex,proto3" json:"innodb_adaptive_hash_index,omitempty"`
	// Enables the NUMA interleave memory policy for allocation of the InnoDB buffer pool.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_numa_interleave)
	InnodbNumaInterleave *wrapperspb.BoolValue `protobuf:"bytes,21,opt,name=innodb_numa_interleave,json=innodbNumaInterleave,proto3" json:"innodb_numa_interleave,omitempty"`
	// The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_log_buffer_size)
	InnodbLogBufferSize *wrapperspb.Int64Value `protobuf:"bytes,22,opt,name=innodb_log_buffer_size,json=innodbLogBufferSize,proto3" json:"innodb_log_buffer_size,omitempty"`
	// The size in bytes of the single Innodb Redo log file.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_log_file_size)
	InnodbLogFileSize *wrapperspb.Int64Value `protobuf:"bytes,23,opt,name=innodb_log_file_size,json=innodbLogFileSize,proto3" json:"innodb_log_file_size,omitempty"`
	// Limits IO available for InnoDB background tasks
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_io_capacity)
	InnodbIoCapacity *wrapperspb.Int64Value `protobuf:"bytes,24,opt,name=innodb_io_capacity,json=innodbIoCapacity,proto3" json:"innodb_io_capacity,omitempty"`
	// Limits IO available for InnoDB background tasks
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_io_capacity_max)
	InnodbIoCapacityMax *wrapperspb.Int64Value `protobuf:"bytes,25,opt,name=innodb_io_capacity_max,json=innodbIoCapacityMax,proto3" json:"innodb_io_capacity_max,omitempty"`
	// The number of I/O threads for read operations in InnoDB.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_read_io_threads)
	InnodbReadIoThreads *wrapperspb.Int64Value `protobuf:"bytes,26,opt,name=innodb_read_io_threads,json=innodbReadIoThreads,proto3" json:"innodb_read_io_threads,omitempty"`
	// The number of I/O threads for write operations in InnoDB.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_write_io_threads)
	InnodbWriteIoThreads *wrapperspb.Int64Value `protobuf:"bytes,27,opt,name=innodb_write_io_threads,json=innodbWriteIoThreads,proto3" json:"innodb_write_io_threads,omitempty"`
	// The number of background threads devoted to the InnoDB purge operation.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_purge_threads)
	InnodbPurgeThreads *wrapperspb.Int64Value `protobuf:"bytes,28,opt,name=innodb_purge_threads,json=innodbPurgeThreads,proto3" json:"innodb_purge_threads,omitempty"`
	// Defines the maximum number of threads permitted inside of InnoDB.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_thread_concurrency)
	InnodbThreadConcurrency *wrapperspb.Int64Value `protobuf:"bytes,29,opt,name=innodb_thread_concurrency,json=innodbThreadConcurrency,proto3" json:"innodb_thread_concurrency,omitempty"`
	// Limits the max size of InnoDB temp tablespace
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_temp_data_file_path)
	InnodbTempDataFileMaxSize *wrapperspb.Int64Value `protobuf:"bytes,30,opt,name=innodb_temp_data_file_max_size,json=innodbTempDataFileMaxSize,proto3" json:"innodb_temp_data_file_max_size,omitempty"`
	// How many threads the server should cache for reuse.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_thread_cache_size).
	ThreadCacheSize *wrapperspb.Int64Value `protobuf:"bytes,31,opt,name=thread_cache_size,json=threadCacheSize,proto3" json:"thread_cache_size,omitempty"`
	// The stack size for each thread. The default is large enough for normal operation.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_thread_stack).
	ThreadStack *wrapperspb.Int64Value `protobuf:"bytes,32,opt,name=thread_stack,json=threadStack,proto3" json:"thread_stack,omitempty"`
	// The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_join_buffer_size).
	JoinBufferSize *wrapperspb.Int64Value `protobuf:"bytes,33,opt,name=join_buffer_size,json=joinBufferSize,proto3" json:"join_buffer_size,omitempty"`
	// Each session that must perform a sort allocates a buffer of this size.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_sort_buffer_size).
	SortBufferSize *wrapperspb.Int64Value `protobuf:"bytes,34,opt,name=sort_buffer_size,json=sortBufferSize,proto3" json:"sort_buffer_size,omitempty"`
	// The number of table definitions that can be stored in the definition cache.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_table_definition_cache).
	TableDefinitionCache *wrapperspb.Int64Value `protobuf:"bytes,35,opt,name=table_definition_cache,json=tableDefinitionCache,proto3" json:"table_definition_cache,omitempty"`
	// The number of open tables for all threads.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_table_open_cache).
	TableOpenCache *wrapperspb.Int64Value `protobuf:"bytes,36,opt,name=table_open_cache,json=tableOpenCache,proto3" json:"table_open_cache,omitempty"`
	// The number of open tables cache instances.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_table_open_cache_instances).
	TableOpenCacheInstances *wrapperspb.Int64Value `protobuf:"bytes,37,opt,name=table_open_cache_instances,json=tableOpenCacheInstances,proto3" json:"table_open_cache_instances,omitempty"`
	// This system variable determines whether the server enables certain nonstandard behaviors for default values and NULL-value handling in TIMESTAMP columns.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp).
	ExplicitDefaultsForTimestamp *wrapperspb.BoolValue `protobuf:"bytes,38,opt,name=explicit_defaults_for_timestamp,json=explicitDefaultsForTimestamp,proto3" json:"explicit_defaults_for_timestamp,omitempty"`
	// Can be used to control the operation of AUTO_INCREMENT columns.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/replication-options-master.html#sysvar_auto_increment_increment).
	AutoIncrementIncrement *wrapperspb.Int64Value `protobuf:"bytes,39,opt,name=auto_increment_increment,json=autoIncrementIncrement,proto3" json:"auto_increment_increment,omitempty"`
	// Can be used to control the operation of AUTO_INCREMENT columns.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/replication-options-master.html#sysvar_auto_increment_offset).
	AutoIncrementOffset *wrapperspb.Int64Value `protobuf:"bytes,40,opt,name=auto_increment_offset,json=autoIncrementOffset,proto3" json:"auto_increment_offset,omitempty"`
	// Controls how often the MySQL server synchronizes the binary log to disk.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/replication-options-binary-log.html#sysvar_sync_binlog).
	SyncBinlog *wrapperspb.Int64Value `protobuf:"bytes,41,opt,name=sync_binlog,json=syncBinlog,proto3" json:"sync_binlog,omitempty"`
	// The size of the cache to hold changes to the binary log during a transaction.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/replication-options-binary-log.html#sysvar_binlog_cache_size).
	BinlogCacheSize *wrapperspb.Int64Value `protobuf:"bytes,42,opt,name=binlog_cache_size,json=binlogCacheSize,proto3" json:"binlog_cache_size,omitempty"`
	// Controls how many microseconds the binary log commit waits before synchronizing the binary log file to disk.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/replication-options-binary-log.html#sysvar_binlog_group_commit_sync_delay).
	BinlogGroupCommitSyncDelay *wrapperspb.Int64Value `protobuf:"bytes,43,opt,name=binlog_group_commit_sync_delay,json=binlogGroupCommitSyncDelay,proto3" json:"binlog_group_commit_sync_delay,omitempty"`
	// For MySQL row-based replication, this variable determines how row images are written to the binary log.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/replication-options-binary-log.html#sysvar_binlog_row_image).
	BinlogRowImage MysqlConfig8_4_BinlogRowImage `protobuf:"varint,44,opt,name=binlog_row_image,json=binlogRowImage,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4_BinlogRowImage" json:"binlog_row_image,omitempty"`
	// When enabled, it causes the server to write informational log events such as row query log events into its binary log.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/replication-options-binary-log.html#sysvar_binlog_rows_query_log_events).
	BinlogRowsQueryLogEvents *wrapperspb.BoolValue `protobuf:"bytes,45,opt,name=binlog_rows_query_log_events,json=binlogRowsQueryLogEvents,proto3" json:"binlog_rows_query_log_events,omitempty"`
	// The number of replica acknowledgments the source must receive per transaction before proceeding.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/replication-options-master.html#sysvar_rpl_semi_sync_master_wait_for_slave_count).
	RplSemiSyncMasterWaitForSlaveCount *wrapperspb.Int64Value `protobuf:"bytes,46,opt,name=rpl_semi_sync_master_wait_for_slave_count,json=rplSemiSyncMasterWaitForSlaveCount,proto3" json:"rpl_semi_sync_master_wait_for_slave_count,omitempty"`
	// When using a multithreaded replica, this variable specifies the policy used to decide which transactions are allowed to execute in parallel on the replica.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/replication-options-replica.html#sysvar_slave_parallel_type).
	SlaveParallelType MysqlConfig8_4_SlaveParallelType `protobuf:"varint,47,opt,name=slave_parallel_type,json=slaveParallelType,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4_SlaveParallelType" json:"slave_parallel_type,omitempty"`
	// Sets the number of applier threads for executing replication transactions in parallel.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/replication-options-replica.html#sysvar_slave_parallel_workers).
	SlaveParallelWorkers *wrapperspb.Int64Value `protobuf:"bytes,48,opt,name=slave_parallel_workers,json=slaveParallelWorkers,proto3" json:"slave_parallel_workers,omitempty"`
	// The time limit for regular expression matching operations performed by REGEXP_LIKE and similar functions
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/replication-options-replica.html#sysvar_regexp_time_limit).
	RegexpTimeLimit *wrapperspb.Int64Value `protobuf:"bytes,49,opt,name=regexp_time_limit,json=regexpTimeLimit,proto3" json:"regexp_time_limit,omitempty"`
	// The size of the binary log to hold.
	MdbPreserveBinlogBytes *wrapperspb.Int64Value `protobuf:"bytes,50,opt,name=mdb_preserve_binlog_bytes,json=mdbPreserveBinlogBytes,proto3" json:"mdb_preserve_binlog_bytes,omitempty"`
	// The number of seconds the server waits for activity on an interactive connection before closing it.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_interactive_timeout).
	InteractiveTimeout *wrapperspb.Int64Value `protobuf:"bytes,51,opt,name=interactive_timeout,json=interactiveTimeout,proto3" json:"interactive_timeout,omitempty"`
	// The number of seconds the server waits for activity on a noninteractive connection before closing it.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_wait_timeout).
	WaitTimeout *wrapperspb.Int64Value `protobuf:"bytes,52,opt,name=wait_timeout,json=waitTimeout,proto3" json:"wait_timeout,omitempty"`
	// Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = ON' to prevent users from reading stale data.
	MdbOfflineModeEnableLag *wrapperspb.Int64Value `protobuf:"bytes,53,opt,name=mdb_offline_mode_enable_lag,json=mdbOfflineModeEnableLag,proto3" json:"mdb_offline_mode_enable_lag,omitempty"`
	// Replication lag threshold (seconds) which will switch MySQL to 'offline_mode = OFF'.
	// Should be less than mdb_offline_mode_enable_lag.
	MdbOfflineModeDisableLag *wrapperspb.Int64Value `protobuf:"bytes,54,opt,name=mdb_offline_mode_disable_lag,json=mdbOfflineModeDisableLag,proto3" json:"mdb_offline_mode_disable_lag,omitempty"`
	// The limit on memory consumption for the range optimizer.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_range_optimizer_max_mem_size).
	RangeOptimizerMaxMemSize *wrapperspb.Int64Value `protobuf:"bytes,55,opt,name=range_optimizer_max_mem_size,json=rangeOptimizerMaxMemSize,proto3" json:"range_optimizer_max_mem_size,omitempty"`
	// The limit in bytes on the size of the temporary log files used during online DDL operations
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_online_alter_log_max_size).
	InnodbOnlineAlterLogMaxSize *wrapperspb.Int64Value `protobuf:"bytes,56,opt,name=innodb_online_alter_log_max_size,json=innodbOnlineAlterLogMaxSize,proto3" json:"innodb_online_alter_log_max_size,omitempty"`
	// Minimum length of words that are stored in an InnoDB FULLTEXT index
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_ft_min_token_size).
	InnodbFtMinTokenSize *wrapperspb.Int64Value `protobuf:"bytes,57,opt,name=innodb_ft_min_token_size,json=innodbFtMinTokenSize,proto3" json:"innodb_ft_min_token_size,omitempty"`
	// Maximum length of words that are stored in an InnoDB FULLTEXT index
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_ft_max_token_size).
	InnodbFtMaxTokenSize *wrapperspb.Int64Value `protobuf:"bytes,58,opt,name=innodb_ft_max_token_size,json=innodbFtMaxTokenSize,proto3" json:"innodb_ft_max_token_size,omitempty"`
	// Table names storage and comparison strategy
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_lower_case_table_names).
	LowerCaseTableNames *wrapperspb.Int64Value `protobuf:"bytes,59,opt,name=lower_case_table_names,json=lowerCaseTableNames,proto3" json:"lower_case_table_names,omitempty"`
	// Manages slow query log
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_slow_query_log).
	SlowQueryLog *wrapperspb.BoolValue `protobuf:"bytes,60,opt,name=slow_query_log,json=slowQueryLog,proto3" json:"slow_query_log,omitempty"`
	// Query execution time, after which query to be logged unconditionally, that is, log_slow_rate_limit will not apply to it
	//
	// For details, see [Percona documentation for the variable](https://www.percona.com/doc/percona-server/8.4/diagnostics/slow_extended.html#slow_query_log_always_write_time).
	SlowQueryLogAlwaysWriteTime *wrapperspb.DoubleValue `protobuf:"bytes,61,opt,name=slow_query_log_always_write_time,json=slowQueryLogAlwaysWriteTime,proto3" json:"slow_query_log_always_write_time,omitempty"`
	// Specifies slow log granularity for log_slow_rate_limit: QUERY or SESSION
	//
	// For details, see [Percona documentation for the variable](https://www.percona.com/doc/percona-server/8.4/diagnostics/slow_extended.html#log_slow_rate_type).
	LogSlowRateType MysqlConfig8_4_LogSlowRateType `protobuf:"varint,62,opt,name=log_slow_rate_type,json=logSlowRateType,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4_LogSlowRateType" json:"log_slow_rate_type,omitempty"`
	// Specifies what fraction of session/query should be logged. Logging is enabled for every nth session/query.
	//
	// For details, see [Percona documentation for the variable](https://www.percona.com/doc/percona-server/8.4/diagnostics/slow_extended.html#log_slow_rate_limit).
	LogSlowRateLimit *wrapperspb.Int64Value `protobuf:"bytes,63,opt,name=log_slow_rate_limit,json=logSlowRateLimit,proto3" json:"log_slow_rate_limit,omitempty"`
	// When TRUE, statements executed by stored procedures are logged to the slow log
	//
	// For details, see [Percona documentation for the variable](https://www.percona.com/doc/percona-server/8.4/diagnostics/slow_extended.html#log_slow_sp_statements).
	LogSlowSpStatements *wrapperspb.BoolValue `protobuf:"bytes,64,opt,name=log_slow_sp_statements,json=logSlowSpStatements,proto3" json:"log_slow_sp_statements,omitempty"`
	// Filters the slow log by the query's execution plan
	//
	// For details, see [Percona documentation for the variable](https://www.percona.com/doc/percona-server/8.4/diagnostics/slow_extended.html#log_slow_filter).
	LogSlowFilter []MysqlConfig8_4_LogSlowFilterType `protobuf:"varint,65,rep,packed,name=log_slow_filter,json=logSlowFilter,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4_LogSlowFilterType" json:"log_slow_filter,omitempty"`
	// Replication lag threshold (seconds) which allows replica to be promoted to master while executing "switchover from".
	// Should be less than mdb_offline_mode_disable_lag.
	MdbPriorityChoiceMaxLag *wrapperspb.Int64Value `protobuf:"bytes,66,opt,name=mdb_priority_choice_max_lag,json=mdbPriorityChoiceMaxLag,proto3" json:"mdb_priority_choice_max_lag,omitempty"`
	// Specifies the page size for InnoDB tablespaces.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_page_size).
	InnodbPageSize *wrapperspb.Int64Value `protobuf:"bytes,67,opt,name=innodb_page_size,json=innodbPageSize,proto3" json:"innodb_page_size,omitempty"`
	// The number of times that any given stored procedure may be called recursively.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_max_sp_recursion_depth).
	MaxSpRecursionDepth *wrapperspb.Int64Value `protobuf:"bytes,68,opt,name=max_sp_recursion_depth,json=maxSpRecursionDepth,proto3" json:"max_sp_recursion_depth,omitempty"`
	// The level of zlib compression to use for InnoDB compressed tables and indexes.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_compression_level).
	InnodbCompressionLevel *wrapperspb.Int64Value `protobuf:"bytes,69,opt,name=innodb_compression_level,json=innodbCompressionLevel,proto3" json:"innodb_compression_level,omitempty"`
	// Config specific will be all changes to a table take effect immediately or you must use COMMIT to accept a transaction or ROLLBACK to cancel it.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_autocommit).
	Autocommit *wrapperspb.BoolValue `protobuf:"bytes,70,opt,name=autocommit,proto3" json:"autocommit,omitempty"`
	// Enables or disables periodic output for the standard InnoDB Monitor.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_status_output).
	InnodbStatusOutput *wrapperspb.BoolValue `protobuf:"bytes,71,opt,name=innodb_status_output,json=innodbStatusOutput,proto3" json:"innodb_status_output,omitempty"`
	// When innodb_strict_mode is enabled, InnoDB returns errors rather than warnings when checking for invalid or incompatible table options.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_strict_mode).
	InnodbStrictMode *wrapperspb.BoolValue `protobuf:"bytes,72,opt,name=innodb_strict_mode,json=innodbStrictMode,proto3" json:"innodb_strict_mode,omitempty"`
	// Makes InnoDB to write information about all lock wait timeout errors into the log file.
	//
	// For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.4/diagnostics/innodb_show_status.html?highlight=innodb_print_lock_wait_timeout_info).
	InnodbPrintLockWaitTimeoutInfo *wrapperspb.BoolValue `protobuf:"bytes,73,opt,name=innodb_print_lock_wait_timeout_info,json=innodbPrintLockWaitTimeoutInfo,proto3" json:"innodb_print_lock_wait_timeout_info,omitempty"`
	// System variable specifies the verbosity for handling events intended for the error log
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_log_error_verbosity).
	LogErrorVerbosity *wrapperspb.Int64Value `protobuf:"bytes,74,opt,name=log_error_verbosity,json=logErrorVerbosity,proto3" json:"log_error_verbosity,omitempty"`
	// The maximum number of bytes of memory reserved per session for computation of normalized statement digests.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_max_digest_length).
	MaxDigestLength *wrapperspb.Int64Value `protobuf:"bytes,75,opt,name=max_digest_length,json=maxDigestLength,proto3" json:"max_digest_length,omitempty"`
	// This variable specifies the timeout in seconds for attempts to acquire metadata locks
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_lock_wait_timeout).
	LockWaitTimeout *wrapperspb.Int64Value `protobuf:"bytes,76,opt,name=lock_wait_timeout,json=lockWaitTimeout,proto3" json:"lock_wait_timeout,omitempty"`
	// This variable limits the total number of prepared statements in the server.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_max_prepared_stmt_count).
	MaxPreparedStmtCount *wrapperspb.Int64Value `protobuf:"bytes,77,opt,name=max_prepared_stmt_count,json=maxPreparedStmtCount,proto3" json:"max_prepared_stmt_count,omitempty"`
	// The system variable enables control over optimizer behavior.
	//
	// For details, see [MySQL documentation for the variable]
	// https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_optimizer_switch
	// https://dev.mysql.com/doc/refman/8.4/en/switchable-optimizations.html
	OptimizerSwitch string `protobuf:"bytes,78,opt,name=optimizer_switch,json=optimizerSwitch,proto3" json:"optimizer_switch,omitempty"`
	// The maximum depth of search performed by the query optimizer
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html)
	OptimizerSearchDepth *wrapperspb.Int64Value `protobuf:"bytes,79,opt,name=optimizer_search_depth,json=optimizerSearchDepth,proto3" json:"optimizer_search_depth,omitempty"`
	// Enables or disables collection of statistics
	//
	// For details, see [Percona documentation for the variable](https://docs.percona.com/percona-server/8.4/diagnostics/user_stats.html#userstat).
	Userstat *wrapperspb.BoolValue `protobuf:"bytes,80,opt,name=userstat,proto3" json:"userstat,omitempty"`
	// The execution timeout for SELECT statements, in milliseconds. If the value is 0, timeouts are not enabled.
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_max_execution_time)
	MaxExecutionTime *wrapperspb.Int64Value `protobuf:"bytes,81,opt,name=max_execution_time,json=maxExecutionTime,proto3" json:"max_execution_time,omitempty"`
	// The policy controlling how the audit log plugin writes events to its log file
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/audit-log-reference.html#sysvar_audit_log_policy)
	AuditLogPolicy MysqlConfig8_4_AuditLogPolicy `protobuf:"varint,82,opt,name=audit_log_policy,json=auditLogPolicy,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4_AuditLogPolicy" json:"audit_log_policy,omitempty"`
	// Limit callbacks to improve performance for semisynchronous replication
	//
	// For details, see [Percona documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/replication-options-replica.html#sysvar_replication_sender_observe_commit_only).
	ReplicationSenderObserveCommitOnly *wrapperspb.BoolValue `protobuf:"bytes,83,opt,name=replication_sender_observe_commit_only,json=replicationSenderObserveCommitOnly,proto3" json:"replication_sender_observe_commit_only,omitempty"`
	// Use shared locks, and avoid unnecessary lock acquisitions, to improve performance for semisynchronous replication
	//
	// For details, see [Percona documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/replication-options-replica.html#sysvar_replication_optimize_for_static_plugin_config).
	ReplicationOptimizeForStaticPluginConfig *wrapperspb.BoolValue `protobuf:"bytes,84,opt,name=replication_optimize_for_static_plugin_config,json=replicationOptimizeForStaticPluginConfig,proto3" json:"replication_optimize_for_static_plugin_config,omitempty"`
	// A parameter that influences the algorithms and heuristics for the flush operation for the InnoDB buffer pool
	//
	// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_lru_scan_depth)
	InnodbLruScanDepth *wrapperspb.Int64Value `protobuf:"bytes,85,opt,name=innodb_lru_scan_depth,json=innodbLruScanDepth,proto3" json:"innodb_lru_scan_depth,omitempty"`
	// Whether statements that create new tables or alter the structure of existing tables enforce the requirement that tables have a primary key
	//
	// For details, see [Percona documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_sql_require_primary_key).
	SqlRequirePrimaryKey *wrapperspb.BoolValue `protobuf:"bytes,86,opt,name=sql_require_primary_key,json=sqlRequirePrimaryKey,proto3" json:"sql_require_primary_key,omitempty"`
	// Enable async replication
	MdbUseAsyncReplication *wrapperspb.BoolValue `protobuf:"bytes,87,opt,name=mdb_use_async_replication,json=mdbUseAsyncReplication,proto3" json:"mdb_use_async_replication,omitempty"`
	// Async replication allowed lag (seconds)
	MdbAsyncAllowedLag *wrapperspb.Int64Value `protobuf:"bytes,88,opt,name=mdb_async_allowed_lag,json=mdbAsyncAllowedLag,proto3" json:"mdb_async_allowed_lag,omitempty"`
	// Force ssl on all hosts (require_secure_transport)
	MdbForceSsl *wrapperspb.BoolValue `protobuf:"bytes,89,opt,name=mdb_force_ssl,json=mdbForceSsl,proto3" json:"mdb_force_ssl,omitempty"`
	// An optimization for change buffering
	//
	// For details, see [Percona documentation for the variable](https://dev.mysql.com/doc/refman/8.4/en/innodb-parameters.html#sysvar_innodb_change_buffering).
	InnodbChangeBuffering MysqlConfig8_4_InnodbChangeBuffering `protobuf:"varint,90,opt,name=innodb_change_buffering,json=innodbChangeBuffering,proto3,enum=yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4_InnodbChangeBuffering" json:"innodb_change_buffering,omitempty"`
	// Permit some pending read lock requests interval
	// P.S. Should be UInt64, but java fails to handle UInt64 limits
	//
	// For details, see [Percona documentation for the variable](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_write_lock_count).
	MaxWriteLockCount *wrapperspb.Int64Value `protobuf:"bytes,91,opt,name=max_write_lock_count,json=maxWriteLockCount,proto3" json:"max_write_lock_count,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MysqlConfig8_4) Reset() {
	*x = MysqlConfig8_4{}
	mi := &file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MysqlConfig8_4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlConfig8_4) ProtoMessage() {}

func (x *MysqlConfig8_4) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlConfig8_4.ProtoReflect.Descriptor instead.
func (*MysqlConfig8_4) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDescGZIP(), []int{0}
}

func (x *MysqlConfig8_4) GetInnodbBufferPoolSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbBufferPoolSize
	}
	return nil
}

func (x *MysqlConfig8_4) GetMaxConnections() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxConnections
	}
	return nil
}

func (x *MysqlConfig8_4) GetLongQueryTime() *wrapperspb.DoubleValue {
	if x != nil {
		return x.LongQueryTime
	}
	return nil
}

func (x *MysqlConfig8_4) GetAuditLog() *wrapperspb.BoolValue {
	if x != nil {
		return x.AuditLog
	}
	return nil
}

func (x *MysqlConfig8_4) GetSqlMode() []MysqlConfig8_4_SQLMode {
	if x != nil {
		return x.SqlMode
	}
	return nil
}

func (x *MysqlConfig8_4) GetMaxAllowedPacket() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxAllowedPacket
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbFlushLogAtTrxCommit() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbFlushLogAtTrxCommit
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbLockWaitTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbLockWaitTimeout
	}
	return nil
}

func (x *MysqlConfig8_4) GetTransactionIsolation() MysqlConfig8_4_TransactionIsolation {
	if x != nil {
		return x.TransactionIsolation
	}
	return MysqlConfig8_4_TRANSACTION_ISOLATION_UNSPECIFIED
}

func (x *MysqlConfig8_4) GetInnodbPrintAllDeadlocks() *wrapperspb.BoolValue {
	if x != nil {
		return x.InnodbPrintAllDeadlocks
	}
	return nil
}

func (x *MysqlConfig8_4) GetNetReadTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.NetReadTimeout
	}
	return nil
}

func (x *MysqlConfig8_4) GetNetWriteTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.NetWriteTimeout
	}
	return nil
}

func (x *MysqlConfig8_4) GetGroupConcatMaxLen() *wrapperspb.Int64Value {
	if x != nil {
		return x.GroupConcatMaxLen
	}
	return nil
}

func (x *MysqlConfig8_4) GetTmpTableSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.TmpTableSize
	}
	return nil
}

func (x *MysqlConfig8_4) GetMaxHeapTableSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxHeapTableSize
	}
	return nil
}

func (x *MysqlConfig8_4) GetDefaultTimeZone() string {
	if x != nil {
		return x.DefaultTimeZone
	}
	return ""
}

func (x *MysqlConfig8_4) GetCharacterSetServer() string {
	if x != nil {
		return x.CharacterSetServer
	}
	return ""
}

func (x *MysqlConfig8_4) GetCollationServer() string {
	if x != nil {
		return x.CollationServer
	}
	return ""
}

func (x *MysqlConfig8_4) GetInnodbAdaptiveHashIndex() *wrapperspb.BoolValue {
	if x != nil {
		return x.InnodbAdaptiveHashIndex
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbNumaInterleave() *wrapperspb.BoolValue {
	if x != nil {
		return x.InnodbNumaInterleave
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbLogBufferSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbLogBufferSize
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbLogFileSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbLogFileSize
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbIoCapacity() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbIoCapacity
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbIoCapacityMax() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbIoCapacityMax
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbReadIoThreads() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbReadIoThreads
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbWriteIoThreads() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbWriteIoThreads
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbPurgeThreads() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbPurgeThreads
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbThreadConcurrency() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbThreadConcurrency
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbTempDataFileMaxSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbTempDataFileMaxSize
	}
	return nil
}

func (x *MysqlConfig8_4) GetThreadCacheSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.ThreadCacheSize
	}
	return nil
}

func (x *MysqlConfig8_4) GetThreadStack() *wrapperspb.Int64Value {
	if x != nil {
		return x.ThreadStack
	}
	return nil
}

func (x *MysqlConfig8_4) GetJoinBufferSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.JoinBufferSize
	}
	return nil
}

func (x *MysqlConfig8_4) GetSortBufferSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.SortBufferSize
	}
	return nil
}

func (x *MysqlConfig8_4) GetTableDefinitionCache() *wrapperspb.Int64Value {
	if x != nil {
		return x.TableDefinitionCache
	}
	return nil
}

func (x *MysqlConfig8_4) GetTableOpenCache() *wrapperspb.Int64Value {
	if x != nil {
		return x.TableOpenCache
	}
	return nil
}

func (x *MysqlConfig8_4) GetTableOpenCacheInstances() *wrapperspb.Int64Value {
	if x != nil {
		return x.TableOpenCacheInstances
	}
	return nil
}

func (x *MysqlConfig8_4) GetExplicitDefaultsForTimestamp() *wrapperspb.BoolValue {
	if x != nil {
		return x.ExplicitDefaultsForTimestamp
	}
	return nil
}

func (x *MysqlConfig8_4) GetAutoIncrementIncrement() *wrapperspb.Int64Value {
	if x != nil {
		return x.AutoIncrementIncrement
	}
	return nil
}

func (x *MysqlConfig8_4) GetAutoIncrementOffset() *wrapperspb.Int64Value {
	if x != nil {
		return x.AutoIncrementOffset
	}
	return nil
}

func (x *MysqlConfig8_4) GetSyncBinlog() *wrapperspb.Int64Value {
	if x != nil {
		return x.SyncBinlog
	}
	return nil
}

func (x *MysqlConfig8_4) GetBinlogCacheSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.BinlogCacheSize
	}
	return nil
}

func (x *MysqlConfig8_4) GetBinlogGroupCommitSyncDelay() *wrapperspb.Int64Value {
	if x != nil {
		return x.BinlogGroupCommitSyncDelay
	}
	return nil
}

func (x *MysqlConfig8_4) GetBinlogRowImage() MysqlConfig8_4_BinlogRowImage {
	if x != nil {
		return x.BinlogRowImage
	}
	return MysqlConfig8_4_BINLOG_ROW_IMAGE_UNSPECIFIED
}

func (x *MysqlConfig8_4) GetBinlogRowsQueryLogEvents() *wrapperspb.BoolValue {
	if x != nil {
		return x.BinlogRowsQueryLogEvents
	}
	return nil
}

func (x *MysqlConfig8_4) GetRplSemiSyncMasterWaitForSlaveCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.RplSemiSyncMasterWaitForSlaveCount
	}
	return nil
}

func (x *MysqlConfig8_4) GetSlaveParallelType() MysqlConfig8_4_SlaveParallelType {
	if x != nil {
		return x.SlaveParallelType
	}
	return MysqlConfig8_4_SLAVE_PARALLEL_TYPE_UNSPECIFIED
}

func (x *MysqlConfig8_4) GetSlaveParallelWorkers() *wrapperspb.Int64Value {
	if x != nil {
		return x.SlaveParallelWorkers
	}
	return nil
}

func (x *MysqlConfig8_4) GetRegexpTimeLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.RegexpTimeLimit
	}
	return nil
}

func (x *MysqlConfig8_4) GetMdbPreserveBinlogBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.MdbPreserveBinlogBytes
	}
	return nil
}

func (x *MysqlConfig8_4) GetInteractiveTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.InteractiveTimeout
	}
	return nil
}

func (x *MysqlConfig8_4) GetWaitTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.WaitTimeout
	}
	return nil
}

func (x *MysqlConfig8_4) GetMdbOfflineModeEnableLag() *wrapperspb.Int64Value {
	if x != nil {
		return x.MdbOfflineModeEnableLag
	}
	return nil
}

func (x *MysqlConfig8_4) GetMdbOfflineModeDisableLag() *wrapperspb.Int64Value {
	if x != nil {
		return x.MdbOfflineModeDisableLag
	}
	return nil
}

func (x *MysqlConfig8_4) GetRangeOptimizerMaxMemSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.RangeOptimizerMaxMemSize
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbOnlineAlterLogMaxSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbOnlineAlterLogMaxSize
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbFtMinTokenSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbFtMinTokenSize
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbFtMaxTokenSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbFtMaxTokenSize
	}
	return nil
}

func (x *MysqlConfig8_4) GetLowerCaseTableNames() *wrapperspb.Int64Value {
	if x != nil {
		return x.LowerCaseTableNames
	}
	return nil
}

func (x *MysqlConfig8_4) GetSlowQueryLog() *wrapperspb.BoolValue {
	if x != nil {
		return x.SlowQueryLog
	}
	return nil
}

func (x *MysqlConfig8_4) GetSlowQueryLogAlwaysWriteTime() *wrapperspb.DoubleValue {
	if x != nil {
		return x.SlowQueryLogAlwaysWriteTime
	}
	return nil
}

func (x *MysqlConfig8_4) GetLogSlowRateType() MysqlConfig8_4_LogSlowRateType {
	if x != nil {
		return x.LogSlowRateType
	}
	return MysqlConfig8_4_LOG_SLOW_RATE_TYPE_UNSPECIFIED
}

func (x *MysqlConfig8_4) GetLogSlowRateLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.LogSlowRateLimit
	}
	return nil
}

func (x *MysqlConfig8_4) GetLogSlowSpStatements() *wrapperspb.BoolValue {
	if x != nil {
		return x.LogSlowSpStatements
	}
	return nil
}

func (x *MysqlConfig8_4) GetLogSlowFilter() []MysqlConfig8_4_LogSlowFilterType {
	if x != nil {
		return x.LogSlowFilter
	}
	return nil
}

func (x *MysqlConfig8_4) GetMdbPriorityChoiceMaxLag() *wrapperspb.Int64Value {
	if x != nil {
		return x.MdbPriorityChoiceMaxLag
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbPageSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbPageSize
	}
	return nil
}

func (x *MysqlConfig8_4) GetMaxSpRecursionDepth() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxSpRecursionDepth
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbCompressionLevel() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbCompressionLevel
	}
	return nil
}

func (x *MysqlConfig8_4) GetAutocommit() *wrapperspb.BoolValue {
	if x != nil {
		return x.Autocommit
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbStatusOutput() *wrapperspb.BoolValue {
	if x != nil {
		return x.InnodbStatusOutput
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbStrictMode() *wrapperspb.BoolValue {
	if x != nil {
		return x.InnodbStrictMode
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbPrintLockWaitTimeoutInfo() *wrapperspb.BoolValue {
	if x != nil {
		return x.InnodbPrintLockWaitTimeoutInfo
	}
	return nil
}

func (x *MysqlConfig8_4) GetLogErrorVerbosity() *wrapperspb.Int64Value {
	if x != nil {
		return x.LogErrorVerbosity
	}
	return nil
}

func (x *MysqlConfig8_4) GetMaxDigestLength() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxDigestLength
	}
	return nil
}

func (x *MysqlConfig8_4) GetLockWaitTimeout() *wrapperspb.Int64Value {
	if x != nil {
		return x.LockWaitTimeout
	}
	return nil
}

func (x *MysqlConfig8_4) GetMaxPreparedStmtCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxPreparedStmtCount
	}
	return nil
}

func (x *MysqlConfig8_4) GetOptimizerSwitch() string {
	if x != nil {
		return x.OptimizerSwitch
	}
	return ""
}

func (x *MysqlConfig8_4) GetOptimizerSearchDepth() *wrapperspb.Int64Value {
	if x != nil {
		return x.OptimizerSearchDepth
	}
	return nil
}

func (x *MysqlConfig8_4) GetUserstat() *wrapperspb.BoolValue {
	if x != nil {
		return x.Userstat
	}
	return nil
}

func (x *MysqlConfig8_4) GetMaxExecutionTime() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxExecutionTime
	}
	return nil
}

func (x *MysqlConfig8_4) GetAuditLogPolicy() MysqlConfig8_4_AuditLogPolicy {
	if x != nil {
		return x.AuditLogPolicy
	}
	return MysqlConfig8_4_AUDIT_LOG_POLICY_UNSPECIFIED
}

func (x *MysqlConfig8_4) GetReplicationSenderObserveCommitOnly() *wrapperspb.BoolValue {
	if x != nil {
		return x.ReplicationSenderObserveCommitOnly
	}
	return nil
}

func (x *MysqlConfig8_4) GetReplicationOptimizeForStaticPluginConfig() *wrapperspb.BoolValue {
	if x != nil {
		return x.ReplicationOptimizeForStaticPluginConfig
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbLruScanDepth() *wrapperspb.Int64Value {
	if x != nil {
		return x.InnodbLruScanDepth
	}
	return nil
}

func (x *MysqlConfig8_4) GetSqlRequirePrimaryKey() *wrapperspb.BoolValue {
	if x != nil {
		return x.SqlRequirePrimaryKey
	}
	return nil
}

func (x *MysqlConfig8_4) GetMdbUseAsyncReplication() *wrapperspb.BoolValue {
	if x != nil {
		return x.MdbUseAsyncReplication
	}
	return nil
}

func (x *MysqlConfig8_4) GetMdbAsyncAllowedLag() *wrapperspb.Int64Value {
	if x != nil {
		return x.MdbAsyncAllowedLag
	}
	return nil
}

func (x *MysqlConfig8_4) GetMdbForceSsl() *wrapperspb.BoolValue {
	if x != nil {
		return x.MdbForceSsl
	}
	return nil
}

func (x *MysqlConfig8_4) GetInnodbChangeBuffering() MysqlConfig8_4_InnodbChangeBuffering {
	if x != nil {
		return x.InnodbChangeBuffering
	}
	return MysqlConfig8_4_INNODB_CHANGE_BUFFERING_UNSPECIFIED
}

func (x *MysqlConfig8_4) GetMaxWriteLockCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxWriteLockCount
	}
	return nil
}

type MysqlConfigSet8_4 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Effective settings for a MySQL 8.4 cluster (a combination of settings defined
	// in [user_config] and [default_config]).
	EffectiveConfig *MysqlConfig8_4 `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for a MySQL 8.4 cluster.
	UserConfig *MysqlConfig8_4 `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for a MySQL 8.4 cluster.
	DefaultConfig *MysqlConfig8_4 `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MysqlConfigSet8_4) Reset() {
	*x = MysqlConfigSet8_4{}
	mi := &file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MysqlConfigSet8_4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlConfigSet8_4) ProtoMessage() {}

func (x *MysqlConfigSet8_4) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlConfigSet8_4.ProtoReflect.Descriptor instead.
func (*MysqlConfigSet8_4) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDescGZIP(), []int{1}
}

func (x *MysqlConfigSet8_4) GetEffectiveConfig() *MysqlConfig8_4 {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *MysqlConfigSet8_4) GetUserConfig() *MysqlConfig8_4 {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *MysqlConfigSet8_4) GetDefaultConfig() *MysqlConfig8_4 {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

var File_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto protoreflect.FileDescriptor

const file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDesc = "" +
	"\n" +
	"/yandex/cloud/mdb/mysql/v1/config/mysql8_4.proto\x12 yandex.cloud.mdb.mysql.v1.config\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1dyandex/cloud/validation.proto\"\xdaM\n" +
	"\x0eMysqlConfig8_4\x12c\n" +
	"\x17innodb_buffer_pool_size\x18\x01 \x01(\v2\x1b.google.protobuf.Int64ValueB\x0f\xfa\xc71\v>=134217728R\x14innodbBufferPoolSize\x12S\n" +
	"\x0fmax_connections\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueB\r\xfa\xc71\t10-100000R\x0emaxConnections\x12P\n" +
	"\x0flong_query_time\x18\x03 \x01(\v2\x1c.google.protobuf.DoubleValueB\n" +
	"\xfa\xc71\x060-3600R\rlongQueryTime\x127\n" +
	"\taudit_log\x18\x05 \x01(\v2\x1a.google.protobuf.BoolValueR\bauditLog\x12S\n" +
	"\bsql_mode\x18\x06 \x03(\x0e28.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.SQLModeR\asqlMode\x12a\n" +
	"\x12max_allowed_packet\x18\a \x01(\v2\x1b.google.protobuf.Int64ValueB\x16\xfa\xc71\x121048576-1073741824R\x10maxAllowedPacket\x12g\n" +
	"\x1einnodb_flush_log_at_trx_commit\x18\b \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x031-2R\x19innodbFlushLogAtTrxCommit\x12a\n" +
	"\x18innodb_lock_wait_timeout\x18\t \x01(\v2\x1b.google.protobuf.Int64ValueB\v\xfa\xc71\a1-28800R\x15innodbLockWaitTimeout\x12z\n" +
	"\x15transaction_isolation\x18\n" +
	" \x01(\x0e2E.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.TransactionIsolationR\x14transactionIsolation\x12W\n" +
	"\x1ainnodb_print_all_deadlocks\x18\v \x01(\v2\x1a.google.protobuf.BoolValueR\x17innodbPrintAllDeadlocks\x12Q\n" +
	"\x10net_read_timeout\x18\f \x01(\v2\x1b.google.protobuf.Int64ValueB\n" +
	"\xfa\xc71\x061-1200R\x0enetReadTimeout\x12S\n" +
	"\x11net_write_timeout\x18\r \x01(\v2\x1b.google.protobuf.Int64ValueB\n" +
	"\xfa\xc71\x061-1200R\x0fnetWriteTimeout\x12\\\n" +
	"\x14group_concat_max_len\x18\x0e \x01(\v2\x1b.google.protobuf.Int64ValueB\x0e\xfa\xc71\n" +
	"4-33554432R\x11groupConcatMaxLen\x12U\n" +
	"\x0etmp_table_size\x18\x0f \x01(\v2\x1b.google.protobuf.Int64ValueB\x12\xfa\xc71\x0e1024-536870912R\ftmpTableSize\x12_\n" +
	"\x13max_heap_table_size\x18\x10 \x01(\v2\x1b.google.protobuf.Int64ValueB\x13\xfa\xc71\x0f16384-536870912R\x10maxHeapTableSize\x12*\n" +
	"\x11default_time_zone\x18\x11 \x01(\tR\x0fdefaultTimeZone\x120\n" +
	"\x14character_set_server\x18\x12 \x01(\tR\x12characterSetServer\x12)\n" +
	"\x10collation_server\x18\x13 \x01(\tR\x0fcollationServer\x12W\n" +
	"\x1ainnodb_adaptive_hash_index\x18\x14 \x01(\v2\x1a.google.protobuf.BoolValueR\x17innodbAdaptiveHashIndex\x12P\n" +
	"\x16innodb_numa_interleave\x18\x15 \x01(\v2\x1a.google.protobuf.BoolValueR\x14innodbNumaInterleave\x12g\n" +
	"\x16innodb_log_buffer_size\x18\x16 \x01(\v2\x1b.google.protobuf.Int64ValueB\x15\xfa\xc71\x111048576-268435456R\x13innodbLogBufferSize\x12f\n" +
	"\x14innodb_log_file_size\x18\x17 \x01(\v2\x1b.google.protobuf.Int64ValueB\x18\xfa\xc71\x14268435456-8589934592R\x11innodbLogFileSize\x12Y\n" +
	"\x12innodb_io_capacity\x18\x18 \x01(\v2\x1b.google.protobuf.Int64ValueB\x0e\xfa\xc71\n" +
	"100-100000R\x10innodbIoCapacity\x12`\n" +
	"\x16innodb_io_capacity_max\x18\x19 \x01(\v2\x1b.google.protobuf.Int64ValueB\x0e\xfa\xc71\n" +
	"100-100000R\x13innodbIoCapacityMax\x12Z\n" +
	"\x16innodb_read_io_threads\x18\x1a \x01(\v2\x1b.google.protobuf.Int64ValueB\b\xfa\xc71\x041-16R\x13innodbReadIoThreads\x12\\\n" +
	"\x17innodb_write_io_threads\x18\x1b \x01(\v2\x1b.google.protobuf.Int64ValueB\b\xfa\xc71\x041-16R\x14innodbWriteIoThreads\x12W\n" +
	"\x14innodb_purge_threads\x18\x1c \x01(\v2\x1b.google.protobuf.Int64ValueB\b\xfa\xc71\x041-16R\x12innodbPurgeThreads\x12c\n" +
	"\x19innodb_thread_concurrency\x18\x1d \x01(\v2\x1b.google.protobuf.Int64ValueB\n" +
	"\xfa\xc71\x060-1000R\x17innodbThreadConcurrency\x12{\n" +
	"\x1einnodb_temp_data_file_max_size\x18\x1e \x01(\v2\x1b.google.protobuf.Int64ValueB\x1b\xfa\xc71\x171073741824-107374182400R\x19innodbTempDataFileMaxSize\x12U\n" +
	"\x11thread_cache_size\x18\x1f \x01(\v2\x1b.google.protobuf.Int64ValueB\f\xfa\xc71\b10-10000R\x0fthreadCacheSize\x12S\n" +
	"\fthread_stack\x18  \x01(\v2\x1b.google.protobuf.Int64ValueB\x13\xfa\xc71\x0f131072-16777216R\vthreadStack\x12X\n" +
	"\x10join_buffer_size\x18! \x01(\v2\x1b.google.protobuf.Int64ValueB\x11\xfa\xc71\r1024-16777216R\x0ejoinBufferSize\x12X\n" +
	"\x10sort_buffer_size\x18\" \x01(\v2\x1b.google.protobuf.Int64ValueB\x11\xfa\xc71\r1024-16777216R\x0esortBufferSize\x12a\n" +
	"\x16table_definition_cache\x18# \x01(\v2\x1b.google.protobuf.Int64ValueB\x0e\xfa\xc71\n" +
	"400-524288R\x14tableDefinitionCache\x12U\n" +
	"\x10table_open_cache\x18$ \x01(\v2\x1b.google.protobuf.Int64ValueB\x0e\xfa\xc71\n" +
	"400-524288R\x0etableOpenCache\x12b\n" +
	"\x1atable_open_cache_instances\x18% \x01(\v2\x1b.google.protobuf.Int64ValueB\b\xfa\xc71\x041-32R\x17tableOpenCacheInstances\x12a\n" +
	"\x1fexplicit_defaults_for_timestamp\x18& \x01(\v2\x1a.google.protobuf.BoolValueR\x1cexplicitDefaultsForTimestamp\x12b\n" +
	"\x18auto_increment_increment\x18' \x01(\v2\x1b.google.protobuf.Int64ValueB\v\xfa\xc71\a1-65535R\x16autoIncrementIncrement\x12\\\n" +
	"\x15auto_increment_offset\x18( \x01(\v2\x1b.google.protobuf.Int64ValueB\v\xfa\xc71\a1-65535R\x13autoIncrementOffset\x12H\n" +
	"\vsync_binlog\x18) \x01(\v2\x1b.google.protobuf.Int64ValueB\n" +
	"\xfa\xc71\x060-4096R\n" +
	"syncBinlog\x12Z\n" +
	"\x11binlog_cache_size\x18* \x01(\v2\x1b.google.protobuf.Int64ValueB\x11\xfa\xc71\r4096-67108864R\x0fbinlogCacheSize\x12l\n" +
	"\x1ebinlog_group_commit_sync_delay\x18+ \x01(\v2\x1b.google.protobuf.Int64ValueB\v\xfa\xc71\a0-50000R\x1abinlogGroupCommitSyncDelay\x12i\n" +
	"\x10binlog_row_image\x18, \x01(\x0e2?.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.BinlogRowImageR\x0ebinlogRowImage\x12Z\n" +
	"\x1cbinlog_rows_query_log_events\x18- \x01(\v2\x1a.google.protobuf.BoolValueR\x18binlogRowsQueryLogEvents\x12{\n" +
	")rpl_semi_sync_master_wait_for_slave_count\x18. \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x031-2R\"rplSemiSyncMasterWaitForSlaveCount\x12r\n" +
	"\x13slave_parallel_type\x18/ \x01(\x0e2B.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.SlaveParallelTypeR\x11slaveParallelType\x12[\n" +
	"\x16slave_parallel_workers\x180 \x01(\v2\x1b.google.protobuf.Int64ValueB\b\xfa\xc71\x040-64R\x14slaveParallelWorkers\x12V\n" +
	"\x11regexp_time_limit\x181 \x01(\v2\x1b.google.protobuf.Int64ValueB\r\xfa\xc71\t0-1048576R\x0fregexpTimeLimit\x12t\n" +
	"\x19mdb_preserve_binlog_bytes\x182 \x01(\v2\x1b.google.protobuf.Int64ValueB\x1c\xfa\xc71\x181073741824-1099511627776R\x16mdbPreserveBinlogBytes\x12[\n" +
	"\x13interactive_timeout\x183 \x01(\v2\x1b.google.protobuf.Int64ValueB\r\xfa\xc71\t600-86400R\x12interactiveTimeout\x12M\n" +
	"\fwait_timeout\x184 \x01(\v2\x1b.google.protobuf.Int64ValueB\r\xfa\xc71\t600-86400R\vwaitTimeout\x12i\n" +
	"\x1bmdb_offline_mode_enable_lag\x185 \x01(\v2\x1b.google.protobuf.Int64ValueB\x0e\xfa\xc71\n" +
	"600-432000R\x17mdbOfflineModeEnableLag\x12i\n" +
	"\x1cmdb_offline_mode_disable_lag\x186 \x01(\v2\x1b.google.protobuf.Int64ValueB\f\xfa\xc71\b60-86400R\x18mdbOfflineModeDisableLag\x12m\n" +
	"\x1crange_optimizer_max_mem_size\x187 \x01(\v2\x1b.google.protobuf.Int64ValueB\x10\xfa\xc71\f60-268435456R\x18rangeOptimizerMaxMemSize\x12w\n" +
	" innodb_online_alter_log_max_size\x188 \x01(\v2\x1b.google.protobuf.Int64ValueB\x13\xfa\xc71\x0f60-107374182400R\x1binnodbOnlineAlterLogMaxSize\x12]\n" +
	"\x18innodb_ft_min_token_size\x189 \x01(\v2\x1b.google.protobuf.Int64ValueB\b\xfa\xc71\x040-16R\x14innodbFtMinTokenSize\x12^\n" +
	"\x18innodb_ft_max_token_size\x18: \x01(\v2\x1b.google.protobuf.Int64ValueB\t\xfa\xc71\x0510-84R\x14innodbFtMaxTokenSize\x12Y\n" +
	"\x16lower_case_table_names\x18; \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x030-1R\x13lowerCaseTableNames\x12@\n" +
	"\x0eslow_query_log\x18< \x01(\v2\x1a.google.protobuf.BoolValueR\fslowQueryLog\x12o\n" +
	" slow_query_log_always_write_time\x18= \x01(\v2\x1c.google.protobuf.DoubleValueB\n" +
	"\xfa\xc71\x060-3600R\x1bslowQueryLogAlwaysWriteTime\x12m\n" +
	"\x12log_slow_rate_type\x18> \x01(\x0e2@.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.LogSlowRateTypeR\x0flogSlowRateType\x12V\n" +
	"\x13log_slow_rate_limit\x18? \x01(\v2\x1b.google.protobuf.Int64ValueB\n" +
	"\xfa\xc71\x061-1000R\x10logSlowRateLimit\x12O\n" +
	"\x16log_slow_sp_statements\x18@ \x01(\v2\x1a.google.protobuf.BoolValueR\x13logSlowSpStatements\x12j\n" +
	"\x0flog_slow_filter\x18A \x03(\x0e2B.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.LogSlowFilterTypeR\rlogSlowFilter\x12f\n" +
	"\x1bmdb_priority_choice_max_lag\x18B \x01(\v2\x1b.google.protobuf.Int64ValueB\v\xfa\xc71\a0-86400R\x17mdbPriorityChoiceMaxLag\x12R\n" +
	"\x10innodb_page_size\x18C \x01(\v2\x1b.google.protobuf.Int64ValueB\v\xfa\xc71\a1-65536R\x0einnodbPageSize\x12[\n" +
	"\x16max_sp_recursion_depth\x18D \x01(\v2\x1b.google.protobuf.Int64ValueB\t\xfa\xc71\x050-255R\x13maxSpRecursionDepth\x12^\n" +
	"\x18innodb_compression_level\x18E \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x030-9R\x16innodbCompressionLevel\x12:\n" +
	"\n" +
	"autocommit\x18F \x01(\v2\x1a.google.protobuf.BoolValueR\n" +
	"autocommit\x12L\n" +
	"\x14innodb_status_output\x18G \x01(\v2\x1a.google.protobuf.BoolValueR\x12innodbStatusOutput\x12H\n" +
	"\x12innodb_strict_mode\x18H \x01(\v2\x1a.google.protobuf.BoolValueR\x10innodbStrictMode\x12g\n" +
	"#innodb_print_lock_wait_timeout_info\x18I \x01(\v2\x1a.google.protobuf.BoolValueR\x1einnodbPrintLockWaitTimeoutInfo\x12T\n" +
	"\x13log_error_verbosity\x18J \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x032-3R\x11logErrorVerbosity\x12V\n" +
	"\x11max_digest_length\x18K \x01(\v2\x1b.google.protobuf.Int64ValueB\r\xfa\xc71\t1024-8192R\x0fmaxDigestLength\x12W\n" +
	"\x11lock_wait_timeout\x18L \x01(\v2\x1b.google.protobuf.Int64ValueB\x0e\xfa\xc71\n" +
	"1-31536000R\x0flockWaitTimeout\x12a\n" +
	"\x17max_prepared_stmt_count\x18M \x01(\v2\x1b.google.protobuf.Int64ValueB\r\xfa\xc71\t0-4194304R\x14maxPreparedStmtCount\x12)\n" +
	"\x10optimizer_switch\x18N \x01(\tR\x0foptimizerSwitch\x12[\n" +
	"\x16optimizer_search_depth\x18O \x01(\v2\x1b.google.protobuf.Int64ValueB\b\xfa\xc71\x040-62R\x14optimizerSearchDepth\x126\n" +
	"\buserstat\x18P \x01(\v2\x1a.google.protobuf.BoolValueR\buserstat\x12[\n" +
	"\x12max_execution_time\x18Q \x01(\v2\x1b.google.protobuf.Int64ValueB\x10\xfa\xc71\f0-4294967295R\x10maxExecutionTime\x12i\n" +
	"\x10audit_log_policy\x18R \x01(\x0e2?.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.AuditLogPolicyR\x0eauditLogPolicy\x12n\n" +
	"&replication_sender_observe_commit_only\x18S \x01(\v2\x1a.google.protobuf.BoolValueR\"replicationSenderObserveCommitOnly\x12{\n" +
	"-replication_optimize_for_static_plugin_config\x18T \x01(\v2\x1a.google.protobuf.BoolValueR(replicationOptimizeForStaticPluginConfig\x12b\n" +
	"\x15innodb_lru_scan_depth\x18U \x01(\v2\x1b.google.protobuf.Int64ValueB\x12\xfa\xc71\x0e100-4294967295R\x12innodbLruScanDepth\x12Q\n" +
	"\x17sql_require_primary_key\x18V \x01(\v2\x1a.google.protobuf.BoolValueR\x14sqlRequirePrimaryKey\x12U\n" +
	"\x19mdb_use_async_replication\x18W \x01(\v2\x1a.google.protobuf.BoolValueR\x16mdbUseAsyncReplication\x12[\n" +
	"\x15mdb_async_allowed_lag\x18X \x01(\v2\x1b.google.protobuf.Int64ValueB\v\xfa\xc71\a0-86400R\x12mdbAsyncAllowedLag\x12>\n" +
	"\rmdb_force_ssl\x18Y \x01(\v2\x1a.google.protobuf.BoolValueR\vmdbForceSsl\x12~\n" +
	"\x17innodb_change_buffering\x18Z \x01(\x0e2F.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.InnodbChangeBufferingR\x15innodbChangeBuffering\x12U\n" +
	"\x14max_write_lock_count\x18[ \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x03>=1R\x11maxWriteLockCount\"\x88\x04\n" +
	"\aSQLMode\x12\x17\n" +
	"\x13SQLMODE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13ALLOW_INVALID_DATES\x10\x01\x12\x0f\n" +
	"\vANSI_QUOTES\x10\x02\x12\x1e\n" +
	"\x1aERROR_FOR_DIVISION_BY_ZERO\x10\x03\x12\x17\n" +
	"\x13HIGH_NOT_PRECEDENCE\x10\x04\x12\x10\n" +
	"\fIGNORE_SPACE\x10\x05\x12\x19\n" +
	"\x15NO_AUTO_VALUE_ON_ZERO\x10\x06\x12\x18\n" +
	"\x14NO_BACKSLASH_ESCAPES\x10\a\x12\x1a\n" +
	"\x16NO_ENGINE_SUBSTITUTION\x10\b\x12\x1b\n" +
	"\x17NO_UNSIGNED_SUBTRACTION\x10\t\x12\x10\n" +
	"\fNO_ZERO_DATE\x10\n" +
	"\x12\x13\n" +
	"\x0fNO_ZERO_IN_DATE\x10\v\x12\x16\n" +
	"\x12ONLY_FULL_GROUP_BY\x10\x0f\x12\x1b\n" +
	"\x17PAD_CHAR_TO_FULL_LENGTH\x10\x10\x12\x13\n" +
	"\x0fPIPES_AS_CONCAT\x10\x11\x12\x11\n" +
	"\rREAL_AS_FLOAT\x10\x12\x12\x15\n" +
	"\x11STRICT_ALL_TABLES\x10\x13\x12\x17\n" +
	"\x13STRICT_TRANS_TABLES\x10\x14\x12\x1c\n" +
	"\x18TIME_TRUNCATE_FRACTIONAL\x10\x15\x12\b\n" +
	"\x04ANSI\x10\x16\x12\x0f\n" +
	"\vTRADITIONAL\x10\x17\x12\x14\n" +
	"\x10NO_DIR_IN_CREATE\x10\x18\"\x9f\x01\n" +
	"\n" +
	"AuthPlugin\x12\x1b\n" +
	"\x17AUTH_PLUGIN_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15MYSQL_NATIVE_PASSWORD\x10\x01\x12\x19\n" +
	"\x15CACHING_SHA2_PASSWORD\x10\x02\x12\x13\n" +
	"\x0fSHA256_PASSWORD\x10\x03\x12\x12\n" +
	"\x0eMYSQL_NO_LOGIN\x10\x04\x12\x15\n" +
	"\x11MDB_IAMPROXY_AUTH\x10\x05\"x\n" +
	"\x14TransactionIsolation\x12%\n" +
	"!TRANSACTION_ISOLATION_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eREAD_COMMITTED\x10\x01\x12\x13\n" +
	"\x0fREPEATABLE_READ\x10\x02\x12\x10\n" +
	"\fSERIALIZABLE\x10\x03\"U\n" +
	"\x0eBinlogRowImage\x12 \n" +
	"\x1cBINLOG_ROW_IMAGE_UNSPECIFIED\x10\x00\x12\b\n" +
	"\x04FULL\x10\x01\x12\v\n" +
	"\aMINIMAL\x10\x02\x12\n" +
	"\n" +
	"\x06NOBLOB\x10\x03\"Y\n" +
	"\x11SlaveParallelType\x12#\n" +
	"\x1fSLAVE_PARALLEL_TYPE_UNSPECIFIED\x10\x00\x12\f\n" +
	"\bDATABASE\x10\x01\x12\x11\n" +
	"\rLOGICAL_CLOCK\x10\x02\"M\n" +
	"\x0fLogSlowRateType\x12\"\n" +
	"\x1eLOG_SLOW_RATE_TYPE_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aSESSION\x10\x01\x12\t\n" +
	"\x05QUERY\x10\x02\"\xa1\x01\n" +
	"\x11LogSlowFilterType\x12$\n" +
	" LOG_SLOW_FILTER_TYPE_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tFULL_SCAN\x10\x01\x12\r\n" +
	"\tFULL_JOIN\x10\x02\x12\r\n" +
	"\tTMP_TABLE\x10\x03\x12\x15\n" +
	"\x11TMP_TABLE_ON_DISK\x10\x04\x12\f\n" +
	"\bFILESORT\x10\x05\x12\x14\n" +
	"\x10FILESORT_ON_DISK\x10\x06\"^\n" +
	"\x0eAuditLogPolicy\x12 \n" +
	"\x1cAUDIT_LOG_POLICY_UNSPECIFIED\x10\x00\x12\a\n" +
	"\x03ALL\x10\x01\x12\n" +
	"\n" +
	"\x06LOGINS\x10\x02\x12\v\n" +
	"\aQUERIES\x10\x03\x12\b\n" +
	"\x04NONE\x10\x04\"\x96\x02\n" +
	"\x15InnodbChangeBuffering\x12'\n" +
	"#INNODB_CHANGE_BUFFERING_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cINNODB_CHANGE_BUFFERING_NONE\x10\x01\x12#\n" +
	"\x1fINNODB_CHANGE_BUFFERING_INSERTS\x10\x02\x12#\n" +
	"\x1fINNODB_CHANGE_BUFFERING_DELETES\x10\x03\x12#\n" +
	"\x1fINNODB_CHANGE_BUFFERING_CHANGES\x10\x04\x12\"\n" +
	"\x1eINNODB_CHANGE_BUFFERING_PURGES\x10\x05\x12\x1f\n" +
	"\x1bINNODB_CHANGE_BUFFERING_ALL\x10\x06J\x04\b\x04\x10\x05\"\x9c\x02\n" +
	"\x11MysqlConfigSet8_4\x12[\n" +
	"\x10effective_config\x18\x01 \x01(\v20.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4R\x0feffectiveConfig\x12Q\n" +
	"\vuser_config\x18\x02 \x01(\v20.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4R\n" +
	"userConfig\x12W\n" +
	"\x0edefault_config\x18\x03 \x01(\v20.yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4R\rdefaultConfigBr\n" +
	"$yandex.cloud.api.mdb.mysql.v1.configZJgithub.com/yandex-cloud/go-genproto/yandex/cloud/mdb/mysql/v1/config;mysqlb\x06proto3"

var (
	file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDescData []byte
)

func file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDesc), len(file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDesc)))
	})
	return file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDescData
}

var file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_goTypes = []any{
	(MysqlConfig8_4_SQLMode)(0),               // 0: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.SQLMode
	(MysqlConfig8_4_AuthPlugin)(0),            // 1: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.AuthPlugin
	(MysqlConfig8_4_TransactionIsolation)(0),  // 2: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.TransactionIsolation
	(MysqlConfig8_4_BinlogRowImage)(0),        // 3: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.BinlogRowImage
	(MysqlConfig8_4_SlaveParallelType)(0),     // 4: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.SlaveParallelType
	(MysqlConfig8_4_LogSlowRateType)(0),       // 5: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.LogSlowRateType
	(MysqlConfig8_4_LogSlowFilterType)(0),     // 6: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.LogSlowFilterType
	(MysqlConfig8_4_AuditLogPolicy)(0),        // 7: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.AuditLogPolicy
	(MysqlConfig8_4_InnodbChangeBuffering)(0), // 8: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.InnodbChangeBuffering
	(*MysqlConfig8_4)(nil),                    // 9: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4
	(*MysqlConfigSet8_4)(nil),                 // 10: yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_4
	(*wrapperspb.Int64Value)(nil),             // 11: google.protobuf.Int64Value
	(*wrapperspb.DoubleValue)(nil),            // 12: google.protobuf.DoubleValue
	(*wrapperspb.BoolValue)(nil),              // 13: google.protobuf.BoolValue
}
var file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_depIdxs = []int32{
	11, // 0: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_buffer_pool_size:type_name -> google.protobuf.Int64Value
	11, // 1: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.max_connections:type_name -> google.protobuf.Int64Value
	12, // 2: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.long_query_time:type_name -> google.protobuf.DoubleValue
	13, // 3: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.audit_log:type_name -> google.protobuf.BoolValue
	0,  // 4: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.sql_mode:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.SQLMode
	11, // 5: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.max_allowed_packet:type_name -> google.protobuf.Int64Value
	11, // 6: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_flush_log_at_trx_commit:type_name -> google.protobuf.Int64Value
	11, // 7: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_lock_wait_timeout:type_name -> google.protobuf.Int64Value
	2,  // 8: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.transaction_isolation:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.TransactionIsolation
	13, // 9: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_print_all_deadlocks:type_name -> google.protobuf.BoolValue
	11, // 10: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.net_read_timeout:type_name -> google.protobuf.Int64Value
	11, // 11: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.net_write_timeout:type_name -> google.protobuf.Int64Value
	11, // 12: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.group_concat_max_len:type_name -> google.protobuf.Int64Value
	11, // 13: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.tmp_table_size:type_name -> google.protobuf.Int64Value
	11, // 14: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.max_heap_table_size:type_name -> google.protobuf.Int64Value
	13, // 15: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_adaptive_hash_index:type_name -> google.protobuf.BoolValue
	13, // 16: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_numa_interleave:type_name -> google.protobuf.BoolValue
	11, // 17: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_log_buffer_size:type_name -> google.protobuf.Int64Value
	11, // 18: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_log_file_size:type_name -> google.protobuf.Int64Value
	11, // 19: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_io_capacity:type_name -> google.protobuf.Int64Value
	11, // 20: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_io_capacity_max:type_name -> google.protobuf.Int64Value
	11, // 21: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_read_io_threads:type_name -> google.protobuf.Int64Value
	11, // 22: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_write_io_threads:type_name -> google.protobuf.Int64Value
	11, // 23: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_purge_threads:type_name -> google.protobuf.Int64Value
	11, // 24: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_thread_concurrency:type_name -> google.protobuf.Int64Value
	11, // 25: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_temp_data_file_max_size:type_name -> google.protobuf.Int64Value
	11, // 26: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.thread_cache_size:type_name -> google.protobuf.Int64Value
	11, // 27: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.thread_stack:type_name -> google.protobuf.Int64Value
	11, // 28: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.join_buffer_size:type_name -> google.protobuf.Int64Value
	11, // 29: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.sort_buffer_size:type_name -> google.protobuf.Int64Value
	11, // 30: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.table_definition_cache:type_name -> google.protobuf.Int64Value
	11, // 31: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.table_open_cache:type_name -> google.protobuf.Int64Value
	11, // 32: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.table_open_cache_instances:type_name -> google.protobuf.Int64Value
	13, // 33: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.explicit_defaults_for_timestamp:type_name -> google.protobuf.BoolValue
	11, // 34: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.auto_increment_increment:type_name -> google.protobuf.Int64Value
	11, // 35: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.auto_increment_offset:type_name -> google.protobuf.Int64Value
	11, // 36: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.sync_binlog:type_name -> google.protobuf.Int64Value
	11, // 37: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.binlog_cache_size:type_name -> google.protobuf.Int64Value
	11, // 38: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.binlog_group_commit_sync_delay:type_name -> google.protobuf.Int64Value
	3,  // 39: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.binlog_row_image:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.BinlogRowImage
	13, // 40: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.binlog_rows_query_log_events:type_name -> google.protobuf.BoolValue
	11, // 41: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.rpl_semi_sync_master_wait_for_slave_count:type_name -> google.protobuf.Int64Value
	4,  // 42: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.slave_parallel_type:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.SlaveParallelType
	11, // 43: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.slave_parallel_workers:type_name -> google.protobuf.Int64Value
	11, // 44: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.regexp_time_limit:type_name -> google.protobuf.Int64Value
	11, // 45: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.mdb_preserve_binlog_bytes:type_name -> google.protobuf.Int64Value
	11, // 46: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.interactive_timeout:type_name -> google.protobuf.Int64Value
	11, // 47: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.wait_timeout:type_name -> google.protobuf.Int64Value
	11, // 48: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.mdb_offline_mode_enable_lag:type_name -> google.protobuf.Int64Value
	11, // 49: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.mdb_offline_mode_disable_lag:type_name -> google.protobuf.Int64Value
	11, // 50: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.range_optimizer_max_mem_size:type_name -> google.protobuf.Int64Value
	11, // 51: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_online_alter_log_max_size:type_name -> google.protobuf.Int64Value
	11, // 52: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_ft_min_token_size:type_name -> google.protobuf.Int64Value
	11, // 53: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_ft_max_token_size:type_name -> google.protobuf.Int64Value
	11, // 54: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.lower_case_table_names:type_name -> google.protobuf.Int64Value
	13, // 55: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.slow_query_log:type_name -> google.protobuf.BoolValue
	12, // 56: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.slow_query_log_always_write_time:type_name -> google.protobuf.DoubleValue
	5,  // 57: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.log_slow_rate_type:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.LogSlowRateType
	11, // 58: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.log_slow_rate_limit:type_name -> google.protobuf.Int64Value
	13, // 59: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.log_slow_sp_statements:type_name -> google.protobuf.BoolValue
	6,  // 60: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.log_slow_filter:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.LogSlowFilterType
	11, // 61: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.mdb_priority_choice_max_lag:type_name -> google.protobuf.Int64Value
	11, // 62: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_page_size:type_name -> google.protobuf.Int64Value
	11, // 63: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.max_sp_recursion_depth:type_name -> google.protobuf.Int64Value
	11, // 64: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_compression_level:type_name -> google.protobuf.Int64Value
	13, // 65: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.autocommit:type_name -> google.protobuf.BoolValue
	13, // 66: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_status_output:type_name -> google.protobuf.BoolValue
	13, // 67: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_strict_mode:type_name -> google.protobuf.BoolValue
	13, // 68: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_print_lock_wait_timeout_info:type_name -> google.protobuf.BoolValue
	11, // 69: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.log_error_verbosity:type_name -> google.protobuf.Int64Value
	11, // 70: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.max_digest_length:type_name -> google.protobuf.Int64Value
	11, // 71: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.lock_wait_timeout:type_name -> google.protobuf.Int64Value
	11, // 72: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.max_prepared_stmt_count:type_name -> google.protobuf.Int64Value
	11, // 73: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.optimizer_search_depth:type_name -> google.protobuf.Int64Value
	13, // 74: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.userstat:type_name -> google.protobuf.BoolValue
	11, // 75: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.max_execution_time:type_name -> google.protobuf.Int64Value
	7,  // 76: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.audit_log_policy:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.AuditLogPolicy
	13, // 77: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.replication_sender_observe_commit_only:type_name -> google.protobuf.BoolValue
	13, // 78: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.replication_optimize_for_static_plugin_config:type_name -> google.protobuf.BoolValue
	11, // 79: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_lru_scan_depth:type_name -> google.protobuf.Int64Value
	13, // 80: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.sql_require_primary_key:type_name -> google.protobuf.BoolValue
	13, // 81: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.mdb_use_async_replication:type_name -> google.protobuf.BoolValue
	11, // 82: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.mdb_async_allowed_lag:type_name -> google.protobuf.Int64Value
	13, // 83: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.mdb_force_ssl:type_name -> google.protobuf.BoolValue
	8,  // 84: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.innodb_change_buffering:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.InnodbChangeBuffering
	11, // 85: yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4.max_write_lock_count:type_name -> google.protobuf.Int64Value
	9,  // 86: yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_4.effective_config:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4
	9,  // 87: yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_4.user_config:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4
	9,  // 88: yandex.cloud.mdb.mysql.v1.config.MysqlConfigSet8_4.default_config:type_name -> yandex.cloud.mdb.mysql.v1.config.MysqlConfig8_4
	89, // [89:89] is the sub-list for method output_type
	89, // [89:89] is the sub-list for method input_type
	89, // [89:89] is the sub-list for extension type_name
	89, // [89:89] is the sub-list for extension extendee
	0,  // [0:89] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_init() }
func file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_init() {
	if File_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDesc), len(file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_rawDesc)),
			NumEnums:      9,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto = out.File
	file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_goTypes = nil
	file_yandex_cloud_mdb_mysql_v1_config_mysql8_4_proto_depIdxs = nil
}

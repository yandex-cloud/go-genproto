// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/mdb/mysql/v1alpha/cluster_service.proto

package mysql

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	config "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/mysql/v1alpha/config"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	timeofday "google.golang.org/genproto/googleapis/type/timeofday"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListClusterLogsRequest_ServiceType int32

const (
	ListClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED ListClusterLogsRequest_ServiceType = 0
	// Logs of MySQL activity.
	ListClusterLogsRequest_MYSQL ListClusterLogsRequest_ServiceType = 1
)

// Enum value maps for ListClusterLogsRequest_ServiceType.
var (
	ListClusterLogsRequest_ServiceType_name = map[int32]string{
		0: "SERVICE_TYPE_UNSPECIFIED",
		1: "MYSQL",
	}
	ListClusterLogsRequest_ServiceType_value = map[string]int32{
		"SERVICE_TYPE_UNSPECIFIED": 0,
		"MYSQL":                    1,
	}
)

func (x ListClusterLogsRequest_ServiceType) Enum() *ListClusterLogsRequest_ServiceType {
	p := new(ListClusterLogsRequest_ServiceType)
	*p = x
	return p
}

func (x ListClusterLogsRequest_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListClusterLogsRequest_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_enumTypes[0].Descriptor()
}

func (ListClusterLogsRequest_ServiceType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_enumTypes[0]
}

func (x ListClusterLogsRequest_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListClusterLogsRequest_ServiceType.Descriptor instead.
func (ListClusterLogsRequest_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{14, 0}
}

type GetClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MySQL cluster to return.
	// To get the cluster ID use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterRequest) Reset() {
	*x = GetClusterRequest{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterRequest) ProtoMessage() {}

func (x *GetClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterRequest.ProtoReflect.Descriptor instead.
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ListClustersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to list MySQL clusters in.
	// To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClustersResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the [ListClustersResponse.next_page_token]
	// returned by the previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression must specify:
	// 1. The field name. Currently you can only use filtering with the [Cluster.name] field.
	// 2. An `=` operator.
	// 3. The value in double quotes (`"`). Must be 1-63 characters long and match the regular expression `[a-zA-Z0-9_-]+`.
	Filter        string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListClustersRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListClustersRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClustersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListClustersRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListClustersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of MySQL clusters.
	Clusters []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClustersRequest.page_size], use the [next_page_token] as the value
	// for the [ListClustersRequest.page_token] parameter in the next list request. Each subsequent
	// list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersResponse) Reset() {
	*x = ListClustersResponse{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersResponse) ProtoMessage() {}

func (x *ListClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersResponse.ProtoReflect.Descriptor instead.
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListClustersResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ListClustersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to create the MySQL cluster in.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the MySQL cluster. The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the MySQL cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the MySQL cluster as `key:value` pairs. Maximum 64 per resource.
	// For example, "project": "mvp" or "source": "dictionary".
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Deployment environment of the MySQL cluster.
	Environment Cluster_Environment `protobuf:"varint,5,opt,name=environment,proto3,enum=yandex.cloud.mdb.mysql.v1alpha.Cluster_Environment" json:"environment,omitempty"`
	// Configuration and resources for hosts that should be created for the MySQL cluster.
	ConfigSpec *ConfigSpec `protobuf:"bytes,6,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// Descriptions of databases to be created in the MySQL cluster.
	DatabaseSpecs []*DatabaseSpec `protobuf:"bytes,7,rep,name=database_specs,json=databaseSpecs,proto3" json:"database_specs,omitempty"`
	// Descriptions of database users to be created in the MySQL cluster.
	UserSpecs []*UserSpec `protobuf:"bytes,8,rep,name=user_specs,json=userSpecs,proto3" json:"user_specs,omitempty"`
	// Individual configurations for hosts that should be created for the MySQL cluster.
	HostSpecs []*HostSpec `protobuf:"bytes,9,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// ID of the network to create the cluster in.
	NetworkId     string `protobuf:"bytes,10,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClusterRequest) Reset() {
	*x = CreateClusterRequest{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterRequest) ProtoMessage() {}

func (x *CreateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateClusterRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateClusterRequest) GetEnvironment() Cluster_Environment {
	if x != nil {
		return x.Environment
	}
	return Cluster_ENVIRONMENT_UNSPECIFIED
}

func (x *CreateClusterRequest) GetConfigSpec() *ConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *CreateClusterRequest) GetDatabaseSpecs() []*DatabaseSpec {
	if x != nil {
		return x.DatabaseSpecs
	}
	return nil
}

func (x *CreateClusterRequest) GetUserSpecs() []*UserSpec {
	if x != nil {
		return x.UserSpecs
	}
	return nil
}

func (x *CreateClusterRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

func (x *CreateClusterRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type CreateClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MySQL cluster that is being created.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClusterMetadata) Reset() {
	*x = CreateClusterMetadata{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterMetadata) ProtoMessage() {}

func (x *CreateClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterMetadata.ProtoReflect.Descriptor instead.
func (*CreateClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type UpdateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MySQL cluster to update.
	// To get the MySQL cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Field mask that specifies which settings of the MySQL cluster should be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// New description of the MySQL cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the MySQL cluster as `key:value` pairs. Maximum 64 per resource.
	// For example, "project": "mvp" or "source": "dictionary".
	//
	// The new set of labels will completely replace the old ones. To add a label, request the current
	// set with the [ClusterService.Get] method, then send an [ClusterService.Update] request with the new label added to the set.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// New configuration and resources for hosts in the cluster.
	ConfigSpec *ConfigSpec `protobuf:"bytes,5,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// New name for the cluster.
	Name          string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterRequest) Reset() {
	*x = UpdateClusterRequest{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterRequest) ProtoMessage() {}

func (x *UpdateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateClusterRequest) GetConfigSpec() *ConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *UpdateClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MySQL cluster that is being modified.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterMetadata) Reset() {
	*x = UpdateClusterMetadata{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterMetadata) ProtoMessage() {}

func (x *UpdateClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterMetadata.ProtoReflect.Descriptor instead.
func (*UpdateClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type DeleteClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MySQL cluster to delete.
	// To get the MySQL cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type DeleteClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MySQL cluster that is being deleted.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterMetadata) Reset() {
	*x = DeleteClusterMetadata{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterMetadata) ProtoMessage() {}

func (x *DeleteClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterMetadata.ProtoReflect.Descriptor instead.
func (*DeleteClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type BackupClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MySQL cluster to back up.
	// To get the MySQL cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupClusterRequest) Reset() {
	*x = BackupClusterRequest{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupClusterRequest) ProtoMessage() {}

func (x *BackupClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupClusterRequest.ProtoReflect.Descriptor instead.
func (*BackupClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{9}
}

func (x *BackupClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type BackupClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MySQL cluster that is being backed up.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupClusterMetadata) Reset() {
	*x = BackupClusterMetadata{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupClusterMetadata) ProtoMessage() {}

func (x *BackupClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupClusterMetadata.ProtoReflect.Descriptor instead.
func (*BackupClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{10}
}

func (x *BackupClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type RestoreClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the backup to create a cluster from.
	// To get the backup ID, use a [ClusterService.ListBackups] request.
	BackupId string `protobuf:"bytes,1,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	// Timestamp of the moment to which the MySQL cluster should be restored.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Name of the new MySQL cluster. The name must be unique within the folder.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the new MySQL cluster.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the MySQL cluster as `key:value` pairs. Maximum 64 per resource.
	// For example, "project": "mvp" or "source": "dictionary".
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Deployment environment of the new MySQL cluster.
	Environment Cluster_Environment `protobuf:"varint,7,opt,name=environment,proto3,enum=yandex.cloud.mdb.mysql.v1alpha.Cluster_Environment" json:"environment,omitempty"`
	// Configuration for the MySQL cluster to be created.
	ConfigSpec *ConfigSpec `protobuf:"bytes,8,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// Configurations for MySQL hosts that should be added
	// to the cluster that is being created from the backup.
	HostSpecs []*HostSpec `protobuf:"bytes,9,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// ID of the network to create the MySQL cluster in.
	NetworkId     string `protobuf:"bytes,10,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestoreClusterRequest) Reset() {
	*x = RestoreClusterRequest{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreClusterRequest) ProtoMessage() {}

func (x *RestoreClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreClusterRequest.ProtoReflect.Descriptor instead.
func (*RestoreClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{11}
}

func (x *RestoreClusterRequest) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

func (x *RestoreClusterRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *RestoreClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RestoreClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RestoreClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RestoreClusterRequest) GetEnvironment() Cluster_Environment {
	if x != nil {
		return x.Environment
	}
	return Cluster_ENVIRONMENT_UNSPECIFIED
}

func (x *RestoreClusterRequest) GetConfigSpec() *ConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *RestoreClusterRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

func (x *RestoreClusterRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type RestoreClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the new MySQL cluster that is being created from a backup.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the backup that is being used for creating a cluster.
	BackupId      string `protobuf:"bytes,2,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestoreClusterMetadata) Reset() {
	*x = RestoreClusterMetadata{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreClusterMetadata) ProtoMessage() {}

func (x *RestoreClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreClusterMetadata.ProtoReflect.Descriptor instead.
func (*RestoreClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{12}
}

func (x *RestoreClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RestoreClusterMetadata) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

type LogRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Log record timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Contents of the log record.
	Message       map[string]string `protobuf:"bytes,2,rep,name=message,proto3" json:"message,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogRecord) Reset() {
	*x = LogRecord{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRecord) ProtoMessage() {}

func (x *LogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRecord.ProtoReflect.Descriptor instead.
func (*LogRecord) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{13}
}

func (x *LogRecord) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LogRecord) GetMessage() map[string]string {
	if x != nil {
		return x.Message
	}
	return nil
}

type ListClusterLogsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MySQL cluster to request logs for.
	// To get the MySQL cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Columns from the logs table to request.
	// If no columns are specified, entire log records are returned.
	ColumnFilter []string `protobuf:"bytes,2,rep,name=column_filter,json=columnFilter,proto3" json:"column_filter,omitempty"`
	// Type of the service to request logs about.
	ServiceType ListClusterLogsRequest_ServiceType `protobuf:"varint,3,opt,name=service_type,json=serviceType,proto3,enum=yandex.cloud.mdb.mysql.v1alpha.ListClusterLogsRequest_ServiceType" json:"service_type,omitempty"`
	// Start timestamp for the logs request.
	FromTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=from_time,json=fromTime,proto3" json:"from_time,omitempty"`
	// End timestamp for the logs request.
	ToTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=to_time,json=toTime,proto3" json:"to_time,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterLogsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListClusterLogsResponse.next_page_token] returned by the previous list request.
	PageToken string `protobuf:"bytes,7,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Always return `next_page_token`, even if current page is empty.
	AlwaysNextPageToken bool `protobuf:"varint,8,opt,name=always_next_page_token,json=alwaysNextPageToken,proto3" json:"always_next_page_token,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ListClusterLogsRequest) Reset() {
	*x = ListClusterLogsRequest{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterLogsRequest) ProtoMessage() {}

func (x *ListClusterLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterLogsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterLogsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListClusterLogsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterLogsRequest) GetColumnFilter() []string {
	if x != nil {
		return x.ColumnFilter
	}
	return nil
}

func (x *ListClusterLogsRequest) GetServiceType() ListClusterLogsRequest_ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return ListClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED
}

func (x *ListClusterLogsRequest) GetFromTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FromTime
	}
	return nil
}

func (x *ListClusterLogsRequest) GetToTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ToTime
	}
	return nil
}

func (x *ListClusterLogsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterLogsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListClusterLogsRequest) GetAlwaysNextPageToken() bool {
	if x != nil {
		return x.AlwaysNextPageToken
	}
	return false
}

type ListClusterLogsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Requested log records.
	Logs []*LogRecord `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterLogsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterLogsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterLogsResponse) Reset() {
	*x = ListClusterLogsResponse{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterLogsResponse) ProtoMessage() {}

func (x *ListClusterLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterLogsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterLogsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{15}
}

func (x *ListClusterLogsResponse) GetLogs() []*LogRecord {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *ListClusterLogsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListClusterOperationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MySQL cluster to list operations for.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterOperationsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token.  To get the next page of results, set [page_token] to the [ListClusterOperationsResponse.next_page_token]
	// returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterOperationsRequest) Reset() {
	*x = ListClusterOperationsRequest{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterOperationsRequest) ProtoMessage() {}

func (x *ListClusterOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterOperationsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{16}
}

func (x *ListClusterOperationsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterOperationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterOperationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterOperationsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of operations for the specified MySQL cluster.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterOperationsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterOperationsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterOperationsResponse) Reset() {
	*x = ListClusterOperationsResponse{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterOperationsResponse) ProtoMessage() {}

func (x *ListClusterOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterOperationsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{17}
}

func (x *ListClusterOperationsResponse) GetOperations() []*operation.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListClusterOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListClusterBackupsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MySQL cluster.
	// To get the MySQL cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterBackupsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token.  To get the next page of results, set [page_token] to the [ListClusterBackupsResponse.next_page_token]
	// returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterBackupsRequest) Reset() {
	*x = ListClusterBackupsRequest{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterBackupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterBackupsRequest) ProtoMessage() {}

func (x *ListClusterBackupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterBackupsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterBackupsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{18}
}

func (x *ListClusterBackupsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterBackupsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterBackupsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterBackupsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of MySQL backups.
	Backups []*Backup `protobuf:"bytes,1,rep,name=backups,proto3" json:"backups,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterBackupsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterBackupsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterBackupsResponse) Reset() {
	*x = ListClusterBackupsResponse{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterBackupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterBackupsResponse) ProtoMessage() {}

func (x *ListClusterBackupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterBackupsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterBackupsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{19}
}

func (x *ListClusterBackupsResponse) GetBackups() []*Backup {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *ListClusterBackupsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MySQL cluster.
	// To get the MySQL cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterHostsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token.  To get the next page of results, set [page_token] to the [ListClusterHostsResponse.next_page_token]
	// returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterHostsRequest) Reset() {
	*x = ListClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterHostsRequest) ProtoMessage() {}

func (x *ListClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{20}
}

func (x *ListClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterHostsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterHostsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterHostsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of MySQL hosts.
	Hosts []*Host `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterHostsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterHostsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterHostsResponse) Reset() {
	*x = ListClusterHostsResponse{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterHostsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterHostsResponse) ProtoMessage() {}

func (x *ListClusterHostsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterHostsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterHostsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{21}
}

func (x *ListClusterHostsResponse) GetHosts() []*Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *ListClusterHostsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type AddClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MySQL cluster to add hosts to.
	// To get the MySQL cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Configurations for MySQL hosts that should be added to the cluster.
	HostSpecs     []*HostSpec `protobuf:"bytes,2,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterHostsRequest) Reset() {
	*x = AddClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterHostsRequest) ProtoMessage() {}

func (x *AddClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*AddClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{22}
}

func (x *AddClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterHostsRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

type AddClusterHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MySQL cluster to which the hosts are being added.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts that are being added to the cluster.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterHostsMetadata) Reset() {
	*x = AddClusterHostsMetadata{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterHostsMetadata) ProtoMessage() {}

func (x *AddClusterHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterHostsMetadata.ProtoReflect.Descriptor instead.
func (*AddClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{23}
}

func (x *AddClusterHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterHostsMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type DeleteClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MySQL cluster to remove hosts from.
	// To get the MySQL cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts to delete.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterHostsRequest) Reset() {
	*x = DeleteClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterHostsRequest) ProtoMessage() {}

func (x *DeleteClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterHostsRequest) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type DeleteClusterHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MySQL cluster to remove hosts from.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts that are being deleted.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterHostsMetadata) Reset() {
	*x = DeleteClusterHostsMetadata{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterHostsMetadata) ProtoMessage() {}

func (x *DeleteClusterHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterHostsMetadata.ProtoReflect.Descriptor instead.
func (*DeleteClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteClusterHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterHostsMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type StartClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MySQL cluster to start.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterRequest) Reset() {
	*x = StartClusterRequest{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterRequest) ProtoMessage() {}

func (x *StartClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterRequest.ProtoReflect.Descriptor instead.
func (*StartClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{26}
}

func (x *StartClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StartClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MySQL cluster being started.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterMetadata) Reset() {
	*x = StartClusterMetadata{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterMetadata) ProtoMessage() {}

func (x *StartClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterMetadata.ProtoReflect.Descriptor instead.
func (*StartClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{27}
}

func (x *StartClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StopClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MySQL cluster to stop.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopClusterRequest) Reset() {
	*x = StopClusterRequest{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClusterRequest) ProtoMessage() {}

func (x *StopClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClusterRequest.ProtoReflect.Descriptor instead.
func (*StopClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{28}
}

func (x *StopClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StopClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MySQL cluster being stopped.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopClusterMetadata) Reset() {
	*x = StopClusterMetadata{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClusterMetadata) ProtoMessage() {}

func (x *StopClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClusterMetadata.ProtoReflect.Descriptor instead.
func (*StopClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{29}
}

func (x *StopClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type UpdateClusterHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the MySQL cluster to modify hosts in.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts that are being modified.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterHostsMetadata) Reset() {
	*x = UpdateClusterHostsMetadata{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterHostsMetadata) ProtoMessage() {}

func (x *UpdateClusterHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterHostsMetadata.ProtoReflect.Descriptor instead.
func (*UpdateClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateClusterHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterHostsMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type HostSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the availability zone where the host resides.
	// To get a list of available zones, use the [yandex.cloud.compute.v1.ZoneService.List] request.
	ZoneId string `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// ID of the subnet that the host should belong to. This subnet should be a part
	// of the network that the cluster belongs to.
	// The ID of the network is set in the field [Cluster.network_id].
	SubnetId string `protobuf:"bytes,2,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// Whether the host should get a public IP address on creation.
	//
	// After a host has been created, this setting cannot be changed. To remove an assigned public IP, or to assign
	// a public IP to a host without one, recreate the host with [assign_public_ip] set as needed.
	//
	// Possible values:
	// * false - don't assign a public IP to the host.
	// * true - the host should have a public IP address.
	AssignPublicIp bool `protobuf:"varint,3,opt,name=assign_public_ip,json=assignPublicIp,proto3" json:"assign_public_ip,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HostSpec) Reset() {
	*x = HostSpec{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostSpec) ProtoMessage() {}

func (x *HostSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostSpec.ProtoReflect.Descriptor instead.
func (*HostSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{31}
}

func (x *HostSpec) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *HostSpec) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *HostSpec) GetAssignPublicIp() bool {
	if x != nil {
		return x.AssignPublicIp
	}
	return false
}

type ConfigSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version of MySQL used in the cluster.
	// Possible values:
	// * 5.7
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"` // No formal validation, a list of supported versions should suffice.
	// Configuration of a MySQL cluster.
	//
	// Types that are valid to be assigned to MysqlConfig:
	//
	//	*ConfigSpec_MysqlConfig_5_7
	MysqlConfig isConfigSpec_MysqlConfig `protobuf_oneof:"mysql_config"`
	// Resources allocated to MySQL hosts.
	Resources *Resources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	// Time to start the daily backup, in the UTC timezone.
	BackupWindowStart *timeofday.TimeOfDay `protobuf:"bytes,4,opt,name=backup_window_start,json=backupWindowStart,proto3" json:"backup_window_start,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ConfigSpec) Reset() {
	*x = ConfigSpec{}
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSpec) ProtoMessage() {}

func (x *ConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSpec.ProtoReflect.Descriptor instead.
func (*ConfigSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP(), []int{32}
}

func (x *ConfigSpec) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ConfigSpec) GetMysqlConfig() isConfigSpec_MysqlConfig {
	if x != nil {
		return x.MysqlConfig
	}
	return nil
}

func (x *ConfigSpec) GetMysqlConfig_5_7() *config.MysqlConfig5_7 {
	if x != nil {
		if x, ok := x.MysqlConfig.(*ConfigSpec_MysqlConfig_5_7); ok {
			return x.MysqlConfig_5_7
		}
	}
	return nil
}

func (x *ConfigSpec) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ConfigSpec) GetBackupWindowStart() *timeofday.TimeOfDay {
	if x != nil {
		return x.BackupWindowStart
	}
	return nil
}

type isConfigSpec_MysqlConfig interface {
	isConfigSpec_MysqlConfig()
}

type ConfigSpec_MysqlConfig_5_7 struct {
	// Configuration for a MySQL 5.7 cluster.
	MysqlConfig_5_7 *config.MysqlConfig5_7 `protobuf:"bytes,2,opt,name=mysql_config_5_7,json=mysqlConfig_5_7,proto3,oneof"`
}

func (*ConfigSpec_MysqlConfig_5_7) isConfigSpec_MysqlConfig() {}

var File_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDesc = "" +
	"\n" +
	"4yandex/cloud/mdb/mysql/v1alpha/cluster_service.proto\x12\x1eyandex.cloud.mdb.mysql.v1alpha\x1a\x1cgoogle/api/annotations.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/type/timeofday.proto\x1a yandex/cloud/api/operation.proto\x1a+yandex/cloud/mdb/mysql/v1alpha/backup.proto\x1a,yandex/cloud/mdb/mysql/v1alpha/cluster.proto\x1a4yandex/cloud/mdb/mysql/v1alpha/config/mysql5_7.proto\x1a-yandex/cloud/mdb/mysql/v1alpha/database.proto\x1a)yandex/cloud/mdb/mysql/v1alpha/user.proto\x1a&yandex/cloud/operation/operation.proto\x1a\x1dyandex/cloud/validation.proto\"@\n" +
	"\x11GetClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"\xb7\x01\n" +
	"\x13ListClustersRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\x12\"\n" +
	"\x06filter\x18\x04 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"\x83\x01\n" +
	"\x14ListClustersResponse\x12C\n" +
	"\bclusters\x18\x01 \x03(\v2'.yandex.cloud.mdb.mysql.v1alpha.ClusterR\bclusters\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xa9\x06\n" +
	"\x14CreateClusterRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x122\n" +
	"\x04name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x04name\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x95\x01\n" +
	"\x06labels\x18\x04 \x03(\v2@.yandex.cloud.mdb.mysql.v1alpha.CreateClusterRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x041-63R\x06labels\x12U\n" +
	"\venvironment\x18\x05 \x01(\x0e23.yandex.cloud.mdb.mysql.v1alpha.Cluster.EnvironmentR\venvironment\x12K\n" +
	"\vconfig_spec\x18\x06 \x01(\v2*.yandex.cloud.mdb.mysql.v1alpha.ConfigSpecR\n" +
	"configSpec\x12S\n" +
	"\x0edatabase_specs\x18\a \x03(\v2,.yandex.cloud.mdb.mysql.v1alpha.DatabaseSpecR\rdatabaseSpecs\x12G\n" +
	"\n" +
	"user_specs\x18\b \x03(\v2(.yandex.cloud.mdb.mysql.v1alpha.UserSpecR\tuserSpecs\x12G\n" +
	"\n" +
	"host_specs\x18\t \x03(\v2(.yandex.cloud.mdb.mysql.v1alpha.HostSpecR\thostSpecs\x12'\n" +
	"\n" +
	"network_id\x18\n" +
	" \x01(\tB\b\x8a\xc81\x04<=50R\tnetworkId\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"6\n" +
	"\x15CreateClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\xfd\x03\n" +
	"\x14UpdateClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x95\x01\n" +
	"\x06labels\x18\x04 \x03(\v2@.yandex.cloud.mdb.mysql.v1alpha.UpdateClusterRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x041-63R\x06labels\x12K\n" +
	"\vconfig_spec\x18\x05 \x01(\v2*.yandex.cloud.mdb.mysql.v1alpha.ConfigSpecR\n" +
	"configSpec\x12.\n" +
	"\x04name\x18\x06 \x01(\tB\x1a\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x04name\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"6\n" +
	"\x15UpdateClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"C\n" +
	"\x14DeleteClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"6\n" +
	"\x15DeleteClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"C\n" +
	"\x14BackupClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"6\n" +
	"\x15BackupClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\xb9\x05\n" +
	"\x15RestoreClusterRequest\x12!\n" +
	"\tbackup_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\bbackupId\x124\n" +
	"\x04time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe8\xc71\x01R\x04time\x12*\n" +
	"\x04name\x18\x04 \x01(\tB\x16\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*R\x04name\x12+\n" +
	"\vdescription\x18\x05 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x96\x01\n" +
	"\x06labels\x18\x06 \x03(\v2A.yandex.cloud.mdb.mysql.v1alpha.RestoreClusterRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x041-63R\x06labels\x12U\n" +
	"\venvironment\x18\a \x01(\x0e23.yandex.cloud.mdb.mysql.v1alpha.Cluster.EnvironmentR\venvironment\x12K\n" +
	"\vconfig_spec\x18\b \x01(\v2*.yandex.cloud.mdb.mysql.v1alpha.ConfigSpecR\n" +
	"configSpec\x12G\n" +
	"\n" +
	"host_specs\x18\t \x03(\v2(.yandex.cloud.mdb.mysql.v1alpha.HostSpecR\thostSpecs\x12'\n" +
	"\n" +
	"network_id\x18\n" +
	" \x01(\tB\b\x8a\xc81\x04<=50R\tnetworkId\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01J\x04\b\x03\x10\x04\"T\n" +
	"\x16RestoreClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1b\n" +
	"\tbackup_id\x18\x02 \x01(\tR\bbackupId\"\xd3\x01\n" +
	"\tLogRecord\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12P\n" +
	"\amessage\x18\x02 \x03(\v26.yandex.cloud.mdb.mysql.v1alpha.LogRecord.MessageEntryR\amessage\x1a:\n" +
	"\fMessageEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xff\x03\n" +
	"\x16ListClusterLogsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12#\n" +
	"\rcolumn_filter\x18\x02 \x03(\tR\fcolumnFilter\x12e\n" +
	"\fservice_type\x18\x03 \x01(\x0e2B.yandex.cloud.mdb.mysql.v1alpha.ListClusterLogsRequest.ServiceTypeR\vserviceType\x127\n" +
	"\tfrom_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\bfromTime\x123\n" +
	"\ato_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x06toTime\x12'\n" +
	"\tpage_size\x18\x06 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\a \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\x123\n" +
	"\x16always_next_page_token\x18\b \x01(\bR\x13alwaysNextPageToken\"6\n" +
	"\vServiceType\x12\x1c\n" +
	"\x18SERVICE_TYPE_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05MYSQL\x10\x01\"\x80\x01\n" +
	"\x17ListClusterLogsResponse\x12=\n" +
	"\x04logs\x18\x01 \x03(\v2).yandex.cloud.mdb.mysql.v1alpha.LogRecordR\x04logs\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x9e\x01\n" +
	"\x1cListClusterOperationsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x8a\x01\n" +
	"\x1dListClusterOperationsResponse\x12A\n" +
	"\n" +
	"operations\x18\x01 \x03(\v2!.yandex.cloud.operation.OperationR\n" +
	"operations\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x9b\x01\n" +
	"\x19ListClusterBackupsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x86\x01\n" +
	"\x1aListClusterBackupsResponse\x12@\n" +
	"\abackups\x18\x01 \x03(\v2&.yandex.cloud.mdb.mysql.v1alpha.BackupR\abackups\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x99\x01\n" +
	"\x17ListClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"~\n" +
	"\x18ListClusterHostsResponse\x12:\n" +
	"\x05hosts\x18\x01 \x03(\v2$.yandex.cloud.mdb.mysql.v1alpha.HostR\x05hosts\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x96\x01\n" +
	"\x16AddClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12O\n" +
	"\n" +
	"host_specs\x18\x02 \x03(\v2(.yandex.cloud.mdb.mysql.v1alpha.HostSpecB\x06\x82\xc81\x02>0R\thostSpecs\"W\n" +
	"\x17AddClusterHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"x\n" +
	"\x19DeleteClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12.\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tB\x0f\x82\xc81\x02>0\x8a\xc81\x05<=253R\thostNames\"Z\n" +
	"\x1aDeleteClusterHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"B\n" +
	"\x13StartClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"5\n" +
	"\x14StartClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"A\n" +
	"\x12StopClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"4\n" +
	"\x13StopClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"Z\n" +
	"\x1aUpdateClusterHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"~\n" +
	"\bHostSpec\x12!\n" +
	"\azone_id\x18\x01 \x01(\tB\b\x8a\xc81\x04<=50R\x06zoneId\x12%\n" +
	"\tsubnet_id\x18\x02 \x01(\tB\b\x8a\xc81\x04<=50R\bsubnetId\x12(\n" +
	"\x10assign_public_ip\x18\x03 \x01(\bR\x0eassignPublicIp\"\xab\x02\n" +
	"\n" +
	"ConfigSpec\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12b\n" +
	"\x10mysql_config_5_7\x18\x02 \x01(\v25.yandex.cloud.mdb.mysql.v1alpha.config.MysqlConfig5_7H\x00R\x0fmysqlConfig_5_7\x12G\n" +
	"\tresources\x18\x03 \x01(\v2).yandex.cloud.mdb.mysql.v1alpha.ResourcesR\tresources\x12F\n" +
	"\x13backup_window_start\x18\x04 \x01(\v2\x16.google.type.TimeOfDayR\x11backupWindowStartB\x0e\n" +
	"\fmysql_config2\xee\x16\n" +
	"\x0eClusterService\x12\x97\x01\n" +
	"\x03Get\x121.yandex.cloud.mdb.mysql.v1alpha.GetClusterRequest\x1a'.yandex.cloud.mdb.mysql.v1alpha.Cluster\"4\x82\xd3\xe4\x93\x02.\x12,/managed-mysql/v1alpha/clusters/{cluster_id}\x12\x9a\x01\n" +
	"\x04List\x123.yandex.cloud.mdb.mysql.v1alpha.ListClustersRequest\x1a4.yandex.cloud.mdb.mysql.v1alpha.ListClustersResponse\"'\x82\xd3\xe4\x93\x02!\x12\x1f/managed-mysql/v1alpha/clusters\x12\xb1\x01\n" +
	"\x06Create\x124.yandex.cloud.mdb.mysql.v1alpha.CreateClusterRequest\x1a!.yandex.cloud.operation.Operation\"N\xb2\xd2* \n" +
	"\x15CreateClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02$:\x01*\"\x1f/managed-mysql/v1alpha/clusters\x12\xbe\x01\n" +
	"\x06Update\x124.yandex.cloud.mdb.mysql.v1alpha.UpdateClusterRequest\x1a!.yandex.cloud.operation.Operation\"[\xb2\xd2* \n" +
	"\x15UpdateClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x021:\x01*2,/managed-mysql/v1alpha/clusters/{cluster_id}\x12\xc9\x01\n" +
	"\x06Delete\x124.yandex.cloud.mdb.mysql.v1alpha.DeleteClusterRequest\x1a!.yandex.cloud.operation.Operation\"f\xb2\xd2*.\n" +
	"\x15DeleteClusterMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02.*,/managed-mysql/v1alpha/clusters/{cluster_id}\x12\xbe\x01\n" +
	"\x05Start\x123.yandex.cloud.mdb.mysql.v1alpha.StartClusterRequest\x1a!.yandex.cloud.operation.Operation\"]\xb2\xd2*\x1f\n" +
	"\x14StartClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x024\"2/managed-mysql/v1alpha/clusters/{cluster_id}:start\x12\xba\x01\n" +
	"\x04Stop\x122.yandex.cloud.mdb.mysql.v1alpha.StopClusterRequest\x1a!.yandex.cloud.operation.Operation\"[\xb2\xd2*\x1e\n" +
	"\x13StopClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x023\"1/managed-mysql/v1alpha/clusters/{cluster_id}:stop\x12\xc2\x01\n" +
	"\x06Backup\x124.yandex.cloud.mdb.mysql.v1alpha.BackupClusterRequest\x1a!.yandex.cloud.operation.Operation\"_\xb2\xd2* \n" +
	"\x15BackupClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x025\"3/managed-mysql/v1alpha/clusters/{cluster_id}:backup\x12\xbc\x01\n" +
	"\aRestore\x125.yandex.cloud.mdb.mysql.v1alpha.RestoreClusterRequest\x1a!.yandex.cloud.operation.Operation\"W\xb2\xd2*!\n" +
	"\x16RestoreClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02,:\x01*\"'/managed-mysql/v1alpha/clusters:restore\x12\xb6\x01\n" +
	"\bListLogs\x126.yandex.cloud.mdb.mysql.v1alpha.ListClusterLogsRequest\x1a7.yandex.cloud.mdb.mysql.v1alpha.ListClusterLogsResponse\"9\x82\xd3\xe4\x93\x023\x121/managed-mysql/v1alpha/clusters/{cluster_id}:logs\x12\xce\x01\n" +
	"\x0eListOperations\x12<.yandex.cloud.mdb.mysql.v1alpha.ListClusterOperationsRequest\x1a=.yandex.cloud.mdb.mysql.v1alpha.ListClusterOperationsResponse\"?\x82\xd3\xe4\x93\x029\x127/managed-mysql/v1alpha/clusters/{cluster_id}/operations\x12\xc2\x01\n" +
	"\vListBackups\x129.yandex.cloud.mdb.mysql.v1alpha.ListClusterBackupsRequest\x1a:.yandex.cloud.mdb.mysql.v1alpha.ListClusterBackupsResponse\"<\x82\xd3\xe4\x93\x026\x124/managed-mysql/v1alpha/clusters/{cluster_id}/backups\x12\xba\x01\n" +
	"\tListHosts\x127.yandex.cloud.mdb.mysql.v1alpha.ListClusterHostsRequest\x1a8.yandex.cloud.mdb.mysql.v1alpha.ListClusterHostsResponse\":\x82\xd3\xe4\x93\x024\x122/managed-mysql/v1alpha/clusters/{cluster_id}/hosts\x12\xe4\x01\n" +
	"\bAddHosts\x126.yandex.cloud.mdb.mysql.v1alpha.AddClusterHostsRequest\x1a!.yandex.cloud.operation.Operation\"}\xb2\xd2*0\n" +
	"\x17AddClusterHostsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02C:\x01*\">/managed-mysql/v1alpha/clusters/{cluster_id}/hosts:batchCreate\x12\xee\x01\n" +
	"\vDeleteHosts\x129.yandex.cloud.mdb.mysql.v1alpha.DeleteClusterHostsRequest\x1a!.yandex.cloud.operation.Operation\"\x80\x01\xb2\xd2*3\n" +
	"\x1aDeleteClusterHostsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02C:\x01*\">/managed-mysql/v1alpha/clusters/{cluster_id}/hosts:batchDeleteBn\n" +
	"\"yandex.cloud.api.mdb.mysql.v1alphaZHgithub.com/yandex-cloud/go-genproto/yandex/cloud/mdb/mysql/v1alpha;mysqlb\x06proto3"

var (
	file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescData []byte
)

func file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDesc), len(file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDesc)))
	})
	return file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDescData
}

var file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_goTypes = []any{
	(ListClusterLogsRequest_ServiceType)(0), // 0: yandex.cloud.mdb.mysql.v1alpha.ListClusterLogsRequest.ServiceType
	(*GetClusterRequest)(nil),               // 1: yandex.cloud.mdb.mysql.v1alpha.GetClusterRequest
	(*ListClustersRequest)(nil),             // 2: yandex.cloud.mdb.mysql.v1alpha.ListClustersRequest
	(*ListClustersResponse)(nil),            // 3: yandex.cloud.mdb.mysql.v1alpha.ListClustersResponse
	(*CreateClusterRequest)(nil),            // 4: yandex.cloud.mdb.mysql.v1alpha.CreateClusterRequest
	(*CreateClusterMetadata)(nil),           // 5: yandex.cloud.mdb.mysql.v1alpha.CreateClusterMetadata
	(*UpdateClusterRequest)(nil),            // 6: yandex.cloud.mdb.mysql.v1alpha.UpdateClusterRequest
	(*UpdateClusterMetadata)(nil),           // 7: yandex.cloud.mdb.mysql.v1alpha.UpdateClusterMetadata
	(*DeleteClusterRequest)(nil),            // 8: yandex.cloud.mdb.mysql.v1alpha.DeleteClusterRequest
	(*DeleteClusterMetadata)(nil),           // 9: yandex.cloud.mdb.mysql.v1alpha.DeleteClusterMetadata
	(*BackupClusterRequest)(nil),            // 10: yandex.cloud.mdb.mysql.v1alpha.BackupClusterRequest
	(*BackupClusterMetadata)(nil),           // 11: yandex.cloud.mdb.mysql.v1alpha.BackupClusterMetadata
	(*RestoreClusterRequest)(nil),           // 12: yandex.cloud.mdb.mysql.v1alpha.RestoreClusterRequest
	(*RestoreClusterMetadata)(nil),          // 13: yandex.cloud.mdb.mysql.v1alpha.RestoreClusterMetadata
	(*LogRecord)(nil),                       // 14: yandex.cloud.mdb.mysql.v1alpha.LogRecord
	(*ListClusterLogsRequest)(nil),          // 15: yandex.cloud.mdb.mysql.v1alpha.ListClusterLogsRequest
	(*ListClusterLogsResponse)(nil),         // 16: yandex.cloud.mdb.mysql.v1alpha.ListClusterLogsResponse
	(*ListClusterOperationsRequest)(nil),    // 17: yandex.cloud.mdb.mysql.v1alpha.ListClusterOperationsRequest
	(*ListClusterOperationsResponse)(nil),   // 18: yandex.cloud.mdb.mysql.v1alpha.ListClusterOperationsResponse
	(*ListClusterBackupsRequest)(nil),       // 19: yandex.cloud.mdb.mysql.v1alpha.ListClusterBackupsRequest
	(*ListClusterBackupsResponse)(nil),      // 20: yandex.cloud.mdb.mysql.v1alpha.ListClusterBackupsResponse
	(*ListClusterHostsRequest)(nil),         // 21: yandex.cloud.mdb.mysql.v1alpha.ListClusterHostsRequest
	(*ListClusterHostsResponse)(nil),        // 22: yandex.cloud.mdb.mysql.v1alpha.ListClusterHostsResponse
	(*AddClusterHostsRequest)(nil),          // 23: yandex.cloud.mdb.mysql.v1alpha.AddClusterHostsRequest
	(*AddClusterHostsMetadata)(nil),         // 24: yandex.cloud.mdb.mysql.v1alpha.AddClusterHostsMetadata
	(*DeleteClusterHostsRequest)(nil),       // 25: yandex.cloud.mdb.mysql.v1alpha.DeleteClusterHostsRequest
	(*DeleteClusterHostsMetadata)(nil),      // 26: yandex.cloud.mdb.mysql.v1alpha.DeleteClusterHostsMetadata
	(*StartClusterRequest)(nil),             // 27: yandex.cloud.mdb.mysql.v1alpha.StartClusterRequest
	(*StartClusterMetadata)(nil),            // 28: yandex.cloud.mdb.mysql.v1alpha.StartClusterMetadata
	(*StopClusterRequest)(nil),              // 29: yandex.cloud.mdb.mysql.v1alpha.StopClusterRequest
	(*StopClusterMetadata)(nil),             // 30: yandex.cloud.mdb.mysql.v1alpha.StopClusterMetadata
	(*UpdateClusterHostsMetadata)(nil),      // 31: yandex.cloud.mdb.mysql.v1alpha.UpdateClusterHostsMetadata
	(*HostSpec)(nil),                        // 32: yandex.cloud.mdb.mysql.v1alpha.HostSpec
	(*ConfigSpec)(nil),                      // 33: yandex.cloud.mdb.mysql.v1alpha.ConfigSpec
	nil,                                     // 34: yandex.cloud.mdb.mysql.v1alpha.CreateClusterRequest.LabelsEntry
	nil,                                     // 35: yandex.cloud.mdb.mysql.v1alpha.UpdateClusterRequest.LabelsEntry
	nil,                                     // 36: yandex.cloud.mdb.mysql.v1alpha.RestoreClusterRequest.LabelsEntry
	nil,                                     // 37: yandex.cloud.mdb.mysql.v1alpha.LogRecord.MessageEntry
	(*Cluster)(nil),                         // 38: yandex.cloud.mdb.mysql.v1alpha.Cluster
	(Cluster_Environment)(0),                // 39: yandex.cloud.mdb.mysql.v1alpha.Cluster.Environment
	(*DatabaseSpec)(nil),                    // 40: yandex.cloud.mdb.mysql.v1alpha.DatabaseSpec
	(*UserSpec)(nil),                        // 41: yandex.cloud.mdb.mysql.v1alpha.UserSpec
	(*fieldmaskpb.FieldMask)(nil),           // 42: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),           // 43: google.protobuf.Timestamp
	(*operation.Operation)(nil),             // 44: yandex.cloud.operation.Operation
	(*Backup)(nil),                          // 45: yandex.cloud.mdb.mysql.v1alpha.Backup
	(*Host)(nil),                            // 46: yandex.cloud.mdb.mysql.v1alpha.Host
	(*config.MysqlConfig5_7)(nil),           // 47: yandex.cloud.mdb.mysql.v1alpha.config.MysqlConfig5_7
	(*Resources)(nil),                       // 48: yandex.cloud.mdb.mysql.v1alpha.Resources
	(*timeofday.TimeOfDay)(nil),             // 49: google.type.TimeOfDay
}
var file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_depIdxs = []int32{
	38, // 0: yandex.cloud.mdb.mysql.v1alpha.ListClustersResponse.clusters:type_name -> yandex.cloud.mdb.mysql.v1alpha.Cluster
	34, // 1: yandex.cloud.mdb.mysql.v1alpha.CreateClusterRequest.labels:type_name -> yandex.cloud.mdb.mysql.v1alpha.CreateClusterRequest.LabelsEntry
	39, // 2: yandex.cloud.mdb.mysql.v1alpha.CreateClusterRequest.environment:type_name -> yandex.cloud.mdb.mysql.v1alpha.Cluster.Environment
	33, // 3: yandex.cloud.mdb.mysql.v1alpha.CreateClusterRequest.config_spec:type_name -> yandex.cloud.mdb.mysql.v1alpha.ConfigSpec
	40, // 4: yandex.cloud.mdb.mysql.v1alpha.CreateClusterRequest.database_specs:type_name -> yandex.cloud.mdb.mysql.v1alpha.DatabaseSpec
	41, // 5: yandex.cloud.mdb.mysql.v1alpha.CreateClusterRequest.user_specs:type_name -> yandex.cloud.mdb.mysql.v1alpha.UserSpec
	32, // 6: yandex.cloud.mdb.mysql.v1alpha.CreateClusterRequest.host_specs:type_name -> yandex.cloud.mdb.mysql.v1alpha.HostSpec
	42, // 7: yandex.cloud.mdb.mysql.v1alpha.UpdateClusterRequest.update_mask:type_name -> google.protobuf.FieldMask
	35, // 8: yandex.cloud.mdb.mysql.v1alpha.UpdateClusterRequest.labels:type_name -> yandex.cloud.mdb.mysql.v1alpha.UpdateClusterRequest.LabelsEntry
	33, // 9: yandex.cloud.mdb.mysql.v1alpha.UpdateClusterRequest.config_spec:type_name -> yandex.cloud.mdb.mysql.v1alpha.ConfigSpec
	43, // 10: yandex.cloud.mdb.mysql.v1alpha.RestoreClusterRequest.time:type_name -> google.protobuf.Timestamp
	36, // 11: yandex.cloud.mdb.mysql.v1alpha.RestoreClusterRequest.labels:type_name -> yandex.cloud.mdb.mysql.v1alpha.RestoreClusterRequest.LabelsEntry
	39, // 12: yandex.cloud.mdb.mysql.v1alpha.RestoreClusterRequest.environment:type_name -> yandex.cloud.mdb.mysql.v1alpha.Cluster.Environment
	33, // 13: yandex.cloud.mdb.mysql.v1alpha.RestoreClusterRequest.config_spec:type_name -> yandex.cloud.mdb.mysql.v1alpha.ConfigSpec
	32, // 14: yandex.cloud.mdb.mysql.v1alpha.RestoreClusterRequest.host_specs:type_name -> yandex.cloud.mdb.mysql.v1alpha.HostSpec
	43, // 15: yandex.cloud.mdb.mysql.v1alpha.LogRecord.timestamp:type_name -> google.protobuf.Timestamp
	37, // 16: yandex.cloud.mdb.mysql.v1alpha.LogRecord.message:type_name -> yandex.cloud.mdb.mysql.v1alpha.LogRecord.MessageEntry
	0,  // 17: yandex.cloud.mdb.mysql.v1alpha.ListClusterLogsRequest.service_type:type_name -> yandex.cloud.mdb.mysql.v1alpha.ListClusterLogsRequest.ServiceType
	43, // 18: yandex.cloud.mdb.mysql.v1alpha.ListClusterLogsRequest.from_time:type_name -> google.protobuf.Timestamp
	43, // 19: yandex.cloud.mdb.mysql.v1alpha.ListClusterLogsRequest.to_time:type_name -> google.protobuf.Timestamp
	14, // 20: yandex.cloud.mdb.mysql.v1alpha.ListClusterLogsResponse.logs:type_name -> yandex.cloud.mdb.mysql.v1alpha.LogRecord
	44, // 21: yandex.cloud.mdb.mysql.v1alpha.ListClusterOperationsResponse.operations:type_name -> yandex.cloud.operation.Operation
	45, // 22: yandex.cloud.mdb.mysql.v1alpha.ListClusterBackupsResponse.backups:type_name -> yandex.cloud.mdb.mysql.v1alpha.Backup
	46, // 23: yandex.cloud.mdb.mysql.v1alpha.ListClusterHostsResponse.hosts:type_name -> yandex.cloud.mdb.mysql.v1alpha.Host
	32, // 24: yandex.cloud.mdb.mysql.v1alpha.AddClusterHostsRequest.host_specs:type_name -> yandex.cloud.mdb.mysql.v1alpha.HostSpec
	47, // 25: yandex.cloud.mdb.mysql.v1alpha.ConfigSpec.mysql_config_5_7:type_name -> yandex.cloud.mdb.mysql.v1alpha.config.MysqlConfig5_7
	48, // 26: yandex.cloud.mdb.mysql.v1alpha.ConfigSpec.resources:type_name -> yandex.cloud.mdb.mysql.v1alpha.Resources
	49, // 27: yandex.cloud.mdb.mysql.v1alpha.ConfigSpec.backup_window_start:type_name -> google.type.TimeOfDay
	1,  // 28: yandex.cloud.mdb.mysql.v1alpha.ClusterService.Get:input_type -> yandex.cloud.mdb.mysql.v1alpha.GetClusterRequest
	2,  // 29: yandex.cloud.mdb.mysql.v1alpha.ClusterService.List:input_type -> yandex.cloud.mdb.mysql.v1alpha.ListClustersRequest
	4,  // 30: yandex.cloud.mdb.mysql.v1alpha.ClusterService.Create:input_type -> yandex.cloud.mdb.mysql.v1alpha.CreateClusterRequest
	6,  // 31: yandex.cloud.mdb.mysql.v1alpha.ClusterService.Update:input_type -> yandex.cloud.mdb.mysql.v1alpha.UpdateClusterRequest
	8,  // 32: yandex.cloud.mdb.mysql.v1alpha.ClusterService.Delete:input_type -> yandex.cloud.mdb.mysql.v1alpha.DeleteClusterRequest
	27, // 33: yandex.cloud.mdb.mysql.v1alpha.ClusterService.Start:input_type -> yandex.cloud.mdb.mysql.v1alpha.StartClusterRequest
	29, // 34: yandex.cloud.mdb.mysql.v1alpha.ClusterService.Stop:input_type -> yandex.cloud.mdb.mysql.v1alpha.StopClusterRequest
	10, // 35: yandex.cloud.mdb.mysql.v1alpha.ClusterService.Backup:input_type -> yandex.cloud.mdb.mysql.v1alpha.BackupClusterRequest
	12, // 36: yandex.cloud.mdb.mysql.v1alpha.ClusterService.Restore:input_type -> yandex.cloud.mdb.mysql.v1alpha.RestoreClusterRequest
	15, // 37: yandex.cloud.mdb.mysql.v1alpha.ClusterService.ListLogs:input_type -> yandex.cloud.mdb.mysql.v1alpha.ListClusterLogsRequest
	17, // 38: yandex.cloud.mdb.mysql.v1alpha.ClusterService.ListOperations:input_type -> yandex.cloud.mdb.mysql.v1alpha.ListClusterOperationsRequest
	19, // 39: yandex.cloud.mdb.mysql.v1alpha.ClusterService.ListBackups:input_type -> yandex.cloud.mdb.mysql.v1alpha.ListClusterBackupsRequest
	21, // 40: yandex.cloud.mdb.mysql.v1alpha.ClusterService.ListHosts:input_type -> yandex.cloud.mdb.mysql.v1alpha.ListClusterHostsRequest
	23, // 41: yandex.cloud.mdb.mysql.v1alpha.ClusterService.AddHosts:input_type -> yandex.cloud.mdb.mysql.v1alpha.AddClusterHostsRequest
	25, // 42: yandex.cloud.mdb.mysql.v1alpha.ClusterService.DeleteHosts:input_type -> yandex.cloud.mdb.mysql.v1alpha.DeleteClusterHostsRequest
	38, // 43: yandex.cloud.mdb.mysql.v1alpha.ClusterService.Get:output_type -> yandex.cloud.mdb.mysql.v1alpha.Cluster
	3,  // 44: yandex.cloud.mdb.mysql.v1alpha.ClusterService.List:output_type -> yandex.cloud.mdb.mysql.v1alpha.ListClustersResponse
	44, // 45: yandex.cloud.mdb.mysql.v1alpha.ClusterService.Create:output_type -> yandex.cloud.operation.Operation
	44, // 46: yandex.cloud.mdb.mysql.v1alpha.ClusterService.Update:output_type -> yandex.cloud.operation.Operation
	44, // 47: yandex.cloud.mdb.mysql.v1alpha.ClusterService.Delete:output_type -> yandex.cloud.operation.Operation
	44, // 48: yandex.cloud.mdb.mysql.v1alpha.ClusterService.Start:output_type -> yandex.cloud.operation.Operation
	44, // 49: yandex.cloud.mdb.mysql.v1alpha.ClusterService.Stop:output_type -> yandex.cloud.operation.Operation
	44, // 50: yandex.cloud.mdb.mysql.v1alpha.ClusterService.Backup:output_type -> yandex.cloud.operation.Operation
	44, // 51: yandex.cloud.mdb.mysql.v1alpha.ClusterService.Restore:output_type -> yandex.cloud.operation.Operation
	16, // 52: yandex.cloud.mdb.mysql.v1alpha.ClusterService.ListLogs:output_type -> yandex.cloud.mdb.mysql.v1alpha.ListClusterLogsResponse
	18, // 53: yandex.cloud.mdb.mysql.v1alpha.ClusterService.ListOperations:output_type -> yandex.cloud.mdb.mysql.v1alpha.ListClusterOperationsResponse
	20, // 54: yandex.cloud.mdb.mysql.v1alpha.ClusterService.ListBackups:output_type -> yandex.cloud.mdb.mysql.v1alpha.ListClusterBackupsResponse
	22, // 55: yandex.cloud.mdb.mysql.v1alpha.ClusterService.ListHosts:output_type -> yandex.cloud.mdb.mysql.v1alpha.ListClusterHostsResponse
	44, // 56: yandex.cloud.mdb.mysql.v1alpha.ClusterService.AddHosts:output_type -> yandex.cloud.operation.Operation
	44, // 57: yandex.cloud.mdb.mysql.v1alpha.ClusterService.DeleteHosts:output_type -> yandex.cloud.operation.Operation
	43, // [43:58] is the sub-list for method output_type
	28, // [28:43] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_init() }
func file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_init() {
	if File_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto != nil {
		return
	}
	file_yandex_cloud_mdb_mysql_v1alpha_backup_proto_init()
	file_yandex_cloud_mdb_mysql_v1alpha_cluster_proto_init()
	file_yandex_cloud_mdb_mysql_v1alpha_database_proto_init()
	file_yandex_cloud_mdb_mysql_v1alpha_user_proto_init()
	file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes[32].OneofWrappers = []any{
		(*ConfigSpec_MysqlConfig_5_7)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDesc), len(file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto = out.File
	file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_goTypes = nil
	file_yandex_cloud_mdb_mysql_v1alpha_cluster_service_proto_depIdxs = nil
}

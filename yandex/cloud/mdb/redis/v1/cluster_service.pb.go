// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/mdb/redis/v1/cluster_service.proto

package redis

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	config "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/redis/v1/config"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	timeofday "google.golang.org/genproto/googleapis/type/timeofday"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RescheduleMaintenanceRequest_RescheduleType int32

const (
	RescheduleMaintenanceRequest_RESCHEDULE_TYPE_UNSPECIFIED RescheduleMaintenanceRequest_RescheduleType = 0
	// Start the maintenance operation immediately.
	RescheduleMaintenanceRequest_IMMEDIATE RescheduleMaintenanceRequest_RescheduleType = 1
	// Start the maintenance operation within the next available maintenance window.
	RescheduleMaintenanceRequest_NEXT_AVAILABLE_WINDOW RescheduleMaintenanceRequest_RescheduleType = 2
	// Start the maintenance operation at the specific time.
	RescheduleMaintenanceRequest_SPECIFIC_TIME RescheduleMaintenanceRequest_RescheduleType = 3
)

// Enum value maps for RescheduleMaintenanceRequest_RescheduleType.
var (
	RescheduleMaintenanceRequest_RescheduleType_name = map[int32]string{
		0: "RESCHEDULE_TYPE_UNSPECIFIED",
		1: "IMMEDIATE",
		2: "NEXT_AVAILABLE_WINDOW",
		3: "SPECIFIC_TIME",
	}
	RescheduleMaintenanceRequest_RescheduleType_value = map[string]int32{
		"RESCHEDULE_TYPE_UNSPECIFIED": 0,
		"IMMEDIATE":                   1,
		"NEXT_AVAILABLE_WINDOW":       2,
		"SPECIFIC_TIME":               3,
	}
)

func (x RescheduleMaintenanceRequest_RescheduleType) Enum() *RescheduleMaintenanceRequest_RescheduleType {
	p := new(RescheduleMaintenanceRequest_RescheduleType)
	*p = x
	return p
}

func (x RescheduleMaintenanceRequest_RescheduleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RescheduleMaintenanceRequest_RescheduleType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_enumTypes[0].Descriptor()
}

func (RescheduleMaintenanceRequest_RescheduleType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_enumTypes[0]
}

func (x RescheduleMaintenanceRequest_RescheduleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RescheduleMaintenanceRequest_RescheduleType.Descriptor instead.
func (RescheduleMaintenanceRequest_RescheduleType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{25, 0}
}

type ListClusterLogsRequest_ServiceType int32

const (
	ListClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED ListClusterLogsRequest_ServiceType = 0
	// Logs of Redis activity.
	ListClusterLogsRequest_REDIS ListClusterLogsRequest_ServiceType = 1
)

// Enum value maps for ListClusterLogsRequest_ServiceType.
var (
	ListClusterLogsRequest_ServiceType_name = map[int32]string{
		0: "SERVICE_TYPE_UNSPECIFIED",
		1: "REDIS",
	}
	ListClusterLogsRequest_ServiceType_value = map[string]int32{
		"SERVICE_TYPE_UNSPECIFIED": 0,
		"REDIS":                    1,
	}
)

func (x ListClusterLogsRequest_ServiceType) Enum() *ListClusterLogsRequest_ServiceType {
	p := new(ListClusterLogsRequest_ServiceType)
	*p = x
	return p
}

func (x ListClusterLogsRequest_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListClusterLogsRequest_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_enumTypes[1].Descriptor()
}

func (ListClusterLogsRequest_ServiceType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_enumTypes[1]
}

func (x ListClusterLogsRequest_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListClusterLogsRequest_ServiceType.Descriptor instead.
func (ListClusterLogsRequest_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{28, 0}
}

type StreamClusterLogsRequest_ServiceType int32

const (
	StreamClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED StreamClusterLogsRequest_ServiceType = 0
	// Logs of Redis activity.
	StreamClusterLogsRequest_REDIS StreamClusterLogsRequest_ServiceType = 1
)

// Enum value maps for StreamClusterLogsRequest_ServiceType.
var (
	StreamClusterLogsRequest_ServiceType_name = map[int32]string{
		0: "SERVICE_TYPE_UNSPECIFIED",
		1: "REDIS",
	}
	StreamClusterLogsRequest_ServiceType_value = map[string]int32{
		"SERVICE_TYPE_UNSPECIFIED": 0,
		"REDIS":                    1,
	}
)

func (x StreamClusterLogsRequest_ServiceType) Enum() *StreamClusterLogsRequest_ServiceType {
	p := new(StreamClusterLogsRequest_ServiceType)
	*p = x
	return p
}

func (x StreamClusterLogsRequest_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamClusterLogsRequest_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_enumTypes[2].Descriptor()
}

func (StreamClusterLogsRequest_ServiceType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_enumTypes[2]
}

func (x StreamClusterLogsRequest_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamClusterLogsRequest_ServiceType.Descriptor instead.
func (StreamClusterLogsRequest_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{31, 0}
}

type EnableShardingClusterMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterId     string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableShardingClusterMetadata) Reset() {
	*x = EnableShardingClusterMetadata{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableShardingClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableShardingClusterMetadata) ProtoMessage() {}

func (x *EnableShardingClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableShardingClusterMetadata.ProtoReflect.Descriptor instead.
func (*EnableShardingClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{0}
}

func (x *EnableShardingClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type EnableShardingClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ID of the Redis cluster to return.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableShardingClusterRequest) Reset() {
	*x = EnableShardingClusterRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableShardingClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableShardingClusterRequest) ProtoMessage() {}

func (x *EnableShardingClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableShardingClusterRequest.ProtoReflect.Descriptor instead.
func (*EnableShardingClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{1}
}

func (x *EnableShardingClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type GetClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster to return.
	// To get the cluster ID use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterRequest) Reset() {
	*x = GetClusterRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterRequest) ProtoMessage() {}

func (x *GetClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterRequest.ProtoReflect.Descriptor instead.
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ListClustersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to list Redis clusters in.
	// To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClustersResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the [ListClustersResponse.next_page_token]
	// returned by the previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters clusters listed in the response.
	// The expression must specify:
	// 1. The field name. Currently you can only use filtering with the [Cluster.name] field.
	// 2. An `=` operator.
	// 3. The value in double quotes (`"`). Must be 3-63 characters long and match the regular expression `[a-z]([-a-z0-9]{,61}[a-z0-9])?`.
	Filter        string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListClustersRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListClustersRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClustersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListClustersRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListClustersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of Redis clusters.
	Clusters []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClustersRequest.page_size], use the [next_page_token] as the value
	// for the [ListClustersRequest.page_token] parameter in the next list request. Each subsequent
	// list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersResponse) Reset() {
	*x = ListClustersResponse{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersResponse) ProtoMessage() {}

func (x *ListClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersResponse.ProtoReflect.Descriptor instead.
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListClustersResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ListClustersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to create the Redis cluster in.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the Redis cluster. The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the Redis cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the Redis cluster as `key:value` pairs. Maximum 64 per cluster.
	// For example, "project": "mvp" or "source": "dictionary".
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Deployment environment of the Redis cluster.
	Environment Cluster_Environment `protobuf:"varint,5,opt,name=environment,proto3,enum=yandex.cloud.mdb.redis.v1.Cluster_Environment" json:"environment,omitempty"`
	// Configuration and resources for hosts that should be created for the Redis cluster.
	ConfigSpec *ConfigSpec `protobuf:"bytes,6,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// Individual configurations for hosts that should be created for the Redis cluster.
	HostSpecs []*HostSpec `protobuf:"bytes,7,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// ID of the network to create the cluster in.
	NetworkId string `protobuf:"bytes,10,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Redis cluster mode on/off.
	Sharded bool `protobuf:"varint,11,opt,name=sharded,proto3" json:"sharded,omitempty"`
	// User security groups
	SecurityGroupIds []string `protobuf:"bytes,12,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// TLS port and functionality on\off
	TlsEnabled *wrapperspb.BoolValue `protobuf:"bytes,13,opt,name=tls_enabled,json=tlsEnabled,proto3" json:"tls_enabled,omitempty"`
	// Deletion Protection inhibits deletion of the cluster
	DeletionProtection bool `protobuf:"varint,14,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// Persistence mode
	PersistenceMode Cluster_PersistenceMode `protobuf:"varint,15,opt,name=persistence_mode,json=persistenceMode,proto3,enum=yandex.cloud.mdb.redis.v1.Cluster_PersistenceMode" json:"persistence_mode,omitempty"`
	// Enable FQDN instead of ip
	AnnounceHostnames bool `protobuf:"varint,16,opt,name=announce_hostnames,json=announceHostnames,proto3" json:"announce_hostnames,omitempty"`
	// Window of maintenance operations.
	MaintenanceWindow *MaintenanceWindow `protobuf:"bytes,17,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"`
	// Descriptions of users to be created in the Redis cluster.
	UserSpecs []*UserSpec `protobuf:"bytes,18,rep,name=user_specs,json=userSpecs,proto3" json:"user_specs,omitempty"`
	// Allows to use ACL users to auth in sentinel
	AuthSentinel bool `protobuf:"varint,19,opt,name=auth_sentinel,json=authSentinel,proto3" json:"auth_sentinel,omitempty"`
	// ID of the key to encrypt cluster disks.
	DiskEncryptionKeyId *wrapperspb.StringValue `protobuf:"bytes,20,opt,name=disk_encryption_key_id,json=diskEncryptionKeyId,proto3" json:"disk_encryption_key_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CreateClusterRequest) Reset() {
	*x = CreateClusterRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterRequest) ProtoMessage() {}

func (x *CreateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateClusterRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateClusterRequest) GetEnvironment() Cluster_Environment {
	if x != nil {
		return x.Environment
	}
	return Cluster_ENVIRONMENT_UNSPECIFIED
}

func (x *CreateClusterRequest) GetConfigSpec() *ConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *CreateClusterRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

func (x *CreateClusterRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *CreateClusterRequest) GetSharded() bool {
	if x != nil {
		return x.Sharded
	}
	return false
}

func (x *CreateClusterRequest) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *CreateClusterRequest) GetTlsEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.TlsEnabled
	}
	return nil
}

func (x *CreateClusterRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *CreateClusterRequest) GetPersistenceMode() Cluster_PersistenceMode {
	if x != nil {
		return x.PersistenceMode
	}
	return Cluster_ON
}

func (x *CreateClusterRequest) GetAnnounceHostnames() bool {
	if x != nil {
		return x.AnnounceHostnames
	}
	return false
}

func (x *CreateClusterRequest) GetMaintenanceWindow() *MaintenanceWindow {
	if x != nil {
		return x.MaintenanceWindow
	}
	return nil
}

func (x *CreateClusterRequest) GetUserSpecs() []*UserSpec {
	if x != nil {
		return x.UserSpecs
	}
	return nil
}

func (x *CreateClusterRequest) GetAuthSentinel() bool {
	if x != nil {
		return x.AuthSentinel
	}
	return false
}

func (x *CreateClusterRequest) GetDiskEncryptionKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.DiskEncryptionKeyId
	}
	return nil
}

type CreateClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster that is being created.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClusterMetadata) Reset() {
	*x = CreateClusterMetadata{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterMetadata) ProtoMessage() {}

func (x *CreateClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterMetadata.ProtoReflect.Descriptor instead.
func (*CreateClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{6}
}

func (x *CreateClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type UpdateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster to update.
	// To get the Redis cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Field mask that specifies which fields of the Redis cluster should be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// New description of the Redis cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the Redis cluster as “ key:value “ pairs. Maximum 64 per cluster.
	// For example, "project": "mvp" or "source": "dictionary".
	//
	// The new set of labels will completely replace the old ones. To add a label, request the current
	// set with the [ClusterService.Get] method, then send an [ClusterService.Update] request with the new label added to the set.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// New configuration and resources for hosts in the cluster.
	ConfigSpec *ConfigSpec `protobuf:"bytes,5,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// New name for the cluster.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// New maintenance window settings for the cluster.
	MaintenanceWindow *MaintenanceWindow `protobuf:"bytes,7,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"`
	// User security groups
	SecurityGroupIds []string `protobuf:"bytes,8,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// Deletion Protection inhibits deletion of the cluster
	DeletionProtection bool `protobuf:"varint,9,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// Persistence mode
	PersistenceMode Cluster_PersistenceMode `protobuf:"varint,10,opt,name=persistence_mode,json=persistenceMode,proto3,enum=yandex.cloud.mdb.redis.v1.Cluster_PersistenceMode" json:"persistence_mode,omitempty"`
	// ID of the network to move the cluster to.
	NetworkId string `protobuf:"bytes,11,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Enable FQDN instead of ip
	AnnounceHostnames bool `protobuf:"varint,12,opt,name=announce_hostnames,json=announceHostnames,proto3" json:"announce_hostnames,omitempty"`
	// Allows to use ACL users to auth in sentinel
	AuthSentinel  bool `protobuf:"varint,13,opt,name=auth_sentinel,json=authSentinel,proto3" json:"auth_sentinel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterRequest) Reset() {
	*x = UpdateClusterRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterRequest) ProtoMessage() {}

func (x *UpdateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateClusterRequest) GetConfigSpec() *ConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *UpdateClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateClusterRequest) GetMaintenanceWindow() *MaintenanceWindow {
	if x != nil {
		return x.MaintenanceWindow
	}
	return nil
}

func (x *UpdateClusterRequest) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *UpdateClusterRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *UpdateClusterRequest) GetPersistenceMode() Cluster_PersistenceMode {
	if x != nil {
		return x.PersistenceMode
	}
	return Cluster_ON
}

func (x *UpdateClusterRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *UpdateClusterRequest) GetAnnounceHostnames() bool {
	if x != nil {
		return x.AnnounceHostnames
	}
	return false
}

func (x *UpdateClusterRequest) GetAuthSentinel() bool {
	if x != nil {
		return x.AuthSentinel
	}
	return false
}

type UpdateClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster that is being updated.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterMetadata) Reset() {
	*x = UpdateClusterMetadata{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterMetadata) ProtoMessage() {}

func (x *UpdateClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterMetadata.ProtoReflect.Descriptor instead.
func (*UpdateClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type DeleteClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster to delete.
	// To get the Redis cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type DeleteClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster that is being deleted.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterMetadata) Reset() {
	*x = DeleteClusterMetadata{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterMetadata) ProtoMessage() {}

func (x *DeleteClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterMetadata.ProtoReflect.Descriptor instead.
func (*DeleteClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StartClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster to start.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterRequest) Reset() {
	*x = StartClusterRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterRequest) ProtoMessage() {}

func (x *StartClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterRequest.ProtoReflect.Descriptor instead.
func (*StartClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{11}
}

func (x *StartClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StartClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterMetadata) Reset() {
	*x = StartClusterMetadata{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterMetadata) ProtoMessage() {}

func (x *StartClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterMetadata.ProtoReflect.Descriptor instead.
func (*StartClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{12}
}

func (x *StartClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StopClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster to stop.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopClusterRequest) Reset() {
	*x = StopClusterRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClusterRequest) ProtoMessage() {}

func (x *StopClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClusterRequest.ProtoReflect.Descriptor instead.
func (*StopClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{13}
}

func (x *StopClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StopClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopClusterMetadata) Reset() {
	*x = StopClusterMetadata{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClusterMetadata) ProtoMessage() {}

func (x *StopClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClusterMetadata.ProtoReflect.Descriptor instead.
func (*StopClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{14}
}

func (x *StopClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type MoveClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster to move.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the destination folder.
	DestinationFolderId string `protobuf:"bytes,2,opt,name=destination_folder_id,json=destinationFolderId,proto3" json:"destination_folder_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MoveClusterRequest) Reset() {
	*x = MoveClusterRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveClusterRequest) ProtoMessage() {}

func (x *MoveClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveClusterRequest.ProtoReflect.Descriptor instead.
func (*MoveClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{15}
}

func (x *MoveClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *MoveClusterRequest) GetDestinationFolderId() string {
	if x != nil {
		return x.DestinationFolderId
	}
	return ""
}

type MoveClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster being moved.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the source folder.
	SourceFolderId string `protobuf:"bytes,2,opt,name=source_folder_id,json=sourceFolderId,proto3" json:"source_folder_id,omitempty"`
	// ID of the destination folder.
	DestinationFolderId string `protobuf:"bytes,3,opt,name=destination_folder_id,json=destinationFolderId,proto3" json:"destination_folder_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MoveClusterMetadata) Reset() {
	*x = MoveClusterMetadata{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveClusterMetadata) ProtoMessage() {}

func (x *MoveClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveClusterMetadata.ProtoReflect.Descriptor instead.
func (*MoveClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{16}
}

func (x *MoveClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *MoveClusterMetadata) GetSourceFolderId() string {
	if x != nil {
		return x.SourceFolderId
	}
	return ""
}

func (x *MoveClusterMetadata) GetDestinationFolderId() string {
	if x != nil {
		return x.DestinationFolderId
	}
	return ""
}

type UpdateClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster to update hosts in.
	// To get the Redis cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// New configurations to apply to hosts.
	UpdateHostSpecs []*UpdateHostSpec `protobuf:"bytes,2,rep,name=update_host_specs,json=updateHostSpecs,proto3" json:"update_host_specs,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateClusterHostsRequest) Reset() {
	*x = UpdateClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterHostsRequest) ProtoMessage() {}

func (x *UpdateClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterHostsRequest) GetUpdateHostSpecs() []*UpdateHostSpec {
	if x != nil {
		return x.UpdateHostSpecs
	}
	return nil
}

type UpdateClusterHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster to update hosts in.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts that are being updated.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterHostsMetadata) Reset() {
	*x = UpdateClusterHostsMetadata{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterHostsMetadata) ProtoMessage() {}

func (x *UpdateClusterHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterHostsMetadata.ProtoReflect.Descriptor instead.
func (*UpdateClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateClusterHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterHostsMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type BackupClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster to back up.
	// To get the Redis cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupClusterRequest) Reset() {
	*x = BackupClusterRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupClusterRequest) ProtoMessage() {}

func (x *BackupClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupClusterRequest.ProtoReflect.Descriptor instead.
func (*BackupClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{19}
}

func (x *BackupClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type BackupClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster that is being backed up.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupClusterMetadata) Reset() {
	*x = BackupClusterMetadata{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupClusterMetadata) ProtoMessage() {}

func (x *BackupClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupClusterMetadata.ProtoReflect.Descriptor instead.
func (*BackupClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{20}
}

func (x *BackupClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type RestoreClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the backup to create a cluster from.
	// To get the backup ID, use a [ClusterService.ListBackups] request.
	BackupId string `protobuf:"bytes,1,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	// Name of the new Redis cluster. The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the new Redis cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the Redis cluster as “ key:value “ pairs. Maximum 64 per cluster.
	// For example, "project": "mvp" or "source": "dictionary".
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Deployment environment of the new Redis cluster.
	Environment Cluster_Environment `protobuf:"varint,5,opt,name=environment,proto3,enum=yandex.cloud.mdb.redis.v1.Cluster_Environment" json:"environment,omitempty"`
	// Configuration for the Redis cluster to be created.
	ConfigSpec *ConfigSpec `protobuf:"bytes,6,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// Configurations for Redis hosts that should be created for
	// the cluster that is being created from the backup.
	HostSpecs []*HostSpec `protobuf:"bytes,7,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// ID of the network to create the Redis cluster in.
	NetworkId string `protobuf:"bytes,8,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// ID of the folder to create the Redis cluster in.
	FolderId string `protobuf:"bytes,9,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// User security groups
	SecurityGroupIds []string `protobuf:"bytes,10,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// TLS port and functionality on\off
	TlsEnabled *wrapperspb.BoolValue `protobuf:"bytes,11,opt,name=tls_enabled,json=tlsEnabled,proto3" json:"tls_enabled,omitempty"`
	// Persistence mode
	PersistenceMode Cluster_PersistenceMode `protobuf:"varint,12,opt,name=persistence_mode,json=persistenceMode,proto3,enum=yandex.cloud.mdb.redis.v1.Cluster_PersistenceMode" json:"persistence_mode,omitempty"`
	// Deletion Protection inhibits deletion of the cluster
	DeletionProtection bool `protobuf:"varint,13,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// Enable FQDN instead of ip
	AnnounceHostnames bool `protobuf:"varint,14,opt,name=announce_hostnames,json=announceHostnames,proto3" json:"announce_hostnames,omitempty"`
	// Window of maintenance operations.
	MaintenanceWindow *MaintenanceWindow `protobuf:"bytes,15,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"`
	// Allows to use ACL users to auth in sentinel
	AuthSentinel bool `protobuf:"varint,16,opt,name=auth_sentinel,json=authSentinel,proto3" json:"auth_sentinel,omitempty"`
	// ID of the key to encrypt cluster disks.
	DiskEncryptionKeyId *wrapperspb.StringValue `protobuf:"bytes,18,opt,name=disk_encryption_key_id,json=diskEncryptionKeyId,proto3" json:"disk_encryption_key_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RestoreClusterRequest) Reset() {
	*x = RestoreClusterRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreClusterRequest) ProtoMessage() {}

func (x *RestoreClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreClusterRequest.ProtoReflect.Descriptor instead.
func (*RestoreClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{21}
}

func (x *RestoreClusterRequest) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

func (x *RestoreClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RestoreClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RestoreClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RestoreClusterRequest) GetEnvironment() Cluster_Environment {
	if x != nil {
		return x.Environment
	}
	return Cluster_ENVIRONMENT_UNSPECIFIED
}

func (x *RestoreClusterRequest) GetConfigSpec() *ConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *RestoreClusterRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

func (x *RestoreClusterRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *RestoreClusterRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *RestoreClusterRequest) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *RestoreClusterRequest) GetTlsEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.TlsEnabled
	}
	return nil
}

func (x *RestoreClusterRequest) GetPersistenceMode() Cluster_PersistenceMode {
	if x != nil {
		return x.PersistenceMode
	}
	return Cluster_ON
}

func (x *RestoreClusterRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *RestoreClusterRequest) GetAnnounceHostnames() bool {
	if x != nil {
		return x.AnnounceHostnames
	}
	return false
}

func (x *RestoreClusterRequest) GetMaintenanceWindow() *MaintenanceWindow {
	if x != nil {
		return x.MaintenanceWindow
	}
	return nil
}

func (x *RestoreClusterRequest) GetAuthSentinel() bool {
	if x != nil {
		return x.AuthSentinel
	}
	return false
}

func (x *RestoreClusterRequest) GetDiskEncryptionKeyId() *wrapperspb.StringValue {
	if x != nil {
		return x.DiskEncryptionKeyId
	}
	return nil
}

type RestoreClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the new Redis cluster that is being created from a backup.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the backup that is being used for creating a cluster.
	BackupId      string `protobuf:"bytes,2,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestoreClusterMetadata) Reset() {
	*x = RestoreClusterMetadata{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreClusterMetadata) ProtoMessage() {}

func (x *RestoreClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreClusterMetadata.ProtoReflect.Descriptor instead.
func (*RestoreClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{22}
}

func (x *RestoreClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RestoreClusterMetadata) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

type StartClusterFailoverRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster to start failover on.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// List of hostnames which should not be masters. Can be empty for sentinel clusters or can contain multiple hosts for sharded clusters.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterFailoverRequest) Reset() {
	*x = StartClusterFailoverRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterFailoverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterFailoverRequest) ProtoMessage() {}

func (x *StartClusterFailoverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterFailoverRequest.ProtoReflect.Descriptor instead.
func (*StartClusterFailoverRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{23}
}

func (x *StartClusterFailoverRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *StartClusterFailoverRequest) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type StartClusterFailoverMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster on which failover will be initiated.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// List of hostnames which should not be masters. Can be empty for sentinel clusters or can contain multiple hosts for sharded clusters.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterFailoverMetadata) Reset() {
	*x = StartClusterFailoverMetadata{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterFailoverMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterFailoverMetadata) ProtoMessage() {}

func (x *StartClusterFailoverMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterFailoverMetadata.ProtoReflect.Descriptor instead.
func (*StartClusterFailoverMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{24}
}

func (x *StartClusterFailoverMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *StartClusterFailoverMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type RescheduleMaintenanceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster to reschedule the maintenance operation for.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The type of reschedule request.
	RescheduleType RescheduleMaintenanceRequest_RescheduleType `protobuf:"varint,2,opt,name=reschedule_type,json=rescheduleType,proto3,enum=yandex.cloud.mdb.redis.v1.RescheduleMaintenanceRequest_RescheduleType" json:"reschedule_type,omitempty"`
	// The time until which this maintenance operation should be delayed. The value should be ahead of the first time when the maintenance operation has been scheduled for no more than two weeks. The value can also point to the past moment of time if [reschedule_type.IMMEDIATE] reschedule type is chosen.
	DelayedUntil  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=delayed_until,json=delayedUntil,proto3" json:"delayed_until,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RescheduleMaintenanceRequest) Reset() {
	*x = RescheduleMaintenanceRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RescheduleMaintenanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RescheduleMaintenanceRequest) ProtoMessage() {}

func (x *RescheduleMaintenanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RescheduleMaintenanceRequest.ProtoReflect.Descriptor instead.
func (*RescheduleMaintenanceRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{25}
}

func (x *RescheduleMaintenanceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RescheduleMaintenanceRequest) GetRescheduleType() RescheduleMaintenanceRequest_RescheduleType {
	if x != nil {
		return x.RescheduleType
	}
	return RescheduleMaintenanceRequest_RESCHEDULE_TYPE_UNSPECIFIED
}

func (x *RescheduleMaintenanceRequest) GetDelayedUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.DelayedUntil
	}
	return nil
}

type RescheduleMaintenanceMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ID of the Redis cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required. The time until which this maintenance operation is to be delayed.
	DelayedUntil  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=delayed_until,json=delayedUntil,proto3" json:"delayed_until,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RescheduleMaintenanceMetadata) Reset() {
	*x = RescheduleMaintenanceMetadata{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RescheduleMaintenanceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RescheduleMaintenanceMetadata) ProtoMessage() {}

func (x *RescheduleMaintenanceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RescheduleMaintenanceMetadata.ProtoReflect.Descriptor instead.
func (*RescheduleMaintenanceMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{26}
}

func (x *RescheduleMaintenanceMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RescheduleMaintenanceMetadata) GetDelayedUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.DelayedUntil
	}
	return nil
}

type LogRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Log record timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Contents of the log record.
	Message       map[string]string `protobuf:"bytes,2,rep,name=message,proto3" json:"message,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogRecord) Reset() {
	*x = LogRecord{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRecord) ProtoMessage() {}

func (x *LogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRecord.ProtoReflect.Descriptor instead.
func (*LogRecord) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{27}
}

func (x *LogRecord) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LogRecord) GetMessage() map[string]string {
	if x != nil {
		return x.Message
	}
	return nil
}

type ListClusterLogsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster to request logs for.
	// To get the Redis cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Columns from the logs table to request.
	// If no columns are specified, entire log records are returned.
	ColumnFilter []string                           `protobuf:"bytes,2,rep,name=column_filter,json=columnFilter,proto3" json:"column_filter,omitempty"`
	ServiceType  ListClusterLogsRequest_ServiceType `protobuf:"varint,3,opt,name=service_type,json=serviceType,proto3,enum=yandex.cloud.mdb.redis.v1.ListClusterLogsRequest_ServiceType" json:"service_type,omitempty"`
	// Start timestamp for the logs request, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	FromTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=from_time,json=fromTime,proto3" json:"from_time,omitempty"`
	// End timestamp for the logs request, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	ToTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=to_time,json=toTime,proto3" json:"to_time,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterLogsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListClusterLogsResponse.next_page_token] returned by the previous list request.
	PageToken     string `protobuf:"bytes,7,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterLogsRequest) Reset() {
	*x = ListClusterLogsRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterLogsRequest) ProtoMessage() {}

func (x *ListClusterLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterLogsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterLogsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{28}
}

func (x *ListClusterLogsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterLogsRequest) GetColumnFilter() []string {
	if x != nil {
		return x.ColumnFilter
	}
	return nil
}

func (x *ListClusterLogsRequest) GetServiceType() ListClusterLogsRequest_ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return ListClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED
}

func (x *ListClusterLogsRequest) GetFromTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FromTime
	}
	return nil
}

func (x *ListClusterLogsRequest) GetToTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ToTime
	}
	return nil
}

func (x *ListClusterLogsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterLogsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterLogsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Requested log records.
	Logs []*LogRecord `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterLogsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterLogsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	// This value is interchangeable with `next_record_token` from StreamLogs method.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterLogsResponse) Reset() {
	*x = ListClusterLogsResponse{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterLogsResponse) ProtoMessage() {}

func (x *ListClusterLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterLogsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterLogsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{29}
}

func (x *ListClusterLogsResponse) GetLogs() []*LogRecord {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *ListClusterLogsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type StreamLogRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// One of the requested log records.
	Record *LogRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	// This token allows you to continue streaming logs starting from the exact
	// same record. To continue streaming, specify value of `next_record_token`
	// as value for `record_token` parameter in the next StreamLogs request.
	// This value is interchangeable with `next_page_token` from ListLogs method.
	NextRecordToken string `protobuf:"bytes,2,opt,name=next_record_token,json=nextRecordToken,proto3" json:"next_record_token,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StreamLogRecord) Reset() {
	*x = StreamLogRecord{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamLogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamLogRecord) ProtoMessage() {}

func (x *StreamLogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamLogRecord.ProtoReflect.Descriptor instead.
func (*StreamLogRecord) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{30}
}

func (x *StreamLogRecord) GetRecord() *LogRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *StreamLogRecord) GetNextRecordToken() string {
	if x != nil {
		return x.NextRecordToken
	}
	return ""
}

type StreamClusterLogsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ID of the Redis cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Columns from logs table to get in the response.
	ColumnFilter []string                             `protobuf:"bytes,2,rep,name=column_filter,json=columnFilter,proto3" json:"column_filter,omitempty"`
	ServiceType  StreamClusterLogsRequest_ServiceType `protobuf:"varint,3,opt,name=service_type,json=serviceType,proto3,enum=yandex.cloud.mdb.redis.v1.StreamClusterLogsRequest_ServiceType" json:"service_type,omitempty"`
	// Start timestamp for the logs request.
	FromTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=from_time,json=fromTime,proto3" json:"from_time,omitempty"`
	// End timestamp for the logs request.
	// If this field is not set, all existing logs will be sent and then the new ones as
	// they appear. In essence it has 'tail -f' semantics.
	ToTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=to_time,json=toTime,proto3" json:"to_time,omitempty"`
	// Record token. Set `record_token` to the `next_record_token` returned by a previous StreamLogs
	// request to start streaming from next log record.
	RecordToken string `protobuf:"bytes,6,opt,name=record_token,json=recordToken,proto3" json:"record_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression must specify:
	// 1. The field name. Currently filtering can be applied to the [LogRecord.logs.hostname] field
	// 2. An `=` operator.
	// 3. The value in double quotes (`"`). Must be 3-63 characters long and match the regular expression `[a-z][-a-z0-9]{1,61}[a-z0-9]`.
	// Examples of a filter `message.hostname='node1.db.cloud.yandex.net'`.
	Filter        string `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamClusterLogsRequest) Reset() {
	*x = StreamClusterLogsRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamClusterLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamClusterLogsRequest) ProtoMessage() {}

func (x *StreamClusterLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamClusterLogsRequest.ProtoReflect.Descriptor instead.
func (*StreamClusterLogsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{31}
}

func (x *StreamClusterLogsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *StreamClusterLogsRequest) GetColumnFilter() []string {
	if x != nil {
		return x.ColumnFilter
	}
	return nil
}

func (x *StreamClusterLogsRequest) GetServiceType() StreamClusterLogsRequest_ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return StreamClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED
}

func (x *StreamClusterLogsRequest) GetFromTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FromTime
	}
	return nil
}

func (x *StreamClusterLogsRequest) GetToTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ToTime
	}
	return nil
}

func (x *StreamClusterLogsRequest) GetRecordToken() string {
	if x != nil {
		return x.RecordToken
	}
	return ""
}

func (x *StreamClusterLogsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListClusterOperationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster to list operations for.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterOperationsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token.  To get the next page of results, set [page_token] to the [ListClusterOperationsResponse.next_page_token]
	// returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterOperationsRequest) Reset() {
	*x = ListClusterOperationsRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterOperationsRequest) ProtoMessage() {}

func (x *ListClusterOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterOperationsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{32}
}

func (x *ListClusterOperationsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterOperationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterOperationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterOperationsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of operations for the specified Redis cluster.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterOperationsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterOperationsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterOperationsResponse) Reset() {
	*x = ListClusterOperationsResponse{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterOperationsResponse) ProtoMessage() {}

func (x *ListClusterOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterOperationsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{33}
}

func (x *ListClusterOperationsResponse) GetOperations() []*operation.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListClusterOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListClusterBackupsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster.
	// To get the Redis cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterBackupsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token.  To get the next page of results, set [page_token] to the [ListClusterBackupsResponse.next_page_token]
	// returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterBackupsRequest) Reset() {
	*x = ListClusterBackupsRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterBackupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterBackupsRequest) ProtoMessage() {}

func (x *ListClusterBackupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterBackupsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterBackupsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{34}
}

func (x *ListClusterBackupsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterBackupsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterBackupsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterBackupsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of Redis backups.
	Backups []*Backup `protobuf:"bytes,1,rep,name=backups,proto3" json:"backups,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterBackupsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterBackupsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterBackupsResponse) Reset() {
	*x = ListClusterBackupsResponse{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterBackupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterBackupsResponse) ProtoMessage() {}

func (x *ListClusterBackupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterBackupsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterBackupsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{35}
}

func (x *ListClusterBackupsResponse) GetBackups() []*Backup {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *ListClusterBackupsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster.
	// To get the Redis cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterHostsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token.  To get the next page of results, set [page_token] to the [ListClusterHostsResponse.next_page_token]
	// returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterHostsRequest) Reset() {
	*x = ListClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterHostsRequest) ProtoMessage() {}

func (x *ListClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{36}
}

func (x *ListClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterHostsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterHostsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterHostsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of hosts for the cluster.
	Hosts []*Host `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterHostsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterHostsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterHostsResponse) Reset() {
	*x = ListClusterHostsResponse{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterHostsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterHostsResponse) ProtoMessage() {}

func (x *ListClusterHostsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterHostsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterHostsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{37}
}

func (x *ListClusterHostsResponse) GetHosts() []*Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *ListClusterHostsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type AddClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster to add hosts to.
	// To get the Redis cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Configurations for Redis hosts that should be added to the cluster.
	HostSpecs     []*HostSpec `protobuf:"bytes,2,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterHostsRequest) Reset() {
	*x = AddClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterHostsRequest) ProtoMessage() {}

func (x *AddClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*AddClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{38}
}

func (x *AddClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterHostsRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

type AddClusterHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster to which the hosts are being added.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts that are being added to the cluster.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterHostsMetadata) Reset() {
	*x = AddClusterHostsMetadata{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterHostsMetadata) ProtoMessage() {}

func (x *AddClusterHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterHostsMetadata.ProtoReflect.Descriptor instead.
func (*AddClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{39}
}

func (x *AddClusterHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterHostsMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type DeleteClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster to remove hosts from.
	// To get the Redis cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts to delete.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterHostsRequest) Reset() {
	*x = DeleteClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterHostsRequest) ProtoMessage() {}

func (x *DeleteClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{40}
}

func (x *DeleteClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterHostsRequest) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type DeleteClusterHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster to remove hosts from.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts that are being deleted.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterHostsMetadata) Reset() {
	*x = DeleteClusterHostsMetadata{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterHostsMetadata) ProtoMessage() {}

func (x *DeleteClusterHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterHostsMetadata.ProtoReflect.Descriptor instead.
func (*DeleteClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{41}
}

func (x *DeleteClusterHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterHostsMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type GetClusterShardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster the shard belongs to.
	// To get the cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of Redis shard to return.
	// To get the shard name use a [ClusterService.ListShards] request.
	ShardName     string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterShardRequest) Reset() {
	*x = GetClusterShardRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterShardRequest) ProtoMessage() {}

func (x *GetClusterShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterShardRequest.ProtoReflect.Descriptor instead.
func (*GetClusterShardRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{42}
}

func (x *GetClusterShardRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetClusterShardRequest) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

type ListClusterShardsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster to list shards in.
	// To get the cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size],
	// the service returns a [ListClusterShardsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListClusterShardsResponse.next_page_token] returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterShardsRequest) Reset() {
	*x = ListClusterShardsRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterShardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterShardsRequest) ProtoMessage() {}

func (x *ListClusterShardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterShardsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterShardsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{43}
}

func (x *ListClusterShardsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterShardsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterShardsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterShardsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of Redis shards.
	Shards []*Shard `protobuf:"bytes,1,rep,name=shards,proto3" json:"shards,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterShardsRequest.page_size], use
	// the [next_page_token] as the value
	// for the [ListClusterShardsRequest.page_token] query parameter
	// in the next list request. Each subsequent list request will have its own
	// [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterShardsResponse) Reset() {
	*x = ListClusterShardsResponse{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterShardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterShardsResponse) ProtoMessage() {}

func (x *ListClusterShardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterShardsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterShardsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{44}
}

func (x *ListClusterShardsResponse) GetShards() []*Shard {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *ListClusterShardsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type AddClusterShardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster to create a shard in.
	// To get the cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the shard.
	// The name must be unique within the cluster.
	ShardName string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	// Configurations for Redis hosts that should be created with the shard.
	// Must contain at least one element.
	HostSpecs     []*HostSpec `protobuf:"bytes,4,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterShardRequest) Reset() {
	*x = AddClusterShardRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterShardRequest) ProtoMessage() {}

func (x *AddClusterShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterShardRequest.ProtoReflect.Descriptor instead.
func (*AddClusterShardRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{45}
}

func (x *AddClusterShardRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterShardRequest) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

func (x *AddClusterShardRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

type AddClusterShardMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster that a shard is being added to.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the Redis shard that is being created.
	ShardName     string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterShardMetadata) Reset() {
	*x = AddClusterShardMetadata{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterShardMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterShardMetadata) ProtoMessage() {}

func (x *AddClusterShardMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterShardMetadata.ProtoReflect.Descriptor instead.
func (*AddClusterShardMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{46}
}

func (x *AddClusterShardMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterShardMetadata) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

type DeleteClusterShardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster the shard belongs to.
	// To get the cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the Redis shard to delete.
	// To get the shard name use a [ClusterService.ListShards] request.
	ShardName     string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterShardRequest) Reset() {
	*x = DeleteClusterShardRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterShardRequest) ProtoMessage() {}

func (x *DeleteClusterShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterShardRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterShardRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{47}
}

func (x *DeleteClusterShardRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterShardRequest) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

type DeleteClusterShardMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster the shard belongs to.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the Redis shard that is being deleted.
	ShardName     string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterShardMetadata) Reset() {
	*x = DeleteClusterShardMetadata{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterShardMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterShardMetadata) ProtoMessage() {}

func (x *DeleteClusterShardMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterShardMetadata.ProtoReflect.Descriptor instead.
func (*DeleteClusterShardMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{48}
}

func (x *DeleteClusterShardMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterShardMetadata) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

type RebalanceClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster to rebalance.
	// To get the cluster ID use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RebalanceClusterRequest) Reset() {
	*x = RebalanceClusterRequest{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RebalanceClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebalanceClusterRequest) ProtoMessage() {}

func (x *RebalanceClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebalanceClusterRequest.ProtoReflect.Descriptor instead.
func (*RebalanceClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{49}
}

func (x *RebalanceClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type RebalanceClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Redis cluster that is being rebalancing.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RebalanceClusterMetadata) Reset() {
	*x = RebalanceClusterMetadata{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RebalanceClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebalanceClusterMetadata) ProtoMessage() {}

func (x *RebalanceClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebalanceClusterMetadata.ProtoReflect.Descriptor instead.
func (*RebalanceClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{50}
}

func (x *RebalanceClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type UpdateHostSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the host to update.
	// To get the Redis host name, use a [ClusterService.ListHosts] request.
	HostName string `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// A replica with a low priority number is considered better for promotion.
	// A replica with priority of 0 will never be selected by Redis Sentinel for promotion.
	// Works only for non-sharded clusters. Default value is 100.
	ReplicaPriority *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=replica_priority,json=replicaPriority,proto3" json:"replica_priority,omitempty"`
	// Whether the host should get a public IP address on update.
	AssignPublicIp bool `protobuf:"varint,3,opt,name=assign_public_ip,json=assignPublicIp,proto3" json:"assign_public_ip,omitempty"`
	// Field mask that specifies which fields of the Redis host should be updated.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateHostSpec) Reset() {
	*x = UpdateHostSpec{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHostSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHostSpec) ProtoMessage() {}

func (x *UpdateHostSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHostSpec.ProtoReflect.Descriptor instead.
func (*UpdateHostSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{51}
}

func (x *UpdateHostSpec) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *UpdateHostSpec) GetReplicaPriority() *wrapperspb.Int64Value {
	if x != nil {
		return x.ReplicaPriority
	}
	return nil
}

func (x *UpdateHostSpec) GetAssignPublicIp() bool {
	if x != nil {
		return x.AssignPublicIp
	}
	return false
}

func (x *UpdateHostSpec) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type HostSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the availability zone where the host resides.
	// To get a list of available zones, use the [yandex.cloud.compute.v1.ZoneService.List] request.
	ZoneId string `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// ID of the subnet that the host should belong to. This subnet should be a part
	// of the network that the cluster belongs to.
	// The ID of the network is set in the field [Cluster.network_id].
	SubnetId string `protobuf:"bytes,2,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// ID of the Redis shard the host belongs to.
	// To get the shard ID use a [ClusterService.ListShards] request.
	ShardName string `protobuf:"bytes,3,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	// A replica with a low priority number is considered better for promotion.
	// A replica with priority of 0 will never be selected by Redis Sentinel for promotion.
	// Works only for non-sharded clusters. Default value is 100.
	ReplicaPriority *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=replica_priority,json=replicaPriority,proto3" json:"replica_priority,omitempty"`
	// Whether the host should get a public IP address on creation.
	//
	// Possible values:
	// * false - don't assign a public IP to the host.
	// * true - the host should have a public IP address.
	AssignPublicIp bool `protobuf:"varint,5,opt,name=assign_public_ip,json=assignPublicIp,proto3" json:"assign_public_ip,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HostSpec) Reset() {
	*x = HostSpec{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostSpec) ProtoMessage() {}

func (x *HostSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostSpec.ProtoReflect.Descriptor instead.
func (*HostSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{52}
}

func (x *HostSpec) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *HostSpec) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *HostSpec) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

func (x *HostSpec) GetReplicaPriority() *wrapperspb.Int64Value {
	if x != nil {
		return x.ReplicaPriority
	}
	return nil
}

func (x *HostSpec) GetAssignPublicIp() bool {
	if x != nil {
		return x.AssignPublicIp
	}
	return false
}

type ConfigSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version of Redis used in the cluster.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Configuration of a Redis cluster.
	//
	// Types that are valid to be assigned to RedisSpec:
	//
	//	*ConfigSpec_RedisConfig_5_0
	//	*ConfigSpec_RedisConfig_6_0
	//	*ConfigSpec_RedisConfig_6_2
	//	*ConfigSpec_RedisConfig_7_0
	RedisSpec isConfigSpec_RedisSpec `protobuf_oneof:"redis_spec"`
	// Resources allocated to Redis hosts.
	Resources *Resources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	// Time to start the daily backup, in the UTC timezone.
	BackupWindowStart *timeofday.TimeOfDay `protobuf:"bytes,4,opt,name=backup_window_start,json=backupWindowStart,proto3" json:"backup_window_start,omitempty"`
	// Access policy to DB
	Access *Access `protobuf:"bytes,5,opt,name=access,proto3" json:"access,omitempty"`
	// Unified configuration of a Redis cluster
	Redis *config.RedisConfig `protobuf:"bytes,11,opt,name=redis,proto3" json:"redis,omitempty"`
	// Disk size autoscaling settings
	DiskSizeAutoscaling *DiskSizeAutoscaling `protobuf:"bytes,12,opt,name=disk_size_autoscaling,json=diskSizeAutoscaling,proto3" json:"disk_size_autoscaling,omitempty"`
	// Retain period of automatically created backup in days
	BackupRetainPeriodDays *wrapperspb.Int64Value `protobuf:"bytes,13,opt,name=backup_retain_period_days,json=backupRetainPeriodDays,proto3" json:"backup_retain_period_days,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ConfigSpec) Reset() {
	*x = ConfigSpec{}
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSpec) ProtoMessage() {}

func (x *ConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSpec.ProtoReflect.Descriptor instead.
func (*ConfigSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP(), []int{53}
}

func (x *ConfigSpec) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ConfigSpec) GetRedisSpec() isConfigSpec_RedisSpec {
	if x != nil {
		return x.RedisSpec
	}
	return nil
}

func (x *ConfigSpec) GetRedisConfig_5_0() *config.RedisConfig5_0 {
	if x != nil {
		if x, ok := x.RedisSpec.(*ConfigSpec_RedisConfig_5_0); ok {
			return x.RedisConfig_5_0
		}
	}
	return nil
}

func (x *ConfigSpec) GetRedisConfig_6_0() *config.RedisConfig6_0 {
	if x != nil {
		if x, ok := x.RedisSpec.(*ConfigSpec_RedisConfig_6_0); ok {
			return x.RedisConfig_6_0
		}
	}
	return nil
}

func (x *ConfigSpec) GetRedisConfig_6_2() *config.RedisConfig6_2 {
	if x != nil {
		if x, ok := x.RedisSpec.(*ConfigSpec_RedisConfig_6_2); ok {
			return x.RedisConfig_6_2
		}
	}
	return nil
}

func (x *ConfigSpec) GetRedisConfig_7_0() *config.RedisConfig7_0 {
	if x != nil {
		if x, ok := x.RedisSpec.(*ConfigSpec_RedisConfig_7_0); ok {
			return x.RedisConfig_7_0
		}
	}
	return nil
}

func (x *ConfigSpec) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ConfigSpec) GetBackupWindowStart() *timeofday.TimeOfDay {
	if x != nil {
		return x.BackupWindowStart
	}
	return nil
}

func (x *ConfigSpec) GetAccess() *Access {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *ConfigSpec) GetRedis() *config.RedisConfig {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *ConfigSpec) GetDiskSizeAutoscaling() *DiskSizeAutoscaling {
	if x != nil {
		return x.DiskSizeAutoscaling
	}
	return nil
}

func (x *ConfigSpec) GetBackupRetainPeriodDays() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackupRetainPeriodDays
	}
	return nil
}

type isConfigSpec_RedisSpec interface {
	isConfigSpec_RedisSpec()
}

type ConfigSpec_RedisConfig_5_0 struct {
	RedisConfig_5_0 *config.RedisConfig5_0 `protobuf:"bytes,2,opt,name=redis_config_5_0,json=redisConfig_5_0,proto3,oneof"`
}

type ConfigSpec_RedisConfig_6_0 struct {
	RedisConfig_6_0 *config.RedisConfig6_0 `protobuf:"bytes,6,opt,name=redis_config_6_0,json=redisConfig_6_0,proto3,oneof"`
}

type ConfigSpec_RedisConfig_6_2 struct {
	RedisConfig_6_2 *config.RedisConfig6_2 `protobuf:"bytes,7,opt,name=redis_config_6_2,json=redisConfig_6_2,proto3,oneof"`
}

type ConfigSpec_RedisConfig_7_0 struct {
	RedisConfig_7_0 *config.RedisConfig7_0 `protobuf:"bytes,8,opt,name=redis_config_7_0,json=redisConfig_7_0,proto3,oneof"`
}

func (*ConfigSpec_RedisConfig_5_0) isConfigSpec_RedisSpec() {}

func (*ConfigSpec_RedisConfig_6_0) isConfigSpec_RedisSpec() {}

func (*ConfigSpec_RedisConfig_6_2) isConfigSpec_RedisSpec() {}

func (*ConfigSpec_RedisConfig_7_0) isConfigSpec_RedisSpec() {}

var File_yandex_cloud_mdb_redis_v1_cluster_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDesc = "" +
	"\n" +
	"/yandex/cloud/mdb/redis/v1/cluster_service.proto\x12\x19yandex.cloud.mdb.redis.v1\x1a\x1cgoogle/api/annotations.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1bgoogle/type/timeofday.proto\x1a yandex/cloud/api/operation.proto\x1a&yandex/cloud/mdb/redis/v1/backup.proto\x1a'yandex/cloud/mdb/redis/v1/cluster.proto\x1a,yandex/cloud/mdb/redis/v1/config/redis.proto\x1a/yandex/cloud/mdb/redis/v1/config/redis5_0.proto\x1a/yandex/cloud/mdb/redis/v1/config/redis6_0.proto\x1a/yandex/cloud/mdb/redis/v1/config/redis6_2.proto\x1a/yandex/cloud/mdb/redis/v1/config/redis7_0.proto\x1a+yandex/cloud/mdb/redis/v1/maintenance.proto\x1a$yandex/cloud/mdb/redis/v1/user.proto\x1a&yandex/cloud/operation/operation.proto\x1a\x1dyandex/cloud/validation.proto\">\n" +
	"\x1dEnableShardingClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"K\n" +
	"\x1cEnableShardingClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"@\n" +
	"\x11GetClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"\xb7\x01\n" +
	"\x13ListClustersRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\x12\"\n" +
	"\x06filter\x18\x04 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"~\n" +
	"\x14ListClustersResponse\x12>\n" +
	"\bclusters\x18\x01 \x03(\v2\".yandex.cloud.mdb.redis.v1.ClusterR\bclusters\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xfb\t\n" +
	"\x14CreateClusterRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x122\n" +
	"\x04name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x04name\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x90\x01\n" +
	"\x06labels\x18\x04 \x03(\v2;.yandex.cloud.mdb.redis.v1.CreateClusterRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x04<=63R\x06labels\x12V\n" +
	"\venvironment\x18\x05 \x01(\x0e2..yandex.cloud.mdb.redis.v1.Cluster.EnvironmentB\x04\xe8\xc71\x01R\venvironment\x12L\n" +
	"\vconfig_spec\x18\x06 \x01(\v2%.yandex.cloud.mdb.redis.v1.ConfigSpecB\x04\xe8\xc71\x01R\n" +
	"configSpec\x12J\n" +
	"\n" +
	"host_specs\x18\a \x03(\v2#.yandex.cloud.mdb.redis.v1.HostSpecB\x06\x82\xc81\x02>0R\thostSpecs\x12+\n" +
	"\n" +
	"network_id\x18\n" +
	" \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tnetworkId\x12\x18\n" +
	"\asharded\x18\v \x01(\bR\asharded\x12,\n" +
	"\x12security_group_ids\x18\f \x03(\tR\x10securityGroupIds\x12;\n" +
	"\vtls_enabled\x18\r \x01(\v2\x1a.google.protobuf.BoolValueR\n" +
	"tlsEnabled\x12/\n" +
	"\x13deletion_protection\x18\x0e \x01(\bR\x12deletionProtection\x12]\n" +
	"\x10persistence_mode\x18\x0f \x01(\x0e22.yandex.cloud.mdb.redis.v1.Cluster.PersistenceModeR\x0fpersistenceMode\x12-\n" +
	"\x12announce_hostnames\x18\x10 \x01(\bR\x11announceHostnames\x12[\n" +
	"\x12maintenance_window\x18\x11 \x01(\v2,.yandex.cloud.mdb.redis.v1.MaintenanceWindowR\x11maintenanceWindow\x12K\n" +
	"\n" +
	"user_specs\x18\x12 \x03(\v2#.yandex.cloud.mdb.redis.v1.UserSpecB\a\x82\xc81\x03>=0R\tuserSpecs\x12#\n" +
	"\rauth_sentinel\x18\x13 \x01(\bR\fauthSentinel\x12Q\n" +
	"\x16disk_encryption_key_id\x18\x14 \x01(\v2\x1c.google.protobuf.StringValueR\x13diskEncryptionKeyId\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01J\x04\b\b\x10\n" +
	"\"6\n" +
	"\x15CreateClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\x8b\a\n" +
	"\x14UpdateClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x90\x01\n" +
	"\x06labels\x18\x04 \x03(\v2;.yandex.cloud.mdb.redis.v1.UpdateClusterRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x04<=63R\x06labels\x12F\n" +
	"\vconfig_spec\x18\x05 \x01(\v2%.yandex.cloud.mdb.redis.v1.ConfigSpecR\n" +
	"configSpec\x12.\n" +
	"\x04name\x18\x06 \x01(\tB\x1a\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x04name\x12[\n" +
	"\x12maintenance_window\x18\a \x01(\v2,.yandex.cloud.mdb.redis.v1.MaintenanceWindowR\x11maintenanceWindow\x12,\n" +
	"\x12security_group_ids\x18\b \x03(\tR\x10securityGroupIds\x12/\n" +
	"\x13deletion_protection\x18\t \x01(\bR\x12deletionProtection\x12]\n" +
	"\x10persistence_mode\x18\n" +
	" \x01(\x0e22.yandex.cloud.mdb.redis.v1.Cluster.PersistenceModeR\x0fpersistenceMode\x12'\n" +
	"\n" +
	"network_id\x18\v \x01(\tB\b\x8a\xc81\x04<=50R\tnetworkId\x12-\n" +
	"\x12announce_hostnames\x18\f \x01(\bR\x11announceHostnames\x12#\n" +
	"\rauth_sentinel\x18\r \x01(\bR\fauthSentinel\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"6\n" +
	"\x15UpdateClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"C\n" +
	"\x14DeleteClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"6\n" +
	"\x15DeleteClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"B\n" +
	"\x13StartClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"5\n" +
	"\x14StartClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"A\n" +
	"\x12StopClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"4\n" +
	"\x13StopClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\x83\x01\n" +
	"\x12MoveClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12@\n" +
	"\x15destination_folder_id\x18\x02 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x13destinationFolderId\"\x92\x01\n" +
	"\x13MoveClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12(\n" +
	"\x10source_folder_id\x18\x02 \x01(\tR\x0esourceFolderId\x122\n" +
	"\x15destination_folder_id\x18\x03 \x01(\tR\x13destinationFolderId\"\xa7\x01\n" +
	"\x19UpdateClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12]\n" +
	"\x11update_host_specs\x18\x02 \x03(\v2).yandex.cloud.mdb.redis.v1.UpdateHostSpecB\x06\x82\xc81\x02>0R\x0fupdateHostSpecs\"Z\n" +
	"\x1aUpdateClusterHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"C\n" +
	"\x14BackupClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"6\n" +
	"\x15BackupClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\xb5\t\n" +
	"\x15RestoreClusterRequest\x12!\n" +
	"\tbackup_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\bbackupId\x122\n" +
	"\x04name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x04name\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x91\x01\n" +
	"\x06labels\x18\x04 \x03(\v2<.yandex.cloud.mdb.redis.v1.RestoreClusterRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x04<=63R\x06labels\x12V\n" +
	"\venvironment\x18\x05 \x01(\x0e2..yandex.cloud.mdb.redis.v1.Cluster.EnvironmentB\x04\xe8\xc71\x01R\venvironment\x12L\n" +
	"\vconfig_spec\x18\x06 \x01(\v2%.yandex.cloud.mdb.redis.v1.ConfigSpecB\x04\xe8\xc71\x01R\n" +
	"configSpec\x12J\n" +
	"\n" +
	"host_specs\x18\a \x03(\v2#.yandex.cloud.mdb.redis.v1.HostSpecB\x06\x82\xc81\x02>0R\thostSpecs\x12+\n" +
	"\n" +
	"network_id\x18\b \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tnetworkId\x12%\n" +
	"\tfolder_id\x18\t \x01(\tB\b\x8a\xc81\x04<=50R\bfolderId\x12,\n" +
	"\x12security_group_ids\x18\n" +
	" \x03(\tR\x10securityGroupIds\x12;\n" +
	"\vtls_enabled\x18\v \x01(\v2\x1a.google.protobuf.BoolValueR\n" +
	"tlsEnabled\x12]\n" +
	"\x10persistence_mode\x18\f \x01(\x0e22.yandex.cloud.mdb.redis.v1.Cluster.PersistenceModeR\x0fpersistenceMode\x12/\n" +
	"\x13deletion_protection\x18\r \x01(\bR\x12deletionProtection\x12-\n" +
	"\x12announce_hostnames\x18\x0e \x01(\bR\x11announceHostnames\x12[\n" +
	"\x12maintenance_window\x18\x0f \x01(\v2,.yandex.cloud.mdb.redis.v1.MaintenanceWindowR\x11maintenanceWindow\x12#\n" +
	"\rauth_sentinel\x18\x10 \x01(\bR\fauthSentinel\x12Q\n" +
	"\x16disk_encryption_key_id\x18\x12 \x01(\v2\x1c.google.protobuf.StringValueR\x13diskEncryptionKeyId\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01J\x04\b\x11\x10\x12\"T\n" +
	"\x16RestoreClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1b\n" +
	"\tbackup_id\x18\x02 \x01(\tR\bbackupId\"t\n" +
	"\x1bStartClusterFailoverRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12(\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tB\t\x8a\xc81\x05<=253R\thostNames\"\\\n" +
	"\x1cStartClusterFailoverMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"\xf3\x02\n" +
	"\x1cRescheduleMaintenanceRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12u\n" +
	"\x0freschedule_type\x18\x02 \x01(\x0e2F.yandex.cloud.mdb.redis.v1.RescheduleMaintenanceRequest.RescheduleTypeB\x04\xe8\xc71\x01R\x0erescheduleType\x12?\n" +
	"\rdelayed_until\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\fdelayedUntil\"n\n" +
	"\x0eRescheduleType\x12\x1f\n" +
	"\x1bRESCHEDULE_TYPE_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tIMMEDIATE\x10\x01\x12\x19\n" +
	"\x15NEXT_AVAILABLE_WINDOW\x10\x02\x12\x11\n" +
	"\rSPECIFIC_TIME\x10\x03\"\x85\x01\n" +
	"\x1dRescheduleMaintenanceMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12?\n" +
	"\rdelayed_until\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\fdelayedUntilJ\x04\b\x02\x10\x04\"\xce\x01\n" +
	"\tLogRecord\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12K\n" +
	"\amessage\x18\x02 \x03(\v21.yandex.cloud.mdb.redis.v1.LogRecord.MessageEntryR\amessage\x1a:\n" +
	"\fMessageEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc5\x03\n" +
	"\x16ListClusterLogsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12#\n" +
	"\rcolumn_filter\x18\x02 \x03(\tR\fcolumnFilter\x12`\n" +
	"\fservice_type\x18\x03 \x01(\x0e2=.yandex.cloud.mdb.redis.v1.ListClusterLogsRequest.ServiceTypeR\vserviceType\x127\n" +
	"\tfrom_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\bfromTime\x123\n" +
	"\ato_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x06toTime\x12'\n" +
	"\tpage_size\x18\x06 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\a \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"6\n" +
	"\vServiceType\x12\x1c\n" +
	"\x18SERVICE_TYPE_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05REDIS\x10\x01\"{\n" +
	"\x17ListClusterLogsResponse\x128\n" +
	"\x04logs\x18\x01 \x03(\v2$.yandex.cloud.mdb.redis.v1.LogRecordR\x04logs\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"{\n" +
	"\x0fStreamLogRecord\x12<\n" +
	"\x06record\x18\x01 \x01(\v2$.yandex.cloud.mdb.redis.v1.LogRecordR\x06record\x12*\n" +
	"\x11next_record_token\x18\x02 \x01(\tR\x0fnextRecordToken\"\xc8\x03\n" +
	"\x18StreamClusterLogsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12#\n" +
	"\rcolumn_filter\x18\x02 \x03(\tR\fcolumnFilter\x12b\n" +
	"\fservice_type\x18\x03 \x01(\x0e2?.yandex.cloud.mdb.redis.v1.StreamClusterLogsRequest.ServiceTypeR\vserviceType\x127\n" +
	"\tfrom_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\bfromTime\x123\n" +
	"\ato_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x06toTime\x12,\n" +
	"\frecord_token\x18\x06 \x01(\tB\t\x8a\xc81\x05<=100R\vrecordToken\x12\"\n" +
	"\x06filter\x18\a \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"6\n" +
	"\vServiceType\x12\x1c\n" +
	"\x18SERVICE_TYPE_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05REDIS\x10\x01\"\x9e\x01\n" +
	"\x1cListClusterOperationsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x8a\x01\n" +
	"\x1dListClusterOperationsResponse\x12A\n" +
	"\n" +
	"operations\x18\x01 \x03(\v2!.yandex.cloud.operation.OperationR\n" +
	"operations\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x9b\x01\n" +
	"\x19ListClusterBackupsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x81\x01\n" +
	"\x1aListClusterBackupsResponse\x12;\n" +
	"\abackups\x18\x01 \x03(\v2!.yandex.cloud.mdb.redis.v1.BackupR\abackups\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x99\x01\n" +
	"\x17ListClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"y\n" +
	"\x18ListClusterHostsResponse\x125\n" +
	"\x05hosts\x18\x01 \x03(\v2\x1f.yandex.cloud.mdb.redis.v1.HostR\x05hosts\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x91\x01\n" +
	"\x16AddClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12J\n" +
	"\n" +
	"host_specs\x18\x02 \x03(\v2#.yandex.cloud.mdb.redis.v1.HostSpecB\x06\x82\xc81\x02>0R\thostSpecs\"W\n" +
	"\x17AddClusterHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"x\n" +
	"\x19DeleteClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12.\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tB\x0f\x82\xc81\x02>0\x8a\xc81\x05<=253R\thostNames\"Z\n" +
	"\x1aDeleteClusterHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"\x84\x01\n" +
	"\x16GetClusterShardRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12=\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\tshardName\"\x9a\x01\n" +
	"\x18ListClusterShardsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"}\n" +
	"\x19ListClusterShardsResponse\x128\n" +
	"\x06shards\x18\x01 \x03(\v2 .yandex.cloud.mdb.redis.v1.ShardR\x06shards\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xd6\x01\n" +
	"\x16AddClusterShardRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12=\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\tshardName\x12J\n" +
	"\n" +
	"host_specs\x18\x04 \x03(\v2#.yandex.cloud.mdb.redis.v1.HostSpecB\x06\x82\xc81\x02>0R\thostSpecsJ\x04\b\x03\x10\x04\"W\n" +
	"\x17AddClusterShardMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tR\tshardName\"\x87\x01\n" +
	"\x19DeleteClusterShardRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12=\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\tshardName\"Z\n" +
	"\x1aDeleteClusterShardMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tR\tshardName\"F\n" +
	"\x17RebalanceClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"9\n" +
	"\x18RebalanceClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\xe2\x01\n" +
	"\x0eUpdateHostSpec\x12!\n" +
	"\thost_name\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\bhostName\x12F\n" +
	"\x10replica_priority\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueR\x0freplicaPriority\x12(\n" +
	"\x10assign_public_ip\x18\x03 \x01(\bR\x0eassignPublicIp\x12;\n" +
	"\vupdate_mask\x18\x04 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\"\xed\x01\n" +
	"\bHostSpec\x12\x17\n" +
	"\azone_id\x18\x01 \x01(\tR\x06zoneId\x12\x1b\n" +
	"\tsubnet_id\x18\x02 \x01(\tR\bsubnetId\x129\n" +
	"\n" +
	"shard_name\x18\x03 \x01(\tB\x1a\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\tshardName\x12F\n" +
	"\x10replica_priority\x18\x04 \x01(\v2\x1b.google.protobuf.Int64ValueR\x0freplicaPriority\x12(\n" +
	"\x10assign_public_ip\x18\x05 \x01(\bR\x0eassignPublicIp\"\xfe\x06\n" +
	"\n" +
	"ConfigSpec\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12]\n" +
	"\x10redis_config_5_0\x18\x02 \x01(\v20.yandex.cloud.mdb.redis.v1.config.RedisConfig5_0H\x00R\x0fredisConfig_5_0\x12]\n" +
	"\x10redis_config_6_0\x18\x06 \x01(\v20.yandex.cloud.mdb.redis.v1.config.RedisConfig6_0H\x00R\x0fredisConfig_6_0\x12]\n" +
	"\x10redis_config_6_2\x18\a \x01(\v20.yandex.cloud.mdb.redis.v1.config.RedisConfig6_2H\x00R\x0fredisConfig_6_2\x12]\n" +
	"\x10redis_config_7_0\x18\b \x01(\v20.yandex.cloud.mdb.redis.v1.config.RedisConfig7_0H\x00R\x0fredisConfig_7_0\x12B\n" +
	"\tresources\x18\x03 \x01(\v2$.yandex.cloud.mdb.redis.v1.ResourcesR\tresources\x12F\n" +
	"\x13backup_window_start\x18\x04 \x01(\v2\x16.google.type.TimeOfDayR\x11backupWindowStart\x129\n" +
	"\x06access\x18\x05 \x01(\v2!.yandex.cloud.mdb.redis.v1.AccessR\x06access\x12C\n" +
	"\x05redis\x18\v \x01(\v2-.yandex.cloud.mdb.redis.v1.config.RedisConfigR\x05redis\x12b\n" +
	"\x15disk_size_autoscaling\x18\f \x01(\v2..yandex.cloud.mdb.redis.v1.DiskSizeAutoscalingR\x13diskSizeAutoscaling\x12V\n" +
	"\x19backup_retain_period_days\x18\r \x01(\v2\x1b.google.protobuf.Int64ValueR\x16backupRetainPeriodDaysB\f\n" +
	"\n" +
	"redis_specJ\x04\b\t\x10\v2\xed&\n" +
	"\x0eClusterService\x12\x88\x01\n" +
	"\x03Get\x12,.yandex.cloud.mdb.redis.v1.GetClusterRequest\x1a\".yandex.cloud.mdb.redis.v1.Cluster\"/\x82\xd3\xe4\x93\x02)\x12'/managed-redis/v1/clusters/{cluster_id}\x12\x8b\x01\n" +
	"\x04List\x12..yandex.cloud.mdb.redis.v1.ListClustersRequest\x1a/.yandex.cloud.mdb.redis.v1.ListClustersResponse\"\"\x82\xd3\xe4\x93\x02\x1c\x12\x1a/managed-redis/v1/clusters\x12\xa7\x01\n" +
	"\x06Create\x12/.yandex.cloud.mdb.redis.v1.CreateClusterRequest\x1a!.yandex.cloud.operation.Operation\"I\xb2\xd2* \n" +
	"\x15CreateClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02\x1f:\x01*\"\x1a/managed-redis/v1/clusters\x12\xb4\x01\n" +
	"\x06Update\x12/.yandex.cloud.mdb.redis.v1.UpdateClusterRequest\x1a!.yandex.cloud.operation.Operation\"V\xb2\xd2* \n" +
	"\x15UpdateClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02,:\x01*2'/managed-redis/v1/clusters/{cluster_id}\x12\xbf\x01\n" +
	"\x06Delete\x12/.yandex.cloud.mdb.redis.v1.DeleteClusterRequest\x1a!.yandex.cloud.operation.Operation\"a\xb2\xd2*.\n" +
	"\x15DeleteClusterMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02)*'/managed-redis/v1/clusters/{cluster_id}\x12\xb4\x01\n" +
	"\x05Start\x12..yandex.cloud.mdb.redis.v1.StartClusterRequest\x1a!.yandex.cloud.operation.Operation\"X\xb2\xd2*\x1f\n" +
	"\x14StartClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02/\"-/managed-redis/v1/clusters/{cluster_id}:start\x12\xb0\x01\n" +
	"\x04Stop\x12-.yandex.cloud.mdb.redis.v1.StopClusterRequest\x1a!.yandex.cloud.operation.Operation\"V\xb2\xd2*\x1e\n" +
	"\x13StopClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02.\",/managed-redis/v1/clusters/{cluster_id}:stop\x12\xb3\x01\n" +
	"\x04Move\x12-.yandex.cloud.mdb.redis.v1.MoveClusterRequest\x1a!.yandex.cloud.operation.Operation\"Y\xb2\xd2*\x1e\n" +
	"\x13MoveClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x021:\x01*\",/managed-redis/v1/clusters/{cluster_id}:move\x12\xb8\x01\n" +
	"\x06Backup\x12/.yandex.cloud.mdb.redis.v1.BackupClusterRequest\x1a!.yandex.cloud.operation.Operation\"Z\xb2\xd2* \n" +
	"\x15BackupClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x020\"./managed-redis/v1/clusters/{cluster_id}:backup\x12\xb2\x01\n" +
	"\aRestore\x120.yandex.cloud.mdb.redis.v1.RestoreClusterRequest\x1a!.yandex.cloud.operation.Operation\"R\xb2\xd2*!\n" +
	"\x16RestoreClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02':\x01*\"\"/managed-redis/v1/clusters:restore\x12\xe9\x01\n" +
	"\x15RescheduleMaintenance\x127.yandex.cloud.mdb.redis.v1.RescheduleMaintenanceRequest\x1a!.yandex.cloud.operation.Operation\"t\xb2\xd2*(\n" +
	"\x1dRescheduleMaintenanceMetadata\x12\aCluster\x82\xd3\xe4\x93\x02B:\x01*\"=/managed-redis/v1/clusters/{cluster_id}:rescheduleMaintenance\x12\xd7\x01\n" +
	"\rStartFailover\x126.yandex.cloud.mdb.redis.v1.StartClusterFailoverRequest\x1a!.yandex.cloud.operation.Operation\"k\xb2\xd2*'\n" +
	"\x1cStartClusterFailoverMetadata\x12\aCluster\x82\xd3\xe4\x93\x02::\x01*\"5/managed-redis/v1/clusters/{cluster_id}:startFailover\x12\xa7\x01\n" +
	"\bListLogs\x121.yandex.cloud.mdb.redis.v1.ListClusterLogsRequest\x1a2.yandex.cloud.mdb.redis.v1.ListClusterLogsResponse\"4\x82\xd3\xe4\x93\x02.\x12,/managed-redis/v1/clusters/{cluster_id}:logs\x12\xac\x01\n" +
	"\n" +
	"StreamLogs\x123.yandex.cloud.mdb.redis.v1.StreamClusterLogsRequest\x1a*.yandex.cloud.mdb.redis.v1.StreamLogRecord\";\x82\xd3\xe4\x93\x025\x123/managed-redis/v1/clusters/{cluster_id}:stream_logs0\x01\x12\xbf\x01\n" +
	"\x0eListOperations\x127.yandex.cloud.mdb.redis.v1.ListClusterOperationsRequest\x1a8.yandex.cloud.mdb.redis.v1.ListClusterOperationsResponse\":\x82\xd3\xe4\x93\x024\x122/managed-redis/v1/clusters/{cluster_id}/operations\x12\xb3\x01\n" +
	"\vListBackups\x124.yandex.cloud.mdb.redis.v1.ListClusterBackupsRequest\x1a5.yandex.cloud.mdb.redis.v1.ListClusterBackupsResponse\"7\x82\xd3\xe4\x93\x021\x12//managed-redis/v1/clusters/{cluster_id}/backups\x12\xab\x01\n" +
	"\tListHosts\x122.yandex.cloud.mdb.redis.v1.ListClusterHostsRequest\x1a3.yandex.cloud.mdb.redis.v1.ListClusterHostsResponse\"5\x82\xd3\xe4\x93\x02/\x12-/managed-redis/v1/clusters/{cluster_id}/hosts\x12\xda\x01\n" +
	"\bAddHosts\x121.yandex.cloud.mdb.redis.v1.AddClusterHostsRequest\x1a!.yandex.cloud.operation.Operation\"x\xb2\xd2*0\n" +
	"\x17AddClusterHostsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02>:\x01*\"9/managed-redis/v1/clusters/{cluster_id}/hosts:batchCreate\x12\xe3\x01\n" +
	"\vDeleteHosts\x124.yandex.cloud.mdb.redis.v1.DeleteClusterHostsRequest\x1a!.yandex.cloud.operation.Operation\"{\xb2\xd2*3\n" +
	"\x1aDeleteClusterHostsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02>:\x01*\"9/managed-redis/v1/clusters/{cluster_id}/hosts:batchDelete\x12\xe3\x01\n" +
	"\vUpdateHosts\x124.yandex.cloud.mdb.redis.v1.UpdateClusterHostsRequest\x1a!.yandex.cloud.operation.Operation\"{\xb2\xd2*3\n" +
	"\x1aUpdateClusterHostsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02>:\x01*\"9/managed-redis/v1/clusters/{cluster_id}/hosts:batchUpdate\x12\xa4\x01\n" +
	"\bGetShard\x121.yandex.cloud.mdb.redis.v1.GetClusterShardRequest\x1a .yandex.cloud.mdb.redis.v1.Shard\"C\x82\xd3\xe4\x93\x02=\x12;/managed-redis/v1/clusters/{cluster_id}/shards/{shard_name}\x12\xaf\x01\n" +
	"\n" +
	"ListShards\x123.yandex.cloud.mdb.redis.v1.ListClusterShardsRequest\x1a4.yandex.cloud.mdb.redis.v1.ListClusterShardsResponse\"6\x82\xd3\xe4\x93\x020\x12./managed-redis/v1/clusters/{cluster_id}/shards\x12\xbf\x01\n" +
	"\bAddShard\x121.yandex.cloud.mdb.redis.v1.AddClusterShardRequest\x1a!.yandex.cloud.operation.Operation\"]\xb2\xd2* \n" +
	"\x17AddClusterShardMetadata\x12\x05Shard\x82\xd3\xe4\x93\x023:\x01*\"./managed-redis/v1/clusters/{cluster_id}/shards\x12\xe2\x01\n" +
	"\vDeleteShard\x124.yandex.cloud.mdb.redis.v1.DeleteClusterShardRequest\x1a!.yandex.cloud.operation.Operation\"z\xb2\xd2*3\n" +
	"\x1aDeleteClusterShardMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02=*;/managed-redis/v1/clusters/{cluster_id}/shards/{shard_name}\x12\xc4\x01\n" +
	"\tRebalance\x122.yandex.cloud.mdb.redis.v1.RebalanceClusterRequest\x1a!.yandex.cloud.operation.Operation\"`\xb2\xd2*#\n" +
	"\x18RebalanceClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x023\"1/managed-redis/v1/clusters/{cluster_id}:rebalance\x12\xd9\x01\n" +
	"\x0eEnableSharding\x127.yandex.cloud.mdb.redis.v1.EnableShardingClusterRequest\x1a!.yandex.cloud.operation.Operation\"k\xb2\xd2*(\n" +
	"\x1dEnableShardingClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x029\"7/managed-redis/v1/clusters/{cluster_id}:enable_shardingBd\n" +
	"\x1dyandex.cloud.api.mdb.redis.v1ZCgithub.com/yandex-cloud/go-genproto/yandex/cloud/mdb/redis/v1;redisb\x06proto3"

var (
	file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescData []byte
)

func file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDesc), len(file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDesc)))
	})
	return file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDescData
}

var file_yandex_cloud_mdb_redis_v1_cluster_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes = make([]protoimpl.MessageInfo, 58)
var file_yandex_cloud_mdb_redis_v1_cluster_service_proto_goTypes = []any{
	(RescheduleMaintenanceRequest_RescheduleType)(0), // 0: yandex.cloud.mdb.redis.v1.RescheduleMaintenanceRequest.RescheduleType
	(ListClusterLogsRequest_ServiceType)(0),          // 1: yandex.cloud.mdb.redis.v1.ListClusterLogsRequest.ServiceType
	(StreamClusterLogsRequest_ServiceType)(0),        // 2: yandex.cloud.mdb.redis.v1.StreamClusterLogsRequest.ServiceType
	(*EnableShardingClusterMetadata)(nil),            // 3: yandex.cloud.mdb.redis.v1.EnableShardingClusterMetadata
	(*EnableShardingClusterRequest)(nil),             // 4: yandex.cloud.mdb.redis.v1.EnableShardingClusterRequest
	(*GetClusterRequest)(nil),                        // 5: yandex.cloud.mdb.redis.v1.GetClusterRequest
	(*ListClustersRequest)(nil),                      // 6: yandex.cloud.mdb.redis.v1.ListClustersRequest
	(*ListClustersResponse)(nil),                     // 7: yandex.cloud.mdb.redis.v1.ListClustersResponse
	(*CreateClusterRequest)(nil),                     // 8: yandex.cloud.mdb.redis.v1.CreateClusterRequest
	(*CreateClusterMetadata)(nil),                    // 9: yandex.cloud.mdb.redis.v1.CreateClusterMetadata
	(*UpdateClusterRequest)(nil),                     // 10: yandex.cloud.mdb.redis.v1.UpdateClusterRequest
	(*UpdateClusterMetadata)(nil),                    // 11: yandex.cloud.mdb.redis.v1.UpdateClusterMetadata
	(*DeleteClusterRequest)(nil),                     // 12: yandex.cloud.mdb.redis.v1.DeleteClusterRequest
	(*DeleteClusterMetadata)(nil),                    // 13: yandex.cloud.mdb.redis.v1.DeleteClusterMetadata
	(*StartClusterRequest)(nil),                      // 14: yandex.cloud.mdb.redis.v1.StartClusterRequest
	(*StartClusterMetadata)(nil),                     // 15: yandex.cloud.mdb.redis.v1.StartClusterMetadata
	(*StopClusterRequest)(nil),                       // 16: yandex.cloud.mdb.redis.v1.StopClusterRequest
	(*StopClusterMetadata)(nil),                      // 17: yandex.cloud.mdb.redis.v1.StopClusterMetadata
	(*MoveClusterRequest)(nil),                       // 18: yandex.cloud.mdb.redis.v1.MoveClusterRequest
	(*MoveClusterMetadata)(nil),                      // 19: yandex.cloud.mdb.redis.v1.MoveClusterMetadata
	(*UpdateClusterHostsRequest)(nil),                // 20: yandex.cloud.mdb.redis.v1.UpdateClusterHostsRequest
	(*UpdateClusterHostsMetadata)(nil),               // 21: yandex.cloud.mdb.redis.v1.UpdateClusterHostsMetadata
	(*BackupClusterRequest)(nil),                     // 22: yandex.cloud.mdb.redis.v1.BackupClusterRequest
	(*BackupClusterMetadata)(nil),                    // 23: yandex.cloud.mdb.redis.v1.BackupClusterMetadata
	(*RestoreClusterRequest)(nil),                    // 24: yandex.cloud.mdb.redis.v1.RestoreClusterRequest
	(*RestoreClusterMetadata)(nil),                   // 25: yandex.cloud.mdb.redis.v1.RestoreClusterMetadata
	(*StartClusterFailoverRequest)(nil),              // 26: yandex.cloud.mdb.redis.v1.StartClusterFailoverRequest
	(*StartClusterFailoverMetadata)(nil),             // 27: yandex.cloud.mdb.redis.v1.StartClusterFailoverMetadata
	(*RescheduleMaintenanceRequest)(nil),             // 28: yandex.cloud.mdb.redis.v1.RescheduleMaintenanceRequest
	(*RescheduleMaintenanceMetadata)(nil),            // 29: yandex.cloud.mdb.redis.v1.RescheduleMaintenanceMetadata
	(*LogRecord)(nil),                                // 30: yandex.cloud.mdb.redis.v1.LogRecord
	(*ListClusterLogsRequest)(nil),                   // 31: yandex.cloud.mdb.redis.v1.ListClusterLogsRequest
	(*ListClusterLogsResponse)(nil),                  // 32: yandex.cloud.mdb.redis.v1.ListClusterLogsResponse
	(*StreamLogRecord)(nil),                          // 33: yandex.cloud.mdb.redis.v1.StreamLogRecord
	(*StreamClusterLogsRequest)(nil),                 // 34: yandex.cloud.mdb.redis.v1.StreamClusterLogsRequest
	(*ListClusterOperationsRequest)(nil),             // 35: yandex.cloud.mdb.redis.v1.ListClusterOperationsRequest
	(*ListClusterOperationsResponse)(nil),            // 36: yandex.cloud.mdb.redis.v1.ListClusterOperationsResponse
	(*ListClusterBackupsRequest)(nil),                // 37: yandex.cloud.mdb.redis.v1.ListClusterBackupsRequest
	(*ListClusterBackupsResponse)(nil),               // 38: yandex.cloud.mdb.redis.v1.ListClusterBackupsResponse
	(*ListClusterHostsRequest)(nil),                  // 39: yandex.cloud.mdb.redis.v1.ListClusterHostsRequest
	(*ListClusterHostsResponse)(nil),                 // 40: yandex.cloud.mdb.redis.v1.ListClusterHostsResponse
	(*AddClusterHostsRequest)(nil),                   // 41: yandex.cloud.mdb.redis.v1.AddClusterHostsRequest
	(*AddClusterHostsMetadata)(nil),                  // 42: yandex.cloud.mdb.redis.v1.AddClusterHostsMetadata
	(*DeleteClusterHostsRequest)(nil),                // 43: yandex.cloud.mdb.redis.v1.DeleteClusterHostsRequest
	(*DeleteClusterHostsMetadata)(nil),               // 44: yandex.cloud.mdb.redis.v1.DeleteClusterHostsMetadata
	(*GetClusterShardRequest)(nil),                   // 45: yandex.cloud.mdb.redis.v1.GetClusterShardRequest
	(*ListClusterShardsRequest)(nil),                 // 46: yandex.cloud.mdb.redis.v1.ListClusterShardsRequest
	(*ListClusterShardsResponse)(nil),                // 47: yandex.cloud.mdb.redis.v1.ListClusterShardsResponse
	(*AddClusterShardRequest)(nil),                   // 48: yandex.cloud.mdb.redis.v1.AddClusterShardRequest
	(*AddClusterShardMetadata)(nil),                  // 49: yandex.cloud.mdb.redis.v1.AddClusterShardMetadata
	(*DeleteClusterShardRequest)(nil),                // 50: yandex.cloud.mdb.redis.v1.DeleteClusterShardRequest
	(*DeleteClusterShardMetadata)(nil),               // 51: yandex.cloud.mdb.redis.v1.DeleteClusterShardMetadata
	(*RebalanceClusterRequest)(nil),                  // 52: yandex.cloud.mdb.redis.v1.RebalanceClusterRequest
	(*RebalanceClusterMetadata)(nil),                 // 53: yandex.cloud.mdb.redis.v1.RebalanceClusterMetadata
	(*UpdateHostSpec)(nil),                           // 54: yandex.cloud.mdb.redis.v1.UpdateHostSpec
	(*HostSpec)(nil),                                 // 55: yandex.cloud.mdb.redis.v1.HostSpec
	(*ConfigSpec)(nil),                               // 56: yandex.cloud.mdb.redis.v1.ConfigSpec
	nil,                                              // 57: yandex.cloud.mdb.redis.v1.CreateClusterRequest.LabelsEntry
	nil,                                              // 58: yandex.cloud.mdb.redis.v1.UpdateClusterRequest.LabelsEntry
	nil,                                              // 59: yandex.cloud.mdb.redis.v1.RestoreClusterRequest.LabelsEntry
	nil,                                              // 60: yandex.cloud.mdb.redis.v1.LogRecord.MessageEntry
	(*Cluster)(nil),                                  // 61: yandex.cloud.mdb.redis.v1.Cluster
	(Cluster_Environment)(0),                         // 62: yandex.cloud.mdb.redis.v1.Cluster.Environment
	(*wrapperspb.BoolValue)(nil),                     // 63: google.protobuf.BoolValue
	(Cluster_PersistenceMode)(0),                     // 64: yandex.cloud.mdb.redis.v1.Cluster.PersistenceMode
	(*MaintenanceWindow)(nil),                        // 65: yandex.cloud.mdb.redis.v1.MaintenanceWindow
	(*UserSpec)(nil),                                 // 66: yandex.cloud.mdb.redis.v1.UserSpec
	(*wrapperspb.StringValue)(nil),                   // 67: google.protobuf.StringValue
	(*fieldmaskpb.FieldMask)(nil),                    // 68: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),                    // 69: google.protobuf.Timestamp
	(*operation.Operation)(nil),                      // 70: yandex.cloud.operation.Operation
	(*Backup)(nil),                                   // 71: yandex.cloud.mdb.redis.v1.Backup
	(*Host)(nil),                                     // 72: yandex.cloud.mdb.redis.v1.Host
	(*Shard)(nil),                                    // 73: yandex.cloud.mdb.redis.v1.Shard
	(*wrapperspb.Int64Value)(nil),                    // 74: google.protobuf.Int64Value
	(*config.RedisConfig5_0)(nil),                    // 75: yandex.cloud.mdb.redis.v1.config.RedisConfig5_0
	(*config.RedisConfig6_0)(nil),                    // 76: yandex.cloud.mdb.redis.v1.config.RedisConfig6_0
	(*config.RedisConfig6_2)(nil),                    // 77: yandex.cloud.mdb.redis.v1.config.RedisConfig6_2
	(*config.RedisConfig7_0)(nil),                    // 78: yandex.cloud.mdb.redis.v1.config.RedisConfig7_0
	(*Resources)(nil),                                // 79: yandex.cloud.mdb.redis.v1.Resources
	(*timeofday.TimeOfDay)(nil),                      // 80: google.type.TimeOfDay
	(*Access)(nil),                                   // 81: yandex.cloud.mdb.redis.v1.Access
	(*config.RedisConfig)(nil),                       // 82: yandex.cloud.mdb.redis.v1.config.RedisConfig
	(*DiskSizeAutoscaling)(nil),                      // 83: yandex.cloud.mdb.redis.v1.DiskSizeAutoscaling
}
var file_yandex_cloud_mdb_redis_v1_cluster_service_proto_depIdxs = []int32{
	61, // 0: yandex.cloud.mdb.redis.v1.ListClustersResponse.clusters:type_name -> yandex.cloud.mdb.redis.v1.Cluster
	57, // 1: yandex.cloud.mdb.redis.v1.CreateClusterRequest.labels:type_name -> yandex.cloud.mdb.redis.v1.CreateClusterRequest.LabelsEntry
	62, // 2: yandex.cloud.mdb.redis.v1.CreateClusterRequest.environment:type_name -> yandex.cloud.mdb.redis.v1.Cluster.Environment
	56, // 3: yandex.cloud.mdb.redis.v1.CreateClusterRequest.config_spec:type_name -> yandex.cloud.mdb.redis.v1.ConfigSpec
	55, // 4: yandex.cloud.mdb.redis.v1.CreateClusterRequest.host_specs:type_name -> yandex.cloud.mdb.redis.v1.HostSpec
	63, // 5: yandex.cloud.mdb.redis.v1.CreateClusterRequest.tls_enabled:type_name -> google.protobuf.BoolValue
	64, // 6: yandex.cloud.mdb.redis.v1.CreateClusterRequest.persistence_mode:type_name -> yandex.cloud.mdb.redis.v1.Cluster.PersistenceMode
	65, // 7: yandex.cloud.mdb.redis.v1.CreateClusterRequest.maintenance_window:type_name -> yandex.cloud.mdb.redis.v1.MaintenanceWindow
	66, // 8: yandex.cloud.mdb.redis.v1.CreateClusterRequest.user_specs:type_name -> yandex.cloud.mdb.redis.v1.UserSpec
	67, // 9: yandex.cloud.mdb.redis.v1.CreateClusterRequest.disk_encryption_key_id:type_name -> google.protobuf.StringValue
	68, // 10: yandex.cloud.mdb.redis.v1.UpdateClusterRequest.update_mask:type_name -> google.protobuf.FieldMask
	58, // 11: yandex.cloud.mdb.redis.v1.UpdateClusterRequest.labels:type_name -> yandex.cloud.mdb.redis.v1.UpdateClusterRequest.LabelsEntry
	56, // 12: yandex.cloud.mdb.redis.v1.UpdateClusterRequest.config_spec:type_name -> yandex.cloud.mdb.redis.v1.ConfigSpec
	65, // 13: yandex.cloud.mdb.redis.v1.UpdateClusterRequest.maintenance_window:type_name -> yandex.cloud.mdb.redis.v1.MaintenanceWindow
	64, // 14: yandex.cloud.mdb.redis.v1.UpdateClusterRequest.persistence_mode:type_name -> yandex.cloud.mdb.redis.v1.Cluster.PersistenceMode
	54, // 15: yandex.cloud.mdb.redis.v1.UpdateClusterHostsRequest.update_host_specs:type_name -> yandex.cloud.mdb.redis.v1.UpdateHostSpec
	59, // 16: yandex.cloud.mdb.redis.v1.RestoreClusterRequest.labels:type_name -> yandex.cloud.mdb.redis.v1.RestoreClusterRequest.LabelsEntry
	62, // 17: yandex.cloud.mdb.redis.v1.RestoreClusterRequest.environment:type_name -> yandex.cloud.mdb.redis.v1.Cluster.Environment
	56, // 18: yandex.cloud.mdb.redis.v1.RestoreClusterRequest.config_spec:type_name -> yandex.cloud.mdb.redis.v1.ConfigSpec
	55, // 19: yandex.cloud.mdb.redis.v1.RestoreClusterRequest.host_specs:type_name -> yandex.cloud.mdb.redis.v1.HostSpec
	63, // 20: yandex.cloud.mdb.redis.v1.RestoreClusterRequest.tls_enabled:type_name -> google.protobuf.BoolValue
	64, // 21: yandex.cloud.mdb.redis.v1.RestoreClusterRequest.persistence_mode:type_name -> yandex.cloud.mdb.redis.v1.Cluster.PersistenceMode
	65, // 22: yandex.cloud.mdb.redis.v1.RestoreClusterRequest.maintenance_window:type_name -> yandex.cloud.mdb.redis.v1.MaintenanceWindow
	67, // 23: yandex.cloud.mdb.redis.v1.RestoreClusterRequest.disk_encryption_key_id:type_name -> google.protobuf.StringValue
	0,  // 24: yandex.cloud.mdb.redis.v1.RescheduleMaintenanceRequest.reschedule_type:type_name -> yandex.cloud.mdb.redis.v1.RescheduleMaintenanceRequest.RescheduleType
	69, // 25: yandex.cloud.mdb.redis.v1.RescheduleMaintenanceRequest.delayed_until:type_name -> google.protobuf.Timestamp
	69, // 26: yandex.cloud.mdb.redis.v1.RescheduleMaintenanceMetadata.delayed_until:type_name -> google.protobuf.Timestamp
	69, // 27: yandex.cloud.mdb.redis.v1.LogRecord.timestamp:type_name -> google.protobuf.Timestamp
	60, // 28: yandex.cloud.mdb.redis.v1.LogRecord.message:type_name -> yandex.cloud.mdb.redis.v1.LogRecord.MessageEntry
	1,  // 29: yandex.cloud.mdb.redis.v1.ListClusterLogsRequest.service_type:type_name -> yandex.cloud.mdb.redis.v1.ListClusterLogsRequest.ServiceType
	69, // 30: yandex.cloud.mdb.redis.v1.ListClusterLogsRequest.from_time:type_name -> google.protobuf.Timestamp
	69, // 31: yandex.cloud.mdb.redis.v1.ListClusterLogsRequest.to_time:type_name -> google.protobuf.Timestamp
	30, // 32: yandex.cloud.mdb.redis.v1.ListClusterLogsResponse.logs:type_name -> yandex.cloud.mdb.redis.v1.LogRecord
	30, // 33: yandex.cloud.mdb.redis.v1.StreamLogRecord.record:type_name -> yandex.cloud.mdb.redis.v1.LogRecord
	2,  // 34: yandex.cloud.mdb.redis.v1.StreamClusterLogsRequest.service_type:type_name -> yandex.cloud.mdb.redis.v1.StreamClusterLogsRequest.ServiceType
	69, // 35: yandex.cloud.mdb.redis.v1.StreamClusterLogsRequest.from_time:type_name -> google.protobuf.Timestamp
	69, // 36: yandex.cloud.mdb.redis.v1.StreamClusterLogsRequest.to_time:type_name -> google.protobuf.Timestamp
	70, // 37: yandex.cloud.mdb.redis.v1.ListClusterOperationsResponse.operations:type_name -> yandex.cloud.operation.Operation
	71, // 38: yandex.cloud.mdb.redis.v1.ListClusterBackupsResponse.backups:type_name -> yandex.cloud.mdb.redis.v1.Backup
	72, // 39: yandex.cloud.mdb.redis.v1.ListClusterHostsResponse.hosts:type_name -> yandex.cloud.mdb.redis.v1.Host
	55, // 40: yandex.cloud.mdb.redis.v1.AddClusterHostsRequest.host_specs:type_name -> yandex.cloud.mdb.redis.v1.HostSpec
	73, // 41: yandex.cloud.mdb.redis.v1.ListClusterShardsResponse.shards:type_name -> yandex.cloud.mdb.redis.v1.Shard
	55, // 42: yandex.cloud.mdb.redis.v1.AddClusterShardRequest.host_specs:type_name -> yandex.cloud.mdb.redis.v1.HostSpec
	74, // 43: yandex.cloud.mdb.redis.v1.UpdateHostSpec.replica_priority:type_name -> google.protobuf.Int64Value
	68, // 44: yandex.cloud.mdb.redis.v1.UpdateHostSpec.update_mask:type_name -> google.protobuf.FieldMask
	74, // 45: yandex.cloud.mdb.redis.v1.HostSpec.replica_priority:type_name -> google.protobuf.Int64Value
	75, // 46: yandex.cloud.mdb.redis.v1.ConfigSpec.redis_config_5_0:type_name -> yandex.cloud.mdb.redis.v1.config.RedisConfig5_0
	76, // 47: yandex.cloud.mdb.redis.v1.ConfigSpec.redis_config_6_0:type_name -> yandex.cloud.mdb.redis.v1.config.RedisConfig6_0
	77, // 48: yandex.cloud.mdb.redis.v1.ConfigSpec.redis_config_6_2:type_name -> yandex.cloud.mdb.redis.v1.config.RedisConfig6_2
	78, // 49: yandex.cloud.mdb.redis.v1.ConfigSpec.redis_config_7_0:type_name -> yandex.cloud.mdb.redis.v1.config.RedisConfig7_0
	79, // 50: yandex.cloud.mdb.redis.v1.ConfigSpec.resources:type_name -> yandex.cloud.mdb.redis.v1.Resources
	80, // 51: yandex.cloud.mdb.redis.v1.ConfigSpec.backup_window_start:type_name -> google.type.TimeOfDay
	81, // 52: yandex.cloud.mdb.redis.v1.ConfigSpec.access:type_name -> yandex.cloud.mdb.redis.v1.Access
	82, // 53: yandex.cloud.mdb.redis.v1.ConfigSpec.redis:type_name -> yandex.cloud.mdb.redis.v1.config.RedisConfig
	83, // 54: yandex.cloud.mdb.redis.v1.ConfigSpec.disk_size_autoscaling:type_name -> yandex.cloud.mdb.redis.v1.DiskSizeAutoscaling
	74, // 55: yandex.cloud.mdb.redis.v1.ConfigSpec.backup_retain_period_days:type_name -> google.protobuf.Int64Value
	5,  // 56: yandex.cloud.mdb.redis.v1.ClusterService.Get:input_type -> yandex.cloud.mdb.redis.v1.GetClusterRequest
	6,  // 57: yandex.cloud.mdb.redis.v1.ClusterService.List:input_type -> yandex.cloud.mdb.redis.v1.ListClustersRequest
	8,  // 58: yandex.cloud.mdb.redis.v1.ClusterService.Create:input_type -> yandex.cloud.mdb.redis.v1.CreateClusterRequest
	10, // 59: yandex.cloud.mdb.redis.v1.ClusterService.Update:input_type -> yandex.cloud.mdb.redis.v1.UpdateClusterRequest
	12, // 60: yandex.cloud.mdb.redis.v1.ClusterService.Delete:input_type -> yandex.cloud.mdb.redis.v1.DeleteClusterRequest
	14, // 61: yandex.cloud.mdb.redis.v1.ClusterService.Start:input_type -> yandex.cloud.mdb.redis.v1.StartClusterRequest
	16, // 62: yandex.cloud.mdb.redis.v1.ClusterService.Stop:input_type -> yandex.cloud.mdb.redis.v1.StopClusterRequest
	18, // 63: yandex.cloud.mdb.redis.v1.ClusterService.Move:input_type -> yandex.cloud.mdb.redis.v1.MoveClusterRequest
	22, // 64: yandex.cloud.mdb.redis.v1.ClusterService.Backup:input_type -> yandex.cloud.mdb.redis.v1.BackupClusterRequest
	24, // 65: yandex.cloud.mdb.redis.v1.ClusterService.Restore:input_type -> yandex.cloud.mdb.redis.v1.RestoreClusterRequest
	28, // 66: yandex.cloud.mdb.redis.v1.ClusterService.RescheduleMaintenance:input_type -> yandex.cloud.mdb.redis.v1.RescheduleMaintenanceRequest
	26, // 67: yandex.cloud.mdb.redis.v1.ClusterService.StartFailover:input_type -> yandex.cloud.mdb.redis.v1.StartClusterFailoverRequest
	31, // 68: yandex.cloud.mdb.redis.v1.ClusterService.ListLogs:input_type -> yandex.cloud.mdb.redis.v1.ListClusterLogsRequest
	34, // 69: yandex.cloud.mdb.redis.v1.ClusterService.StreamLogs:input_type -> yandex.cloud.mdb.redis.v1.StreamClusterLogsRequest
	35, // 70: yandex.cloud.mdb.redis.v1.ClusterService.ListOperations:input_type -> yandex.cloud.mdb.redis.v1.ListClusterOperationsRequest
	37, // 71: yandex.cloud.mdb.redis.v1.ClusterService.ListBackups:input_type -> yandex.cloud.mdb.redis.v1.ListClusterBackupsRequest
	39, // 72: yandex.cloud.mdb.redis.v1.ClusterService.ListHosts:input_type -> yandex.cloud.mdb.redis.v1.ListClusterHostsRequest
	41, // 73: yandex.cloud.mdb.redis.v1.ClusterService.AddHosts:input_type -> yandex.cloud.mdb.redis.v1.AddClusterHostsRequest
	43, // 74: yandex.cloud.mdb.redis.v1.ClusterService.DeleteHosts:input_type -> yandex.cloud.mdb.redis.v1.DeleteClusterHostsRequest
	20, // 75: yandex.cloud.mdb.redis.v1.ClusterService.UpdateHosts:input_type -> yandex.cloud.mdb.redis.v1.UpdateClusterHostsRequest
	45, // 76: yandex.cloud.mdb.redis.v1.ClusterService.GetShard:input_type -> yandex.cloud.mdb.redis.v1.GetClusterShardRequest
	46, // 77: yandex.cloud.mdb.redis.v1.ClusterService.ListShards:input_type -> yandex.cloud.mdb.redis.v1.ListClusterShardsRequest
	48, // 78: yandex.cloud.mdb.redis.v1.ClusterService.AddShard:input_type -> yandex.cloud.mdb.redis.v1.AddClusterShardRequest
	50, // 79: yandex.cloud.mdb.redis.v1.ClusterService.DeleteShard:input_type -> yandex.cloud.mdb.redis.v1.DeleteClusterShardRequest
	52, // 80: yandex.cloud.mdb.redis.v1.ClusterService.Rebalance:input_type -> yandex.cloud.mdb.redis.v1.RebalanceClusterRequest
	4,  // 81: yandex.cloud.mdb.redis.v1.ClusterService.EnableSharding:input_type -> yandex.cloud.mdb.redis.v1.EnableShardingClusterRequest
	61, // 82: yandex.cloud.mdb.redis.v1.ClusterService.Get:output_type -> yandex.cloud.mdb.redis.v1.Cluster
	7,  // 83: yandex.cloud.mdb.redis.v1.ClusterService.List:output_type -> yandex.cloud.mdb.redis.v1.ListClustersResponse
	70, // 84: yandex.cloud.mdb.redis.v1.ClusterService.Create:output_type -> yandex.cloud.operation.Operation
	70, // 85: yandex.cloud.mdb.redis.v1.ClusterService.Update:output_type -> yandex.cloud.operation.Operation
	70, // 86: yandex.cloud.mdb.redis.v1.ClusterService.Delete:output_type -> yandex.cloud.operation.Operation
	70, // 87: yandex.cloud.mdb.redis.v1.ClusterService.Start:output_type -> yandex.cloud.operation.Operation
	70, // 88: yandex.cloud.mdb.redis.v1.ClusterService.Stop:output_type -> yandex.cloud.operation.Operation
	70, // 89: yandex.cloud.mdb.redis.v1.ClusterService.Move:output_type -> yandex.cloud.operation.Operation
	70, // 90: yandex.cloud.mdb.redis.v1.ClusterService.Backup:output_type -> yandex.cloud.operation.Operation
	70, // 91: yandex.cloud.mdb.redis.v1.ClusterService.Restore:output_type -> yandex.cloud.operation.Operation
	70, // 92: yandex.cloud.mdb.redis.v1.ClusterService.RescheduleMaintenance:output_type -> yandex.cloud.operation.Operation
	70, // 93: yandex.cloud.mdb.redis.v1.ClusterService.StartFailover:output_type -> yandex.cloud.operation.Operation
	32, // 94: yandex.cloud.mdb.redis.v1.ClusterService.ListLogs:output_type -> yandex.cloud.mdb.redis.v1.ListClusterLogsResponse
	33, // 95: yandex.cloud.mdb.redis.v1.ClusterService.StreamLogs:output_type -> yandex.cloud.mdb.redis.v1.StreamLogRecord
	36, // 96: yandex.cloud.mdb.redis.v1.ClusterService.ListOperations:output_type -> yandex.cloud.mdb.redis.v1.ListClusterOperationsResponse
	38, // 97: yandex.cloud.mdb.redis.v1.ClusterService.ListBackups:output_type -> yandex.cloud.mdb.redis.v1.ListClusterBackupsResponse
	40, // 98: yandex.cloud.mdb.redis.v1.ClusterService.ListHosts:output_type -> yandex.cloud.mdb.redis.v1.ListClusterHostsResponse
	70, // 99: yandex.cloud.mdb.redis.v1.ClusterService.AddHosts:output_type -> yandex.cloud.operation.Operation
	70, // 100: yandex.cloud.mdb.redis.v1.ClusterService.DeleteHosts:output_type -> yandex.cloud.operation.Operation
	70, // 101: yandex.cloud.mdb.redis.v1.ClusterService.UpdateHosts:output_type -> yandex.cloud.operation.Operation
	73, // 102: yandex.cloud.mdb.redis.v1.ClusterService.GetShard:output_type -> yandex.cloud.mdb.redis.v1.Shard
	47, // 103: yandex.cloud.mdb.redis.v1.ClusterService.ListShards:output_type -> yandex.cloud.mdb.redis.v1.ListClusterShardsResponse
	70, // 104: yandex.cloud.mdb.redis.v1.ClusterService.AddShard:output_type -> yandex.cloud.operation.Operation
	70, // 105: yandex.cloud.mdb.redis.v1.ClusterService.DeleteShard:output_type -> yandex.cloud.operation.Operation
	70, // 106: yandex.cloud.mdb.redis.v1.ClusterService.Rebalance:output_type -> yandex.cloud.operation.Operation
	70, // 107: yandex.cloud.mdb.redis.v1.ClusterService.EnableSharding:output_type -> yandex.cloud.operation.Operation
	82, // [82:108] is the sub-list for method output_type
	56, // [56:82] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_redis_v1_cluster_service_proto_init() }
func file_yandex_cloud_mdb_redis_v1_cluster_service_proto_init() {
	if File_yandex_cloud_mdb_redis_v1_cluster_service_proto != nil {
		return
	}
	file_yandex_cloud_mdb_redis_v1_backup_proto_init()
	file_yandex_cloud_mdb_redis_v1_cluster_proto_init()
	file_yandex_cloud_mdb_redis_v1_maintenance_proto_init()
	file_yandex_cloud_mdb_redis_v1_user_proto_init()
	file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes[53].OneofWrappers = []any{
		(*ConfigSpec_RedisConfig_5_0)(nil),
		(*ConfigSpec_RedisConfig_6_0)(nil),
		(*ConfigSpec_RedisConfig_6_2)(nil),
		(*ConfigSpec_RedisConfig_7_0)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDesc), len(file_yandex_cloud_mdb_redis_v1_cluster_service_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   58,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_mdb_redis_v1_cluster_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_redis_v1_cluster_service_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_redis_v1_cluster_service_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_redis_v1_cluster_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_redis_v1_cluster_service_proto = out.File
	file_yandex_cloud_mdb_redis_v1_cluster_service_proto_goTypes = nil
	file_yandex_cloud_mdb_redis_v1_cluster_service_proto_depIdxs = nil
}

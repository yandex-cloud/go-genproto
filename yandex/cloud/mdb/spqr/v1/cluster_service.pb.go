// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/mdb/spqr/v1/cluster_service.proto

package spqr

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	timeofday "google.golang.org/genproto/googleapis/type/timeofday"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RescheduleMaintenanceRequest_RescheduleType int32

const (
	RescheduleMaintenanceRequest_RESCHEDULE_TYPE_UNSPECIFIED RescheduleMaintenanceRequest_RescheduleType = 0
	// Start the maintenance operation immediately.
	RescheduleMaintenanceRequest_IMMEDIATE RescheduleMaintenanceRequest_RescheduleType = 1
	// Start the maintenance operation within the next available maintenance window.
	RescheduleMaintenanceRequest_NEXT_AVAILABLE_WINDOW RescheduleMaintenanceRequest_RescheduleType = 2
	// Start the maintenance operation at the specific time.
	RescheduleMaintenanceRequest_SPECIFIC_TIME RescheduleMaintenanceRequest_RescheduleType = 3
)

// Enum value maps for RescheduleMaintenanceRequest_RescheduleType.
var (
	RescheduleMaintenanceRequest_RescheduleType_name = map[int32]string{
		0: "RESCHEDULE_TYPE_UNSPECIFIED",
		1: "IMMEDIATE",
		2: "NEXT_AVAILABLE_WINDOW",
		3: "SPECIFIC_TIME",
	}
	RescheduleMaintenanceRequest_RescheduleType_value = map[string]int32{
		"RESCHEDULE_TYPE_UNSPECIFIED": 0,
		"IMMEDIATE":                   1,
		"NEXT_AVAILABLE_WINDOW":       2,
		"SPECIFIC_TIME":               3,
	}
)

func (x RescheduleMaintenanceRequest_RescheduleType) Enum() *RescheduleMaintenanceRequest_RescheduleType {
	p := new(RescheduleMaintenanceRequest_RescheduleType)
	*p = x
	return p
}

func (x RescheduleMaintenanceRequest_RescheduleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RescheduleMaintenanceRequest_RescheduleType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_enumTypes[0].Descriptor()
}

func (RescheduleMaintenanceRequest_RescheduleType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_enumTypes[0]
}

func (x RescheduleMaintenanceRequest_RescheduleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RescheduleMaintenanceRequest_RescheduleType.Descriptor instead.
func (RescheduleMaintenanceRequest_RescheduleType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{19, 0}
}

type ListClusterLogsRequest_ServiceType int32

const (
	ListClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED ListClusterLogsRequest_ServiceType = 0
	// Logs of SPQR activity.
	ListClusterLogsRequest_POSTGRESQL  ListClusterLogsRequest_ServiceType = 1
	ListClusterLogsRequest_ROUTER      ListClusterLogsRequest_ServiceType = 2
	ListClusterLogsRequest_COORDINATOR ListClusterLogsRequest_ServiceType = 3
	ListClusterLogsRequest_INFRA       ListClusterLogsRequest_ServiceType = 4
)

// Enum value maps for ListClusterLogsRequest_ServiceType.
var (
	ListClusterLogsRequest_ServiceType_name = map[int32]string{
		0: "SERVICE_TYPE_UNSPECIFIED",
		1: "POSTGRESQL",
		2: "ROUTER",
		3: "COORDINATOR",
		4: "INFRA",
	}
	ListClusterLogsRequest_ServiceType_value = map[string]int32{
		"SERVICE_TYPE_UNSPECIFIED": 0,
		"POSTGRESQL":               1,
		"ROUTER":                   2,
		"COORDINATOR":              3,
		"INFRA":                    4,
	}
)

func (x ListClusterLogsRequest_ServiceType) Enum() *ListClusterLogsRequest_ServiceType {
	p := new(ListClusterLogsRequest_ServiceType)
	*p = x
	return p
}

func (x ListClusterLogsRequest_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListClusterLogsRequest_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_enumTypes[1].Descriptor()
}

func (ListClusterLogsRequest_ServiceType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_enumTypes[1]
}

func (x ListClusterLogsRequest_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListClusterLogsRequest_ServiceType.Descriptor instead.
func (ListClusterLogsRequest_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{22, 0}
}

type StreamClusterLogsRequest_ServiceType int32

const (
	StreamClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED StreamClusterLogsRequest_ServiceType = 0
	// Logs of SPQR activity.
	StreamClusterLogsRequest_POSTGRESQL  StreamClusterLogsRequest_ServiceType = 1
	StreamClusterLogsRequest_ROUTER      StreamClusterLogsRequest_ServiceType = 2
	StreamClusterLogsRequest_COORDINATOR StreamClusterLogsRequest_ServiceType = 3
	StreamClusterLogsRequest_INFRA       StreamClusterLogsRequest_ServiceType = 4
)

// Enum value maps for StreamClusterLogsRequest_ServiceType.
var (
	StreamClusterLogsRequest_ServiceType_name = map[int32]string{
		0: "SERVICE_TYPE_UNSPECIFIED",
		1: "POSTGRESQL",
		2: "ROUTER",
		3: "COORDINATOR",
		4: "INFRA",
	}
	StreamClusterLogsRequest_ServiceType_value = map[string]int32{
		"SERVICE_TYPE_UNSPECIFIED": 0,
		"POSTGRESQL":               1,
		"ROUTER":                   2,
		"COORDINATOR":              3,
		"INFRA":                    4,
	}
)

func (x StreamClusterLogsRequest_ServiceType) Enum() *StreamClusterLogsRequest_ServiceType {
	p := new(StreamClusterLogsRequest_ServiceType)
	*p = x
	return p
}

func (x StreamClusterLogsRequest_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamClusterLogsRequest_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_enumTypes[2].Descriptor()
}

func (StreamClusterLogsRequest_ServiceType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_enumTypes[2]
}

func (x StreamClusterLogsRequest_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamClusterLogsRequest_ServiceType.Descriptor instead.
func (StreamClusterLogsRequest_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{25, 0}
}

type GetClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR Cluster resource to return.
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterRequest) Reset() {
	*x = GetClusterRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterRequest) ProtoMessage() {}

func (x *GetClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterRequest.ProtoReflect.Descriptor instead.
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ListClustersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to list SPQR clusters in.
	// To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClustersResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Acceptable values are 0 to 1000, inclusive. Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token]
	// to the [ListClustersResponse.next_page_token] returned by the previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression must specify:
	// 1. The field name. Currently you can only use filtering with the [Cluster.name] field.
	// 2. An `=` operator.
	// 3. The value in double quotes (`"`). Must be 1-63 characters long and match the regular expression `[a-zA-Z0-9_-]+`.
	Filter        string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListClustersRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListClustersRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClustersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListClustersRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListClustersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of SPQR Cluster resources.
	Clusters []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClustersRequest.page_size], use the [next_page_token] as the value
	// for the [ListClustersRequest.page_token] parameter in the next list request. Each subsequent
	// list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersResponse) Reset() {
	*x = ListClustersResponse{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersResponse) ProtoMessage() {}

func (x *ListClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersResponse.ProtoReflect.Descriptor instead.
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListClustersResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ListClustersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to create SPQR cluster in.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the SPQR cluster. The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the SPQR cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the SPQR cluster as “ key:value “ pairs. Maximum 64 per resource.
	// For example, "project": "mvp" or "source": "dictionary".
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Deployment environment of the SPQR cluster.
	Environment Cluster_Environment `protobuf:"varint,5,opt,name=environment,proto3,enum=yandex.cloud.mdb.spqr.v1.Cluster_Environment" json:"environment,omitempty"`
	// Configuration and resources for hosts that should be created for the SPQR cluster.
	ConfigSpec *ConfigSpec `protobuf:"bytes,6,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// Descriptions of databases to be created in the SPQR cluster.
	DatabaseSpecs []*DatabaseSpec `protobuf:"bytes,7,rep,name=database_specs,json=databaseSpecs,proto3" json:"database_specs,omitempty"`
	// Descriptions of database users to be created in the SPQR cluster.
	UserSpecs []*UserSpec `protobuf:"bytes,8,rep,name=user_specs,json=userSpecs,proto3" json:"user_specs,omitempty"`
	// Individual configurations for hosts that should be created for the SPQR cluster.
	HostSpecs []*HostSpec `protobuf:"bytes,9,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// ID of the network to create the cluster in.
	NetworkId string `protobuf:"bytes,10,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// User security groups
	SecurityGroupIds []string `protobuf:"bytes,11,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// Deletion Protection inhibits deletion of the cluster
	DeletionProtection bool `protobuf:"varint,12,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// New maintenance window settings for the cluster.
	MaintenanceWindow *MaintenanceWindow `protobuf:"bytes,13,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"`
	// Descriptions of shards to be created in the SPQR cluster.
	ShardSpecs    []*ShardSpec `protobuf:"bytes,14,rep,name=shard_specs,json=shardSpecs,proto3" json:"shard_specs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClusterRequest) Reset() {
	*x = CreateClusterRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterRequest) ProtoMessage() {}

func (x *CreateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateClusterRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateClusterRequest) GetEnvironment() Cluster_Environment {
	if x != nil {
		return x.Environment
	}
	return Cluster_ENVIRONMENT_UNSPECIFIED
}

func (x *CreateClusterRequest) GetConfigSpec() *ConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *CreateClusterRequest) GetDatabaseSpecs() []*DatabaseSpec {
	if x != nil {
		return x.DatabaseSpecs
	}
	return nil
}

func (x *CreateClusterRequest) GetUserSpecs() []*UserSpec {
	if x != nil {
		return x.UserSpecs
	}
	return nil
}

func (x *CreateClusterRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

func (x *CreateClusterRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *CreateClusterRequest) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *CreateClusterRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *CreateClusterRequest) GetMaintenanceWindow() *MaintenanceWindow {
	if x != nil {
		return x.MaintenanceWindow
	}
	return nil
}

func (x *CreateClusterRequest) GetShardSpecs() []*ShardSpec {
	if x != nil {
		return x.ShardSpecs
	}
	return nil
}

type CreateClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster that is being created.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClusterMetadata) Reset() {
	*x = CreateClusterMetadata{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterMetadata) ProtoMessage() {}

func (x *CreateClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterMetadata.ProtoReflect.Descriptor instead.
func (*CreateClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type UpdateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR Cluster resource to update.
	// To get the SPQR cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Field mask that specifies which fields of the SPQR Cluster resource should be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// New name for the cluster.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// New description of the SPQR cluster.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the SPQR cluster as “ key:value “ pairs. Maximum 64 per resource.
	// For example, "project": "mvp" or "source": "dictionary".
	//
	// The new set of labels will completely replace the old ones. To add a label, request the current
	// set with the [ClusterService.Get] method, then send an [ClusterService.Update] request with the new label added to the set.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// New configuration and resources for hosts in the cluster.
	ConfigSpec *ConfigSpec `protobuf:"bytes,6,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// New maintenance window settings for the cluster.
	MaintenanceWindow *MaintenanceWindow `protobuf:"bytes,7,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"`
	// User security groups
	SecurityGroupIds []string `protobuf:"bytes,8,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// Deletion Protection inhibits deletion of the cluster
	DeletionProtection bool `protobuf:"varint,9,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// ID of the network to move the cluster to.
	NetworkId     string `protobuf:"bytes,10,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterRequest) Reset() {
	*x = UpdateClusterRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterRequest) ProtoMessage() {}

func (x *UpdateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateClusterRequest) GetConfigSpec() *ConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *UpdateClusterRequest) GetMaintenanceWindow() *MaintenanceWindow {
	if x != nil {
		return x.MaintenanceWindow
	}
	return nil
}

func (x *UpdateClusterRequest) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *UpdateClusterRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *UpdateClusterRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type UpdateClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR Cluster resource that is being updated.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterMetadata) Reset() {
	*x = UpdateClusterMetadata{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterMetadata) ProtoMessage() {}

func (x *UpdateClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterMetadata.ProtoReflect.Descriptor instead.
func (*UpdateClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type DeleteClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster to delete.
	// To get the SPQR cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type DeleteClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster that is being deleted.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterMetadata) Reset() {
	*x = DeleteClusterMetadata{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterMetadata) ProtoMessage() {}

func (x *DeleteClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterMetadata.ProtoReflect.Descriptor instead.
func (*DeleteClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StartClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster to start.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterRequest) Reset() {
	*x = StartClusterRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterRequest) ProtoMessage() {}

func (x *StartClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterRequest.ProtoReflect.Descriptor instead.
func (*StartClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{9}
}

func (x *StartClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StartClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterMetadata) Reset() {
	*x = StartClusterMetadata{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterMetadata) ProtoMessage() {}

func (x *StartClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterMetadata.ProtoReflect.Descriptor instead.
func (*StartClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{10}
}

func (x *StartClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StopClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster to stop.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopClusterRequest) Reset() {
	*x = StopClusterRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClusterRequest) ProtoMessage() {}

func (x *StopClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClusterRequest.ProtoReflect.Descriptor instead.
func (*StopClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{11}
}

func (x *StopClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StopClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopClusterMetadata) Reset() {
	*x = StopClusterMetadata{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClusterMetadata) ProtoMessage() {}

func (x *StopClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClusterMetadata.ProtoReflect.Descriptor instead.
func (*StopClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{12}
}

func (x *StopClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type MoveClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster to move.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the destination folder.
	DestinationFolderId string `protobuf:"bytes,2,opt,name=destination_folder_id,json=destinationFolderId,proto3" json:"destination_folder_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MoveClusterRequest) Reset() {
	*x = MoveClusterRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveClusterRequest) ProtoMessage() {}

func (x *MoveClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveClusterRequest.ProtoReflect.Descriptor instead.
func (*MoveClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{13}
}

func (x *MoveClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *MoveClusterRequest) GetDestinationFolderId() string {
	if x != nil {
		return x.DestinationFolderId
	}
	return ""
}

type MoveClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster being moved.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the source folder.
	SourceFolderId string `protobuf:"bytes,2,opt,name=source_folder_id,json=sourceFolderId,proto3" json:"source_folder_id,omitempty"`
	// ID of the destnation folder.
	DestinationFolderId string `protobuf:"bytes,3,opt,name=destination_folder_id,json=destinationFolderId,proto3" json:"destination_folder_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MoveClusterMetadata) Reset() {
	*x = MoveClusterMetadata{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveClusterMetadata) ProtoMessage() {}

func (x *MoveClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveClusterMetadata.ProtoReflect.Descriptor instead.
func (*MoveClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{14}
}

func (x *MoveClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *MoveClusterMetadata) GetSourceFolderId() string {
	if x != nil {
		return x.SourceFolderId
	}
	return ""
}

func (x *MoveClusterMetadata) GetDestinationFolderId() string {
	if x != nil {
		return x.DestinationFolderId
	}
	return ""
}

type BackupClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster to back up.
	// To get the SPQR cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupClusterRequest) Reset() {
	*x = BackupClusterRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupClusterRequest) ProtoMessage() {}

func (x *BackupClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupClusterRequest.ProtoReflect.Descriptor instead.
func (*BackupClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{15}
}

func (x *BackupClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type BackupClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster that is being backed up.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupClusterMetadata) Reset() {
	*x = BackupClusterMetadata{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupClusterMetadata) ProtoMessage() {}

func (x *BackupClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupClusterMetadata.ProtoReflect.Descriptor instead.
func (*BackupClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{16}
}

func (x *BackupClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type RestoreClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the backup to create a cluster from.
	// To get the backup ID, use a [ClusterService.ListBackups] request.
	BackupId string `protobuf:"bytes,1,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	// Name of the new SPQR cluster. The name must be unique within the folder.
	// The name can't be changed after the SPQR cluster is created.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the new SPQR cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the SPQR cluster as “ key:value “ pairs. Maximum 64 per resource.
	// For example, "project": "mvp" or "source": "dictionary".
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Deployment environment of the new SPQR cluster.
	Environment Cluster_Environment `protobuf:"varint,5,opt,name=environment,proto3,enum=yandex.cloud.mdb.spqr.v1.Cluster_Environment" json:"environment,omitempty"`
	// Configuration for the SPQR cluster to be created.
	ConfigSpec *ConfigSpec `protobuf:"bytes,6,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// Configurations for SPQR hosts that should be created for
	// the cluster that is being created from the backup.
	HostSpecs []*HostSpec `protobuf:"bytes,7,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// ID of the network to create the SPQR cluster in.
	NetworkId string `protobuf:"bytes,8,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Required. ID of the folder to create the SPQR cluster in.
	FolderId string `protobuf:"bytes,9,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// User security groups
	SecurityGroupIds []string `protobuf:"bytes,11,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// Deletion Protection inhibits deletion of the cluster
	DeletionProtection bool `protobuf:"varint,12,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// Timestamp of the moment to which the SPQR cluster should be restored.
	Time *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=time,proto3" json:"time,omitempty"`
	// Flag that indicates whether a database should be restored to the first backup point
	// available just after the timestamp specified in the [time] field instead of just before.
	//
	// Possible values:
	// * false (default) - the restore point refers to the first backup moment before [time].
	// * true - the restore point refers to the first backup point after [time].
	TimeInclusive bool `protobuf:"varint,14,opt,name=time_inclusive,json=timeInclusive,proto3" json:"time_inclusive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestoreClusterRequest) Reset() {
	*x = RestoreClusterRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreClusterRequest) ProtoMessage() {}

func (x *RestoreClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreClusterRequest.ProtoReflect.Descriptor instead.
func (*RestoreClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{17}
}

func (x *RestoreClusterRequest) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

func (x *RestoreClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RestoreClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RestoreClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RestoreClusterRequest) GetEnvironment() Cluster_Environment {
	if x != nil {
		return x.Environment
	}
	return Cluster_ENVIRONMENT_UNSPECIFIED
}

func (x *RestoreClusterRequest) GetConfigSpec() *ConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *RestoreClusterRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

func (x *RestoreClusterRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *RestoreClusterRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *RestoreClusterRequest) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *RestoreClusterRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *RestoreClusterRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *RestoreClusterRequest) GetTimeInclusive() bool {
	if x != nil {
		return x.TimeInclusive
	}
	return false
}

type RestoreClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the new SPQR cluster that is being created from a backup.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the backup that is being used for creating a cluster.
	BackupId      string `protobuf:"bytes,2,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestoreClusterMetadata) Reset() {
	*x = RestoreClusterMetadata{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreClusterMetadata) ProtoMessage() {}

func (x *RestoreClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreClusterMetadata.ProtoReflect.Descriptor instead.
func (*RestoreClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{18}
}

func (x *RestoreClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RestoreClusterMetadata) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

type RescheduleMaintenanceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster to reschedule the maintenance operation for.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The type of reschedule request.
	RescheduleType RescheduleMaintenanceRequest_RescheduleType `protobuf:"varint,2,opt,name=reschedule_type,json=rescheduleType,proto3,enum=yandex.cloud.mdb.spqr.v1.RescheduleMaintenanceRequest_RescheduleType" json:"reschedule_type,omitempty"`
	// The time until which this maintenance operation should be delayed. The value should be ahead of the first time when the maintenance operation has been scheduled for no more than two weeks. The value can also point to the past moment of time if [reschedule_type.IMMEDIATE] reschedule type is chosen.
	DelayedUntil  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=delayed_until,json=delayedUntil,proto3" json:"delayed_until,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RescheduleMaintenanceRequest) Reset() {
	*x = RescheduleMaintenanceRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RescheduleMaintenanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RescheduleMaintenanceRequest) ProtoMessage() {}

func (x *RescheduleMaintenanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RescheduleMaintenanceRequest.ProtoReflect.Descriptor instead.
func (*RescheduleMaintenanceRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{19}
}

func (x *RescheduleMaintenanceRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RescheduleMaintenanceRequest) GetRescheduleType() RescheduleMaintenanceRequest_RescheduleType {
	if x != nil {
		return x.RescheduleType
	}
	return RescheduleMaintenanceRequest_RESCHEDULE_TYPE_UNSPECIFIED
}

func (x *RescheduleMaintenanceRequest) GetDelayedUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.DelayedUntil
	}
	return nil
}

// Rescheduled maintenance operation metadata.
type RescheduleMaintenanceMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ID of the SPQR cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required. The time until which this maintenance operation is to be delayed.
	// Can be in the past for rescheduled to "IMMEDIATE".
	DelayedUntil  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=delayed_until,json=delayedUntil,proto3" json:"delayed_until,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RescheduleMaintenanceMetadata) Reset() {
	*x = RescheduleMaintenanceMetadata{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RescheduleMaintenanceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RescheduleMaintenanceMetadata) ProtoMessage() {}

func (x *RescheduleMaintenanceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RescheduleMaintenanceMetadata.ProtoReflect.Descriptor instead.
func (*RescheduleMaintenanceMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{20}
}

func (x *RescheduleMaintenanceMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RescheduleMaintenanceMetadata) GetDelayedUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.DelayedUntil
	}
	return nil
}

type LogRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Log record timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Contents of the log record.
	Message       map[string]string `protobuf:"bytes,2,rep,name=message,proto3" json:"message,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogRecord) Reset() {
	*x = LogRecord{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRecord) ProtoMessage() {}

func (x *LogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRecord.ProtoReflect.Descriptor instead.
func (*LogRecord) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{21}
}

func (x *LogRecord) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LogRecord) GetMessage() map[string]string {
	if x != nil {
		return x.Message
	}
	return nil
}

type ListClusterLogsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster to request logs for.
	// To get the SPQR cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Columns from the logs table to request.
	// If no columns are specified, entire log records are returned.
	ColumnFilter []string `protobuf:"bytes,2,rep,name=column_filter,json=columnFilter,proto3" json:"column_filter,omitempty"`
	// Type of the service to request logs about.
	ServiceType ListClusterLogsRequest_ServiceType `protobuf:"varint,3,opt,name=service_type,json=serviceType,proto3,enum=yandex.cloud.mdb.spqr.v1.ListClusterLogsRequest_ServiceType" json:"service_type,omitempty"`
	// Start timestamp for the logs request, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	FromTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=from_time,json=fromTime,proto3" json:"from_time,omitempty"`
	// End timestamp for the logs request, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	ToTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=to_time,json=toTime,proto3" json:"to_time,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterLogsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Acceptable values are 0 to 1000, inclusive. Default value: 100.
	PageSize int64 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListClusterLogsResponse.next_page_token] returned by the previous list request.
	PageToken string `protobuf:"bytes,7,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Always return `next_page_token`, even if current page is empty.
	AlwaysNextPageToken bool `protobuf:"varint,8,opt,name=always_next_page_token,json=alwaysNextPageToken,proto3" json:"always_next_page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression must specify:
	// 1. The field name. Currently filtering can be applied to the [LogRecord.logs.message.hostname], [LogRecord.logs.message.severity] fields.
	// 2. A conditional operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
	// 3. The value. Must be 1-63 characters long and match the regular expression `^[a-z0-9.-]{1,61}$`.
	// Examples of a filter: `message.hostname='node1.db.cloud.yandex.net'`, `message.severity IN ('E', 'F')`
	Filter        string `protobuf:"bytes,9,opt,name=filter,proto3" json:"filter,omitempty"`
	OrderBy       string `protobuf:"bytes,10,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterLogsRequest) Reset() {
	*x = ListClusterLogsRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterLogsRequest) ProtoMessage() {}

func (x *ListClusterLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterLogsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterLogsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{22}
}

func (x *ListClusterLogsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterLogsRequest) GetColumnFilter() []string {
	if x != nil {
		return x.ColumnFilter
	}
	return nil
}

func (x *ListClusterLogsRequest) GetServiceType() ListClusterLogsRequest_ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return ListClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED
}

func (x *ListClusterLogsRequest) GetFromTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FromTime
	}
	return nil
}

func (x *ListClusterLogsRequest) GetToTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ToTime
	}
	return nil
}

func (x *ListClusterLogsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterLogsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListClusterLogsRequest) GetAlwaysNextPageToken() bool {
	if x != nil {
		return x.AlwaysNextPageToken
	}
	return false
}

func (x *ListClusterLogsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListClusterLogsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListClusterLogsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Requested log records.
	Logs []*LogRecord `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterLogsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterLogsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	// This value is interchangeable with `next_record_token` from StreamLogs method.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterLogsResponse) Reset() {
	*x = ListClusterLogsResponse{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterLogsResponse) ProtoMessage() {}

func (x *ListClusterLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterLogsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterLogsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{23}
}

func (x *ListClusterLogsResponse) GetLogs() []*LogRecord {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *ListClusterLogsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type StreamLogRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// One of the requested log records.
	Record *LogRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	// This token allows you to continue streaming logs starting from the exact
	// same record. To continue streaming, specify value of `next_record_token`
	// as value for `record_token` parameter in the next StreamLogs request.
	// This value is interchangeable with `next_page_token` from ListLogs method.
	NextRecordToken string `protobuf:"bytes,2,opt,name=next_record_token,json=nextRecordToken,proto3" json:"next_record_token,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StreamLogRecord) Reset() {
	*x = StreamLogRecord{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamLogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamLogRecord) ProtoMessage() {}

func (x *StreamLogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamLogRecord.ProtoReflect.Descriptor instead.
func (*StreamLogRecord) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{24}
}

func (x *StreamLogRecord) GetRecord() *LogRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *StreamLogRecord) GetNextRecordToken() string {
	if x != nil {
		return x.NextRecordToken
	}
	return ""
}

type StreamClusterLogsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ID of the SPQR cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Columns from logs table to get in the response.
	ColumnFilter []string                             `protobuf:"bytes,2,rep,name=column_filter,json=columnFilter,proto3" json:"column_filter,omitempty"`
	ServiceType  StreamClusterLogsRequest_ServiceType `protobuf:"varint,3,opt,name=service_type,json=serviceType,proto3,enum=yandex.cloud.mdb.spqr.v1.StreamClusterLogsRequest_ServiceType" json:"service_type,omitempty"`
	// Start timestamp for the logs request.
	FromTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=from_time,json=fromTime,proto3" json:"from_time,omitempty"`
	// End timestamp for the logs request.
	// If this field is not set, all existing logs will be sent and then the new ones as
	// they appear. In essence it has 'tail -f' semantics.
	ToTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=to_time,json=toTime,proto3" json:"to_time,omitempty"`
	// Record token. Set `record_token` to the `next_record_token` returned by a previous StreamLogs
	// request to start streaming from next log record.
	RecordToken string `protobuf:"bytes,6,opt,name=record_token,json=recordToken,proto3" json:"record_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression must specify:
	// 1. The field name. Currently filtering can be applied to the [LogRecord.logs.message.hostname], [LogRecord.logs.message.severity] fields.
	// 2. A conditional operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
	// 3. The value. Must be 1-63 characters long and match the regular expression `^[a-z0-9.-]{1,61}$`.
	// Examples of a filter: `message.hostname='node1.db.cloud.yandex.net'`, `message.severity IN ('E', 'F')`
	Filter        string `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamClusterLogsRequest) Reset() {
	*x = StreamClusterLogsRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamClusterLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamClusterLogsRequest) ProtoMessage() {}

func (x *StreamClusterLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamClusterLogsRequest.ProtoReflect.Descriptor instead.
func (*StreamClusterLogsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{25}
}

func (x *StreamClusterLogsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *StreamClusterLogsRequest) GetColumnFilter() []string {
	if x != nil {
		return x.ColumnFilter
	}
	return nil
}

func (x *StreamClusterLogsRequest) GetServiceType() StreamClusterLogsRequest_ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return StreamClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED
}

func (x *StreamClusterLogsRequest) GetFromTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FromTime
	}
	return nil
}

func (x *StreamClusterLogsRequest) GetToTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ToTime
	}
	return nil
}

func (x *StreamClusterLogsRequest) GetRecordToken() string {
	if x != nil {
		return x.RecordToken
	}
	return ""
}

func (x *StreamClusterLogsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListClusterOperationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR Cluster resource to list operations for.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterOperationsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Acceptable values are 0 to 1000, inclusive. Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListClusterOperationsResponse.next_page_token] returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterOperationsRequest) Reset() {
	*x = ListClusterOperationsRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterOperationsRequest) ProtoMessage() {}

func (x *ListClusterOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterOperationsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{26}
}

func (x *ListClusterOperationsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterOperationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterOperationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterOperationsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of Operation resources for the specified SPQR cluster.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterOperationsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterOperationsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterOperationsResponse) Reset() {
	*x = ListClusterOperationsResponse{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterOperationsResponse) ProtoMessage() {}

func (x *ListClusterOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterOperationsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{27}
}

func (x *ListClusterOperationsResponse) GetOperations() []*operation.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListClusterOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type BackupListFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Start time for the filter.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// End time for the filter.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Retention ID [Backup.retention_policy_id] of the associated backup policy.
	RetentionPolicyId string `protobuf:"bytes,3,opt,name=retention_policy_id,json=retentionPolicyId,proto3" json:"retention_policy_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BackupListFilter) Reset() {
	*x = BackupListFilter{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupListFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupListFilter) ProtoMessage() {}

func (x *BackupListFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupListFilter.ProtoReflect.Descriptor instead.
func (*BackupListFilter) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{28}
}

func (x *BackupListFilter) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *BackupListFilter) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *BackupListFilter) GetRetentionPolicyId() string {
	if x != nil {
		return x.RetentionPolicyId
	}
	return ""
}

type ListClusterBackupsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster.
	// To get the SPQR cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterBackupsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Acceptable values are 0 to 1000, inclusive. Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token.  To get the next page of results, set [page_token] to the
	// [ListClusterBackupsResponse.next_page_token] returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterBackupsRequest) Reset() {
	*x = ListClusterBackupsRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterBackupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterBackupsRequest) ProtoMessage() {}

func (x *ListClusterBackupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterBackupsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterBackupsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{29}
}

func (x *ListClusterBackupsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterBackupsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterBackupsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterBackupsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of SPQR Backup resources.
	Backups []*Backup `protobuf:"bytes,1,rep,name=backups,proto3" json:"backups,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterBackupsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterBackupsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterBackupsResponse) Reset() {
	*x = ListClusterBackupsResponse{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterBackupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterBackupsResponse) ProtoMessage() {}

func (x *ListClusterBackupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterBackupsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterBackupsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{30}
}

func (x *ListClusterBackupsResponse) GetBackups() []*Backup {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *ListClusterBackupsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type SpqrSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration and resource allocation for SPQR Router hosts.
	Router *SpqrSpec_Router `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty"`
	// Configuration and resource allocation for SPQR Coordinator hosts.
	Coordinator *SpqrSpec_Coordinator `protobuf:"bytes,2,opt,name=coordinator,proto3" json:"coordinator,omitempty"`
	// Configuration and resource allocation for PostgreSQL hosts.
	Postgresql *SpqrSpec_PostgreSQL `protobuf:"bytes,3,opt,name=postgresql,proto3" json:"postgresql,omitempty"`
	// Configuration and resource allocation for SPQR Infra (router+coordinator) hosts.
	Infra *SpqrSpec_Infra `protobuf:"bytes,5,opt,name=infra,proto3" json:"infra,omitempty"`
	// Password of the SPQR console.
	ConsolePassword string   `protobuf:"bytes,6,opt,name=console_password,json=consolePassword,proto3" json:"console_password,omitempty"`
	LogLevel        LogLevel `protobuf:"varint,7,opt,name=log_level,json=logLevel,proto3,enum=yandex.cloud.mdb.spqr.v1.LogLevel" json:"log_level,omitempty"`
	// Configuration for SPQR Balancer.
	Balancer      *BalancerSettings `protobuf:"bytes,8,opt,name=balancer,proto3" json:"balancer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpqrSpec) Reset() {
	*x = SpqrSpec{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpqrSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpqrSpec) ProtoMessage() {}

func (x *SpqrSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpqrSpec.ProtoReflect.Descriptor instead.
func (*SpqrSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{31}
}

func (x *SpqrSpec) GetRouter() *SpqrSpec_Router {
	if x != nil {
		return x.Router
	}
	return nil
}

func (x *SpqrSpec) GetCoordinator() *SpqrSpec_Coordinator {
	if x != nil {
		return x.Coordinator
	}
	return nil
}

func (x *SpqrSpec) GetPostgresql() *SpqrSpec_PostgreSQL {
	if x != nil {
		return x.Postgresql
	}
	return nil
}

func (x *SpqrSpec) GetInfra() *SpqrSpec_Infra {
	if x != nil {
		return x.Infra
	}
	return nil
}

func (x *SpqrSpec) GetConsolePassword() string {
	if x != nil {
		return x.ConsolePassword
	}
	return ""
}

func (x *SpqrSpec) GetLogLevel() LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return LogLevel_LOG_LEVEL_UNSPECIFIED
}

func (x *SpqrSpec) GetBalancer() *BalancerSettings {
	if x != nil {
		return x.Balancer
	}
	return nil
}

type ConfigSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration and resource allocation for a SPQR Beta cluster.
	SpqrSpec *SpqrSpec `protobuf:"bytes,1,opt,name=spqr_spec,json=spqrSpec,proto3" json:"spqr_spec,omitempty"`
	// Time to start the daily backup, in the UTC timezone.
	BackupWindowStart *timeofday.TimeOfDay `protobuf:"bytes,2,opt,name=backup_window_start,json=backupWindowStart,proto3" json:"backup_window_start,omitempty"`
	// Retain period of automatically created backup in days
	BackupRetainPeriodDays *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=backup_retain_period_days,json=backupRetainPeriodDays,proto3" json:"backup_retain_period_days,omitempty"`
	// Access policy to DB
	Access        *Access               `protobuf:"bytes,4,opt,name=access,proto3" json:"access,omitempty"`
	SoxAudit      *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=sox_audit,json=soxAudit,proto3" json:"sox_audit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigSpec) Reset() {
	*x = ConfigSpec{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSpec) ProtoMessage() {}

func (x *ConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSpec.ProtoReflect.Descriptor instead.
func (*ConfigSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{32}
}

func (x *ConfigSpec) GetSpqrSpec() *SpqrSpec {
	if x != nil {
		return x.SpqrSpec
	}
	return nil
}

func (x *ConfigSpec) GetBackupWindowStart() *timeofday.TimeOfDay {
	if x != nil {
		return x.BackupWindowStart
	}
	return nil
}

func (x *ConfigSpec) GetBackupRetainPeriodDays() *wrapperspb.Int64Value {
	if x != nil {
		return x.BackupRetainPeriodDays
	}
	return nil
}

func (x *ConfigSpec) GetAccess() *Access {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *ConfigSpec) GetSoxAudit() *wrapperspb.BoolValue {
	if x != nil {
		return x.SoxAudit
	}
	return nil
}

type ListClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster.
	// To get the SPQR cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterHostsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	// Acceptable values are 0 to 1000, inclusive. Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListClusterHostsResponse.next_page_token] returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterHostsRequest) Reset() {
	*x = ListClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterHostsRequest) ProtoMessage() {}

func (x *ListClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{33}
}

func (x *ListClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterHostsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterHostsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterHostsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of Host resources.
	Hosts []*Host `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterHostsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterHostsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterHostsResponse) Reset() {
	*x = ListClusterHostsResponse{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterHostsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterHostsResponse) ProtoMessage() {}

func (x *ListClusterHostsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterHostsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterHostsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{34}
}

func (x *ListClusterHostsResponse) GetHosts() []*Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *ListClusterHostsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type AddClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster to add hosts to.
	// To get the SPQR cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Configurations for SPQR hosts that should be added to the cluster.
	HostSpecs     []*HostSpec `protobuf:"bytes,2,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterHostsRequest) Reset() {
	*x = AddClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterHostsRequest) ProtoMessage() {}

func (x *AddClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*AddClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{35}
}

func (x *AddClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterHostsRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

type AddClusterHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster to which the hosts are being added.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts that are being added to the cluster.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterHostsMetadata) Reset() {
	*x = AddClusterHostsMetadata{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterHostsMetadata) ProtoMessage() {}

func (x *AddClusterHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterHostsMetadata.ProtoReflect.Descriptor instead.
func (*AddClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{36}
}

func (x *AddClusterHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterHostsMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type UpdateClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster to update hosts in.
	// To get the SPQR cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// New configurations to apply to hosts.
	UpdateHostSpecs []*UpdateHostSpec `protobuf:"bytes,2,rep,name=update_host_specs,json=updateHostSpecs,proto3" json:"update_host_specs,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateClusterHostsRequest) Reset() {
	*x = UpdateClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterHostsRequest) ProtoMessage() {}

func (x *UpdateClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterHostsRequest) GetUpdateHostSpecs() []*UpdateHostSpec {
	if x != nil {
		return x.UpdateHostSpecs
	}
	return nil
}

type UpdateClusterHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster to update hosts in.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts that are being updated.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterHostsMetadata) Reset() {
	*x = UpdateClusterHostsMetadata{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterHostsMetadata) ProtoMessage() {}

func (x *UpdateClusterHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterHostsMetadata.ProtoReflect.Descriptor instead.
func (*UpdateClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateClusterHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterHostsMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type UpdateHostSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the host to update.
	// To get the SPQR host name, use a [ClusterService.ListHosts] request.
	HostName string `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// Field mask that specifies which fields of the SPQR host should be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Whether the host should get a public IP address on creation.
	AssignPublicIp bool `protobuf:"varint,3,opt,name=assign_public_ip,json=assignPublicIp,proto3" json:"assign_public_ip,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateHostSpec) Reset() {
	*x = UpdateHostSpec{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHostSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHostSpec) ProtoMessage() {}

func (x *UpdateHostSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHostSpec.ProtoReflect.Descriptor instead.
func (*UpdateHostSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateHostSpec) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *UpdateHostSpec) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateHostSpec) GetAssignPublicIp() bool {
	if x != nil {
		return x.AssignPublicIp
	}
	return false
}

type DeleteClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster to remove hosts from.
	// To get the SPQR cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts to delete.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterHostsRequest) Reset() {
	*x = DeleteClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterHostsRequest) ProtoMessage() {}

func (x *DeleteClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{40}
}

func (x *DeleteClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterHostsRequest) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type DeleteClusterHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster to remove hosts from.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of hosts that are being deleted.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterHostsMetadata) Reset() {
	*x = DeleteClusterHostsMetadata{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterHostsMetadata) ProtoMessage() {}

func (x *DeleteClusterHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterHostsMetadata.ProtoReflect.Descriptor instead.
func (*DeleteClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{41}
}

func (x *DeleteClusterHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterHostsMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type ResetupHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ID of the SPQR cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required. Name of the hosts to resetup.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetupHostsRequest) Reset() {
	*x = ResetupHostsRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetupHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetupHostsRequest) ProtoMessage() {}

func (x *ResetupHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetupHostsRequest.ProtoReflect.Descriptor instead.
func (*ResetupHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{42}
}

func (x *ResetupHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ResetupHostsRequest) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type ResetupHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. ID of the SPQR cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Required. The name of hosts to resetup.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetupHostsMetadata) Reset() {
	*x = ResetupHostsMetadata{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetupHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetupHostsMetadata) ProtoMessage() {}

func (x *ResetupHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetupHostsMetadata.ProtoReflect.Descriptor instead.
func (*ResetupHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{43}
}

func (x *ResetupHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ResetupHostsMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type GetClusterShardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster that the shard belongs to.
	// To get the cluster ID use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the SPQR shard to return.
	// To get the name of the shard use a [ClusterService.ListShards] request.
	ShardName     string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterShardRequest) Reset() {
	*x = GetClusterShardRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterShardRequest) ProtoMessage() {}

func (x *GetClusterShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterShardRequest.ProtoReflect.Descriptor instead.
func (*GetClusterShardRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{44}
}

func (x *GetClusterShardRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *GetClusterShardRequest) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

type ListClusterShardsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster to list databases in.
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size], the service returns a [ListClusterShardsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListClusterShardsResponse.next_page_token] returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterShardsRequest) Reset() {
	*x = ListClusterShardsRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterShardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterShardsRequest) ProtoMessage() {}

func (x *ListClusterShardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterShardsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterShardsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{45}
}

func (x *ListClusterShardsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterShardsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterShardsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterShardsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of SPQR shards.
	Shards []*Shard `protobuf:"bytes,1,rep,name=shards,proto3" json:"shards,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListClusterShardsRequest.page_size], use the [next_page_token] as the value
	// for the [ListClusterShardsRequest.page_token] parameter in the next list request. Each subsequent
	// list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterShardsResponse) Reset() {
	*x = ListClusterShardsResponse{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterShardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterShardsResponse) ProtoMessage() {}

func (x *ListClusterShardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterShardsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterShardsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{46}
}

func (x *ListClusterShardsResponse) GetShards() []*Shard {
	if x != nil {
		return x.Shards
	}
	return nil
}

func (x *ListClusterShardsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type AddClusterShardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster to add a shard to.
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Properties of the shard to be created.
	ShardSpec     *ShardSpec `protobuf:"bytes,4,opt,name=shard_spec,json=shardSpec,proto3" json:"shard_spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterShardRequest) Reset() {
	*x = AddClusterShardRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterShardRequest) ProtoMessage() {}

func (x *AddClusterShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterShardRequest.ProtoReflect.Descriptor instead.
func (*AddClusterShardRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{47}
}

func (x *AddClusterShardRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterShardRequest) GetShardSpec() *ShardSpec {
	if x != nil {
		return x.ShardSpec
	}
	return nil
}

type AddClusterShardMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster that a shard is being added to.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the shard being added.
	ShardName     string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddClusterShardMetadata) Reset() {
	*x = AddClusterShardMetadata{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddClusterShardMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClusterShardMetadata) ProtoMessage() {}

func (x *AddClusterShardMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClusterShardMetadata.ProtoReflect.Descriptor instead.
func (*AddClusterShardMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{48}
}

func (x *AddClusterShardMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddClusterShardMetadata) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

type DeleteClusterShardRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster to delete a shard in.
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the SPQR shard to delete.
	// To get the name of the shard use a [ClusterService.ListShards] request.
	ShardName     string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterShardRequest) Reset() {
	*x = DeleteClusterShardRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterShardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterShardRequest) ProtoMessage() {}

func (x *DeleteClusterShardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterShardRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterShardRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{49}
}

func (x *DeleteClusterShardRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterShardRequest) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

type DeleteClusterShardMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster that a shard is being deleted in.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Name of the shard being deleted.
	ShardName     string `protobuf:"bytes,2,opt,name=shard_name,json=shardName,proto3" json:"shard_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterShardMetadata) Reset() {
	*x = DeleteClusterShardMetadata{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterShardMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterShardMetadata) ProtoMessage() {}

func (x *DeleteClusterShardMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterShardMetadata.ProtoReflect.Descriptor instead.
func (*DeleteClusterShardMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{50}
}

func (x *DeleteClusterShardMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *DeleteClusterShardMetadata) GetShardName() string {
	if x != nil {
		return x.ShardName
	}
	return ""
}

type AddSubclusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SPQR cluster that subcluster is being added to.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Configurations for SPQR hosts that should be created
	HostSpecs []*HostSpec `protobuf:"bytes,2,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// Resources allocated to each host.
	Resources     *Resources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddSubclusterRequest) Reset() {
	*x = AddSubclusterRequest{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddSubclusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubclusterRequest) ProtoMessage() {}

func (x *AddSubclusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubclusterRequest.ProtoReflect.Descriptor instead.
func (*AddSubclusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{51}
}

func (x *AddSubclusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *AddSubclusterRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

func (x *AddSubclusterRequest) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

type SpqrSpec_Router struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for router hosts.
	Config *RouterSettings `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each host.
	Resources     *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpqrSpec_Router) Reset() {
	*x = SpqrSpec_Router{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpqrSpec_Router) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpqrSpec_Router) ProtoMessage() {}

func (x *SpqrSpec_Router) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpqrSpec_Router.ProtoReflect.Descriptor instead.
func (*SpqrSpec_Router) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{31, 0}
}

func (x *SpqrSpec_Router) GetConfig() *RouterSettings {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *SpqrSpec_Router) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

type SpqrSpec_Coordinator struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for coordinator hosts.
	Config *CoordinatorSettings `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each host.
	Resources     *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpqrSpec_Coordinator) Reset() {
	*x = SpqrSpec_Coordinator{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpqrSpec_Coordinator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpqrSpec_Coordinator) ProtoMessage() {}

func (x *SpqrSpec_Coordinator) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpqrSpec_Coordinator.ProtoReflect.Descriptor instead.
func (*SpqrSpec_Coordinator) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{31, 1}
}

func (x *SpqrSpec_Coordinator) GetConfig() *CoordinatorSettings {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *SpqrSpec_Coordinator) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

type SpqrSpec_PostgreSQL struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration for PostgreSQL hosts.
	Config *PostgreSQLSettings `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Resources allocated to each host.
	Resources     *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpqrSpec_PostgreSQL) Reset() {
	*x = SpqrSpec_PostgreSQL{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpqrSpec_PostgreSQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpqrSpec_PostgreSQL) ProtoMessage() {}

func (x *SpqrSpec_PostgreSQL) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpqrSpec_PostgreSQL.ProtoReflect.Descriptor instead.
func (*SpqrSpec_PostgreSQL) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{31, 2}
}

func (x *SpqrSpec_PostgreSQL) GetConfig() *PostgreSQLSettings {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *SpqrSpec_PostgreSQL) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

type SpqrSpec_Infra struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resources allocated to each host
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	// Router related configuration
	Router *RouterSettings `protobuf:"bytes,3,opt,name=router,proto3" json:"router,omitempty"`
	// Coordinator related configuration
	Coordinator   *CoordinatorSettings `protobuf:"bytes,4,opt,name=coordinator,proto3" json:"coordinator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpqrSpec_Infra) Reset() {
	*x = SpqrSpec_Infra{}
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpqrSpec_Infra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpqrSpec_Infra) ProtoMessage() {}

func (x *SpqrSpec_Infra) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpqrSpec_Infra.ProtoReflect.Descriptor instead.
func (*SpqrSpec_Infra) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP(), []int{31, 3}
}

func (x *SpqrSpec_Infra) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *SpqrSpec_Infra) GetRouter() *RouterSettings {
	if x != nil {
		return x.Router
	}
	return nil
}

func (x *SpqrSpec_Infra) GetCoordinator() *CoordinatorSettings {
	if x != nil {
		return x.Coordinator
	}
	return nil
}

var File_yandex_cloud_mdb_spqr_v1_cluster_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDesc = "" +
	"\n" +
	".yandex/cloud/mdb/spqr/v1/cluster_service.proto\x12\x18yandex.cloud.mdb.spqr.v1\x1a\x1cgoogle/api/annotations.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1bgoogle/type/timeofday.proto\x1a yandex/cloud/api/operation.proto\x1a&yandex/cloud/operation/operation.proto\x1a\x1dyandex/cloud/validation.proto\x1a%yandex/cloud/mdb/spqr/v1/backup.proto\x1a&yandex/cloud/mdb/spqr/v1/cluster.proto\x1a%yandex/cloud/mdb/spqr/v1/config.proto\x1a'yandex/cloud/mdb/spqr/v1/database.proto\x1a#yandex/cloud/mdb/spqr/v1/host.proto\x1a#yandex/cloud/mdb/spqr/v1/user.proto\x1a*yandex/cloud/mdb/spqr/v1/maintenance.proto\x1a$yandex/cloud/mdb/spqr/v1/shard.proto\"@\n" +
	"\x11GetClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"\xb7\x01\n" +
	"\x13ListClustersRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\x12\"\n" +
	"\x06filter\x18\x04 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"}\n" +
	"\x14ListClustersResponse\x12=\n" +
	"\bclusters\x18\x01 \x03(\v2!.yandex.cloud.mdb.spqr.v1.ClusterR\bclusters\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xa7\b\n" +
	"\x14CreateClusterRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x122\n" +
	"\x04name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x04name\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x97\x01\n" +
	"\x06labels\x18\x04 \x03(\v2:.yandex.cloud.mdb.spqr.v1.CreateClusterRequest.LabelsEntryBC\xf2\xc71\x0f[-_./\\@0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x1c\x12\x14[a-z][-_./\\@0-9a-z]*\x1a\x041-63R\x06labels\x12U\n" +
	"\venvironment\x18\x05 \x01(\x0e2-.yandex.cloud.mdb.spqr.v1.Cluster.EnvironmentB\x04\xe8\xc71\x01R\venvironment\x12K\n" +
	"\vconfig_spec\x18\x06 \x01(\v2$.yandex.cloud.mdb.spqr.v1.ConfigSpecB\x04\xe8\xc71\x01R\n" +
	"configSpec\x12M\n" +
	"\x0edatabase_specs\x18\a \x03(\v2&.yandex.cloud.mdb.spqr.v1.DatabaseSpecR\rdatabaseSpecs\x12A\n" +
	"\n" +
	"user_specs\x18\b \x03(\v2\".yandex.cloud.mdb.spqr.v1.UserSpecR\tuserSpecs\x12I\n" +
	"\n" +
	"host_specs\x18\t \x03(\v2\".yandex.cloud.mdb.spqr.v1.HostSpecB\x06\x82\xc81\x02>0R\thostSpecs\x12,\n" +
	"\n" +
	"network_id\x18\n" +
	" \x01(\tB\r\xe8\xc71\x01\x8a\xc81\x05<=150R\tnetworkId\x12,\n" +
	"\x12security_group_ids\x18\v \x03(\tR\x10securityGroupIds\x12/\n" +
	"\x13deletion_protection\x18\f \x01(\bR\x12deletionProtection\x12Z\n" +
	"\x12maintenance_window\x18\r \x01(\v2+.yandex.cloud.mdb.spqr.v1.MaintenanceWindowR\x11maintenanceWindow\x12D\n" +
	"\vshard_specs\x18\x0e \x03(\v2#.yandex.cloud.mdb.spqr.v1.ShardSpecR\n" +
	"shardSpecs\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"6\n" +
	"\x15CreateClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\xde\x05\n" +
	"\x14UpdateClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12.\n" +
	"\x04name\x18\x03 \x01(\tB\x1a\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x04name\x12+\n" +
	"\vdescription\x18\x04 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x97\x01\n" +
	"\x06labels\x18\x05 \x03(\v2:.yandex.cloud.mdb.spqr.v1.UpdateClusterRequest.LabelsEntryBC\xf2\xc71\x0f[-_./\\@0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x1c\x12\x14[a-z][-_./\\@0-9a-z]*\x1a\x041-63R\x06labels\x12E\n" +
	"\vconfig_spec\x18\x06 \x01(\v2$.yandex.cloud.mdb.spqr.v1.ConfigSpecR\n" +
	"configSpec\x12Z\n" +
	"\x12maintenance_window\x18\a \x01(\v2+.yandex.cloud.mdb.spqr.v1.MaintenanceWindowR\x11maintenanceWindow\x12,\n" +
	"\x12security_group_ids\x18\b \x03(\tR\x10securityGroupIds\x12/\n" +
	"\x13deletion_protection\x18\t \x01(\bR\x12deletionProtection\x12(\n" +
	"\n" +
	"network_id\x18\n" +
	" \x01(\tB\t\x8a\xc81\x05<=150R\tnetworkId\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"6\n" +
	"\x15UpdateClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"C\n" +
	"\x14DeleteClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"6\n" +
	"\x15DeleteClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"B\n" +
	"\x13StartClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"5\n" +
	"\x14StartClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"A\n" +
	"\x12StopClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"4\n" +
	"\x13StopClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\x83\x01\n" +
	"\x12MoveClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12@\n" +
	"\x15destination_folder_id\x18\x02 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x13destinationFolderId\"\x92\x01\n" +
	"\x13MoveClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12(\n" +
	"\x10source_folder_id\x18\x02 \x01(\tR\x0esourceFolderId\x122\n" +
	"\x15destination_folder_id\x18\x03 \x01(\tR\x13destinationFolderId\"C\n" +
	"\x14BackupClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"6\n" +
	"\x15BackupClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\xf1\x06\n" +
	"\x15RestoreClusterRequest\x12!\n" +
	"\tbackup_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\bbackupId\x122\n" +
	"\x04name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x04name\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x98\x01\n" +
	"\x06labels\x18\x04 \x03(\v2;.yandex.cloud.mdb.spqr.v1.RestoreClusterRequest.LabelsEntryBC\xf2\xc71\x0f[-_./\\@0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x1c\x12\x14[a-z][-_./\\@0-9a-z]*\x1a\x041-63R\x06labels\x12U\n" +
	"\venvironment\x18\x05 \x01(\x0e2-.yandex.cloud.mdb.spqr.v1.Cluster.EnvironmentB\x04\xe8\xc71\x01R\venvironment\x12K\n" +
	"\vconfig_spec\x18\x06 \x01(\v2$.yandex.cloud.mdb.spqr.v1.ConfigSpecB\x04\xe8\xc71\x01R\n" +
	"configSpec\x12I\n" +
	"\n" +
	"host_specs\x18\a \x03(\v2\".yandex.cloud.mdb.spqr.v1.HostSpecB\x06\x82\xc81\x02>0R\thostSpecs\x12,\n" +
	"\n" +
	"network_id\x18\b \x01(\tB\r\xe8\xc71\x01\x8a\xc81\x05<=150R\tnetworkId\x12%\n" +
	"\tfolder_id\x18\t \x01(\tB\b\x8a\xc81\x04<=50R\bfolderId\x12,\n" +
	"\x12security_group_ids\x18\v \x03(\tR\x10securityGroupIds\x12/\n" +
	"\x13deletion_protection\x18\f \x01(\bR\x12deletionProtection\x12.\n" +
	"\x04time\x18\r \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12%\n" +
	"\x0etime_inclusive\x18\x0e \x01(\bR\rtimeInclusive\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01J\x04\b\n" +
	"\x10\v\"T\n" +
	"\x16RestoreClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1b\n" +
	"\tbackup_id\x18\x02 \x01(\tR\bbackupId\"\xf2\x02\n" +
	"\x1cRescheduleMaintenanceRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12t\n" +
	"\x0freschedule_type\x18\x02 \x01(\x0e2E.yandex.cloud.mdb.spqr.v1.RescheduleMaintenanceRequest.RescheduleTypeB\x04\xe8\xc71\x01R\x0erescheduleType\x12?\n" +
	"\rdelayed_until\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\fdelayedUntil\"n\n" +
	"\x0eRescheduleType\x12\x1f\n" +
	"\x1bRESCHEDULE_TYPE_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tIMMEDIATE\x10\x01\x12\x19\n" +
	"\x15NEXT_AVAILABLE_WINDOW\x10\x02\x12\x11\n" +
	"\rSPECIFIC_TIME\x10\x03\"\x85\x01\n" +
	"\x1dRescheduleMaintenanceMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12?\n" +
	"\rdelayed_until\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\fdelayedUntilJ\x04\b\x02\x10\x04\"\xcd\x01\n" +
	"\tLogRecord\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12J\n" +
	"\amessage\x18\x02 \x03(\v20.yandex.cloud.mdb.spqr.v1.LogRecord.MessageEntryR\amessage\x1a:\n" +
	"\fMessageEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe5\x04\n" +
	"\x16ListClusterLogsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12#\n" +
	"\rcolumn_filter\x18\x02 \x03(\tR\fcolumnFilter\x12_\n" +
	"\fservice_type\x18\x03 \x01(\x0e2<.yandex.cloud.mdb.spqr.v1.ListClusterLogsRequest.ServiceTypeR\vserviceType\x127\n" +
	"\tfrom_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\bfromTime\x123\n" +
	"\ato_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x06toTime\x12'\n" +
	"\tpage_size\x18\x06 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\a \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\x123\n" +
	"\x16always_next_page_token\x18\b \x01(\bR\x13alwaysNextPageToken\x12\"\n" +
	"\x06filter\x18\t \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\x12\x19\n" +
	"\border_by\x18\n" +
	" \x01(\tR\aorderBy\"c\n" +
	"\vServiceType\x12\x1c\n" +
	"\x18SERVICE_TYPE_UNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"POSTGRESQL\x10\x01\x12\n" +
	"\n" +
	"\x06ROUTER\x10\x02\x12\x0f\n" +
	"\vCOORDINATOR\x10\x03\x12\t\n" +
	"\x05INFRA\x10\x04\"z\n" +
	"\x17ListClusterLogsResponse\x127\n" +
	"\x04logs\x18\x01 \x03(\v2#.yandex.cloud.mdb.spqr.v1.LogRecordR\x04logs\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"z\n" +
	"\x0fStreamLogRecord\x12;\n" +
	"\x06record\x18\x01 \x01(\v2#.yandex.cloud.mdb.spqr.v1.LogRecordR\x06record\x12*\n" +
	"\x11next_record_token\x18\x02 \x01(\tR\x0fnextRecordToken\"\xf4\x03\n" +
	"\x18StreamClusterLogsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12#\n" +
	"\rcolumn_filter\x18\x02 \x03(\tR\fcolumnFilter\x12a\n" +
	"\fservice_type\x18\x03 \x01(\x0e2>.yandex.cloud.mdb.spqr.v1.StreamClusterLogsRequest.ServiceTypeR\vserviceType\x127\n" +
	"\tfrom_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\bfromTime\x123\n" +
	"\ato_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x06toTime\x12,\n" +
	"\frecord_token\x18\x06 \x01(\tB\t\x8a\xc81\x05<=100R\vrecordToken\x12\"\n" +
	"\x06filter\x18\a \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"c\n" +
	"\vServiceType\x12\x1c\n" +
	"\x18SERVICE_TYPE_UNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"POSTGRESQL\x10\x01\x12\n" +
	"\n" +
	"\x06ROUTER\x10\x02\x12\x0f\n" +
	"\vCOORDINATOR\x10\x03\x12\t\n" +
	"\x05INFRA\x10\x04\"\x9e\x01\n" +
	"\x1cListClusterOperationsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x8a\x01\n" +
	"\x1dListClusterOperationsResponse\x12A\n" +
	"\n" +
	"operations\x18\x01 \x03(\v2!.yandex.cloud.operation.OperationR\n" +
	"operations\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xb4\x01\n" +
	"\x10BackupListFilter\x129\n" +
	"\n" +
	"start_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12.\n" +
	"\x13retention_policy_id\x18\x03 \x01(\tR\x11retentionPolicyId\"\x9b\x01\n" +
	"\x19ListClusterBackupsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x80\x01\n" +
	"\x1aListClusterBackupsResponse\x12:\n" +
	"\abackups\x18\x01 \x03(\v2 .yandex.cloud.mdb.spqr.v1.BackupR\abackups\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x90\t\n" +
	"\bSpqrSpec\x12A\n" +
	"\x06router\x18\x01 \x01(\v2).yandex.cloud.mdb.spqr.v1.SpqrSpec.RouterR\x06router\x12P\n" +
	"\vcoordinator\x18\x02 \x01(\v2..yandex.cloud.mdb.spqr.v1.SpqrSpec.CoordinatorR\vcoordinator\x12M\n" +
	"\n" +
	"postgresql\x18\x03 \x01(\v2-.yandex.cloud.mdb.spqr.v1.SpqrSpec.PostgreSQLR\n" +
	"postgresql\x12>\n" +
	"\x05infra\x18\x05 \x01(\v2(.yandex.cloud.mdb.spqr.v1.SpqrSpec.InfraR\x05infra\x12)\n" +
	"\x10console_password\x18\x06 \x01(\tR\x0fconsolePassword\x12?\n" +
	"\tlog_level\x18\a \x01(\x0e2\".yandex.cloud.mdb.spqr.v1.LogLevelR\blogLevel\x12F\n" +
	"\bbalancer\x18\b \x01(\v2*.yandex.cloud.mdb.spqr.v1.BalancerSettingsR\bbalancer\x1a\x8d\x01\n" +
	"\x06Router\x12@\n" +
	"\x06config\x18\x01 \x01(\v2(.yandex.cloud.mdb.spqr.v1.RouterSettingsR\x06config\x12A\n" +
	"\tresources\x18\x02 \x01(\v2#.yandex.cloud.mdb.spqr.v1.ResourcesR\tresources\x1a\x97\x01\n" +
	"\vCoordinator\x12E\n" +
	"\x06config\x18\x01 \x01(\v2-.yandex.cloud.mdb.spqr.v1.CoordinatorSettingsR\x06config\x12A\n" +
	"\tresources\x18\x02 \x01(\v2#.yandex.cloud.mdb.spqr.v1.ResourcesR\tresources\x1a\x95\x01\n" +
	"\n" +
	"PostgreSQL\x12D\n" +
	"\x06config\x18\x01 \x01(\v2,.yandex.cloud.mdb.spqr.v1.PostgreSQLSettingsR\x06config\x12A\n" +
	"\tresources\x18\x02 \x01(\v2#.yandex.cloud.mdb.spqr.v1.ResourcesR\tresources\x1a\xe3\x01\n" +
	"\x05Infra\x12A\n" +
	"\tresources\x18\x02 \x01(\v2#.yandex.cloud.mdb.spqr.v1.ResourcesR\tresources\x12@\n" +
	"\x06router\x18\x03 \x01(\v2(.yandex.cloud.mdb.spqr.v1.RouterSettingsR\x06router\x12O\n" +
	"\vcoordinator\x18\x04 \x01(\v2-.yandex.cloud.mdb.spqr.v1.CoordinatorSettingsR\vcoordinatorJ\x04\b\x01\x10\x02J\x04\b\x04\x10\x05\"\xe0\x02\n" +
	"\n" +
	"ConfigSpec\x12?\n" +
	"\tspqr_spec\x18\x01 \x01(\v2\".yandex.cloud.mdb.spqr.v1.SpqrSpecR\bspqrSpec\x12F\n" +
	"\x13backup_window_start\x18\x02 \x01(\v2\x16.google.type.TimeOfDayR\x11backupWindowStart\x12V\n" +
	"\x19backup_retain_period_days\x18\x03 \x01(\v2\x1b.google.protobuf.Int64ValueR\x16backupRetainPeriodDays\x128\n" +
	"\x06access\x18\x04 \x01(\v2 .yandex.cloud.mdb.spqr.v1.AccessR\x06access\x127\n" +
	"\tsox_audit\x18\x05 \x01(\v2\x1a.google.protobuf.BoolValueR\bsoxAudit\"\x99\x01\n" +
	"\x17ListClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"x\n" +
	"\x18ListClusterHostsResponse\x124\n" +
	"\x05hosts\x18\x01 \x03(\v2\x1e.yandex.cloud.mdb.spqr.v1.HostR\x05hosts\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x8f\x01\n" +
	"\x16AddClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12H\n" +
	"\n" +
	"host_specs\x18\x02 \x03(\v2\".yandex.cloud.mdb.spqr.v1.HostSpecB\x05\x82\xc81\x011R\thostSpecs\"W\n" +
	"\x17AddClusterHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"\xa5\x01\n" +
	"\x19UpdateClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12[\n" +
	"\x11update_host_specs\x18\x02 \x03(\v2(.yandex.cloud.mdb.spqr.v1.UpdateHostSpecB\x05\x82\xc81\x011R\x0fupdateHostSpecs\"Z\n" +
	"\x1aUpdateClusterHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"\x9a\x01\n" +
	"\x0eUpdateHostSpec\x12!\n" +
	"\thost_name\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\bhostName\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12(\n" +
	"\x10assign_public_ip\x18\x03 \x01(\bR\x0eassignPublicIp\"w\n" +
	"\x19DeleteClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12-\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tB\x0e\x82\xc81\x011\x8a\xc81\x05<=253R\thostNames\"Z\n" +
	"\x1aDeleteClusterHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"r\n" +
	"\x13ResetupHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12.\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tB\x0f\x82\xc81\x02>0\x8a\xc81\x05<=253R\thostNames\"T\n" +
	"\x14ResetupHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"\x84\x01\n" +
	"\x16GetClusterShardRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12=\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\tshardName\"\x9a\x01\n" +
	"\x18ListClusterShardsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"|\n" +
	"\x19ListClusterShardsResponse\x127\n" +
	"\x06shards\x18\x01 \x03(\v2\x1f.yandex.cloud.mdb.spqr.v1.ShardR\x06shards\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x9b\x01\n" +
	"\x16AddClusterShardRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12H\n" +
	"\n" +
	"shard_spec\x18\x04 \x01(\v2#.yandex.cloud.mdb.spqr.v1.ShardSpecB\x04\xe8\xc71\x01R\tshardSpecJ\x04\b\x02\x10\x03J\x04\b\x03\x10\x04\"W\n" +
	"\x17AddClusterShardMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tR\tshardName\"\x93\x01\n" +
	"\x19DeleteClusterShardRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12I\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tB*\xe8\xc71\x01\xf2\xc71\x1a^[a-zA-Z0-9][a-zA-Z0-9-]*$\x8a\xc81\x04<=63R\tshardName\"Z\n" +
	"\x1aDeleteClusterShardMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"shard_name\x18\x02 \x01(\tR\tshardName\"\xce\x01\n" +
	"\x14AddSubclusterRequest\x12#\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\tclusterId\x12H\n" +
	"\n" +
	"host_specs\x18\x02 \x03(\v2\".yandex.cloud.mdb.spqr.v1.HostSpecB\x05\x82\xc81\x011R\thostSpecs\x12G\n" +
	"\tresources\x18\x03 \x01(\v2#.yandex.cloud.mdb.spqr.v1.ResourcesB\x04\xe8\xc71\x01R\tresources2\xcf$\n" +
	"\x0eClusterService\x12\x85\x01\n" +
	"\x03Get\x12+.yandex.cloud.mdb.spqr.v1.GetClusterRequest\x1a!.yandex.cloud.mdb.spqr.v1.Cluster\".\x82\xd3\xe4\x93\x02(\x12&/managed-spqr/v1/clusters/{cluster_id}\x12\x88\x01\n" +
	"\x04List\x12-.yandex.cloud.mdb.spqr.v1.ListClustersRequest\x1a..yandex.cloud.mdb.spqr.v1.ListClustersResponse\"!\x82\xd3\xe4\x93\x02\x1b\x12\x19/managed-spqr/v1/clusters\x12\xa5\x01\n" +
	"\x06Create\x12..yandex.cloud.mdb.spqr.v1.CreateClusterRequest\x1a!.yandex.cloud.operation.Operation\"H\xb2\xd2* \n" +
	"\x15CreateClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02\x1e:\x01*\"\x19/managed-spqr/v1/clusters\x12\xb2\x01\n" +
	"\x06Update\x12..yandex.cloud.mdb.spqr.v1.UpdateClusterRequest\x1a!.yandex.cloud.operation.Operation\"U\xb2\xd2* \n" +
	"\x15UpdateClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02+:\x01*2&/managed-spqr/v1/clusters/{cluster_id}\x12\xbd\x01\n" +
	"\x06Delete\x12..yandex.cloud.mdb.spqr.v1.DeleteClusterRequest\x1a!.yandex.cloud.operation.Operation\"`\xb2\xd2*.\n" +
	"\x15DeleteClusterMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02(*&/managed-spqr/v1/clusters/{cluster_id}\x12\xbf\x01\n" +
	"\rAddSubcluster\x12..yandex.cloud.mdb.spqr.v1.AddSubclusterRequest\x1a!.yandex.cloud.operation.Operation\"[\xb2\xd2*0\n" +
	"\x17AddClusterHostsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02!:\x01*\"\x1c/managed-spqr/v1/subclusters\x12\xb2\x01\n" +
	"\x05Start\x12-.yandex.cloud.mdb.spqr.v1.StartClusterRequest\x1a!.yandex.cloud.operation.Operation\"W\xb2\xd2*\x1f\n" +
	"\x14StartClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02.\",/managed-spqr/v1/clusters/{cluster_id}:start\x12\xae\x01\n" +
	"\x04Stop\x12,.yandex.cloud.mdb.spqr.v1.StopClusterRequest\x1a!.yandex.cloud.operation.Operation\"U\xb2\xd2*\x1e\n" +
	"\x13StopClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02-\"+/managed-spqr/v1/clusters/{cluster_id}:stop\x12\xb1\x01\n" +
	"\x04Move\x12,.yandex.cloud.mdb.spqr.v1.MoveClusterRequest\x1a!.yandex.cloud.operation.Operation\"X\xb2\xd2*\x1e\n" +
	"\x13MoveClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x020:\x01*\"+/managed-spqr/v1/clusters/{cluster_id}:move\x12\xb6\x01\n" +
	"\x06Backup\x12..yandex.cloud.mdb.spqr.v1.BackupClusterRequest\x1a!.yandex.cloud.operation.Operation\"Y\xb2\xd2* \n" +
	"\x15BackupClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02/\"-/managed-spqr/v1/clusters/{cluster_id}:backup\x12\xb0\x01\n" +
	"\aRestore\x12/.yandex.cloud.mdb.spqr.v1.RestoreClusterRequest\x1a!.yandex.cloud.operation.Operation\"Q\xb2\xd2*!\n" +
	"\x16RestoreClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02&:\x01*\"!/managed-spqr/v1/clusters:restore\x12\xe7\x01\n" +
	"\x15RescheduleMaintenance\x126.yandex.cloud.mdb.spqr.v1.RescheduleMaintenanceRequest\x1a!.yandex.cloud.operation.Operation\"s\xb2\xd2*(\n" +
	"\x1dRescheduleMaintenanceMetadata\x12\aCluster\x82\xd3\xe4\x93\x02A:\x01*\"</managed-spqr/v1/clusters/{cluster_id}:rescheduleMaintenance\x12\xa4\x01\n" +
	"\bListLogs\x120.yandex.cloud.mdb.spqr.v1.ListClusterLogsRequest\x1a1.yandex.cloud.mdb.spqr.v1.ListClusterLogsResponse\"3\x82\xd3\xe4\x93\x02-\x12+/managed-spqr/v1/clusters/{cluster_id}:logs\x12\xa9\x01\n" +
	"\n" +
	"StreamLogs\x122.yandex.cloud.mdb.spqr.v1.StreamClusterLogsRequest\x1a).yandex.cloud.mdb.spqr.v1.StreamLogRecord\":\x82\xd3\xe4\x93\x024\x122/managed-spqr/v1/clusters/{cluster_id}:stream_logs0\x01\x12\xbc\x01\n" +
	"\x0eListOperations\x126.yandex.cloud.mdb.spqr.v1.ListClusterOperationsRequest\x1a7.yandex.cloud.mdb.spqr.v1.ListClusterOperationsResponse\"9\x82\xd3\xe4\x93\x023\x121/managed-spqr/v1/clusters/{cluster_id}/operations\x12\xb0\x01\n" +
	"\vListBackups\x123.yandex.cloud.mdb.spqr.v1.ListClusterBackupsRequest\x1a4.yandex.cloud.mdb.spqr.v1.ListClusterBackupsResponse\"6\x82\xd3\xe4\x93\x020\x12./managed-spqr/v1/clusters/{cluster_id}/backups\x12\xa8\x01\n" +
	"\tListHosts\x121.yandex.cloud.mdb.spqr.v1.ListClusterHostsRequest\x1a2.yandex.cloud.mdb.spqr.v1.ListClusterHostsResponse\"4\x82\xd3\xe4\x93\x02.\x12,/managed-spqr/v1/clusters/{cluster_id}/hosts\x12\xd8\x01\n" +
	"\bAddHosts\x120.yandex.cloud.mdb.spqr.v1.AddClusterHostsRequest\x1a!.yandex.cloud.operation.Operation\"w\xb2\xd2*0\n" +
	"\x17AddClusterHostsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02=:\x01*\"8/managed-spqr/v1/clusters/{cluster_id}/hosts:batchCreate\x12\xe1\x01\n" +
	"\vUpdateHosts\x123.yandex.cloud.mdb.spqr.v1.UpdateClusterHostsRequest\x1a!.yandex.cloud.operation.Operation\"z\xb2\xd2*3\n" +
	"\x1aUpdateClusterHostsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02=:\x01*\"8/managed-spqr/v1/clusters/{cluster_id}/hosts:batchUpdate\x12\xe1\x01\n" +
	"\vDeleteHosts\x123.yandex.cloud.mdb.spqr.v1.DeleteClusterHostsRequest\x1a!.yandex.cloud.operation.Operation\"z\xb2\xd2*3\n" +
	"\x1aDeleteClusterHostsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02=:\x01*\"8/managed-spqr/v1/clusters/{cluster_id}/hosts:batchDelete\x12\xd1\x01\n" +
	"\fResetupHosts\x12-.yandex.cloud.mdb.spqr.v1.ResetupHostsRequest\x1a!.yandex.cloud.operation.Operation\"o\xb2\xd2*-\n" +
	"\x14ResetupHostsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x028:\x01*\"3/managed-spqr/v1/clusters/{cluster_id}:resetupHosts\x12\xa1\x01\n" +
	"\bGetShard\x120.yandex.cloud.mdb.spqr.v1.GetClusterShardRequest\x1a\x1f.yandex.cloud.mdb.spqr.v1.Shard\"B\x82\xd3\xe4\x93\x02<\x12:/managed-spqr/v1/clusters/{cluster_id}/shards/{shard_name}\x12\xac\x01\n" +
	"\n" +
	"ListShards\x122.yandex.cloud.mdb.spqr.v1.ListClusterShardsRequest\x1a3.yandex.cloud.mdb.spqr.v1.ListClusterShardsResponse\"5\x82\xd3\xe4\x93\x02/\x12-/managed-spqr/v1/clusters/{cluster_id}/shards\x12\xbd\x01\n" +
	"\bAddShard\x120.yandex.cloud.mdb.spqr.v1.AddClusterShardRequest\x1a!.yandex.cloud.operation.Operation\"\\\xb2\xd2* \n" +
	"\x17AddClusterShardMetadata\x12\x05Shard\x82\xd3\xe4\x93\x022:\x01*\"-/managed-spqr/v1/clusters/{cluster_id}/shards\x12\xe0\x01\n" +
	"\vDeleteShard\x123.yandex.cloud.mdb.spqr.v1.DeleteClusterShardRequest\x1a!.yandex.cloud.operation.Operation\"y\xb2\xd2*3\n" +
	"\x1aDeleteClusterShardMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02<*:/managed-spqr/v1/clusters/{cluster_id}/shards/{shard_name}Ba\n" +
	"\x1cyandex.cloud.api.mdb.spqr.v1ZAgithub.com/yandex-cloud/go-genproto/yandex/cloud/mdb/spqr/v1;spqrb\x06proto3"

var (
	file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescData []byte
)

func file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDesc), len(file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDesc)))
	})
	return file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDescData
}

var file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_goTypes = []any{
	(RescheduleMaintenanceRequest_RescheduleType)(0), // 0: yandex.cloud.mdb.spqr.v1.RescheduleMaintenanceRequest.RescheduleType
	(ListClusterLogsRequest_ServiceType)(0),          // 1: yandex.cloud.mdb.spqr.v1.ListClusterLogsRequest.ServiceType
	(StreamClusterLogsRequest_ServiceType)(0),        // 2: yandex.cloud.mdb.spqr.v1.StreamClusterLogsRequest.ServiceType
	(*GetClusterRequest)(nil),                        // 3: yandex.cloud.mdb.spqr.v1.GetClusterRequest
	(*ListClustersRequest)(nil),                      // 4: yandex.cloud.mdb.spqr.v1.ListClustersRequest
	(*ListClustersResponse)(nil),                     // 5: yandex.cloud.mdb.spqr.v1.ListClustersResponse
	(*CreateClusterRequest)(nil),                     // 6: yandex.cloud.mdb.spqr.v1.CreateClusterRequest
	(*CreateClusterMetadata)(nil),                    // 7: yandex.cloud.mdb.spqr.v1.CreateClusterMetadata
	(*UpdateClusterRequest)(nil),                     // 8: yandex.cloud.mdb.spqr.v1.UpdateClusterRequest
	(*UpdateClusterMetadata)(nil),                    // 9: yandex.cloud.mdb.spqr.v1.UpdateClusterMetadata
	(*DeleteClusterRequest)(nil),                     // 10: yandex.cloud.mdb.spqr.v1.DeleteClusterRequest
	(*DeleteClusterMetadata)(nil),                    // 11: yandex.cloud.mdb.spqr.v1.DeleteClusterMetadata
	(*StartClusterRequest)(nil),                      // 12: yandex.cloud.mdb.spqr.v1.StartClusterRequest
	(*StartClusterMetadata)(nil),                     // 13: yandex.cloud.mdb.spqr.v1.StartClusterMetadata
	(*StopClusterRequest)(nil),                       // 14: yandex.cloud.mdb.spqr.v1.StopClusterRequest
	(*StopClusterMetadata)(nil),                      // 15: yandex.cloud.mdb.spqr.v1.StopClusterMetadata
	(*MoveClusterRequest)(nil),                       // 16: yandex.cloud.mdb.spqr.v1.MoveClusterRequest
	(*MoveClusterMetadata)(nil),                      // 17: yandex.cloud.mdb.spqr.v1.MoveClusterMetadata
	(*BackupClusterRequest)(nil),                     // 18: yandex.cloud.mdb.spqr.v1.BackupClusterRequest
	(*BackupClusterMetadata)(nil),                    // 19: yandex.cloud.mdb.spqr.v1.BackupClusterMetadata
	(*RestoreClusterRequest)(nil),                    // 20: yandex.cloud.mdb.spqr.v1.RestoreClusterRequest
	(*RestoreClusterMetadata)(nil),                   // 21: yandex.cloud.mdb.spqr.v1.RestoreClusterMetadata
	(*RescheduleMaintenanceRequest)(nil),             // 22: yandex.cloud.mdb.spqr.v1.RescheduleMaintenanceRequest
	(*RescheduleMaintenanceMetadata)(nil),            // 23: yandex.cloud.mdb.spqr.v1.RescheduleMaintenanceMetadata
	(*LogRecord)(nil),                                // 24: yandex.cloud.mdb.spqr.v1.LogRecord
	(*ListClusterLogsRequest)(nil),                   // 25: yandex.cloud.mdb.spqr.v1.ListClusterLogsRequest
	(*ListClusterLogsResponse)(nil),                  // 26: yandex.cloud.mdb.spqr.v1.ListClusterLogsResponse
	(*StreamLogRecord)(nil),                          // 27: yandex.cloud.mdb.spqr.v1.StreamLogRecord
	(*StreamClusterLogsRequest)(nil),                 // 28: yandex.cloud.mdb.spqr.v1.StreamClusterLogsRequest
	(*ListClusterOperationsRequest)(nil),             // 29: yandex.cloud.mdb.spqr.v1.ListClusterOperationsRequest
	(*ListClusterOperationsResponse)(nil),            // 30: yandex.cloud.mdb.spqr.v1.ListClusterOperationsResponse
	(*BackupListFilter)(nil),                         // 31: yandex.cloud.mdb.spqr.v1.BackupListFilter
	(*ListClusterBackupsRequest)(nil),                // 32: yandex.cloud.mdb.spqr.v1.ListClusterBackupsRequest
	(*ListClusterBackupsResponse)(nil),               // 33: yandex.cloud.mdb.spqr.v1.ListClusterBackupsResponse
	(*SpqrSpec)(nil),                                 // 34: yandex.cloud.mdb.spqr.v1.SpqrSpec
	(*ConfigSpec)(nil),                               // 35: yandex.cloud.mdb.spqr.v1.ConfigSpec
	(*ListClusterHostsRequest)(nil),                  // 36: yandex.cloud.mdb.spqr.v1.ListClusterHostsRequest
	(*ListClusterHostsResponse)(nil),                 // 37: yandex.cloud.mdb.spqr.v1.ListClusterHostsResponse
	(*AddClusterHostsRequest)(nil),                   // 38: yandex.cloud.mdb.spqr.v1.AddClusterHostsRequest
	(*AddClusterHostsMetadata)(nil),                  // 39: yandex.cloud.mdb.spqr.v1.AddClusterHostsMetadata
	(*UpdateClusterHostsRequest)(nil),                // 40: yandex.cloud.mdb.spqr.v1.UpdateClusterHostsRequest
	(*UpdateClusterHostsMetadata)(nil),               // 41: yandex.cloud.mdb.spqr.v1.UpdateClusterHostsMetadata
	(*UpdateHostSpec)(nil),                           // 42: yandex.cloud.mdb.spqr.v1.UpdateHostSpec
	(*DeleteClusterHostsRequest)(nil),                // 43: yandex.cloud.mdb.spqr.v1.DeleteClusterHostsRequest
	(*DeleteClusterHostsMetadata)(nil),               // 44: yandex.cloud.mdb.spqr.v1.DeleteClusterHostsMetadata
	(*ResetupHostsRequest)(nil),                      // 45: yandex.cloud.mdb.spqr.v1.ResetupHostsRequest
	(*ResetupHostsMetadata)(nil),                     // 46: yandex.cloud.mdb.spqr.v1.ResetupHostsMetadata
	(*GetClusterShardRequest)(nil),                   // 47: yandex.cloud.mdb.spqr.v1.GetClusterShardRequest
	(*ListClusterShardsRequest)(nil),                 // 48: yandex.cloud.mdb.spqr.v1.ListClusterShardsRequest
	(*ListClusterShardsResponse)(nil),                // 49: yandex.cloud.mdb.spqr.v1.ListClusterShardsResponse
	(*AddClusterShardRequest)(nil),                   // 50: yandex.cloud.mdb.spqr.v1.AddClusterShardRequest
	(*AddClusterShardMetadata)(nil),                  // 51: yandex.cloud.mdb.spqr.v1.AddClusterShardMetadata
	(*DeleteClusterShardRequest)(nil),                // 52: yandex.cloud.mdb.spqr.v1.DeleteClusterShardRequest
	(*DeleteClusterShardMetadata)(nil),               // 53: yandex.cloud.mdb.spqr.v1.DeleteClusterShardMetadata
	(*AddSubclusterRequest)(nil),                     // 54: yandex.cloud.mdb.spqr.v1.AddSubclusterRequest
	nil,                                              // 55: yandex.cloud.mdb.spqr.v1.CreateClusterRequest.LabelsEntry
	nil,                                              // 56: yandex.cloud.mdb.spqr.v1.UpdateClusterRequest.LabelsEntry
	nil,                                              // 57: yandex.cloud.mdb.spqr.v1.RestoreClusterRequest.LabelsEntry
	nil,                                              // 58: yandex.cloud.mdb.spqr.v1.LogRecord.MessageEntry
	(*SpqrSpec_Router)(nil),                          // 59: yandex.cloud.mdb.spqr.v1.SpqrSpec.Router
	(*SpqrSpec_Coordinator)(nil),                     // 60: yandex.cloud.mdb.spqr.v1.SpqrSpec.Coordinator
	(*SpqrSpec_PostgreSQL)(nil),                      // 61: yandex.cloud.mdb.spqr.v1.SpqrSpec.PostgreSQL
	(*SpqrSpec_Infra)(nil),                           // 62: yandex.cloud.mdb.spqr.v1.SpqrSpec.Infra
	(*Cluster)(nil),                                  // 63: yandex.cloud.mdb.spqr.v1.Cluster
	(Cluster_Environment)(0),                         // 64: yandex.cloud.mdb.spqr.v1.Cluster.Environment
	(*DatabaseSpec)(nil),                             // 65: yandex.cloud.mdb.spqr.v1.DatabaseSpec
	(*UserSpec)(nil),                                 // 66: yandex.cloud.mdb.spqr.v1.UserSpec
	(*HostSpec)(nil),                                 // 67: yandex.cloud.mdb.spqr.v1.HostSpec
	(*MaintenanceWindow)(nil),                        // 68: yandex.cloud.mdb.spqr.v1.MaintenanceWindow
	(*ShardSpec)(nil),                                // 69: yandex.cloud.mdb.spqr.v1.ShardSpec
	(*fieldmaskpb.FieldMask)(nil),                    // 70: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),                    // 71: google.protobuf.Timestamp
	(*operation.Operation)(nil),                      // 72: yandex.cloud.operation.Operation
	(*Backup)(nil),                                   // 73: yandex.cloud.mdb.spqr.v1.Backup
	(LogLevel)(0),                                    // 74: yandex.cloud.mdb.spqr.v1.LogLevel
	(*BalancerSettings)(nil),                         // 75: yandex.cloud.mdb.spqr.v1.BalancerSettings
	(*timeofday.TimeOfDay)(nil),                      // 76: google.type.TimeOfDay
	(*wrapperspb.Int64Value)(nil),                    // 77: google.protobuf.Int64Value
	(*Access)(nil),                                   // 78: yandex.cloud.mdb.spqr.v1.Access
	(*wrapperspb.BoolValue)(nil),                     // 79: google.protobuf.BoolValue
	(*Host)(nil),                                     // 80: yandex.cloud.mdb.spqr.v1.Host
	(*Shard)(nil),                                    // 81: yandex.cloud.mdb.spqr.v1.Shard
	(*Resources)(nil),                                // 82: yandex.cloud.mdb.spqr.v1.Resources
	(*RouterSettings)(nil),                           // 83: yandex.cloud.mdb.spqr.v1.RouterSettings
	(*CoordinatorSettings)(nil),                      // 84: yandex.cloud.mdb.spqr.v1.CoordinatorSettings
	(*PostgreSQLSettings)(nil),                       // 85: yandex.cloud.mdb.spqr.v1.PostgreSQLSettings
}
var file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_depIdxs = []int32{
	63, // 0: yandex.cloud.mdb.spqr.v1.ListClustersResponse.clusters:type_name -> yandex.cloud.mdb.spqr.v1.Cluster
	55, // 1: yandex.cloud.mdb.spqr.v1.CreateClusterRequest.labels:type_name -> yandex.cloud.mdb.spqr.v1.CreateClusterRequest.LabelsEntry
	64, // 2: yandex.cloud.mdb.spqr.v1.CreateClusterRequest.environment:type_name -> yandex.cloud.mdb.spqr.v1.Cluster.Environment
	35, // 3: yandex.cloud.mdb.spqr.v1.CreateClusterRequest.config_spec:type_name -> yandex.cloud.mdb.spqr.v1.ConfigSpec
	65, // 4: yandex.cloud.mdb.spqr.v1.CreateClusterRequest.database_specs:type_name -> yandex.cloud.mdb.spqr.v1.DatabaseSpec
	66, // 5: yandex.cloud.mdb.spqr.v1.CreateClusterRequest.user_specs:type_name -> yandex.cloud.mdb.spqr.v1.UserSpec
	67, // 6: yandex.cloud.mdb.spqr.v1.CreateClusterRequest.host_specs:type_name -> yandex.cloud.mdb.spqr.v1.HostSpec
	68, // 7: yandex.cloud.mdb.spqr.v1.CreateClusterRequest.maintenance_window:type_name -> yandex.cloud.mdb.spqr.v1.MaintenanceWindow
	69, // 8: yandex.cloud.mdb.spqr.v1.CreateClusterRequest.shard_specs:type_name -> yandex.cloud.mdb.spqr.v1.ShardSpec
	70, // 9: yandex.cloud.mdb.spqr.v1.UpdateClusterRequest.update_mask:type_name -> google.protobuf.FieldMask
	56, // 10: yandex.cloud.mdb.spqr.v1.UpdateClusterRequest.labels:type_name -> yandex.cloud.mdb.spqr.v1.UpdateClusterRequest.LabelsEntry
	35, // 11: yandex.cloud.mdb.spqr.v1.UpdateClusterRequest.config_spec:type_name -> yandex.cloud.mdb.spqr.v1.ConfigSpec
	68, // 12: yandex.cloud.mdb.spqr.v1.UpdateClusterRequest.maintenance_window:type_name -> yandex.cloud.mdb.spqr.v1.MaintenanceWindow
	57, // 13: yandex.cloud.mdb.spqr.v1.RestoreClusterRequest.labels:type_name -> yandex.cloud.mdb.spqr.v1.RestoreClusterRequest.LabelsEntry
	64, // 14: yandex.cloud.mdb.spqr.v1.RestoreClusterRequest.environment:type_name -> yandex.cloud.mdb.spqr.v1.Cluster.Environment
	35, // 15: yandex.cloud.mdb.spqr.v1.RestoreClusterRequest.config_spec:type_name -> yandex.cloud.mdb.spqr.v1.ConfigSpec
	67, // 16: yandex.cloud.mdb.spqr.v1.RestoreClusterRequest.host_specs:type_name -> yandex.cloud.mdb.spqr.v1.HostSpec
	71, // 17: yandex.cloud.mdb.spqr.v1.RestoreClusterRequest.time:type_name -> google.protobuf.Timestamp
	0,  // 18: yandex.cloud.mdb.spqr.v1.RescheduleMaintenanceRequest.reschedule_type:type_name -> yandex.cloud.mdb.spqr.v1.RescheduleMaintenanceRequest.RescheduleType
	71, // 19: yandex.cloud.mdb.spqr.v1.RescheduleMaintenanceRequest.delayed_until:type_name -> google.protobuf.Timestamp
	71, // 20: yandex.cloud.mdb.spqr.v1.RescheduleMaintenanceMetadata.delayed_until:type_name -> google.protobuf.Timestamp
	71, // 21: yandex.cloud.mdb.spqr.v1.LogRecord.timestamp:type_name -> google.protobuf.Timestamp
	58, // 22: yandex.cloud.mdb.spqr.v1.LogRecord.message:type_name -> yandex.cloud.mdb.spqr.v1.LogRecord.MessageEntry
	1,  // 23: yandex.cloud.mdb.spqr.v1.ListClusterLogsRequest.service_type:type_name -> yandex.cloud.mdb.spqr.v1.ListClusterLogsRequest.ServiceType
	71, // 24: yandex.cloud.mdb.spqr.v1.ListClusterLogsRequest.from_time:type_name -> google.protobuf.Timestamp
	71, // 25: yandex.cloud.mdb.spqr.v1.ListClusterLogsRequest.to_time:type_name -> google.protobuf.Timestamp
	24, // 26: yandex.cloud.mdb.spqr.v1.ListClusterLogsResponse.logs:type_name -> yandex.cloud.mdb.spqr.v1.LogRecord
	24, // 27: yandex.cloud.mdb.spqr.v1.StreamLogRecord.record:type_name -> yandex.cloud.mdb.spqr.v1.LogRecord
	2,  // 28: yandex.cloud.mdb.spqr.v1.StreamClusterLogsRequest.service_type:type_name -> yandex.cloud.mdb.spqr.v1.StreamClusterLogsRequest.ServiceType
	71, // 29: yandex.cloud.mdb.spqr.v1.StreamClusterLogsRequest.from_time:type_name -> google.protobuf.Timestamp
	71, // 30: yandex.cloud.mdb.spqr.v1.StreamClusterLogsRequest.to_time:type_name -> google.protobuf.Timestamp
	72, // 31: yandex.cloud.mdb.spqr.v1.ListClusterOperationsResponse.operations:type_name -> yandex.cloud.operation.Operation
	71, // 32: yandex.cloud.mdb.spqr.v1.BackupListFilter.start_time:type_name -> google.protobuf.Timestamp
	71, // 33: yandex.cloud.mdb.spqr.v1.BackupListFilter.end_time:type_name -> google.protobuf.Timestamp
	73, // 34: yandex.cloud.mdb.spqr.v1.ListClusterBackupsResponse.backups:type_name -> yandex.cloud.mdb.spqr.v1.Backup
	59, // 35: yandex.cloud.mdb.spqr.v1.SpqrSpec.router:type_name -> yandex.cloud.mdb.spqr.v1.SpqrSpec.Router
	60, // 36: yandex.cloud.mdb.spqr.v1.SpqrSpec.coordinator:type_name -> yandex.cloud.mdb.spqr.v1.SpqrSpec.Coordinator
	61, // 37: yandex.cloud.mdb.spqr.v1.SpqrSpec.postgresql:type_name -> yandex.cloud.mdb.spqr.v1.SpqrSpec.PostgreSQL
	62, // 38: yandex.cloud.mdb.spqr.v1.SpqrSpec.infra:type_name -> yandex.cloud.mdb.spqr.v1.SpqrSpec.Infra
	74, // 39: yandex.cloud.mdb.spqr.v1.SpqrSpec.log_level:type_name -> yandex.cloud.mdb.spqr.v1.LogLevel
	75, // 40: yandex.cloud.mdb.spqr.v1.SpqrSpec.balancer:type_name -> yandex.cloud.mdb.spqr.v1.BalancerSettings
	34, // 41: yandex.cloud.mdb.spqr.v1.ConfigSpec.spqr_spec:type_name -> yandex.cloud.mdb.spqr.v1.SpqrSpec
	76, // 42: yandex.cloud.mdb.spqr.v1.ConfigSpec.backup_window_start:type_name -> google.type.TimeOfDay
	77, // 43: yandex.cloud.mdb.spqr.v1.ConfigSpec.backup_retain_period_days:type_name -> google.protobuf.Int64Value
	78, // 44: yandex.cloud.mdb.spqr.v1.ConfigSpec.access:type_name -> yandex.cloud.mdb.spqr.v1.Access
	79, // 45: yandex.cloud.mdb.spqr.v1.ConfigSpec.sox_audit:type_name -> google.protobuf.BoolValue
	80, // 46: yandex.cloud.mdb.spqr.v1.ListClusterHostsResponse.hosts:type_name -> yandex.cloud.mdb.spqr.v1.Host
	67, // 47: yandex.cloud.mdb.spqr.v1.AddClusterHostsRequest.host_specs:type_name -> yandex.cloud.mdb.spqr.v1.HostSpec
	42, // 48: yandex.cloud.mdb.spqr.v1.UpdateClusterHostsRequest.update_host_specs:type_name -> yandex.cloud.mdb.spqr.v1.UpdateHostSpec
	70, // 49: yandex.cloud.mdb.spqr.v1.UpdateHostSpec.update_mask:type_name -> google.protobuf.FieldMask
	81, // 50: yandex.cloud.mdb.spqr.v1.ListClusterShardsResponse.shards:type_name -> yandex.cloud.mdb.spqr.v1.Shard
	69, // 51: yandex.cloud.mdb.spqr.v1.AddClusterShardRequest.shard_spec:type_name -> yandex.cloud.mdb.spqr.v1.ShardSpec
	67, // 52: yandex.cloud.mdb.spqr.v1.AddSubclusterRequest.host_specs:type_name -> yandex.cloud.mdb.spqr.v1.HostSpec
	82, // 53: yandex.cloud.mdb.spqr.v1.AddSubclusterRequest.resources:type_name -> yandex.cloud.mdb.spqr.v1.Resources
	83, // 54: yandex.cloud.mdb.spqr.v1.SpqrSpec.Router.config:type_name -> yandex.cloud.mdb.spqr.v1.RouterSettings
	82, // 55: yandex.cloud.mdb.spqr.v1.SpqrSpec.Router.resources:type_name -> yandex.cloud.mdb.spqr.v1.Resources
	84, // 56: yandex.cloud.mdb.spqr.v1.SpqrSpec.Coordinator.config:type_name -> yandex.cloud.mdb.spqr.v1.CoordinatorSettings
	82, // 57: yandex.cloud.mdb.spqr.v1.SpqrSpec.Coordinator.resources:type_name -> yandex.cloud.mdb.spqr.v1.Resources
	85, // 58: yandex.cloud.mdb.spqr.v1.SpqrSpec.PostgreSQL.config:type_name -> yandex.cloud.mdb.spqr.v1.PostgreSQLSettings
	82, // 59: yandex.cloud.mdb.spqr.v1.SpqrSpec.PostgreSQL.resources:type_name -> yandex.cloud.mdb.spqr.v1.Resources
	82, // 60: yandex.cloud.mdb.spqr.v1.SpqrSpec.Infra.resources:type_name -> yandex.cloud.mdb.spqr.v1.Resources
	83, // 61: yandex.cloud.mdb.spqr.v1.SpqrSpec.Infra.router:type_name -> yandex.cloud.mdb.spqr.v1.RouterSettings
	84, // 62: yandex.cloud.mdb.spqr.v1.SpqrSpec.Infra.coordinator:type_name -> yandex.cloud.mdb.spqr.v1.CoordinatorSettings
	3,  // 63: yandex.cloud.mdb.spqr.v1.ClusterService.Get:input_type -> yandex.cloud.mdb.spqr.v1.GetClusterRequest
	4,  // 64: yandex.cloud.mdb.spqr.v1.ClusterService.List:input_type -> yandex.cloud.mdb.spqr.v1.ListClustersRequest
	6,  // 65: yandex.cloud.mdb.spqr.v1.ClusterService.Create:input_type -> yandex.cloud.mdb.spqr.v1.CreateClusterRequest
	8,  // 66: yandex.cloud.mdb.spqr.v1.ClusterService.Update:input_type -> yandex.cloud.mdb.spqr.v1.UpdateClusterRequest
	10, // 67: yandex.cloud.mdb.spqr.v1.ClusterService.Delete:input_type -> yandex.cloud.mdb.spqr.v1.DeleteClusterRequest
	54, // 68: yandex.cloud.mdb.spqr.v1.ClusterService.AddSubcluster:input_type -> yandex.cloud.mdb.spqr.v1.AddSubclusterRequest
	12, // 69: yandex.cloud.mdb.spqr.v1.ClusterService.Start:input_type -> yandex.cloud.mdb.spqr.v1.StartClusterRequest
	14, // 70: yandex.cloud.mdb.spqr.v1.ClusterService.Stop:input_type -> yandex.cloud.mdb.spqr.v1.StopClusterRequest
	16, // 71: yandex.cloud.mdb.spqr.v1.ClusterService.Move:input_type -> yandex.cloud.mdb.spqr.v1.MoveClusterRequest
	18, // 72: yandex.cloud.mdb.spqr.v1.ClusterService.Backup:input_type -> yandex.cloud.mdb.spqr.v1.BackupClusterRequest
	20, // 73: yandex.cloud.mdb.spqr.v1.ClusterService.Restore:input_type -> yandex.cloud.mdb.spqr.v1.RestoreClusterRequest
	22, // 74: yandex.cloud.mdb.spqr.v1.ClusterService.RescheduleMaintenance:input_type -> yandex.cloud.mdb.spqr.v1.RescheduleMaintenanceRequest
	25, // 75: yandex.cloud.mdb.spqr.v1.ClusterService.ListLogs:input_type -> yandex.cloud.mdb.spqr.v1.ListClusterLogsRequest
	28, // 76: yandex.cloud.mdb.spqr.v1.ClusterService.StreamLogs:input_type -> yandex.cloud.mdb.spqr.v1.StreamClusterLogsRequest
	29, // 77: yandex.cloud.mdb.spqr.v1.ClusterService.ListOperations:input_type -> yandex.cloud.mdb.spqr.v1.ListClusterOperationsRequest
	32, // 78: yandex.cloud.mdb.spqr.v1.ClusterService.ListBackups:input_type -> yandex.cloud.mdb.spqr.v1.ListClusterBackupsRequest
	36, // 79: yandex.cloud.mdb.spqr.v1.ClusterService.ListHosts:input_type -> yandex.cloud.mdb.spqr.v1.ListClusterHostsRequest
	38, // 80: yandex.cloud.mdb.spqr.v1.ClusterService.AddHosts:input_type -> yandex.cloud.mdb.spqr.v1.AddClusterHostsRequest
	40, // 81: yandex.cloud.mdb.spqr.v1.ClusterService.UpdateHosts:input_type -> yandex.cloud.mdb.spqr.v1.UpdateClusterHostsRequest
	43, // 82: yandex.cloud.mdb.spqr.v1.ClusterService.DeleteHosts:input_type -> yandex.cloud.mdb.spqr.v1.DeleteClusterHostsRequest
	45, // 83: yandex.cloud.mdb.spqr.v1.ClusterService.ResetupHosts:input_type -> yandex.cloud.mdb.spqr.v1.ResetupHostsRequest
	47, // 84: yandex.cloud.mdb.spqr.v1.ClusterService.GetShard:input_type -> yandex.cloud.mdb.spqr.v1.GetClusterShardRequest
	48, // 85: yandex.cloud.mdb.spqr.v1.ClusterService.ListShards:input_type -> yandex.cloud.mdb.spqr.v1.ListClusterShardsRequest
	50, // 86: yandex.cloud.mdb.spqr.v1.ClusterService.AddShard:input_type -> yandex.cloud.mdb.spqr.v1.AddClusterShardRequest
	52, // 87: yandex.cloud.mdb.spqr.v1.ClusterService.DeleteShard:input_type -> yandex.cloud.mdb.spqr.v1.DeleteClusterShardRequest
	63, // 88: yandex.cloud.mdb.spqr.v1.ClusterService.Get:output_type -> yandex.cloud.mdb.spqr.v1.Cluster
	5,  // 89: yandex.cloud.mdb.spqr.v1.ClusterService.List:output_type -> yandex.cloud.mdb.spqr.v1.ListClustersResponse
	72, // 90: yandex.cloud.mdb.spqr.v1.ClusterService.Create:output_type -> yandex.cloud.operation.Operation
	72, // 91: yandex.cloud.mdb.spqr.v1.ClusterService.Update:output_type -> yandex.cloud.operation.Operation
	72, // 92: yandex.cloud.mdb.spqr.v1.ClusterService.Delete:output_type -> yandex.cloud.operation.Operation
	72, // 93: yandex.cloud.mdb.spqr.v1.ClusterService.AddSubcluster:output_type -> yandex.cloud.operation.Operation
	72, // 94: yandex.cloud.mdb.spqr.v1.ClusterService.Start:output_type -> yandex.cloud.operation.Operation
	72, // 95: yandex.cloud.mdb.spqr.v1.ClusterService.Stop:output_type -> yandex.cloud.operation.Operation
	72, // 96: yandex.cloud.mdb.spqr.v1.ClusterService.Move:output_type -> yandex.cloud.operation.Operation
	72, // 97: yandex.cloud.mdb.spqr.v1.ClusterService.Backup:output_type -> yandex.cloud.operation.Operation
	72, // 98: yandex.cloud.mdb.spqr.v1.ClusterService.Restore:output_type -> yandex.cloud.operation.Operation
	72, // 99: yandex.cloud.mdb.spqr.v1.ClusterService.RescheduleMaintenance:output_type -> yandex.cloud.operation.Operation
	26, // 100: yandex.cloud.mdb.spqr.v1.ClusterService.ListLogs:output_type -> yandex.cloud.mdb.spqr.v1.ListClusterLogsResponse
	27, // 101: yandex.cloud.mdb.spqr.v1.ClusterService.StreamLogs:output_type -> yandex.cloud.mdb.spqr.v1.StreamLogRecord
	30, // 102: yandex.cloud.mdb.spqr.v1.ClusterService.ListOperations:output_type -> yandex.cloud.mdb.spqr.v1.ListClusterOperationsResponse
	33, // 103: yandex.cloud.mdb.spqr.v1.ClusterService.ListBackups:output_type -> yandex.cloud.mdb.spqr.v1.ListClusterBackupsResponse
	37, // 104: yandex.cloud.mdb.spqr.v1.ClusterService.ListHosts:output_type -> yandex.cloud.mdb.spqr.v1.ListClusterHostsResponse
	72, // 105: yandex.cloud.mdb.spqr.v1.ClusterService.AddHosts:output_type -> yandex.cloud.operation.Operation
	72, // 106: yandex.cloud.mdb.spqr.v1.ClusterService.UpdateHosts:output_type -> yandex.cloud.operation.Operation
	72, // 107: yandex.cloud.mdb.spqr.v1.ClusterService.DeleteHosts:output_type -> yandex.cloud.operation.Operation
	72, // 108: yandex.cloud.mdb.spqr.v1.ClusterService.ResetupHosts:output_type -> yandex.cloud.operation.Operation
	81, // 109: yandex.cloud.mdb.spqr.v1.ClusterService.GetShard:output_type -> yandex.cloud.mdb.spqr.v1.Shard
	49, // 110: yandex.cloud.mdb.spqr.v1.ClusterService.ListShards:output_type -> yandex.cloud.mdb.spqr.v1.ListClusterShardsResponse
	72, // 111: yandex.cloud.mdb.spqr.v1.ClusterService.AddShard:output_type -> yandex.cloud.operation.Operation
	72, // 112: yandex.cloud.mdb.spqr.v1.ClusterService.DeleteShard:output_type -> yandex.cloud.operation.Operation
	88, // [88:113] is the sub-list for method output_type
	63, // [63:88] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_init() }
func file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_init() {
	if File_yandex_cloud_mdb_spqr_v1_cluster_service_proto != nil {
		return
	}
	file_yandex_cloud_mdb_spqr_v1_backup_proto_init()
	file_yandex_cloud_mdb_spqr_v1_cluster_proto_init()
	file_yandex_cloud_mdb_spqr_v1_config_proto_init()
	file_yandex_cloud_mdb_spqr_v1_database_proto_init()
	file_yandex_cloud_mdb_spqr_v1_host_proto_init()
	file_yandex_cloud_mdb_spqr_v1_user_proto_init()
	file_yandex_cloud_mdb_spqr_v1_maintenance_proto_init()
	file_yandex_cloud_mdb_spqr_v1_shard_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDesc), len(file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_spqr_v1_cluster_service_proto = out.File
	file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_goTypes = nil
	file_yandex_cloud_mdb_spqr_v1_cluster_service_proto_depIdxs = nil
}

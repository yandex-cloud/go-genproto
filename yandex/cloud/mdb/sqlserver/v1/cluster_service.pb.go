// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/mdb/sqlserver/v1/cluster_service.proto

package sqlserver

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	config "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/sqlserver/v1/config"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	timeofday "google.golang.org/genproto/googleapis/type/timeofday"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListClusterLogsRequest_ServiceType int32

const (
	ListClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED ListClusterLogsRequest_ServiceType = 0
	// SQL Server error log.
	ListClusterLogsRequest_SQLSERVER_ERROR ListClusterLogsRequest_ServiceType = 1
	// SQL Server application log.
	ListClusterLogsRequest_SQLSERVER_APPLICATION ListClusterLogsRequest_ServiceType = 2
)

// Enum value maps for ListClusterLogsRequest_ServiceType.
var (
	ListClusterLogsRequest_ServiceType_name = map[int32]string{
		0: "SERVICE_TYPE_UNSPECIFIED",
		1: "SQLSERVER_ERROR",
		2: "SQLSERVER_APPLICATION",
	}
	ListClusterLogsRequest_ServiceType_value = map[string]int32{
		"SERVICE_TYPE_UNSPECIFIED": 0,
		"SQLSERVER_ERROR":          1,
		"SQLSERVER_APPLICATION":    2,
	}
)

func (x ListClusterLogsRequest_ServiceType) Enum() *ListClusterLogsRequest_ServiceType {
	p := new(ListClusterLogsRequest_ServiceType)
	*p = x
	return p
}

func (x ListClusterLogsRequest_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListClusterLogsRequest_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_enumTypes[0].Descriptor()
}

func (ListClusterLogsRequest_ServiceType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_enumTypes[0]
}

func (x ListClusterLogsRequest_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListClusterLogsRequest_ServiceType.Descriptor instead.
func (ListClusterLogsRequest_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{16, 0}
}

type GetClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SQL Server cluster to return.
	//
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterRequest) Reset() {
	*x = GetClusterRequest{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterRequest) ProtoMessage() {}

func (x *GetClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterRequest.ProtoReflect.Descriptor instead.
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ListClustersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to list SQL Server clusters in.
	//
	// To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return.
	//
	// If the number of available results is larger than [page_size], the service returns a [ListClustersResponse.next_page_token] that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the [ListClustersResponse.next_page_token] returned by the previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	//
	// The expression must specify:
	//
	// 1. A field name to filter by. Currently you can only use filtering with the [Cluster.name] field.
	// 2. A conditional operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
	// 3. A value. Must be 1-63 characters long and match the regular expression `[a-zA-Z0-9_-]+`.
	//
	// Example of a filter expression: `name NOT IN 'test,beta'`.
	Filter        string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListClustersRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListClustersRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClustersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListClustersRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListClustersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of SQL Server clusters.
	Clusters []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	// Token that allows you to get the next page of results for list requests.
	//
	// If the number of results is larger than [ListClustersRequest.page_size], use the `next_page_token` as the value for the [ListClustersRequest.page_token] parameter in the next list request. Each subsequent list request has its own `next_page_token` to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersResponse) Reset() {
	*x = ListClustersResponse{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersResponse) ProtoMessage() {}

func (x *ListClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersResponse.ProtoReflect.Descriptor instead.
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListClustersResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ListClustersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to create the SQL Server cluster in.
	//
	// To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the SQL Server cluster. The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the SQL Server cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the SQL Server cluster as `key:value` pairs.
	// For example, "project":"mvp" or "source":"dictionary".
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Deployment environment of the SQL Server cluster.
	Environment Cluster_Environment `protobuf:"varint,5,opt,name=environment,proto3,enum=yandex.cloud.mdb.sqlserver.v1.Cluster_Environment" json:"environment,omitempty"`
	// Configurations of SQL Server and hosts of the cluster.
	ConfigSpec *ConfigSpec `protobuf:"bytes,6,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// One or more configurations of databases to be created in the SQL Server cluster.
	DatabaseSpecs []*DatabaseSpec `protobuf:"bytes,7,rep,name=database_specs,json=databaseSpecs,proto3" json:"database_specs,omitempty"`
	// One or more configurations of database users to be created in the SQL Server cluster.
	UserSpecs []*UserSpec `protobuf:"bytes,8,rep,name=user_specs,json=userSpecs,proto3" json:"user_specs,omitempty"`
	// One or more configurations of hosts to be created in the SQL Server cluster.
	HostSpecs []*HostSpec `protobuf:"bytes,9,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// ID of the network to create the SQL Server cluster in.
	NetworkId string `protobuf:"bytes,10,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// User security groups.
	SecurityGroupIds []string `protobuf:"bytes,11,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// Determines whether the cluster is protected from being deleted.
	DeletionProtection bool `protobuf:"varint,12,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// Name of SQL Collation that cluster will be created with.
	Sqlcollation string `protobuf:"bytes,13,opt,name=sqlcollation,proto3" json:"sqlcollation,omitempty"`
	// Host groups hosting VMs of the cluster.
	HostGroupIds []string `protobuf:"bytes,14,rep,name=host_group_ids,json=hostGroupIds,proto3" json:"host_group_ids,omitempty"`
	// ID of the service account used for access to Object Storage.
	ServiceAccountId string `protobuf:"bytes,15,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CreateClusterRequest) Reset() {
	*x = CreateClusterRequest{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterRequest) ProtoMessage() {}

func (x *CreateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateClusterRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateClusterRequest) GetEnvironment() Cluster_Environment {
	if x != nil {
		return x.Environment
	}
	return Cluster_ENVIRONMENT_UNSPECIFIED
}

func (x *CreateClusterRequest) GetConfigSpec() *ConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *CreateClusterRequest) GetDatabaseSpecs() []*DatabaseSpec {
	if x != nil {
		return x.DatabaseSpecs
	}
	return nil
}

func (x *CreateClusterRequest) GetUserSpecs() []*UserSpec {
	if x != nil {
		return x.UserSpecs
	}
	return nil
}

func (x *CreateClusterRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

func (x *CreateClusterRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *CreateClusterRequest) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *CreateClusterRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *CreateClusterRequest) GetSqlcollation() string {
	if x != nil {
		return x.Sqlcollation
	}
	return ""
}

func (x *CreateClusterRequest) GetHostGroupIds() []string {
	if x != nil {
		return x.HostGroupIds
	}
	return nil
}

func (x *CreateClusterRequest) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

type CreateClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SQL Server cluster being created.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClusterMetadata) Reset() {
	*x = CreateClusterMetadata{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterMetadata) ProtoMessage() {}

func (x *CreateClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterMetadata.ProtoReflect.Descriptor instead.
func (*CreateClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type UpdateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SQL Server cluster to update.
	//
	// To get the SQL Server cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Field mask that specifies which fields of the SQL Server cluster should be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// New description of the SQL Server cluster.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the SQL Server cluster as `key:value` pairs.
	//
	// For example, `"project":"mvp"` or `"source":"dictionary"`.
	//
	// The new set of labels completely replaces the old one.
	//
	// To add a label, request the current set with the [ClusterService.Get] method, then send an [ClusterService.Update] request with the new label added to the set.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// New configuration and resources for hosts in the SQL Server cluster.
	ConfigSpec *ConfigSpec `protobuf:"bytes,5,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// New name for the SQL Server cluster.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// User security groups.
	SecurityGroupIds []string `protobuf:"bytes,7,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// Determines whether the cluster is protected from being deleted.
	DeletionProtection bool `protobuf:"varint,8,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// ID of the service account used for access to Object Storage.
	ServiceAccountId string `protobuf:"bytes,9,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UpdateClusterRequest) Reset() {
	*x = UpdateClusterRequest{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterRequest) ProtoMessage() {}

func (x *UpdateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateClusterRequest) GetConfigSpec() *ConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *UpdateClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateClusterRequest) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *UpdateClusterRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *UpdateClusterRequest) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

type UpdateClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SQL Server cluster being updated.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterMetadata) Reset() {
	*x = UpdateClusterMetadata{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterMetadata) ProtoMessage() {}

func (x *UpdateClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterMetadata.ProtoReflect.Descriptor instead.
func (*UpdateClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type DeleteClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SQL Server cluster to delete.
	//
	// To get the SQL Server cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type DeleteClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SQL Server cluster being deleted.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterMetadata) Reset() {
	*x = DeleteClusterMetadata{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterMetadata) ProtoMessage() {}

func (x *DeleteClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterMetadata.ProtoReflect.Descriptor instead.
func (*DeleteClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type BackupClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SQL Server cluster to back up.
	//
	// To get the SQL Server cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupClusterRequest) Reset() {
	*x = BackupClusterRequest{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupClusterRequest) ProtoMessage() {}

func (x *BackupClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupClusterRequest.ProtoReflect.Descriptor instead.
func (*BackupClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{9}
}

func (x *BackupClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type BackupClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SQL Server cluster being backed up.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupClusterMetadata) Reset() {
	*x = BackupClusterMetadata{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupClusterMetadata) ProtoMessage() {}

func (x *BackupClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupClusterMetadata.ProtoReflect.Descriptor instead.
func (*BackupClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{10}
}

func (x *BackupClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type RestoreClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the backup to create a new cluster from.
	//
	// To get the backup ID, use a [ClusterService.ListBackups] request.
	BackupId string `protobuf:"bytes,1,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	// Timestamp of the moment to which the SQL Server cluster should be restored.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Name of the new SQL Server cluster to be created from the backup. The name must be unique within the folder.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the new SQL Server cluster to be created from the backup.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Custom labels for the new SQL Server cluster to be created from the backup as `key:value` pairs.
	//
	// For example, `"project":"mvp"` or `"source":"dictionary"`.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Deployment environment of the new SQL Server cluster to be created from the backup.
	Environment Cluster_Environment `protobuf:"varint,7,opt,name=environment,proto3,enum=yandex.cloud.mdb.sqlserver.v1.Cluster_Environment" json:"environment,omitempty"`
	// Configuration for the new SQL Server cluster to be created from the backup.
	ConfigSpec *ConfigSpec `protobuf:"bytes,8,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	// Configurations for SQL Server hosts that should be added to the cluster being created from the backup.
	HostSpecs []*HostSpec `protobuf:"bytes,9,rep,name=host_specs,json=hostSpecs,proto3" json:"host_specs,omitempty"`
	// ID of the network to create the SQL Server cluster in.
	NetworkId string `protobuf:"bytes,10,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// ID of the folder to create the SQL Server cluster in.
	//
	// To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,11,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// User security groups.
	SecurityGroupIds []string `protobuf:"bytes,12,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// Determines whether the cluster is protected from being deleted.
	DeletionProtection bool `protobuf:"varint,13,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// Host groups hosting VMs of the cluster.
	HostGroupIds []string `protobuf:"bytes,14,rep,name=host_group_ids,json=hostGroupIds,proto3" json:"host_group_ids,omitempty"`
	// ID of the service account used for access to Object Storage.
	ServiceAccountId string `protobuf:"bytes,15,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RestoreClusterRequest) Reset() {
	*x = RestoreClusterRequest{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreClusterRequest) ProtoMessage() {}

func (x *RestoreClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreClusterRequest.ProtoReflect.Descriptor instead.
func (*RestoreClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{11}
}

func (x *RestoreClusterRequest) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

func (x *RestoreClusterRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *RestoreClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RestoreClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RestoreClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RestoreClusterRequest) GetEnvironment() Cluster_Environment {
	if x != nil {
		return x.Environment
	}
	return Cluster_ENVIRONMENT_UNSPECIFIED
}

func (x *RestoreClusterRequest) GetConfigSpec() *ConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *RestoreClusterRequest) GetHostSpecs() []*HostSpec {
	if x != nil {
		return x.HostSpecs
	}
	return nil
}

func (x *RestoreClusterRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *RestoreClusterRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *RestoreClusterRequest) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *RestoreClusterRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *RestoreClusterRequest) GetHostGroupIds() []string {
	if x != nil {
		return x.HostGroupIds
	}
	return nil
}

func (x *RestoreClusterRequest) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

type RestoreClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the new SQL Server cluster being created from a backup.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the backup being used for creating a cluster.
	BackupId      string `protobuf:"bytes,2,opt,name=backup_id,json=backupId,proto3" json:"backup_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestoreClusterMetadata) Reset() {
	*x = RestoreClusterMetadata{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreClusterMetadata) ProtoMessage() {}

func (x *RestoreClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreClusterMetadata.ProtoReflect.Descriptor instead.
func (*RestoreClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{12}
}

func (x *RestoreClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *RestoreClusterMetadata) GetBackupId() string {
	if x != nil {
		return x.BackupId
	}
	return ""
}

type StartClusterFailoverRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of SQL Server cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Host name to switch master role to.
	//
	// To get this name, make a [ClusterService.ListHosts] request.
	HostName      string `protobuf:"bytes,2,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterFailoverRequest) Reset() {
	*x = StartClusterFailoverRequest{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterFailoverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterFailoverRequest) ProtoMessage() {}

func (x *StartClusterFailoverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterFailoverRequest.ProtoReflect.Descriptor instead.
func (*StartClusterFailoverRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{13}
}

func (x *StartClusterFailoverRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *StartClusterFailoverRequest) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

type StartClusterFailoverMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SQL Server cluster being failovered.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterFailoverMetadata) Reset() {
	*x = StartClusterFailoverMetadata{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterFailoverMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterFailoverMetadata) ProtoMessage() {}

func (x *StartClusterFailoverMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterFailoverMetadata.ProtoReflect.Descriptor instead.
func (*StartClusterFailoverMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{14}
}

func (x *StartClusterFailoverMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type LogRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Log record timestamp.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Contents of the log record.
	Message       map[string]string `protobuf:"bytes,2,rep,name=message,proto3" json:"message,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogRecord) Reset() {
	*x = LogRecord{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRecord) ProtoMessage() {}

func (x *LogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRecord.ProtoReflect.Descriptor instead.
func (*LogRecord) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{15}
}

func (x *LogRecord) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LogRecord) GetMessage() map[string]string {
	if x != nil {
		return x.Message
	}
	return nil
}

type ListClusterLogsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SQL Server cluster to request logs for.
	//
	// To get the SQL Server cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Columns from the logs table to request.
	//
	// If no columns are specified, entire log records are returned.
	ColumnFilter []string `protobuf:"bytes,2,rep,name=column_filter,json=columnFilter,proto3" json:"column_filter,omitempty"`
	// Type of the service to request logs about.
	ServiceType ListClusterLogsRequest_ServiceType `protobuf:"varint,3,opt,name=service_type,json=serviceType,proto3,enum=yandex.cloud.mdb.sqlserver.v1.ListClusterLogsRequest_ServiceType" json:"service_type,omitempty"`
	// Specifies a moment that the logs are requested from.
	FromTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=from_time,json=fromTime,proto3" json:"from_time,omitempty"`
	// Specifies a moment that the logs are requested till.
	ToTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=to_time,json=toTime,proto3" json:"to_time,omitempty"`
	// The maximum number of results per page to return.
	//
	// If the number of available results is larger than [page_size], the service returns a [ListClusterLogsResponse.next_page_token] that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the [ListClusterLogsResponse.next_page_token] returned by the previous list request.
	PageToken string `protobuf:"bytes,7,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The service returns [next_page_token] even if the current page is empty.
	AlwaysNextPageToken bool `protobuf:"varint,8,opt,name=always_next_page_token,json=alwaysNextPageToken,proto3" json:"always_next_page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	//
	// The expression must specify:
	//
	// 1. A field name to filter by. Currently filtering can be applied to the [LogRecord.logs.message.hostname] field only.
	// 2. A conditional operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
	// 3. A value. Must be 1-63 characters long and match the regular expression `[a-z0-9.-]{1,61}`.
	//
	// Example of a filter: `message.hostname='node1.db.cloud.yandex.net'`.
	Filter        string `protobuf:"bytes,9,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterLogsRequest) Reset() {
	*x = ListClusterLogsRequest{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterLogsRequest) ProtoMessage() {}

func (x *ListClusterLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterLogsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterLogsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{16}
}

func (x *ListClusterLogsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterLogsRequest) GetColumnFilter() []string {
	if x != nil {
		return x.ColumnFilter
	}
	return nil
}

func (x *ListClusterLogsRequest) GetServiceType() ListClusterLogsRequest_ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return ListClusterLogsRequest_SERVICE_TYPE_UNSPECIFIED
}

func (x *ListClusterLogsRequest) GetFromTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FromTime
	}
	return nil
}

func (x *ListClusterLogsRequest) GetToTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ToTime
	}
	return nil
}

func (x *ListClusterLogsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterLogsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListClusterLogsRequest) GetAlwaysNextPageToken() bool {
	if x != nil {
		return x.AlwaysNextPageToken
	}
	return false
}

func (x *ListClusterLogsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListClusterLogsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Requested log records.
	Logs []*LogRecord `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	// Token that allows you to get the next page of results for list requests.
	//
	// If the number of results is larger than [ListClusterLogsRequest.page_size], use the [next_page_token] as the value for the [ListClusterLogsRequest.page_token] query parameter in the next list request.
	//
	// Each subsequent list request has its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterLogsResponse) Reset() {
	*x = ListClusterLogsResponse{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterLogsResponse) ProtoMessage() {}

func (x *ListClusterLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterLogsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterLogsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{17}
}

func (x *ListClusterLogsResponse) GetLogs() []*LogRecord {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *ListClusterLogsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListClusterOperationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SQL Server cluster to list operations for.
	//
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return.
	//
	// If the number of available results is larger than [page_size], the service returns a [ListClusterOperationsResponse.next_page_token] that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the [ListClusterOperationsResponse.next_page_token] returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterOperationsRequest) Reset() {
	*x = ListClusterOperationsRequest{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterOperationsRequest) ProtoMessage() {}

func (x *ListClusterOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterOperationsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{18}
}

func (x *ListClusterOperationsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterOperationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterOperationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterOperationsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of operations for the specified SQL Server cluster.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// Token that allows you to get the next page of results for list requests.
	//
	// If the number of results is larger than [ListClusterOperationsRequest.page_size], use the [next_page_token] as the value for the [ListClusterOperationsRequest.page_token] query parameter in the next list request.
	//
	// Each subsequent list request has its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterOperationsResponse) Reset() {
	*x = ListClusterOperationsResponse{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterOperationsResponse) ProtoMessage() {}

func (x *ListClusterOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterOperationsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{19}
}

func (x *ListClusterOperationsResponse) GetOperations() []*operation.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListClusterOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListClusterBackupsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SQL Server cluster.
	//
	// To get the SQL Server cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return.
	//
	// If the number of available results is larger than [page_size], the service returns a [ListClusterBackupsResponse.next_page_token] that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the [ListClusterBackupsResponse.next_page_token] returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterBackupsRequest) Reset() {
	*x = ListClusterBackupsRequest{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterBackupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterBackupsRequest) ProtoMessage() {}

func (x *ListClusterBackupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterBackupsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterBackupsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{20}
}

func (x *ListClusterBackupsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterBackupsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterBackupsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterBackupsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of SQL Server backups.
	Backups []*Backup `protobuf:"bytes,1,rep,name=backups,proto3" json:"backups,omitempty"`
	// Token that allows you to get the next page of results for list requests.
	//
	// If the number of results is larger than [ListClusterBackupsRequest.page_size], use the [next_page_token] as the value for the [ListClusterBackupsRequest.page_token] query parameter in the next list request.
	//
	// Each subsequent list request has its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterBackupsResponse) Reset() {
	*x = ListClusterBackupsResponse{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterBackupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterBackupsResponse) ProtoMessage() {}

func (x *ListClusterBackupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterBackupsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterBackupsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{21}
}

func (x *ListClusterBackupsResponse) GetBackups() []*Backup {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *ListClusterBackupsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SQL Server cluster.
	//
	// To get the SQL Server cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page to return.
	//
	// If the number of available results is larger than [page_size], the service returns a [ListClusterHostsResponse.next_page_token] that can be used to get the next page of results in subsequent list requests.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the [ListClusterHostsResponse.next_page_token] returned by the previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterHostsRequest) Reset() {
	*x = ListClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterHostsRequest) ProtoMessage() {}

func (x *ListClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{22}
}

func (x *ListClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterHostsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterHostsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterHostsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of SQL Server hosts.
	Hosts []*Host `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// Token that allows you to get the next page of results for list requests.
	//
	// If the number of results is larger than [ListClusterHostsRequest.page_size], use the [next_page_token] as the value for the [ListClusterHostsRequest.page_token] query parameter in the next list request.
	//
	// Each subsequent list request has its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterHostsResponse) Reset() {
	*x = ListClusterHostsResponse{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterHostsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterHostsResponse) ProtoMessage() {}

func (x *ListClusterHostsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterHostsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterHostsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{23}
}

func (x *ListClusterHostsResponse) GetHosts() []*Host {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *ListClusterHostsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type StartClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SQL Server cluster to start.
	//
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterRequest) Reset() {
	*x = StartClusterRequest{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterRequest) ProtoMessage() {}

func (x *StartClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterRequest.ProtoReflect.Descriptor instead.
func (*StartClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{24}
}

func (x *StartClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StartClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SQL Server cluster being started.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterMetadata) Reset() {
	*x = StartClusterMetadata{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterMetadata) ProtoMessage() {}

func (x *StartClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterMetadata.ProtoReflect.Descriptor instead.
func (*StartClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{25}
}

func (x *StartClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StopClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SQL Server cluster to stop.
	//
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopClusterRequest) Reset() {
	*x = StopClusterRequest{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClusterRequest) ProtoMessage() {}

func (x *StopClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClusterRequest.ProtoReflect.Descriptor instead.
func (*StopClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{26}
}

func (x *StopClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StopClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SQL Server cluster being stopped.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopClusterMetadata) Reset() {
	*x = StopClusterMetadata{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClusterMetadata) ProtoMessage() {}

func (x *StopClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClusterMetadata.ProtoReflect.Descriptor instead.
func (*StopClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{27}
}

func (x *StopClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type MoveClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SQL Server cluster to move.
	//
	// To get the cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the destination folder.
	//
	// To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	DestinationFolderId string `protobuf:"bytes,2,opt,name=destination_folder_id,json=destinationFolderId,proto3" json:"destination_folder_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MoveClusterRequest) Reset() {
	*x = MoveClusterRequest{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveClusterRequest) ProtoMessage() {}

func (x *MoveClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveClusterRequest.ProtoReflect.Descriptor instead.
func (*MoveClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{28}
}

func (x *MoveClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *MoveClusterRequest) GetDestinationFolderId() string {
	if x != nil {
		return x.DestinationFolderId
	}
	return ""
}

type MoveClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SQL Server cluster being moved.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// ID of the source folder.
	SourceFolderId string `protobuf:"bytes,2,opt,name=source_folder_id,json=sourceFolderId,proto3" json:"source_folder_id,omitempty"`
	// ID of the destination folder.
	DestinationFolderId string `protobuf:"bytes,3,opt,name=destination_folder_id,json=destinationFolderId,proto3" json:"destination_folder_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MoveClusterMetadata) Reset() {
	*x = MoveClusterMetadata{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveClusterMetadata) ProtoMessage() {}

func (x *MoveClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveClusterMetadata.ProtoReflect.Descriptor instead.
func (*MoveClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{29}
}

func (x *MoveClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *MoveClusterMetadata) GetSourceFolderId() string {
	if x != nil {
		return x.SourceFolderId
	}
	return ""
}

func (x *MoveClusterMetadata) GetDestinationFolderId() string {
	if x != nil {
		return x.DestinationFolderId
	}
	return ""
}

type UpdateClusterHostsMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SQL Server cluster to update hosts in.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Names of the hosts being updated.
	HostNames     []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterHostsMetadata) Reset() {
	*x = UpdateClusterHostsMetadata{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterHostsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterHostsMetadata) ProtoMessage() {}

func (x *UpdateClusterHostsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterHostsMetadata.ProtoReflect.Descriptor instead.
func (*UpdateClusterHostsMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{30}
}

func (x *UpdateClusterHostsMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterHostsMetadata) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

type HostSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the availability zone where the host resides.
	//
	// To get the list of available zones, use the [yandex.cloud.compute.v1.ZoneService.List] request.
	ZoneId string `protobuf:"bytes,1,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// ID of the subnet that the host should belong to. This subnet should be a part of the network that the cluster belongs to.
	//
	// The ID of the network is set in the field [Cluster.network_id].
	SubnetId string `protobuf:"bytes,2,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// Determines whether the host gets a public IP address on creation.
	//
	// After a host has been created, this setting cannot be changed. To remove an assigned public IP, or to assign a public IP to a host without one, recreate the host with [assign_public_ip] set as needed.
	//
	// Possible values:
	// * `false` - do not assign a public IP to the host;
	// * `true` - assign a public IP to the host.
	AssignPublicIp bool `protobuf:"varint,3,opt,name=assign_public_ip,json=assignPublicIp,proto3" json:"assign_public_ip,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HostSpec) Reset() {
	*x = HostSpec{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostSpec) ProtoMessage() {}

func (x *HostSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostSpec.ProtoReflect.Descriptor instead.
func (*HostSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{31}
}

func (x *HostSpec) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *HostSpec) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *HostSpec) GetAssignPublicIp() bool {
	if x != nil {
		return x.AssignPublicIp
	}
	return false
}

type UpdateHostSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the host to update.
	//
	// To get the SQL Server host name, use a [ClusterService.ListHosts] request.
	HostName string `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// Field mask that specifies which fields of the SQL Server host should be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Determines whether the host gets a public IP address on creation.
	AssignPublicIp bool `protobuf:"varint,3,opt,name=assign_public_ip,json=assignPublicIp,proto3" json:"assign_public_ip,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateHostSpec) Reset() {
	*x = UpdateHostSpec{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHostSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHostSpec) ProtoMessage() {}

func (x *UpdateHostSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHostSpec.ProtoReflect.Descriptor instead.
func (*UpdateHostSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateHostSpec) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *UpdateHostSpec) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateHostSpec) GetAssignPublicIp() bool {
	if x != nil {
		return x.AssignPublicIp
	}
	return false
}

type UpdateClusterHostsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the SQL Server cluster to update hosts in.
	// To get the SQL Server cluster ID, use a [ClusterService.List] request.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// New configurations to apply to hosts.
	UpdateHostSpecs []*UpdateHostSpec `protobuf:"bytes,2,rep,name=update_host_specs,json=updateHostSpecs,proto3" json:"update_host_specs,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateClusterHostsRequest) Reset() {
	*x = UpdateClusterHostsRequest{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterHostsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterHostsRequest) ProtoMessage() {}

func (x *UpdateClusterHostsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterHostsRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterHostsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateClusterHostsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterHostsRequest) GetUpdateHostSpecs() []*UpdateHostSpec {
	if x != nil {
		return x.UpdateHostSpecs
	}
	return nil
}

type ConfigSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version of SQL Server used in the cluster.
	//
	// Possible values:
	// * 2016sp2std,
	// * 2016sp2ent,
	// * 2017std,
	// * 2017ent,
	// * 2019std,
	// * 2019ent.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"` // No formal validation, a list of supported versions should suffice.
	// Configuration of an SQL Server cluster.
	//
	// Types that are valid to be assigned to SqlserverConfig:
	//
	//	*ConfigSpec_SqlserverConfig_2016Sp2Std
	//	*ConfigSpec_SqlserverConfig_2016Sp2Ent
	//	*ConfigSpec_SqlserverConfig_2017Std
	//	*ConfigSpec_SqlserverConfig_2017Ent
	//	*ConfigSpec_SqlserverConfig_2019Std
	//	*ConfigSpec_SqlserverConfig_2019Ent
	SqlserverConfig isConfigSpec_SqlserverConfig `protobuf_oneof:"sqlserver_config"`
	// Resources allocated to SQL Server hosts.
	Resources *Resources `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	// Start time for the daily backup in UTC timezone.
	BackupWindowStart *timeofday.TimeOfDay `protobuf:"bytes,4,opt,name=backup_window_start,json=backupWindowStart,proto3" json:"backup_window_start,omitempty"`
	// Database access policy.
	Access *Access `protobuf:"bytes,6,opt,name=access,proto3" json:"access,omitempty"`
	// Secondary replicas connection mode
	SecondaryConnections ClusterConfig_SecondaryConnections `protobuf:"varint,7,opt,name=secondary_connections,json=secondaryConnections,proto3,enum=yandex.cloud.mdb.sqlserver.v1.ClusterConfig_SecondaryConnections" json:"secondary_connections,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ConfigSpec) Reset() {
	*x = ConfigSpec{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSpec) ProtoMessage() {}

func (x *ConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSpec.ProtoReflect.Descriptor instead.
func (*ConfigSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP(), []int{34}
}

func (x *ConfigSpec) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ConfigSpec) GetSqlserverConfig() isConfigSpec_SqlserverConfig {
	if x != nil {
		return x.SqlserverConfig
	}
	return nil
}

func (x *ConfigSpec) GetSqlserverConfig_2016Sp2Std() *config.SQLServerConfig2016Sp2Std {
	if x != nil {
		if x, ok := x.SqlserverConfig.(*ConfigSpec_SqlserverConfig_2016Sp2Std); ok {
			return x.SqlserverConfig_2016Sp2Std
		}
	}
	return nil
}

func (x *ConfigSpec) GetSqlserverConfig_2016Sp2Ent() *config.SQLServerConfig2016Sp2Ent {
	if x != nil {
		if x, ok := x.SqlserverConfig.(*ConfigSpec_SqlserverConfig_2016Sp2Ent); ok {
			return x.SqlserverConfig_2016Sp2Ent
		}
	}
	return nil
}

func (x *ConfigSpec) GetSqlserverConfig_2017Std() *config.SQLServerConfig2017Std {
	if x != nil {
		if x, ok := x.SqlserverConfig.(*ConfigSpec_SqlserverConfig_2017Std); ok {
			return x.SqlserverConfig_2017Std
		}
	}
	return nil
}

func (x *ConfigSpec) GetSqlserverConfig_2017Ent() *config.SQLServerConfig2017Ent {
	if x != nil {
		if x, ok := x.SqlserverConfig.(*ConfigSpec_SqlserverConfig_2017Ent); ok {
			return x.SqlserverConfig_2017Ent
		}
	}
	return nil
}

func (x *ConfigSpec) GetSqlserverConfig_2019Std() *config.SQLServerConfig2019Std {
	if x != nil {
		if x, ok := x.SqlserverConfig.(*ConfigSpec_SqlserverConfig_2019Std); ok {
			return x.SqlserverConfig_2019Std
		}
	}
	return nil
}

func (x *ConfigSpec) GetSqlserverConfig_2019Ent() *config.SQLServerConfig2019Ent {
	if x != nil {
		if x, ok := x.SqlserverConfig.(*ConfigSpec_SqlserverConfig_2019Ent); ok {
			return x.SqlserverConfig_2019Ent
		}
	}
	return nil
}

func (x *ConfigSpec) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ConfigSpec) GetBackupWindowStart() *timeofday.TimeOfDay {
	if x != nil {
		return x.BackupWindowStart
	}
	return nil
}

func (x *ConfigSpec) GetAccess() *Access {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *ConfigSpec) GetSecondaryConnections() ClusterConfig_SecondaryConnections {
	if x != nil {
		return x.SecondaryConnections
	}
	return ClusterConfig_SECONDARY_CONNECTIONS_UNSPECIFIED
}

type isConfigSpec_SqlserverConfig interface {
	isConfigSpec_SqlserverConfig()
}

type ConfigSpec_SqlserverConfig_2016Sp2Std struct {
	// Configuration for an SQL Server 2016 SP2 Standard edition cluster.
	SqlserverConfig_2016Sp2Std *config.SQLServerConfig2016Sp2Std `protobuf:"bytes,2,opt,name=sqlserver_config_2016sp2std,json=sqlserverConfig_2016sp2std,proto3,oneof"`
}

type ConfigSpec_SqlserverConfig_2016Sp2Ent struct {
	// Configuration for an SQL Server 2016 SP2 Enterprise edition cluster.
	SqlserverConfig_2016Sp2Ent *config.SQLServerConfig2016Sp2Ent `protobuf:"bytes,5,opt,name=sqlserver_config_2016sp2ent,json=sqlserverConfig_2016sp2ent,proto3,oneof"`
}

type ConfigSpec_SqlserverConfig_2017Std struct {
	// Configuration for an SQL Server 2017 Standard edition cluster.
	SqlserverConfig_2017Std *config.SQLServerConfig2017Std `protobuf:"bytes,8,opt,name=sqlserver_config_2017std,json=sqlserverConfig_2017std,proto3,oneof"`
}

type ConfigSpec_SqlserverConfig_2017Ent struct {
	// Configuration for an SQL Server 2017 Enterprise edition cluster.
	SqlserverConfig_2017Ent *config.SQLServerConfig2017Ent `protobuf:"bytes,9,opt,name=sqlserver_config_2017ent,json=sqlserverConfig_2017ent,proto3,oneof"`
}

type ConfigSpec_SqlserverConfig_2019Std struct {
	// Configuration for an SQL Server 2019 Standard edition cluster.
	SqlserverConfig_2019Std *config.SQLServerConfig2019Std `protobuf:"bytes,10,opt,name=sqlserver_config_2019std,json=sqlserverConfig_2019std,proto3,oneof"`
}

type ConfigSpec_SqlserverConfig_2019Ent struct {
	// Configuration for an SQL Server 2019 Enterprise edition cluster.
	SqlserverConfig_2019Ent *config.SQLServerConfig2019Ent `protobuf:"bytes,11,opt,name=sqlserver_config_2019ent,json=sqlserverConfig_2019ent,proto3,oneof"`
}

func (*ConfigSpec_SqlserverConfig_2016Sp2Std) isConfigSpec_SqlserverConfig() {}

func (*ConfigSpec_SqlserverConfig_2016Sp2Ent) isConfigSpec_SqlserverConfig() {}

func (*ConfigSpec_SqlserverConfig_2017Std) isConfigSpec_SqlserverConfig() {}

func (*ConfigSpec_SqlserverConfig_2017Ent) isConfigSpec_SqlserverConfig() {}

func (*ConfigSpec_SqlserverConfig_2019Std) isConfigSpec_SqlserverConfig() {}

func (*ConfigSpec_SqlserverConfig_2019Ent) isConfigSpec_SqlserverConfig() {}

var File_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDesc = "" +
	"\n" +
	"3yandex/cloud/mdb/sqlserver/v1/cluster_service.proto\x12\x1dyandex.cloud.mdb.sqlserver.v1\x1a\x1cgoogle/api/annotations.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/type/timeofday.proto\x1a yandex/cloud/api/operation.proto\x1a*yandex/cloud/mdb/sqlserver/v1/backup.proto\x1a+yandex/cloud/mdb/sqlserver/v1/cluster.proto\x1a;yandex/cloud/mdb/sqlserver/v1/config/sqlserver2016sp2.proto\x1a8yandex/cloud/mdb/sqlserver/v1/config/sqlserver2017.proto\x1a8yandex/cloud/mdb/sqlserver/v1/config/sqlserver2019.proto\x1a,yandex/cloud/mdb/sqlserver/v1/database.proto\x1a(yandex/cloud/mdb/sqlserver/v1/user.proto\x1a&yandex/cloud/operation/operation.proto\x1a\x1dyandex/cloud/validation.proto\"@\n" +
	"\x11GetClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"\xb7\x01\n" +
	"\x13ListClustersRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\x12\"\n" +
	"\x06filter\x18\x04 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"\x82\x01\n" +
	"\x14ListClustersResponse\x12B\n" +
	"\bclusters\x18\x01 \x03(\v2&.yandex.cloud.mdb.sqlserver.v1.ClusterR\bclusters\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x85\b\n" +
	"\x14CreateClusterRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x122\n" +
	"\x04name\x18\x02 \x01(\tB\x1e\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x04name\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x94\x01\n" +
	"\x06labels\x18\x04 \x03(\v2?.yandex.cloud.mdb.sqlserver.v1.CreateClusterRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x041-63R\x06labels\x12T\n" +
	"\venvironment\x18\x05 \x01(\x0e22.yandex.cloud.mdb.sqlserver.v1.Cluster.EnvironmentR\venvironment\x12J\n" +
	"\vconfig_spec\x18\x06 \x01(\v2).yandex.cloud.mdb.sqlserver.v1.ConfigSpecR\n" +
	"configSpec\x12R\n" +
	"\x0edatabase_specs\x18\a \x03(\v2+.yandex.cloud.mdb.sqlserver.v1.DatabaseSpecR\rdatabaseSpecs\x12F\n" +
	"\n" +
	"user_specs\x18\b \x03(\v2'.yandex.cloud.mdb.sqlserver.v1.UserSpecR\tuserSpecs\x12F\n" +
	"\n" +
	"host_specs\x18\t \x03(\v2'.yandex.cloud.mdb.sqlserver.v1.HostSpecR\thostSpecs\x12'\n" +
	"\n" +
	"network_id\x18\n" +
	" \x01(\tB\b\x8a\xc81\x04<=50R\tnetworkId\x12,\n" +
	"\x12security_group_ids\x18\v \x03(\tR\x10securityGroupIds\x12/\n" +
	"\x13deletion_protection\x18\f \x01(\bR\x12deletionProtection\x12-\n" +
	"\fsqlcollation\x18\r \x01(\tB\t\x8a\xc81\x05<=100R\fsqlcollation\x12$\n" +
	"\x0ehost_group_ids\x18\x0e \x03(\tR\fhostGroupIds\x12,\n" +
	"\x12service_account_id\x18\x0f \x01(\tR\x10serviceAccountId\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"6\n" +
	"\x15CreateClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\x88\x05\n" +
	"\x14UpdateClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x94\x01\n" +
	"\x06labels\x18\x04 \x03(\v2?.yandex.cloud.mdb.sqlserver.v1.UpdateClusterRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x041-63R\x06labels\x12J\n" +
	"\vconfig_spec\x18\x05 \x01(\v2).yandex.cloud.mdb.sqlserver.v1.ConfigSpecR\n" +
	"configSpec\x12.\n" +
	"\x04name\x18\x06 \x01(\tB\x1a\xf2\xc71\x0e[a-zA-Z0-9_-]*\x8a\xc81\x04<=63R\x04name\x12,\n" +
	"\x12security_group_ids\x18\a \x03(\tR\x10securityGroupIds\x12/\n" +
	"\x13deletion_protection\x18\b \x01(\bR\x12deletionProtection\x12,\n" +
	"\x12service_account_id\x18\t \x01(\tR\x10serviceAccountId\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"6\n" +
	"\x15UpdateClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"C\n" +
	"\x14DeleteClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"6\n" +
	"\x15DeleteClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"C\n" +
	"\x14BackupClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"6\n" +
	"\x15BackupClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\x8f\a\n" +
	"\x15RestoreClusterRequest\x12!\n" +
	"\tbackup_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\bbackupId\x124\n" +
	"\x04time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe8\xc71\x01R\x04time\x12*\n" +
	"\x04name\x18\x04 \x01(\tB\x16\xe8\xc71\x01\xf2\xc71\x0e[a-zA-Z0-9_-]*R\x04name\x12+\n" +
	"\vdescription\x18\x05 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x95\x01\n" +
	"\x06labels\x18\x06 \x03(\v2@.yandex.cloud.mdb.sqlserver.v1.RestoreClusterRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x041-63R\x06labels\x12T\n" +
	"\venvironment\x18\a \x01(\x0e22.yandex.cloud.mdb.sqlserver.v1.Cluster.EnvironmentR\venvironment\x12J\n" +
	"\vconfig_spec\x18\b \x01(\v2).yandex.cloud.mdb.sqlserver.v1.ConfigSpecR\n" +
	"configSpec\x12F\n" +
	"\n" +
	"host_specs\x18\t \x03(\v2'.yandex.cloud.mdb.sqlserver.v1.HostSpecR\thostSpecs\x12'\n" +
	"\n" +
	"network_id\x18\n" +
	" \x01(\tB\b\x8a\xc81\x04<=50R\tnetworkId\x12%\n" +
	"\tfolder_id\x18\v \x01(\tB\b\x8a\xc81\x04<=50R\bfolderId\x12,\n" +
	"\x12security_group_ids\x18\f \x03(\tR\x10securityGroupIds\x12/\n" +
	"\x13deletion_protection\x18\r \x01(\bR\x12deletionProtection\x12$\n" +
	"\x0ehost_group_ids\x18\x0e \x03(\tR\fhostGroupIds\x12,\n" +
	"\x12service_account_id\x18\x0f \x01(\tR\x10serviceAccountId\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01J\x04\b\x03\x10\x04\"T\n" +
	"\x16RestoreClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1b\n" +
	"\tbackup_id\x18\x02 \x01(\tR\bbackupId\"r\n" +
	"\x1bStartClusterFailoverRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12&\n" +
	"\thost_name\x18\x02 \x01(\tB\t\x8a\xc81\x05<=253R\bhostName\"=\n" +
	"\x1cStartClusterFailoverMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\xd2\x01\n" +
	"\tLogRecord\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12O\n" +
	"\amessage\x18\x02 \x03(\v25.yandex.cloud.mdb.sqlserver.v1.LogRecord.MessageEntryR\amessage\x1a:\n" +
	"\fMessageEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc7\x04\n" +
	"\x16ListClusterLogsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12#\n" +
	"\rcolumn_filter\x18\x02 \x03(\tR\fcolumnFilter\x12d\n" +
	"\fservice_type\x18\x03 \x01(\x0e2A.yandex.cloud.mdb.sqlserver.v1.ListClusterLogsRequest.ServiceTypeR\vserviceType\x127\n" +
	"\tfrom_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\bfromTime\x123\n" +
	"\ato_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x06toTime\x12'\n" +
	"\tpage_size\x18\x06 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\a \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\x123\n" +
	"\x16always_next_page_token\x18\b \x01(\bR\x13alwaysNextPageToken\x12\"\n" +
	"\x06filter\x18\t \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"[\n" +
	"\vServiceType\x12\x1c\n" +
	"\x18SERVICE_TYPE_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fSQLSERVER_ERROR\x10\x01\x12\x19\n" +
	"\x15SQLSERVER_APPLICATION\x10\x02\"\x7f\n" +
	"\x17ListClusterLogsResponse\x12<\n" +
	"\x04logs\x18\x01 \x03(\v2(.yandex.cloud.mdb.sqlserver.v1.LogRecordR\x04logs\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x9e\x01\n" +
	"\x1cListClusterOperationsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x8a\x01\n" +
	"\x1dListClusterOperationsResponse\x12A\n" +
	"\n" +
	"operations\x18\x01 \x03(\v2!.yandex.cloud.operation.OperationR\n" +
	"operations\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x9b\x01\n" +
	"\x19ListClusterBackupsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x85\x01\n" +
	"\x1aListClusterBackupsResponse\x12?\n" +
	"\abackups\x18\x01 \x03(\v2%.yandex.cloud.mdb.sqlserver.v1.BackupR\abackups\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x99\x01\n" +
	"\x17ListClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x060-1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"}\n" +
	"\x18ListClusterHostsResponse\x129\n" +
	"\x05hosts\x18\x01 \x03(\v2#.yandex.cloud.mdb.sqlserver.v1.HostR\x05hosts\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"B\n" +
	"\x13StartClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"5\n" +
	"\x14StartClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"A\n" +
	"\x12StopClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"4\n" +
	"\x13StopClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\x83\x01\n" +
	"\x12MoveClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12@\n" +
	"\x15destination_folder_id\x18\x02 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x13destinationFolderId\"\x92\x01\n" +
	"\x13MoveClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12(\n" +
	"\x10source_folder_id\x18\x02 \x01(\tR\x0esourceFolderId\x122\n" +
	"\x15destination_folder_id\x18\x03 \x01(\tR\x13destinationFolderId\"Z\n" +
	"\x1aUpdateClusterHostsMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\x12\x1d\n" +
	"\n" +
	"host_names\x18\x02 \x03(\tR\thostNames\"~\n" +
	"\bHostSpec\x12!\n" +
	"\azone_id\x18\x01 \x01(\tB\b\x8a\xc81\x04<=50R\x06zoneId\x12%\n" +
	"\tsubnet_id\x18\x02 \x01(\tB\b\x8a\xc81\x04<=50R\bsubnetId\x12(\n" +
	"\x10assign_public_ip\x18\x03 \x01(\bR\x0eassignPublicIp\"\x9a\x01\n" +
	"\x0eUpdateHostSpec\x12!\n" +
	"\thost_name\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\bhostName\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12(\n" +
	"\x10assign_public_ip\x18\x03 \x01(\bR\x0eassignPublicIp\"\xab\x01\n" +
	"\x19UpdateClusterHostsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12a\n" +
	"\x11update_host_specs\x18\x02 \x03(\v2-.yandex.cloud.mdb.sqlserver.v1.UpdateHostSpecB\x06\x82\xc81\x02>0R\x0fupdateHostSpecs\"\xf7\b\n" +
	"\n" +
	"ConfigSpec\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12\x82\x01\n" +
	"\x1bsqlserver_config_2016sp2std\x18\x02 \x01(\v2?.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2016sp2stdH\x00R\x1asqlserverConfig_2016sp2std\x12\x82\x01\n" +
	"\x1bsqlserver_config_2016sp2ent\x18\x05 \x01(\v2?.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2016sp2entH\x00R\x1asqlserverConfig_2016sp2ent\x12y\n" +
	"\x18sqlserver_config_2017std\x18\b \x01(\v2<.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2017stdH\x00R\x17sqlserverConfig_2017std\x12y\n" +
	"\x18sqlserver_config_2017ent\x18\t \x01(\v2<.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2017entH\x00R\x17sqlserverConfig_2017ent\x12y\n" +
	"\x18sqlserver_config_2019std\x18\n" +
	" \x01(\v2<.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019stdH\x00R\x17sqlserverConfig_2019std\x12y\n" +
	"\x18sqlserver_config_2019ent\x18\v \x01(\v2<.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019entH\x00R\x17sqlserverConfig_2019ent\x12F\n" +
	"\tresources\x18\x03 \x01(\v2(.yandex.cloud.mdb.sqlserver.v1.ResourcesR\tresources\x12F\n" +
	"\x13backup_window_start\x18\x04 \x01(\v2\x16.google.type.TimeOfDayR\x11backupWindowStart\x12=\n" +
	"\x06access\x18\x06 \x01(\v2%.yandex.cloud.mdb.sqlserver.v1.AccessR\x06access\x12v\n" +
	"\x15secondary_connections\x18\a \x01(\x0e2A.yandex.cloud.mdb.sqlserver.v1.ClusterConfig.SecondaryConnectionsR\x14secondaryConnectionsB\x12\n" +
	"\x10sqlserver_config2\xc4\x17\n" +
	"\x0eClusterService\x12\x90\x01\n" +
	"\x03Get\x120.yandex.cloud.mdb.sqlserver.v1.GetClusterRequest\x1a&.yandex.cloud.mdb.sqlserver.v1.Cluster\"/\x82\xd3\xe4\x93\x02)\x12'/mdb/sqlserver/v1/clusters/{cluster_id}\x12\x93\x01\n" +
	"\x04List\x122.yandex.cloud.mdb.sqlserver.v1.ListClustersRequest\x1a3.yandex.cloud.mdb.sqlserver.v1.ListClustersResponse\"\"\x82\xd3\xe4\x93\x02\x1c\x12\x1a/mdb/sqlserver/v1/clusters\x12\xab\x01\n" +
	"\x06Create\x123.yandex.cloud.mdb.sqlserver.v1.CreateClusterRequest\x1a!.yandex.cloud.operation.Operation\"I\xb2\xd2* \n" +
	"\x15CreateClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02\x1f:\x01*\"\x1a/mdb/sqlserver/v1/clusters\x12\xb8\x01\n" +
	"\x06Update\x123.yandex.cloud.mdb.sqlserver.v1.UpdateClusterRequest\x1a!.yandex.cloud.operation.Operation\"V\xb2\xd2* \n" +
	"\x15UpdateClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02,:\x01*2'/mdb/sqlserver/v1/clusters/{cluster_id}\x12\xc3\x01\n" +
	"\x06Delete\x123.yandex.cloud.mdb.sqlserver.v1.DeleteClusterRequest\x1a!.yandex.cloud.operation.Operation\"a\xb2\xd2*.\n" +
	"\x15DeleteClusterMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02)*'/mdb/sqlserver/v1/clusters/{cluster_id}\x12\xb8\x01\n" +
	"\x05Start\x122.yandex.cloud.mdb.sqlserver.v1.StartClusterRequest\x1a!.yandex.cloud.operation.Operation\"X\xb2\xd2*\x1f\n" +
	"\x14StartClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02/\"-/mdb/sqlserver/v1/clusters/{cluster_id}:start\x12\xb4\x01\n" +
	"\x04Stop\x121.yandex.cloud.mdb.sqlserver.v1.StopClusterRequest\x1a!.yandex.cloud.operation.Operation\"V\xb2\xd2*\x1e\n" +
	"\x13StopClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02.\",/mdb/sqlserver/v1/clusters/{cluster_id}:stop\x12\xb7\x01\n" +
	"\x04Move\x121.yandex.cloud.mdb.sqlserver.v1.MoveClusterRequest\x1a!.yandex.cloud.operation.Operation\"Y\xb2\xd2*\x1e\n" +
	"\x13MoveClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x021:\x01*\",/mdb/sqlserver/v1/clusters/{cluster_id}:move\x12\xbc\x01\n" +
	"\x06Backup\x123.yandex.cloud.mdb.sqlserver.v1.BackupClusterRequest\x1a!.yandex.cloud.operation.Operation\"Z\xb2\xd2* \n" +
	"\x15BackupClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x020\"./mdb/sqlserver/v1/clusters/{cluster_id}:backup\x12\xb6\x01\n" +
	"\aRestore\x124.yandex.cloud.mdb.sqlserver.v1.RestoreClusterRequest\x1a!.yandex.cloud.operation.Operation\"R\xb2\xd2*!\n" +
	"\x16RestoreClusterMetadata\x12\aCluster\x82\xd3\xe4\x93\x02':\x01*\"\"/mdb/sqlserver/v1/clusters:restore\x12\xdb\x01\n" +
	"\rStartFailover\x12:.yandex.cloud.mdb.sqlserver.v1.StartClusterFailoverRequest\x1a!.yandex.cloud.operation.Operation\"k\xb2\xd2*'\n" +
	"\x1cStartClusterFailoverMetadata\x12\aCluster\x82\xd3\xe4\x93\x02::\x01*\"5/mdb/sqlserver/v1/clusters/{cluster_id}:startFailover\x12\xaf\x01\n" +
	"\bListLogs\x125.yandex.cloud.mdb.sqlserver.v1.ListClusterLogsRequest\x1a6.yandex.cloud.mdb.sqlserver.v1.ListClusterLogsResponse\"4\x82\xd3\xe4\x93\x02.\x12,/mdb/sqlserver/v1/clusters/{cluster_id}:logs\x12\xc7\x01\n" +
	"\x0eListOperations\x12;.yandex.cloud.mdb.sqlserver.v1.ListClusterOperationsRequest\x1a<.yandex.cloud.mdb.sqlserver.v1.ListClusterOperationsResponse\":\x82\xd3\xe4\x93\x024\x122/mdb/sqlserver/v1/clusters/{cluster_id}/operations\x12\xbb\x01\n" +
	"\vListBackups\x128.yandex.cloud.mdb.sqlserver.v1.ListClusterBackupsRequest\x1a9.yandex.cloud.mdb.sqlserver.v1.ListClusterBackupsResponse\"7\x82\xd3\xe4\x93\x021\x12//mdb/sqlserver/v1/clusters/{cluster_id}/backups\x12\xb3\x01\n" +
	"\tListHosts\x126.yandex.cloud.mdb.sqlserver.v1.ListClusterHostsRequest\x1a7.yandex.cloud.mdb.sqlserver.v1.ListClusterHostsResponse\"5\x82\xd3\xe4\x93\x02/\x12-/mdb/sqlserver/v1/clusters/{cluster_id}/hosts\x12\xe7\x01\n" +
	"\vUpdateHosts\x128.yandex.cloud.mdb.sqlserver.v1.UpdateClusterHostsRequest\x1a!.yandex.cloud.operation.Operation\"{\xb2\xd2*3\n" +
	"\x1aUpdateClusterHostsMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02>:\x01*\"9/mdb/sqlserver/v1/clusters/{cluster_id}/hosts:batchUpdateBv\n" +
	"!yandex.cloud.api.mdb.sqlserver.v1B\x04PSCSZKgithub.com/yandex-cloud/go-genproto/yandex/cloud/mdb/sqlserver/v1;sqlserverb\x06proto3"

var (
	file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescData []byte
)

func file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDesc), len(file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDesc)))
	})
	return file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDescData
}

var file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_goTypes = []any{
	(ListClusterLogsRequest_ServiceType)(0),  // 0: yandex.cloud.mdb.sqlserver.v1.ListClusterLogsRequest.ServiceType
	(*GetClusterRequest)(nil),                // 1: yandex.cloud.mdb.sqlserver.v1.GetClusterRequest
	(*ListClustersRequest)(nil),              // 2: yandex.cloud.mdb.sqlserver.v1.ListClustersRequest
	(*ListClustersResponse)(nil),             // 3: yandex.cloud.mdb.sqlserver.v1.ListClustersResponse
	(*CreateClusterRequest)(nil),             // 4: yandex.cloud.mdb.sqlserver.v1.CreateClusterRequest
	(*CreateClusterMetadata)(nil),            // 5: yandex.cloud.mdb.sqlserver.v1.CreateClusterMetadata
	(*UpdateClusterRequest)(nil),             // 6: yandex.cloud.mdb.sqlserver.v1.UpdateClusterRequest
	(*UpdateClusterMetadata)(nil),            // 7: yandex.cloud.mdb.sqlserver.v1.UpdateClusterMetadata
	(*DeleteClusterRequest)(nil),             // 8: yandex.cloud.mdb.sqlserver.v1.DeleteClusterRequest
	(*DeleteClusterMetadata)(nil),            // 9: yandex.cloud.mdb.sqlserver.v1.DeleteClusterMetadata
	(*BackupClusterRequest)(nil),             // 10: yandex.cloud.mdb.sqlserver.v1.BackupClusterRequest
	(*BackupClusterMetadata)(nil),            // 11: yandex.cloud.mdb.sqlserver.v1.BackupClusterMetadata
	(*RestoreClusterRequest)(nil),            // 12: yandex.cloud.mdb.sqlserver.v1.RestoreClusterRequest
	(*RestoreClusterMetadata)(nil),           // 13: yandex.cloud.mdb.sqlserver.v1.RestoreClusterMetadata
	(*StartClusterFailoverRequest)(nil),      // 14: yandex.cloud.mdb.sqlserver.v1.StartClusterFailoverRequest
	(*StartClusterFailoverMetadata)(nil),     // 15: yandex.cloud.mdb.sqlserver.v1.StartClusterFailoverMetadata
	(*LogRecord)(nil),                        // 16: yandex.cloud.mdb.sqlserver.v1.LogRecord
	(*ListClusterLogsRequest)(nil),           // 17: yandex.cloud.mdb.sqlserver.v1.ListClusterLogsRequest
	(*ListClusterLogsResponse)(nil),          // 18: yandex.cloud.mdb.sqlserver.v1.ListClusterLogsResponse
	(*ListClusterOperationsRequest)(nil),     // 19: yandex.cloud.mdb.sqlserver.v1.ListClusterOperationsRequest
	(*ListClusterOperationsResponse)(nil),    // 20: yandex.cloud.mdb.sqlserver.v1.ListClusterOperationsResponse
	(*ListClusterBackupsRequest)(nil),        // 21: yandex.cloud.mdb.sqlserver.v1.ListClusterBackupsRequest
	(*ListClusterBackupsResponse)(nil),       // 22: yandex.cloud.mdb.sqlserver.v1.ListClusterBackupsResponse
	(*ListClusterHostsRequest)(nil),          // 23: yandex.cloud.mdb.sqlserver.v1.ListClusterHostsRequest
	(*ListClusterHostsResponse)(nil),         // 24: yandex.cloud.mdb.sqlserver.v1.ListClusterHostsResponse
	(*StartClusterRequest)(nil),              // 25: yandex.cloud.mdb.sqlserver.v1.StartClusterRequest
	(*StartClusterMetadata)(nil),             // 26: yandex.cloud.mdb.sqlserver.v1.StartClusterMetadata
	(*StopClusterRequest)(nil),               // 27: yandex.cloud.mdb.sqlserver.v1.StopClusterRequest
	(*StopClusterMetadata)(nil),              // 28: yandex.cloud.mdb.sqlserver.v1.StopClusterMetadata
	(*MoveClusterRequest)(nil),               // 29: yandex.cloud.mdb.sqlserver.v1.MoveClusterRequest
	(*MoveClusterMetadata)(nil),              // 30: yandex.cloud.mdb.sqlserver.v1.MoveClusterMetadata
	(*UpdateClusterHostsMetadata)(nil),       // 31: yandex.cloud.mdb.sqlserver.v1.UpdateClusterHostsMetadata
	(*HostSpec)(nil),                         // 32: yandex.cloud.mdb.sqlserver.v1.HostSpec
	(*UpdateHostSpec)(nil),                   // 33: yandex.cloud.mdb.sqlserver.v1.UpdateHostSpec
	(*UpdateClusterHostsRequest)(nil),        // 34: yandex.cloud.mdb.sqlserver.v1.UpdateClusterHostsRequest
	(*ConfigSpec)(nil),                       // 35: yandex.cloud.mdb.sqlserver.v1.ConfigSpec
	nil,                                      // 36: yandex.cloud.mdb.sqlserver.v1.CreateClusterRequest.LabelsEntry
	nil,                                      // 37: yandex.cloud.mdb.sqlserver.v1.UpdateClusterRequest.LabelsEntry
	nil,                                      // 38: yandex.cloud.mdb.sqlserver.v1.RestoreClusterRequest.LabelsEntry
	nil,                                      // 39: yandex.cloud.mdb.sqlserver.v1.LogRecord.MessageEntry
	(*Cluster)(nil),                          // 40: yandex.cloud.mdb.sqlserver.v1.Cluster
	(Cluster_Environment)(0),                 // 41: yandex.cloud.mdb.sqlserver.v1.Cluster.Environment
	(*DatabaseSpec)(nil),                     // 42: yandex.cloud.mdb.sqlserver.v1.DatabaseSpec
	(*UserSpec)(nil),                         // 43: yandex.cloud.mdb.sqlserver.v1.UserSpec
	(*fieldmaskpb.FieldMask)(nil),            // 44: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),            // 45: google.protobuf.Timestamp
	(*operation.Operation)(nil),              // 46: yandex.cloud.operation.Operation
	(*Backup)(nil),                           // 47: yandex.cloud.mdb.sqlserver.v1.Backup
	(*Host)(nil),                             // 48: yandex.cloud.mdb.sqlserver.v1.Host
	(*config.SQLServerConfig2016Sp2Std)(nil), // 49: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2016sp2std
	(*config.SQLServerConfig2016Sp2Ent)(nil), // 50: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2016sp2ent
	(*config.SQLServerConfig2017Std)(nil),    // 51: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2017std
	(*config.SQLServerConfig2017Ent)(nil),    // 52: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2017ent
	(*config.SQLServerConfig2019Std)(nil),    // 53: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std
	(*config.SQLServerConfig2019Ent)(nil),    // 54: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent
	(*Resources)(nil),                        // 55: yandex.cloud.mdb.sqlserver.v1.Resources
	(*timeofday.TimeOfDay)(nil),              // 56: google.type.TimeOfDay
	(*Access)(nil),                           // 57: yandex.cloud.mdb.sqlserver.v1.Access
	(ClusterConfig_SecondaryConnections)(0),  // 58: yandex.cloud.mdb.sqlserver.v1.ClusterConfig.SecondaryConnections
}
var file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_depIdxs = []int32{
	40, // 0: yandex.cloud.mdb.sqlserver.v1.ListClustersResponse.clusters:type_name -> yandex.cloud.mdb.sqlserver.v1.Cluster
	36, // 1: yandex.cloud.mdb.sqlserver.v1.CreateClusterRequest.labels:type_name -> yandex.cloud.mdb.sqlserver.v1.CreateClusterRequest.LabelsEntry
	41, // 2: yandex.cloud.mdb.sqlserver.v1.CreateClusterRequest.environment:type_name -> yandex.cloud.mdb.sqlserver.v1.Cluster.Environment
	35, // 3: yandex.cloud.mdb.sqlserver.v1.CreateClusterRequest.config_spec:type_name -> yandex.cloud.mdb.sqlserver.v1.ConfigSpec
	42, // 4: yandex.cloud.mdb.sqlserver.v1.CreateClusterRequest.database_specs:type_name -> yandex.cloud.mdb.sqlserver.v1.DatabaseSpec
	43, // 5: yandex.cloud.mdb.sqlserver.v1.CreateClusterRequest.user_specs:type_name -> yandex.cloud.mdb.sqlserver.v1.UserSpec
	32, // 6: yandex.cloud.mdb.sqlserver.v1.CreateClusterRequest.host_specs:type_name -> yandex.cloud.mdb.sqlserver.v1.HostSpec
	44, // 7: yandex.cloud.mdb.sqlserver.v1.UpdateClusterRequest.update_mask:type_name -> google.protobuf.FieldMask
	37, // 8: yandex.cloud.mdb.sqlserver.v1.UpdateClusterRequest.labels:type_name -> yandex.cloud.mdb.sqlserver.v1.UpdateClusterRequest.LabelsEntry
	35, // 9: yandex.cloud.mdb.sqlserver.v1.UpdateClusterRequest.config_spec:type_name -> yandex.cloud.mdb.sqlserver.v1.ConfigSpec
	45, // 10: yandex.cloud.mdb.sqlserver.v1.RestoreClusterRequest.time:type_name -> google.protobuf.Timestamp
	38, // 11: yandex.cloud.mdb.sqlserver.v1.RestoreClusterRequest.labels:type_name -> yandex.cloud.mdb.sqlserver.v1.RestoreClusterRequest.LabelsEntry
	41, // 12: yandex.cloud.mdb.sqlserver.v1.RestoreClusterRequest.environment:type_name -> yandex.cloud.mdb.sqlserver.v1.Cluster.Environment
	35, // 13: yandex.cloud.mdb.sqlserver.v1.RestoreClusterRequest.config_spec:type_name -> yandex.cloud.mdb.sqlserver.v1.ConfigSpec
	32, // 14: yandex.cloud.mdb.sqlserver.v1.RestoreClusterRequest.host_specs:type_name -> yandex.cloud.mdb.sqlserver.v1.HostSpec
	45, // 15: yandex.cloud.mdb.sqlserver.v1.LogRecord.timestamp:type_name -> google.protobuf.Timestamp
	39, // 16: yandex.cloud.mdb.sqlserver.v1.LogRecord.message:type_name -> yandex.cloud.mdb.sqlserver.v1.LogRecord.MessageEntry
	0,  // 17: yandex.cloud.mdb.sqlserver.v1.ListClusterLogsRequest.service_type:type_name -> yandex.cloud.mdb.sqlserver.v1.ListClusterLogsRequest.ServiceType
	45, // 18: yandex.cloud.mdb.sqlserver.v1.ListClusterLogsRequest.from_time:type_name -> google.protobuf.Timestamp
	45, // 19: yandex.cloud.mdb.sqlserver.v1.ListClusterLogsRequest.to_time:type_name -> google.protobuf.Timestamp
	16, // 20: yandex.cloud.mdb.sqlserver.v1.ListClusterLogsResponse.logs:type_name -> yandex.cloud.mdb.sqlserver.v1.LogRecord
	46, // 21: yandex.cloud.mdb.sqlserver.v1.ListClusterOperationsResponse.operations:type_name -> yandex.cloud.operation.Operation
	47, // 22: yandex.cloud.mdb.sqlserver.v1.ListClusterBackupsResponse.backups:type_name -> yandex.cloud.mdb.sqlserver.v1.Backup
	48, // 23: yandex.cloud.mdb.sqlserver.v1.ListClusterHostsResponse.hosts:type_name -> yandex.cloud.mdb.sqlserver.v1.Host
	44, // 24: yandex.cloud.mdb.sqlserver.v1.UpdateHostSpec.update_mask:type_name -> google.protobuf.FieldMask
	33, // 25: yandex.cloud.mdb.sqlserver.v1.UpdateClusterHostsRequest.update_host_specs:type_name -> yandex.cloud.mdb.sqlserver.v1.UpdateHostSpec
	49, // 26: yandex.cloud.mdb.sqlserver.v1.ConfigSpec.sqlserver_config_2016sp2std:type_name -> yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2016sp2std
	50, // 27: yandex.cloud.mdb.sqlserver.v1.ConfigSpec.sqlserver_config_2016sp2ent:type_name -> yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2016sp2ent
	51, // 28: yandex.cloud.mdb.sqlserver.v1.ConfigSpec.sqlserver_config_2017std:type_name -> yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2017std
	52, // 29: yandex.cloud.mdb.sqlserver.v1.ConfigSpec.sqlserver_config_2017ent:type_name -> yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2017ent
	53, // 30: yandex.cloud.mdb.sqlserver.v1.ConfigSpec.sqlserver_config_2019std:type_name -> yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std
	54, // 31: yandex.cloud.mdb.sqlserver.v1.ConfigSpec.sqlserver_config_2019ent:type_name -> yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent
	55, // 32: yandex.cloud.mdb.sqlserver.v1.ConfigSpec.resources:type_name -> yandex.cloud.mdb.sqlserver.v1.Resources
	56, // 33: yandex.cloud.mdb.sqlserver.v1.ConfigSpec.backup_window_start:type_name -> google.type.TimeOfDay
	57, // 34: yandex.cloud.mdb.sqlserver.v1.ConfigSpec.access:type_name -> yandex.cloud.mdb.sqlserver.v1.Access
	58, // 35: yandex.cloud.mdb.sqlserver.v1.ConfigSpec.secondary_connections:type_name -> yandex.cloud.mdb.sqlserver.v1.ClusterConfig.SecondaryConnections
	1,  // 36: yandex.cloud.mdb.sqlserver.v1.ClusterService.Get:input_type -> yandex.cloud.mdb.sqlserver.v1.GetClusterRequest
	2,  // 37: yandex.cloud.mdb.sqlserver.v1.ClusterService.List:input_type -> yandex.cloud.mdb.sqlserver.v1.ListClustersRequest
	4,  // 38: yandex.cloud.mdb.sqlserver.v1.ClusterService.Create:input_type -> yandex.cloud.mdb.sqlserver.v1.CreateClusterRequest
	6,  // 39: yandex.cloud.mdb.sqlserver.v1.ClusterService.Update:input_type -> yandex.cloud.mdb.sqlserver.v1.UpdateClusterRequest
	8,  // 40: yandex.cloud.mdb.sqlserver.v1.ClusterService.Delete:input_type -> yandex.cloud.mdb.sqlserver.v1.DeleteClusterRequest
	25, // 41: yandex.cloud.mdb.sqlserver.v1.ClusterService.Start:input_type -> yandex.cloud.mdb.sqlserver.v1.StartClusterRequest
	27, // 42: yandex.cloud.mdb.sqlserver.v1.ClusterService.Stop:input_type -> yandex.cloud.mdb.sqlserver.v1.StopClusterRequest
	29, // 43: yandex.cloud.mdb.sqlserver.v1.ClusterService.Move:input_type -> yandex.cloud.mdb.sqlserver.v1.MoveClusterRequest
	10, // 44: yandex.cloud.mdb.sqlserver.v1.ClusterService.Backup:input_type -> yandex.cloud.mdb.sqlserver.v1.BackupClusterRequest
	12, // 45: yandex.cloud.mdb.sqlserver.v1.ClusterService.Restore:input_type -> yandex.cloud.mdb.sqlserver.v1.RestoreClusterRequest
	14, // 46: yandex.cloud.mdb.sqlserver.v1.ClusterService.StartFailover:input_type -> yandex.cloud.mdb.sqlserver.v1.StartClusterFailoverRequest
	17, // 47: yandex.cloud.mdb.sqlserver.v1.ClusterService.ListLogs:input_type -> yandex.cloud.mdb.sqlserver.v1.ListClusterLogsRequest
	19, // 48: yandex.cloud.mdb.sqlserver.v1.ClusterService.ListOperations:input_type -> yandex.cloud.mdb.sqlserver.v1.ListClusterOperationsRequest
	21, // 49: yandex.cloud.mdb.sqlserver.v1.ClusterService.ListBackups:input_type -> yandex.cloud.mdb.sqlserver.v1.ListClusterBackupsRequest
	23, // 50: yandex.cloud.mdb.sqlserver.v1.ClusterService.ListHosts:input_type -> yandex.cloud.mdb.sqlserver.v1.ListClusterHostsRequest
	34, // 51: yandex.cloud.mdb.sqlserver.v1.ClusterService.UpdateHosts:input_type -> yandex.cloud.mdb.sqlserver.v1.UpdateClusterHostsRequest
	40, // 52: yandex.cloud.mdb.sqlserver.v1.ClusterService.Get:output_type -> yandex.cloud.mdb.sqlserver.v1.Cluster
	3,  // 53: yandex.cloud.mdb.sqlserver.v1.ClusterService.List:output_type -> yandex.cloud.mdb.sqlserver.v1.ListClustersResponse
	46, // 54: yandex.cloud.mdb.sqlserver.v1.ClusterService.Create:output_type -> yandex.cloud.operation.Operation
	46, // 55: yandex.cloud.mdb.sqlserver.v1.ClusterService.Update:output_type -> yandex.cloud.operation.Operation
	46, // 56: yandex.cloud.mdb.sqlserver.v1.ClusterService.Delete:output_type -> yandex.cloud.operation.Operation
	46, // 57: yandex.cloud.mdb.sqlserver.v1.ClusterService.Start:output_type -> yandex.cloud.operation.Operation
	46, // 58: yandex.cloud.mdb.sqlserver.v1.ClusterService.Stop:output_type -> yandex.cloud.operation.Operation
	46, // 59: yandex.cloud.mdb.sqlserver.v1.ClusterService.Move:output_type -> yandex.cloud.operation.Operation
	46, // 60: yandex.cloud.mdb.sqlserver.v1.ClusterService.Backup:output_type -> yandex.cloud.operation.Operation
	46, // 61: yandex.cloud.mdb.sqlserver.v1.ClusterService.Restore:output_type -> yandex.cloud.operation.Operation
	46, // 62: yandex.cloud.mdb.sqlserver.v1.ClusterService.StartFailover:output_type -> yandex.cloud.operation.Operation
	18, // 63: yandex.cloud.mdb.sqlserver.v1.ClusterService.ListLogs:output_type -> yandex.cloud.mdb.sqlserver.v1.ListClusterLogsResponse
	20, // 64: yandex.cloud.mdb.sqlserver.v1.ClusterService.ListOperations:output_type -> yandex.cloud.mdb.sqlserver.v1.ListClusterOperationsResponse
	22, // 65: yandex.cloud.mdb.sqlserver.v1.ClusterService.ListBackups:output_type -> yandex.cloud.mdb.sqlserver.v1.ListClusterBackupsResponse
	24, // 66: yandex.cloud.mdb.sqlserver.v1.ClusterService.ListHosts:output_type -> yandex.cloud.mdb.sqlserver.v1.ListClusterHostsResponse
	46, // 67: yandex.cloud.mdb.sqlserver.v1.ClusterService.UpdateHosts:output_type -> yandex.cloud.operation.Operation
	52, // [52:68] is the sub-list for method output_type
	36, // [36:52] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_init() }
func file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_init() {
	if File_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto != nil {
		return
	}
	file_yandex_cloud_mdb_sqlserver_v1_backup_proto_init()
	file_yandex_cloud_mdb_sqlserver_v1_cluster_proto_init()
	file_yandex_cloud_mdb_sqlserver_v1_database_proto_init()
	file_yandex_cloud_mdb_sqlserver_v1_user_proto_init()
	file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes[34].OneofWrappers = []any{
		(*ConfigSpec_SqlserverConfig_2016Sp2Std)(nil),
		(*ConfigSpec_SqlserverConfig_2016Sp2Ent)(nil),
		(*ConfigSpec_SqlserverConfig_2017Std)(nil),
		(*ConfigSpec_SqlserverConfig_2017Ent)(nil),
		(*ConfigSpec_SqlserverConfig_2019Std)(nil),
		(*ConfigSpec_SqlserverConfig_2019Ent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDesc), len(file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto = out.File
	file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_goTypes = nil
	file_yandex_cloud_mdb_sqlserver_v1_cluster_service_proto_depIdxs = nil
}

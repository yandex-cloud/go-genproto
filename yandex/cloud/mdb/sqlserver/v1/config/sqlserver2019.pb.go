// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/mdb/sqlserver/v1/config/sqlserver2019.proto

package sqlserver

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SQL Server 2019 Standard edition supported configuration options are listed here.
//
// Detailed description for each set of options is available in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/server-configuration-options-sql-server?view=sql-server-2019).
//
// Any options that are not listed here are not supported.
type SQLServerConfig2019Std struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Limits the number of processors to use in parallel plan execution per task.
	//
	// See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
	MaxDegreeOfParallelism *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=max_degree_of_parallelism,json=maxDegreeOfParallelism,proto3" json:"max_degree_of_parallelism,omitempty"`
	// Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
	//
	// SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
	//
	// See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
	CostThresholdForParallelism *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=cost_threshold_for_parallelism,json=costThresholdForParallelism,proto3" json:"cost_threshold_for_parallelism,omitempty"`
	// Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
	//
	// Possible values:
	// * 0 - do not log login attempts;
	// * 1 - log only failed login attempts;
	// * 2 - log only successful login attempts (not recommended);
	// * 3 - log all login attempts (not recommended).
	//
	// See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
	AuditLevel *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=audit_level,json=auditLevel,proto3" json:"audit_level,omitempty"`
	// Manages the fill factor server configuration option.
	//
	// When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
	//
	// Values 0 and 100 mean full page usage (no space reserved).
	//
	// See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
	FillFactorPercent *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=fill_factor_percent,json=fillFactorPercent,proto3" json:"fill_factor_percent,omitempty"`
	// Determines whether plans should be cached only after second execution.
	//
	// Allows to avoid SQL cache bloat because of single-use plans.
	//
	// See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
	OptimizeForAdHocWorkloads *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=optimize_for_ad_hoc_workloads,json=optimizeForAdHocWorkloads,proto3" json:"optimize_for_ad_hoc_workloads,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *SQLServerConfig2019Std) Reset() {
	*x = SQLServerConfig2019Std{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLServerConfig2019Std) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLServerConfig2019Std) ProtoMessage() {}

func (x *SQLServerConfig2019Std) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLServerConfig2019Std.ProtoReflect.Descriptor instead.
func (*SQLServerConfig2019Std) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_rawDescGZIP(), []int{0}
}

func (x *SQLServerConfig2019Std) GetMaxDegreeOfParallelism() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxDegreeOfParallelism
	}
	return nil
}

func (x *SQLServerConfig2019Std) GetCostThresholdForParallelism() *wrapperspb.Int64Value {
	if x != nil {
		return x.CostThresholdForParallelism
	}
	return nil
}

func (x *SQLServerConfig2019Std) GetAuditLevel() *wrapperspb.Int64Value {
	if x != nil {
		return x.AuditLevel
	}
	return nil
}

func (x *SQLServerConfig2019Std) GetFillFactorPercent() *wrapperspb.Int64Value {
	if x != nil {
		return x.FillFactorPercent
	}
	return nil
}

func (x *SQLServerConfig2019Std) GetOptimizeForAdHocWorkloads() *wrapperspb.BoolValue {
	if x != nil {
		return x.OptimizeForAdHocWorkloads
	}
	return nil
}

type SQLServerConfigSet2019Std struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
	EffectiveConfig *SQLServerConfig2019Std `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for an SQL Server 2019 cluster.
	UserConfig *SQLServerConfig2019Std `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for an SQL Server 2019 cluster.
	DefaultConfig *SQLServerConfig2019Std `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SQLServerConfigSet2019Std) Reset() {
	*x = SQLServerConfigSet2019Std{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLServerConfigSet2019Std) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLServerConfigSet2019Std) ProtoMessage() {}

func (x *SQLServerConfigSet2019Std) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLServerConfigSet2019Std.ProtoReflect.Descriptor instead.
func (*SQLServerConfigSet2019Std) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_rawDescGZIP(), []int{1}
}

func (x *SQLServerConfigSet2019Std) GetEffectiveConfig() *SQLServerConfig2019Std {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *SQLServerConfigSet2019Std) GetUserConfig() *SQLServerConfig2019Std {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *SQLServerConfigSet2019Std) GetDefaultConfig() *SQLServerConfig2019Std {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

// SQL Server 2019 Enterprise edition supported configuration options are listed here.
//
// Detailed description for each set of options is available in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/server-configuration-options-sql-server?view=sql-server-2019).
//
// Any options that are not listed here are not supported.
type SQLServerConfig2019Ent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Limits the number of processors to use in parallel plan execution per task.
	//
	// See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2019).
	MaxDegreeOfParallelism *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=max_degree_of_parallelism,json=maxDegreeOfParallelism,proto3" json:"max_degree_of_parallelism,omitempty"`
	// Specifies the threshold at which SQL Server creates and runs parallel plans for queries.
	//
	// SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option.
	//
	// See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2019).
	CostThresholdForParallelism *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=cost_threshold_for_parallelism,json=costThresholdForParallelism,proto3" json:"cost_threshold_for_parallelism,omitempty"`
	// Describes how to configure login auditing to monitor SQL Server Database Engine login activity.
	//
	// Possible values:
	// * 0 - do not log login attempts;
	// * 1 - log only failed login attempts;
	// * 2 - log only successful login attempts (not recommended);
	// * 3 - log all login attempts (not recommended).
	//
	// See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2019).
	AuditLevel *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=audit_level,json=auditLevel,proto3" json:"audit_level,omitempty"`
	// Manages the fill factor server configuration option.
	// When an index is created or rebuilt, the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth.
	//
	// Values 0 and 100 mean full page usage (no space reserved).
	//
	// See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2019).
	FillFactorPercent *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=fill_factor_percent,json=fillFactorPercent,proto3" json:"fill_factor_percent,omitempty"`
	// Determines whether plans should be cached only after second execution.
	//
	// Allows to avoid SQL cache bloat because of single-use plans.
	//
	// See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2019).
	OptimizeForAdHocWorkloads *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=optimize_for_ad_hoc_workloads,json=optimizeForAdHocWorkloads,proto3" json:"optimize_for_ad_hoc_workloads,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *SQLServerConfig2019Ent) Reset() {
	*x = SQLServerConfig2019Ent{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLServerConfig2019Ent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLServerConfig2019Ent) ProtoMessage() {}

func (x *SQLServerConfig2019Ent) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLServerConfig2019Ent.ProtoReflect.Descriptor instead.
func (*SQLServerConfig2019Ent) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_rawDescGZIP(), []int{2}
}

func (x *SQLServerConfig2019Ent) GetMaxDegreeOfParallelism() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxDegreeOfParallelism
	}
	return nil
}

func (x *SQLServerConfig2019Ent) GetCostThresholdForParallelism() *wrapperspb.Int64Value {
	if x != nil {
		return x.CostThresholdForParallelism
	}
	return nil
}

func (x *SQLServerConfig2019Ent) GetAuditLevel() *wrapperspb.Int64Value {
	if x != nil {
		return x.AuditLevel
	}
	return nil
}

func (x *SQLServerConfig2019Ent) GetFillFactorPercent() *wrapperspb.Int64Value {
	if x != nil {
		return x.FillFactorPercent
	}
	return nil
}

func (x *SQLServerConfig2019Ent) GetOptimizeForAdHocWorkloads() *wrapperspb.BoolValue {
	if x != nil {
		return x.OptimizeForAdHocWorkloads
	}
	return nil
}

type SQLServerConfigSet2019Ent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Effective settings for an SQL Server 2019 cluster (a combination of settings defined in [user_config] and [default_config]).
	EffectiveConfig *SQLServerConfig2019Ent `protobuf:"bytes,1,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
	// User-defined settings for an SQL Server 2019 cluster.
	UserConfig *SQLServerConfig2019Ent `protobuf:"bytes,2,opt,name=user_config,json=userConfig,proto3" json:"user_config,omitempty"`
	// Default configuration for an SQL Server 2019 cluster.
	DefaultConfig *SQLServerConfig2019Ent `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SQLServerConfigSet2019Ent) Reset() {
	*x = SQLServerConfigSet2019Ent{}
	mi := &file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLServerConfigSet2019Ent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLServerConfigSet2019Ent) ProtoMessage() {}

func (x *SQLServerConfigSet2019Ent) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLServerConfigSet2019Ent.ProtoReflect.Descriptor instead.
func (*SQLServerConfigSet2019Ent) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_rawDescGZIP(), []int{3}
}

func (x *SQLServerConfigSet2019Ent) GetEffectiveConfig() *SQLServerConfig2019Ent {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

func (x *SQLServerConfigSet2019Ent) GetUserConfig() *SQLServerConfig2019Ent {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *SQLServerConfigSet2019Ent) GetDefaultConfig() *SQLServerConfig2019Ent {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

var File_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto protoreflect.FileDescriptor

const file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_rawDesc = "" +
	"\n" +
	"8yandex/cloud/mdb/sqlserver/v1/config/sqlserver2019.proto\x12$yandex.cloud.mdb.sqlserver.v1.config\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1dyandex/cloud/validation.proto\"\xe6\x03\n" +
	"\x16SQLServerConfig2019std\x12`\n" +
	"\x19max_degree_of_parallelism\x18\x01 \x01(\v2\x1b.google.protobuf.Int64ValueB\b\xfa\xc71\x041-99R\x16maxDegreeOfParallelism\x12m\n" +
	"\x1ecost_threshold_for_parallelism\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueB\v\xfa\xc71\a5-32767R\x1bcostThresholdForParallelism\x12E\n" +
	"\vaudit_level\x18\x03 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x030-3R\n" +
	"auditLevel\x12V\n" +
	"\x13fill_factor_percent\x18\x04 \x01(\v2\x1b.google.protobuf.Int64ValueB\t\xfa\xc71\x050-100R\x11fillFactorPercent\x12\\\n" +
	"\x1doptimize_for_ad_hoc_workloads\x18\x05 \x01(\v2\x1a.google.protobuf.BoolValueR\x19optimizeForAdHocWorkloads\"\xc8\x02\n" +
	"\x19SQLServerConfigSet2019std\x12g\n" +
	"\x10effective_config\x18\x01 \x01(\v2<.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019stdR\x0feffectiveConfig\x12]\n" +
	"\vuser_config\x18\x02 \x01(\v2<.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019stdR\n" +
	"userConfig\x12c\n" +
	"\x0edefault_config\x18\x03 \x01(\v2<.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019stdR\rdefaultConfig\"\xe6\x03\n" +
	"\x16SQLServerConfig2019ent\x12`\n" +
	"\x19max_degree_of_parallelism\x18\x01 \x01(\v2\x1b.google.protobuf.Int64ValueB\b\xfa\xc71\x041-99R\x16maxDegreeOfParallelism\x12m\n" +
	"\x1ecost_threshold_for_parallelism\x18\x02 \x01(\v2\x1b.google.protobuf.Int64ValueB\v\xfa\xc71\a5-32767R\x1bcostThresholdForParallelism\x12E\n" +
	"\vaudit_level\x18\x03 \x01(\v2\x1b.google.protobuf.Int64ValueB\a\xfa\xc71\x030-3R\n" +
	"auditLevel\x12V\n" +
	"\x13fill_factor_percent\x18\x04 \x01(\v2\x1b.google.protobuf.Int64ValueB\t\xfa\xc71\x050-100R\x11fillFactorPercent\x12\\\n" +
	"\x1doptimize_for_ad_hoc_workloads\x18\x05 \x01(\v2\x1a.google.protobuf.BoolValueR\x19optimizeForAdHocWorkloads\"\xc8\x02\n" +
	"\x19SQLServerConfigSet2019ent\x12g\n" +
	"\x10effective_config\x18\x01 \x01(\v2<.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019entR\x0feffectiveConfig\x12]\n" +
	"\vuser_config\x18\x02 \x01(\v2<.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019entR\n" +
	"userConfig\x12c\n" +
	"\x0edefault_config\x18\x03 \x01(\v2<.yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019entR\rdefaultConfigB~\n" +
	"(yandex.cloud.api.mdb.sqlserver.v1.configZRgithub.com/yandex-cloud/go-genproto/yandex/cloud/mdb/sqlserver/v1/config;sqlserverb\x06proto3"

var (
	file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_rawDescOnce sync.Once
	file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_rawDescData []byte
)

func file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_rawDescGZIP() []byte {
	file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_rawDesc), len(file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_rawDesc)))
	})
	return file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_rawDescData
}

var file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_goTypes = []any{
	(*SQLServerConfig2019Std)(nil),    // 0: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std
	(*SQLServerConfigSet2019Std)(nil), // 1: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019std
	(*SQLServerConfig2019Ent)(nil),    // 2: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent
	(*SQLServerConfigSet2019Ent)(nil), // 3: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019ent
	(*wrapperspb.Int64Value)(nil),     // 4: google.protobuf.Int64Value
	(*wrapperspb.BoolValue)(nil),      // 5: google.protobuf.BoolValue
}
var file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_depIdxs = []int32{
	4,  // 0: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std.max_degree_of_parallelism:type_name -> google.protobuf.Int64Value
	4,  // 1: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std.cost_threshold_for_parallelism:type_name -> google.protobuf.Int64Value
	4,  // 2: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std.audit_level:type_name -> google.protobuf.Int64Value
	4,  // 3: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std.fill_factor_percent:type_name -> google.protobuf.Int64Value
	5,  // 4: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std.optimize_for_ad_hoc_workloads:type_name -> google.protobuf.BoolValue
	0,  // 5: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019std.effective_config:type_name -> yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std
	0,  // 6: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019std.user_config:type_name -> yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std
	0,  // 7: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019std.default_config:type_name -> yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019std
	4,  // 8: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent.max_degree_of_parallelism:type_name -> google.protobuf.Int64Value
	4,  // 9: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent.cost_threshold_for_parallelism:type_name -> google.protobuf.Int64Value
	4,  // 10: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent.audit_level:type_name -> google.protobuf.Int64Value
	4,  // 11: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent.fill_factor_percent:type_name -> google.protobuf.Int64Value
	5,  // 12: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent.optimize_for_ad_hoc_workloads:type_name -> google.protobuf.BoolValue
	2,  // 13: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019ent.effective_config:type_name -> yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent
	2,  // 14: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019ent.user_config:type_name -> yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent
	2,  // 15: yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfigSet2019ent.default_config:type_name -> yandex.cloud.mdb.sqlserver.v1.config.SQLServerConfig2019ent
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_init() }
func file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_init() {
	if File_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_rawDesc), len(file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_msgTypes,
	}.Build()
	File_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto = out.File
	file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_goTypes = nil
	file_yandex_cloud_mdb_sqlserver_v1_config_sqlserver2019_proto_depIdxs = nil
}

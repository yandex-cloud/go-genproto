// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: yandex/cloud/monitoring/v3/multi_source_chart_widget.proto

package monitoring

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MultiSourceChartWidget_FreezeDuration int32

const (
	MultiSourceChartWidget_FREEZE_DURATION_UNSPECIFIED MultiSourceChartWidget_FreezeDuration = 0
	// Last hour.
	MultiSourceChartWidget_FREEZE_DURATION_HOUR MultiSourceChartWidget_FreezeDuration = 1
	// Last day = last 24 hours.
	MultiSourceChartWidget_FREEZE_DURATION_DAY MultiSourceChartWidget_FreezeDuration = 2
	// Last 7 days.
	MultiSourceChartWidget_FREEZE_DURATION_WEEK MultiSourceChartWidget_FreezeDuration = 3
	// Last 31 days.
	MultiSourceChartWidget_FREEZE_DURATION_MONTH MultiSourceChartWidget_FreezeDuration = 4
)

// Enum value maps for MultiSourceChartWidget_FreezeDuration.
var (
	MultiSourceChartWidget_FreezeDuration_name = map[int32]string{
		0: "FREEZE_DURATION_UNSPECIFIED",
		1: "FREEZE_DURATION_HOUR",
		2: "FREEZE_DURATION_DAY",
		3: "FREEZE_DURATION_WEEK",
		4: "FREEZE_DURATION_MONTH",
	}
	MultiSourceChartWidget_FreezeDuration_value = map[string]int32{
		"FREEZE_DURATION_UNSPECIFIED": 0,
		"FREEZE_DURATION_HOUR":        1,
		"FREEZE_DURATION_DAY":         2,
		"FREEZE_DURATION_WEEK":        3,
		"FREEZE_DURATION_MONTH":       4,
	}
)

func (x MultiSourceChartWidget_FreezeDuration) Enum() *MultiSourceChartWidget_FreezeDuration {
	p := new(MultiSourceChartWidget_FreezeDuration)
	*p = x
	return p
}

func (x MultiSourceChartWidget_FreezeDuration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultiSourceChartWidget_FreezeDuration) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_enumTypes[0].Descriptor()
}

func (MultiSourceChartWidget_FreezeDuration) Type() protoreflect.EnumType {
	return &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_enumTypes[0]
}

func (x MultiSourceChartWidget_FreezeDuration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultiSourceChartWidget_FreezeDuration.Descriptor instead.
func (MultiSourceChartWidget_FreezeDuration) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 0}
}

// Chart visualization type.
type MultiSourceChartWidget_VisualizationSettings_VisualizationType int32

const (
	// Not specified (line by default).
	MultiSourceChartWidget_VisualizationSettings_VISUALIZATION_TYPE_UNSPECIFIED MultiSourceChartWidget_VisualizationSettings_VisualizationType = 0
	// Line chart.
	MultiSourceChartWidget_VisualizationSettings_VISUALIZATION_TYPE_LINE MultiSourceChartWidget_VisualizationSettings_VisualizationType = 1
	// Stack chart.
	MultiSourceChartWidget_VisualizationSettings_VISUALIZATION_TYPE_STACK MultiSourceChartWidget_VisualizationSettings_VisualizationType = 2
	// Points as columns chart.
	MultiSourceChartWidget_VisualizationSettings_VISUALIZATION_TYPE_COLUMN MultiSourceChartWidget_VisualizationSettings_VisualizationType = 3
	// Points.
	MultiSourceChartWidget_VisualizationSettings_VISUALIZATION_TYPE_POINTS MultiSourceChartWidget_VisualizationSettings_VisualizationType = 4
	// Pie aggregation chart.
	MultiSourceChartWidget_VisualizationSettings_VISUALIZATION_TYPE_PIE MultiSourceChartWidget_VisualizationSettings_VisualizationType = 5
	// Bars aggregation chart.
	MultiSourceChartWidget_VisualizationSettings_VISUALIZATION_TYPE_BARS MultiSourceChartWidget_VisualizationSettings_VisualizationType = 6
	// Distribution aggregation chart.
	MultiSourceChartWidget_VisualizationSettings_VISUALIZATION_TYPE_DISTRIBUTION MultiSourceChartWidget_VisualizationSettings_VisualizationType = 7
	// Heatmap aggregation chart.
	MultiSourceChartWidget_VisualizationSettings_VISUALIZATION_TYPE_HEATMAP MultiSourceChartWidget_VisualizationSettings_VisualizationType = 8
)

// Enum value maps for MultiSourceChartWidget_VisualizationSettings_VisualizationType.
var (
	MultiSourceChartWidget_VisualizationSettings_VisualizationType_name = map[int32]string{
		0: "VISUALIZATION_TYPE_UNSPECIFIED",
		1: "VISUALIZATION_TYPE_LINE",
		2: "VISUALIZATION_TYPE_STACK",
		3: "VISUALIZATION_TYPE_COLUMN",
		4: "VISUALIZATION_TYPE_POINTS",
		5: "VISUALIZATION_TYPE_PIE",
		6: "VISUALIZATION_TYPE_BARS",
		7: "VISUALIZATION_TYPE_DISTRIBUTION",
		8: "VISUALIZATION_TYPE_HEATMAP",
	}
	MultiSourceChartWidget_VisualizationSettings_VisualizationType_value = map[string]int32{
		"VISUALIZATION_TYPE_UNSPECIFIED":  0,
		"VISUALIZATION_TYPE_LINE":         1,
		"VISUALIZATION_TYPE_STACK":        2,
		"VISUALIZATION_TYPE_COLUMN":       3,
		"VISUALIZATION_TYPE_POINTS":       4,
		"VISUALIZATION_TYPE_PIE":          5,
		"VISUALIZATION_TYPE_BARS":         6,
		"VISUALIZATION_TYPE_DISTRIBUTION": 7,
		"VISUALIZATION_TYPE_HEATMAP":      8,
	}
)

func (x MultiSourceChartWidget_VisualizationSettings_VisualizationType) Enum() *MultiSourceChartWidget_VisualizationSettings_VisualizationType {
	p := new(MultiSourceChartWidget_VisualizationSettings_VisualizationType)
	*p = x
	return p
}

func (x MultiSourceChartWidget_VisualizationSettings_VisualizationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultiSourceChartWidget_VisualizationSettings_VisualizationType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_enumTypes[1].Descriptor()
}

func (MultiSourceChartWidget_VisualizationSettings_VisualizationType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_enumTypes[1]
}

func (x MultiSourceChartWidget_VisualizationSettings_VisualizationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultiSourceChartWidget_VisualizationSettings_VisualizationType.Descriptor instead.
func (MultiSourceChartWidget_VisualizationSettings_VisualizationType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 2, 0}
}

type MultiSourceChartWidget_VisualizationSettings_Interpolate int32

const (
	// Not specified (linear by default).
	MultiSourceChartWidget_VisualizationSettings_INTERPOLATE_UNSPECIFIED MultiSourceChartWidget_VisualizationSettings_Interpolate = 0
	// Linear.
	MultiSourceChartWidget_VisualizationSettings_INTERPOLATE_LINEAR MultiSourceChartWidget_VisualizationSettings_Interpolate = 1
	// Left.
	MultiSourceChartWidget_VisualizationSettings_INTERPOLATE_LEFT MultiSourceChartWidget_VisualizationSettings_Interpolate = 2
	// Right.
	MultiSourceChartWidget_VisualizationSettings_INTERPOLATE_RIGHT MultiSourceChartWidget_VisualizationSettings_Interpolate = 3
)

// Enum value maps for MultiSourceChartWidget_VisualizationSettings_Interpolate.
var (
	MultiSourceChartWidget_VisualizationSettings_Interpolate_name = map[int32]string{
		0: "INTERPOLATE_UNSPECIFIED",
		1: "INTERPOLATE_LINEAR",
		2: "INTERPOLATE_LEFT",
		3: "INTERPOLATE_RIGHT",
	}
	MultiSourceChartWidget_VisualizationSettings_Interpolate_value = map[string]int32{
		"INTERPOLATE_UNSPECIFIED": 0,
		"INTERPOLATE_LINEAR":      1,
		"INTERPOLATE_LEFT":        2,
		"INTERPOLATE_RIGHT":       3,
	}
)

func (x MultiSourceChartWidget_VisualizationSettings_Interpolate) Enum() *MultiSourceChartWidget_VisualizationSettings_Interpolate {
	p := new(MultiSourceChartWidget_VisualizationSettings_Interpolate)
	*p = x
	return p
}

func (x MultiSourceChartWidget_VisualizationSettings_Interpolate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultiSourceChartWidget_VisualizationSettings_Interpolate) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_enumTypes[2].Descriptor()
}

func (MultiSourceChartWidget_VisualizationSettings_Interpolate) Type() protoreflect.EnumType {
	return &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_enumTypes[2]
}

func (x MultiSourceChartWidget_VisualizationSettings_Interpolate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultiSourceChartWidget_VisualizationSettings_Interpolate.Descriptor instead.
func (MultiSourceChartWidget_VisualizationSettings_Interpolate) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 2, 1}
}

// Y axis type.
// N.B. _TYPE prefix is necessary to expect name clash with Interpolate LINEAR value.
type MultiSourceChartWidget_VisualizationSettings_YaxisType int32

const (
	// Not specified (linear by default).
	MultiSourceChartWidget_VisualizationSettings_YAXIS_TYPE_UNSPECIFIED MultiSourceChartWidget_VisualizationSettings_YaxisType = 0
	// Linear.
	MultiSourceChartWidget_VisualizationSettings_YAXIS_TYPE_LINEAR MultiSourceChartWidget_VisualizationSettings_YaxisType = 1
	// Logarithmic.
	MultiSourceChartWidget_VisualizationSettings_YAXIS_TYPE_LOGARITHMIC MultiSourceChartWidget_VisualizationSettings_YaxisType = 2
)

// Enum value maps for MultiSourceChartWidget_VisualizationSettings_YaxisType.
var (
	MultiSourceChartWidget_VisualizationSettings_YaxisType_name = map[int32]string{
		0: "YAXIS_TYPE_UNSPECIFIED",
		1: "YAXIS_TYPE_LINEAR",
		2: "YAXIS_TYPE_LOGARITHMIC",
	}
	MultiSourceChartWidget_VisualizationSettings_YaxisType_value = map[string]int32{
		"YAXIS_TYPE_UNSPECIFIED": 0,
		"YAXIS_TYPE_LINEAR":      1,
		"YAXIS_TYPE_LOGARITHMIC": 2,
	}
)

func (x MultiSourceChartWidget_VisualizationSettings_YaxisType) Enum() *MultiSourceChartWidget_VisualizationSettings_YaxisType {
	p := new(MultiSourceChartWidget_VisualizationSettings_YaxisType)
	*p = x
	return p
}

func (x MultiSourceChartWidget_VisualizationSettings_YaxisType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultiSourceChartWidget_VisualizationSettings_YaxisType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_enumTypes[3].Descriptor()
}

func (MultiSourceChartWidget_VisualizationSettings_YaxisType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_enumTypes[3]
}

func (x MultiSourceChartWidget_VisualizationSettings_YaxisType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultiSourceChartWidget_VisualizationSettings_YaxisType.Descriptor instead.
func (MultiSourceChartWidget_VisualizationSettings_YaxisType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 2, 2}
}

type MultiSourceChartWidget_VisualizationSettings_SeriesAggregation int32

const (
	// Not specified (avg by default).
	MultiSourceChartWidget_VisualizationSettings_SERIES_AGGREGATION_UNSPECIFIED MultiSourceChartWidget_VisualizationSettings_SeriesAggregation = 0
	// Average.
	MultiSourceChartWidget_VisualizationSettings_SERIES_AGGREGATION_AVG MultiSourceChartWidget_VisualizationSettings_SeriesAggregation = 1
	// Minimum.
	MultiSourceChartWidget_VisualizationSettings_SERIES_AGGREGATION_MIN MultiSourceChartWidget_VisualizationSettings_SeriesAggregation = 2
	// Maximum.
	MultiSourceChartWidget_VisualizationSettings_SERIES_AGGREGATION_MAX MultiSourceChartWidget_VisualizationSettings_SeriesAggregation = 3
	// Last non-NaN value.
	MultiSourceChartWidget_VisualizationSettings_SERIES_AGGREGATION_LAST MultiSourceChartWidget_VisualizationSettings_SeriesAggregation = 4
	// Sum.
	MultiSourceChartWidget_VisualizationSettings_SERIES_AGGREGATION_SUM MultiSourceChartWidget_VisualizationSettings_SeriesAggregation = 5
)

// Enum value maps for MultiSourceChartWidget_VisualizationSettings_SeriesAggregation.
var (
	MultiSourceChartWidget_VisualizationSettings_SeriesAggregation_name = map[int32]string{
		0: "SERIES_AGGREGATION_UNSPECIFIED",
		1: "SERIES_AGGREGATION_AVG",
		2: "SERIES_AGGREGATION_MIN",
		3: "SERIES_AGGREGATION_MAX",
		4: "SERIES_AGGREGATION_LAST",
		5: "SERIES_AGGREGATION_SUM",
	}
	MultiSourceChartWidget_VisualizationSettings_SeriesAggregation_value = map[string]int32{
		"SERIES_AGGREGATION_UNSPECIFIED": 0,
		"SERIES_AGGREGATION_AVG":         1,
		"SERIES_AGGREGATION_MIN":         2,
		"SERIES_AGGREGATION_MAX":         3,
		"SERIES_AGGREGATION_LAST":        4,
		"SERIES_AGGREGATION_SUM":         5,
	}
)

func (x MultiSourceChartWidget_VisualizationSettings_SeriesAggregation) Enum() *MultiSourceChartWidget_VisualizationSettings_SeriesAggregation {
	p := new(MultiSourceChartWidget_VisualizationSettings_SeriesAggregation)
	*p = x
	return p
}

func (x MultiSourceChartWidget_VisualizationSettings_SeriesAggregation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultiSourceChartWidget_VisualizationSettings_SeriesAggregation) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_enumTypes[4].Descriptor()
}

func (MultiSourceChartWidget_VisualizationSettings_SeriesAggregation) Type() protoreflect.EnumType {
	return &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_enumTypes[4]
}

func (x MultiSourceChartWidget_VisualizationSettings_SeriesAggregation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultiSourceChartWidget_VisualizationSettings_SeriesAggregation.Descriptor instead.
func (MultiSourceChartWidget_VisualizationSettings_SeriesAggregation) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 2, 3}
}

type MultiSourceChartWidget_SeriesOverrides_YaxisPosition int32

const (
	// Not specified (left by default).
	MultiSourceChartWidget_SeriesOverrides_YAXIS_POSITION_UNSPECIFIED MultiSourceChartWidget_SeriesOverrides_YaxisPosition = 0
	// Left.
	MultiSourceChartWidget_SeriesOverrides_YAXIS_POSITION_LEFT MultiSourceChartWidget_SeriesOverrides_YaxisPosition = 1
	// Right.
	MultiSourceChartWidget_SeriesOverrides_YAXIS_POSITION_RIGHT MultiSourceChartWidget_SeriesOverrides_YaxisPosition = 2
)

// Enum value maps for MultiSourceChartWidget_SeriesOverrides_YaxisPosition.
var (
	MultiSourceChartWidget_SeriesOverrides_YaxisPosition_name = map[int32]string{
		0: "YAXIS_POSITION_UNSPECIFIED",
		1: "YAXIS_POSITION_LEFT",
		2: "YAXIS_POSITION_RIGHT",
	}
	MultiSourceChartWidget_SeriesOverrides_YaxisPosition_value = map[string]int32{
		"YAXIS_POSITION_UNSPECIFIED": 0,
		"YAXIS_POSITION_LEFT":        1,
		"YAXIS_POSITION_RIGHT":       2,
	}
)

func (x MultiSourceChartWidget_SeriesOverrides_YaxisPosition) Enum() *MultiSourceChartWidget_SeriesOverrides_YaxisPosition {
	p := new(MultiSourceChartWidget_SeriesOverrides_YaxisPosition)
	*p = x
	return p
}

func (x MultiSourceChartWidget_SeriesOverrides_YaxisPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultiSourceChartWidget_SeriesOverrides_YaxisPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_enumTypes[5].Descriptor()
}

func (MultiSourceChartWidget_SeriesOverrides_YaxisPosition) Type() protoreflect.EnumType {
	return &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_enumTypes[5]
}

func (x MultiSourceChartWidget_SeriesOverrides_YaxisPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultiSourceChartWidget_SeriesOverrides_YaxisPosition.Descriptor instead.
func (MultiSourceChartWidget_SeriesOverrides_YaxisPosition) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 3, 0}
}

type MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType int32

const (
	// Not specified (line by default).
	MultiSourceChartWidget_SeriesOverrides_SERIES_VISUALIZATION_TYPE_UNSPECIFIED MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType = 0
	// Line chart.
	MultiSourceChartWidget_SeriesOverrides_SERIES_VISUALIZATION_TYPE_LINE MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType = 1
	// Stack chart.
	MultiSourceChartWidget_SeriesOverrides_SERIES_VISUALIZATION_TYPE_STACK MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType = 2
	// Points as columns chart.
	MultiSourceChartWidget_SeriesOverrides_SERIES_VISUALIZATION_TYPE_COLUMN MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType = 3
	// Points.
	MultiSourceChartWidget_SeriesOverrides_SERIES_VISUALIZATION_TYPE_POINTS MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType = 4
)

// Enum value maps for MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType.
var (
	MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType_name = map[int32]string{
		0: "SERIES_VISUALIZATION_TYPE_UNSPECIFIED",
		1: "SERIES_VISUALIZATION_TYPE_LINE",
		2: "SERIES_VISUALIZATION_TYPE_STACK",
		3: "SERIES_VISUALIZATION_TYPE_COLUMN",
		4: "SERIES_VISUALIZATION_TYPE_POINTS",
	}
	MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType_value = map[string]int32{
		"SERIES_VISUALIZATION_TYPE_UNSPECIFIED": 0,
		"SERIES_VISUALIZATION_TYPE_LINE":        1,
		"SERIES_VISUALIZATION_TYPE_STACK":       2,
		"SERIES_VISUALIZATION_TYPE_COLUMN":      3,
		"SERIES_VISUALIZATION_TYPE_POINTS":      4,
	}
)

func (x MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType) Enum() *MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType {
	p := new(MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType)
	*p = x
	return p
}

func (x MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_enumTypes[6].Descriptor()
}

func (MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_enumTypes[6]
}

func (x MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType.Descriptor instead.
func (MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 3, 1}
}

// Multi-source chart widget.
type MultiSourceChartWidget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Chart ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Targets.
	Targets []*MultiSourceChartWidget_Target `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty"`
	// Data sources.
	DataSources []*MultiSourceChartWidget_DataSource `protobuf:"bytes,3,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty"`
	// Visualization settings.
	VisualizationSettings *MultiSourceChartWidget_VisualizationSettings `protobuf:"bytes,4,opt,name=visualization_settings,json=visualizationSettings,proto3" json:"visualization_settings,omitempty"`
	// Override settings.
	SeriesOverrides []*MultiSourceChartWidget_SeriesOverrides `protobuf:"bytes,5,rep,name=series_overrides,json=seriesOverrides,proto3" json:"series_overrides,omitempty"`
	// Name hiding settings.
	NameHidingSettings *MultiSourceChartWidget_NameHidingSettings `protobuf:"bytes,6,opt,name=name_hiding_settings,json=nameHidingSettings,proto3" json:"name_hiding_settings,omitempty"`
	// Chart description in dashboard (not enabled in UI).
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// Chart widget title.
	Title string `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	// Enable legend under chart.
	DisplayLegend bool `protobuf:"varint,9,opt,name=display_legend,json=displayLegend,proto3" json:"display_legend,omitempty"`
	// Fixed time interval for chart.
	Freeze MultiSourceChartWidget_FreezeDuration `protobuf:"varint,10,opt,name=freeze,proto3,enum=yandex.cloud.monitoring.v3.MultiSourceChartWidget_FreezeDuration" json:"freeze,omitempty"`
	// Setting for repeat panel / repeat row
	Repeat *MultiSourceChartWidget_RepeatSettings `protobuf:"bytes,11,opt,name=repeat,proto3" json:"repeat,omitempty"`
}

func (x *MultiSourceChartWidget) Reset() {
	*x = MultiSourceChartWidget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSourceChartWidget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSourceChartWidget) ProtoMessage() {}

func (x *MultiSourceChartWidget) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSourceChartWidget.ProtoReflect.Descriptor instead.
func (*MultiSourceChartWidget) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0}
}

func (x *MultiSourceChartWidget) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MultiSourceChartWidget) GetTargets() []*MultiSourceChartWidget_Target {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *MultiSourceChartWidget) GetDataSources() []*MultiSourceChartWidget_DataSource {
	if x != nil {
		return x.DataSources
	}
	return nil
}

func (x *MultiSourceChartWidget) GetVisualizationSettings() *MultiSourceChartWidget_VisualizationSettings {
	if x != nil {
		return x.VisualizationSettings
	}
	return nil
}

func (x *MultiSourceChartWidget) GetSeriesOverrides() []*MultiSourceChartWidget_SeriesOverrides {
	if x != nil {
		return x.SeriesOverrides
	}
	return nil
}

func (x *MultiSourceChartWidget) GetNameHidingSettings() *MultiSourceChartWidget_NameHidingSettings {
	if x != nil {
		return x.NameHidingSettings
	}
	return nil
}

func (x *MultiSourceChartWidget) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MultiSourceChartWidget) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MultiSourceChartWidget) GetDisplayLegend() bool {
	if x != nil {
		return x.DisplayLegend
	}
	return false
}

func (x *MultiSourceChartWidget) GetFreeze() MultiSourceChartWidget_FreezeDuration {
	if x != nil {
		return x.Freeze
	}
	return MultiSourceChartWidget_FREEZE_DURATION_UNSPECIFIED
}

func (x *MultiSourceChartWidget) GetRepeat() *MultiSourceChartWidget_RepeatSettings {
	if x != nil {
		return x.Repeat
	}
	return nil
}

// Target settings.
type MultiSourceChartWidget_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//
	//	*MultiSourceChartWidget_Target_MonitoringTarget_
	//	*MultiSourceChartWidget_Target_PrometheusTarget_
	Target isMultiSourceChartWidget_Target_Target `protobuf_oneof:"target"`
}

func (x *MultiSourceChartWidget_Target) Reset() {
	*x = MultiSourceChartWidget_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSourceChartWidget_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSourceChartWidget_Target) ProtoMessage() {}

func (x *MultiSourceChartWidget_Target) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSourceChartWidget_Target.ProtoReflect.Descriptor instead.
func (*MultiSourceChartWidget_Target) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 0}
}

func (m *MultiSourceChartWidget_Target) GetTarget() isMultiSourceChartWidget_Target_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *MultiSourceChartWidget_Target) GetMonitoringTarget() *MultiSourceChartWidget_Target_MonitoringTarget {
	if x, ok := x.GetTarget().(*MultiSourceChartWidget_Target_MonitoringTarget_); ok {
		return x.MonitoringTarget
	}
	return nil
}

func (x *MultiSourceChartWidget_Target) GetPrometheusTarget() *MultiSourceChartWidget_Target_PrometheusTarget {
	if x, ok := x.GetTarget().(*MultiSourceChartWidget_Target_PrometheusTarget_); ok {
		return x.PrometheusTarget
	}
	return nil
}

type isMultiSourceChartWidget_Target_Target interface {
	isMultiSourceChartWidget_Target_Target()
}

type MultiSourceChartWidget_Target_MonitoringTarget_ struct {
	// Monitoring target.
	MonitoringTarget *MultiSourceChartWidget_Target_MonitoringTarget `protobuf:"bytes,1,opt,name=monitoring_target,json=monitoringTarget,proto3,oneof"`
}

type MultiSourceChartWidget_Target_PrometheusTarget_ struct {
	// Prometheus target.
	PrometheusTarget *MultiSourceChartWidget_Target_PrometheusTarget `protobuf:"bytes,2,opt,name=prometheus_target,json=prometheusTarget,proto3,oneof"`
}

func (*MultiSourceChartWidget_Target_MonitoringTarget_) isMultiSourceChartWidget_Target_Target() {}

func (*MultiSourceChartWidget_Target_PrometheusTarget_) isMultiSourceChartWidget_Target_Target() {}

// Data source settings.
type MultiSourceChartWidget_DataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DataSource:
	//
	//	*MultiSourceChartWidget_DataSource_MonitoringDataSource_
	//	*MultiSourceChartWidget_DataSource_PrometheusDataSource_
	DataSource isMultiSourceChartWidget_DataSource_DataSource `protobuf_oneof:"data_source"`
}

func (x *MultiSourceChartWidget_DataSource) Reset() {
	*x = MultiSourceChartWidget_DataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSourceChartWidget_DataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSourceChartWidget_DataSource) ProtoMessage() {}

func (x *MultiSourceChartWidget_DataSource) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSourceChartWidget_DataSource.ProtoReflect.Descriptor instead.
func (*MultiSourceChartWidget_DataSource) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 1}
}

func (m *MultiSourceChartWidget_DataSource) GetDataSource() isMultiSourceChartWidget_DataSource_DataSource {
	if m != nil {
		return m.DataSource
	}
	return nil
}

func (x *MultiSourceChartWidget_DataSource) GetMonitoringDataSource() *MultiSourceChartWidget_DataSource_MonitoringDataSource {
	if x, ok := x.GetDataSource().(*MultiSourceChartWidget_DataSource_MonitoringDataSource_); ok {
		return x.MonitoringDataSource
	}
	return nil
}

func (x *MultiSourceChartWidget_DataSource) GetPrometheusDataSource() *MultiSourceChartWidget_DataSource_PrometheusDataSource {
	if x, ok := x.GetDataSource().(*MultiSourceChartWidget_DataSource_PrometheusDataSource_); ok {
		return x.PrometheusDataSource
	}
	return nil
}

type isMultiSourceChartWidget_DataSource_DataSource interface {
	isMultiSourceChartWidget_DataSource_DataSource()
}

type MultiSourceChartWidget_DataSource_MonitoringDataSource_ struct {
	// Monitoring data source.
	MonitoringDataSource *MultiSourceChartWidget_DataSource_MonitoringDataSource `protobuf:"bytes,1,opt,name=monitoring_data_source,json=monitoringDataSource,proto3,oneof"`
}

type MultiSourceChartWidget_DataSource_PrometheusDataSource_ struct {
	// Prometheus data source.
	PrometheusDataSource *MultiSourceChartWidget_DataSource_PrometheusDataSource `protobuf:"bytes,2,opt,name=prometheus_data_source,json=prometheusDataSource,proto3,oneof"`
}

func (*MultiSourceChartWidget_DataSource_MonitoringDataSource_) isMultiSourceChartWidget_DataSource_DataSource() {
}

func (*MultiSourceChartWidget_DataSource_PrometheusDataSource_) isMultiSourceChartWidget_DataSource_DataSource() {
}

// Visualization settings.
type MultiSourceChartWidget_VisualizationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Visualization type.
	Type MultiSourceChartWidget_VisualizationSettings_VisualizationType `protobuf:"varint,1,opt,name=type,proto3,enum=yandex.cloud.monitoring.v3.MultiSourceChartWidget_VisualizationSettings_VisualizationType" json:"type,omitempty"`
	// Normalize.
	Normalize bool `protobuf:"varint,2,opt,name=normalize,proto3" json:"normalize,omitempty"`
	// Interpolate.
	Interpolate MultiSourceChartWidget_VisualizationSettings_Interpolate `protobuf:"varint,3,opt,name=interpolate,proto3,enum=yandex.cloud.monitoring.v3.MultiSourceChartWidget_VisualizationSettings_Interpolate" json:"interpolate,omitempty"`
	// Aggregation.
	Aggregation MultiSourceChartWidget_VisualizationSettings_SeriesAggregation `protobuf:"varint,4,opt,name=aggregation,proto3,enum=yandex.cloud.monitoring.v3.MultiSourceChartWidget_VisualizationSettings_SeriesAggregation" json:"aggregation,omitempty"`
	// Color scheme settings.
	ColorSchemeSettings *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings `protobuf:"bytes,5,opt,name=color_scheme_settings,json=colorSchemeSettings,proto3" json:"color_scheme_settings,omitempty"`
	// Heatmap settings.
	HeatmapSettings *MultiSourceChartWidget_VisualizationSettings_HeatmapSettings `protobuf:"bytes,6,opt,name=heatmap_settings,json=heatmapSettings,proto3" json:"heatmap_settings,omitempty"`
	// Y axis settings.
	YaxisSettings *MultiSourceChartWidget_VisualizationSettings_YaxisSettings `protobuf:"bytes,7,opt,name=yaxis_settings,json=yaxisSettings,proto3" json:"yaxis_settings,omitempty"`
	// Inside chart title.
	Title string `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	// Show chart labels.
	ShowLabels bool `protobuf:"varint,9,opt,name=show_labels,json=showLabels,proto3" json:"show_labels,omitempty"`
}

func (x *MultiSourceChartWidget_VisualizationSettings) Reset() {
	*x = MultiSourceChartWidget_VisualizationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSourceChartWidget_VisualizationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSourceChartWidget_VisualizationSettings) ProtoMessage() {}

func (x *MultiSourceChartWidget_VisualizationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSourceChartWidget_VisualizationSettings.ProtoReflect.Descriptor instead.
func (*MultiSourceChartWidget_VisualizationSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MultiSourceChartWidget_VisualizationSettings) GetType() MultiSourceChartWidget_VisualizationSettings_VisualizationType {
	if x != nil {
		return x.Type
	}
	return MultiSourceChartWidget_VisualizationSettings_VISUALIZATION_TYPE_UNSPECIFIED
}

func (x *MultiSourceChartWidget_VisualizationSettings) GetNormalize() bool {
	if x != nil {
		return x.Normalize
	}
	return false
}

func (x *MultiSourceChartWidget_VisualizationSettings) GetInterpolate() MultiSourceChartWidget_VisualizationSettings_Interpolate {
	if x != nil {
		return x.Interpolate
	}
	return MultiSourceChartWidget_VisualizationSettings_INTERPOLATE_UNSPECIFIED
}

func (x *MultiSourceChartWidget_VisualizationSettings) GetAggregation() MultiSourceChartWidget_VisualizationSettings_SeriesAggregation {
	if x != nil {
		return x.Aggregation
	}
	return MultiSourceChartWidget_VisualizationSettings_SERIES_AGGREGATION_UNSPECIFIED
}

func (x *MultiSourceChartWidget_VisualizationSettings) GetColorSchemeSettings() *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings {
	if x != nil {
		return x.ColorSchemeSettings
	}
	return nil
}

func (x *MultiSourceChartWidget_VisualizationSettings) GetHeatmapSettings() *MultiSourceChartWidget_VisualizationSettings_HeatmapSettings {
	if x != nil {
		return x.HeatmapSettings
	}
	return nil
}

func (x *MultiSourceChartWidget_VisualizationSettings) GetYaxisSettings() *MultiSourceChartWidget_VisualizationSettings_YaxisSettings {
	if x != nil {
		return x.YaxisSettings
	}
	return nil
}

func (x *MultiSourceChartWidget_VisualizationSettings) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MultiSourceChartWidget_VisualizationSettings) GetShowLabels() bool {
	if x != nil {
		return x.ShowLabels
	}
	return false
}

// Series override settings.
type MultiSourceChartWidget_SeriesOverrides struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Series selection type.
	//
	// Types that are assignable to Type:
	//
	//	*MultiSourceChartWidget_SeriesOverrides_Name
	//	*MultiSourceChartWidget_SeriesOverrides_TargetIndex
	Type isMultiSourceChartWidget_SeriesOverrides_Type `protobuf_oneof:"type"`
	// Required. Override settings.
	Settings *MultiSourceChartWidget_SeriesOverrides_SeriesOverrideSettings `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *MultiSourceChartWidget_SeriesOverrides) Reset() {
	*x = MultiSourceChartWidget_SeriesOverrides{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSourceChartWidget_SeriesOverrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSourceChartWidget_SeriesOverrides) ProtoMessage() {}

func (x *MultiSourceChartWidget_SeriesOverrides) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSourceChartWidget_SeriesOverrides.ProtoReflect.Descriptor instead.
func (*MultiSourceChartWidget_SeriesOverrides) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 3}
}

func (m *MultiSourceChartWidget_SeriesOverrides) GetType() isMultiSourceChartWidget_SeriesOverrides_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *MultiSourceChartWidget_SeriesOverrides) GetName() string {
	if x, ok := x.GetType().(*MultiSourceChartWidget_SeriesOverrides_Name); ok {
		return x.Name
	}
	return ""
}

func (x *MultiSourceChartWidget_SeriesOverrides) GetTargetIndex() string {
	if x, ok := x.GetType().(*MultiSourceChartWidget_SeriesOverrides_TargetIndex); ok {
		return x.TargetIndex
	}
	return ""
}

func (x *MultiSourceChartWidget_SeriesOverrides) GetSettings() *MultiSourceChartWidget_SeriesOverrides_SeriesOverrideSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type isMultiSourceChartWidget_SeriesOverrides_Type interface {
	isMultiSourceChartWidget_SeriesOverrides_Type()
}

type MultiSourceChartWidget_SeriesOverrides_Name struct {
	// Series name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3,oneof"`
}

type MultiSourceChartWidget_SeriesOverrides_TargetIndex struct {
	// Target index.
	TargetIndex string `protobuf:"bytes,2,opt,name=target_index,json=targetIndex,proto3,oneof"`
}

func (*MultiSourceChartWidget_SeriesOverrides_Name) isMultiSourceChartWidget_SeriesOverrides_Type() {}

func (*MultiSourceChartWidget_SeriesOverrides_TargetIndex) isMultiSourceChartWidget_SeriesOverrides_Type() {
}

// Name hiding settings.
type MultiSourceChartWidget_NameHidingSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if we want to show concrete series names only, false if we want to hide concrete series names.
	Positive bool `protobuf:"varint,1,opt,name=positive,proto3" json:"positive,omitempty"`
	// Series names to show or hide.
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *MultiSourceChartWidget_NameHidingSettings) Reset() {
	*x = MultiSourceChartWidget_NameHidingSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSourceChartWidget_NameHidingSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSourceChartWidget_NameHidingSettings) ProtoMessage() {}

func (x *MultiSourceChartWidget_NameHidingSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSourceChartWidget_NameHidingSettings.ProtoReflect.Descriptor instead.
func (*MultiSourceChartWidget_NameHidingSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 4}
}

func (x *MultiSourceChartWidget_NameHidingSettings) GetPositive() bool {
	if x != nil {
		return x.Positive
	}
	return false
}

func (x *MultiSourceChartWidget_NameHidingSettings) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type MultiSourceChartWidget_RepeatSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameters to repeat by.
	RepeatBy []string `protobuf:"bytes,1,rep,name=repeat_by,json=repeatBy,proto3" json:"repeat_by,omitempty"`
	// Max number of chart in one row.
	MaxChartsInRow int64 `protobuf:"varint,2,opt,name=max_charts_in_row,json=maxChartsInRow,proto3" json:"max_charts_in_row,omitempty"`
}

func (x *MultiSourceChartWidget_RepeatSettings) Reset() {
	*x = MultiSourceChartWidget_RepeatSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSourceChartWidget_RepeatSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSourceChartWidget_RepeatSettings) ProtoMessage() {}

func (x *MultiSourceChartWidget_RepeatSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSourceChartWidget_RepeatSettings.ProtoReflect.Descriptor instead.
func (*MultiSourceChartWidget_RepeatSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 5}
}

func (x *MultiSourceChartWidget_RepeatSettings) GetRepeatBy() []string {
	if x != nil {
		return x.RepeatBy
	}
	return nil
}

func (x *MultiSourceChartWidget_RepeatSettings) GetMaxChartsInRow() int64 {
	if x != nil {
		return x.MaxChartsInRow
	}
	return 0
}

type MultiSourceChartWidget_Target_MonitoringTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Data source ID.
	DataSourceId string `protobuf:"bytes,1,opt,name=data_source_id,json=dataSourceId,proto3" json:"data_source_id,omitempty"`
	// Required. Query.
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Text mode.
	TextMode bool `protobuf:"varint,3,opt,name=text_mode,json=textMode,proto3" json:"text_mode,omitempty"`
	// Checks that target is visible or invisible.
	Hidden bool `protobuf:"varint,4,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Name of the query.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MultiSourceChartWidget_Target_MonitoringTarget) Reset() {
	*x = MultiSourceChartWidget_Target_MonitoringTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSourceChartWidget_Target_MonitoringTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSourceChartWidget_Target_MonitoringTarget) ProtoMessage() {}

func (x *MultiSourceChartWidget_Target_MonitoringTarget) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSourceChartWidget_Target_MonitoringTarget.ProtoReflect.Descriptor instead.
func (*MultiSourceChartWidget_Target_MonitoringTarget) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *MultiSourceChartWidget_Target_MonitoringTarget) GetDataSourceId() string {
	if x != nil {
		return x.DataSourceId
	}
	return ""
}

func (x *MultiSourceChartWidget_Target_MonitoringTarget) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *MultiSourceChartWidget_Target_MonitoringTarget) GetTextMode() bool {
	if x != nil {
		return x.TextMode
	}
	return false
}

func (x *MultiSourceChartWidget_Target_MonitoringTarget) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *MultiSourceChartWidget_Target_MonitoringTarget) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MultiSourceChartWidget_Target_PrometheusTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Data source ID.
	DataSourceId string `protobuf:"bytes,1,opt,name=data_source_id,json=dataSourceId,proto3" json:"data_source_id,omitempty"`
	// Required. Workspace ID.
	WorkspaceId string `protobuf:"bytes,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// Required. Query.
	Query string `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	// Text mode.
	TextMode bool `protobuf:"varint,4,opt,name=text_mode,json=textMode,proto3" json:"text_mode,omitempty"`
	// Checks that target is visible or invisible.
	Hidden bool `protobuf:"varint,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// Name of the query.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MultiSourceChartWidget_Target_PrometheusTarget) Reset() {
	*x = MultiSourceChartWidget_Target_PrometheusTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSourceChartWidget_Target_PrometheusTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSourceChartWidget_Target_PrometheusTarget) ProtoMessage() {}

func (x *MultiSourceChartWidget_Target_PrometheusTarget) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSourceChartWidget_Target_PrometheusTarget.ProtoReflect.Descriptor instead.
func (*MultiSourceChartWidget_Target_PrometheusTarget) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *MultiSourceChartWidget_Target_PrometheusTarget) GetDataSourceId() string {
	if x != nil {
		return x.DataSourceId
	}
	return ""
}

func (x *MultiSourceChartWidget_Target_PrometheusTarget) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *MultiSourceChartWidget_Target_PrometheusTarget) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *MultiSourceChartWidget_Target_PrometheusTarget) GetTextMode() bool {
	if x != nil {
		return x.TextMode
	}
	return false
}

func (x *MultiSourceChartWidget_Target_PrometheusTarget) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *MultiSourceChartWidget_Target_PrometheusTarget) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MultiSourceChartWidget_DataSource_MonitoringDataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Data source ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Required. Downsampling settings.
	Downsampling *Downsampling `protobuf:"bytes,2,opt,name=downsampling,proto3" json:"downsampling,omitempty"`
}

func (x *MultiSourceChartWidget_DataSource_MonitoringDataSource) Reset() {
	*x = MultiSourceChartWidget_DataSource_MonitoringDataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSourceChartWidget_DataSource_MonitoringDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSourceChartWidget_DataSource_MonitoringDataSource) ProtoMessage() {}

func (x *MultiSourceChartWidget_DataSource_MonitoringDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSourceChartWidget_DataSource_MonitoringDataSource.ProtoReflect.Descriptor instead.
func (*MultiSourceChartWidget_DataSource_MonitoringDataSource) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *MultiSourceChartWidget_DataSource_MonitoringDataSource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MultiSourceChartWidget_DataSource_MonitoringDataSource) GetDownsampling() *Downsampling {
	if x != nil {
		return x.Downsampling
	}
	return nil
}

type MultiSourceChartWidget_DataSource_PrometheusDataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Data source ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Required. Grid step in milliseconds.
	Step int64 `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
}

func (x *MultiSourceChartWidget_DataSource_PrometheusDataSource) Reset() {
	*x = MultiSourceChartWidget_DataSource_PrometheusDataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSourceChartWidget_DataSource_PrometheusDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSourceChartWidget_DataSource_PrometheusDataSource) ProtoMessage() {}

func (x *MultiSourceChartWidget_DataSource_PrometheusDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSourceChartWidget_DataSource_PrometheusDataSource.ProtoReflect.Descriptor instead.
func (*MultiSourceChartWidget_DataSource_PrometheusDataSource) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *MultiSourceChartWidget_DataSource_PrometheusDataSource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MultiSourceChartWidget_DataSource_PrometheusDataSource) GetStep() int64 {
	if x != nil {
		return x.Step
	}
	return 0
}

type MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Scheme:
	//
	//	*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Automatic
	//	*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Standard
	//	*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Gradient
	//	*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Hash
	Scheme isMultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Scheme `protobuf_oneof:"scheme"`
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings) Reset() {
	*x = MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings) ProtoMessage() {}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings.ProtoReflect.Descriptor instead.
func (*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (m *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings) GetScheme() isMultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Scheme {
	if m != nil {
		return m.Scheme
	}
	return nil
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings) GetAutomatic() *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_AutomaticColorScheme {
	if x, ok := x.GetScheme().(*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Automatic); ok {
		return x.Automatic
	}
	return nil
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings) GetStandard() *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_StandardColorScheme {
	if x, ok := x.GetScheme().(*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Standard); ok {
		return x.Standard
	}
	return nil
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings) GetGradient() *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_GradientColorScheme {
	if x, ok := x.GetScheme().(*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Gradient); ok {
		return x.Gradient
	}
	return nil
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings) GetHash() *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_HashColorScheme {
	if x, ok := x.GetScheme().(*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Hash); ok {
		return x.Hash
	}
	return nil
}

type isMultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Scheme interface {
	isMultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Scheme()
}

type MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Automatic struct {
	// Automatic color scheme.
	Automatic *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_AutomaticColorScheme `protobuf:"bytes,1,opt,name=automatic,proto3,oneof"`
}

type MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Standard struct {
	// Standard color scheme.
	Standard *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_StandardColorScheme `protobuf:"bytes,2,opt,name=standard,proto3,oneof"`
}

type MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Gradient struct {
	// Gradient color scheme.
	Gradient *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_GradientColorScheme `protobuf:"bytes,3,opt,name=gradient,proto3,oneof"`
}

type MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Hash struct {
	// Hash color scheme. Based on line name or value.
	Hash *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_HashColorScheme `protobuf:"bytes,4,opt,name=hash,proto3,oneof"`
}

func (*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Automatic) isMultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Scheme() {
}

func (*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Standard) isMultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Scheme() {
}

func (*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Gradient) isMultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Scheme() {
}

func (*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Hash) isMultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Scheme() {
}

type MultiSourceChartWidget_VisualizationSettings_HeatmapSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Heatmap green value.
	GreenValue string `protobuf:"bytes,2,opt,name=green_value,json=greenValue,proto3" json:"green_value,omitempty"`
	// Heatmap yellow value.
	YellowValue string `protobuf:"bytes,3,opt,name=yellow_value,json=yellowValue,proto3" json:"yellow_value,omitempty"`
	// Heatmap red value.
	RedValue string `protobuf:"bytes,4,opt,name=red_value,json=redValue,proto3" json:"red_value,omitempty"`
	// Heatmap violet_value.
	VioletValue string `protobuf:"bytes,5,opt,name=violet_value,json=violetValue,proto3" json:"violet_value,omitempty"`
}

func (x *MultiSourceChartWidget_VisualizationSettings_HeatmapSettings) Reset() {
	*x = MultiSourceChartWidget_VisualizationSettings_HeatmapSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSourceChartWidget_VisualizationSettings_HeatmapSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSourceChartWidget_VisualizationSettings_HeatmapSettings) ProtoMessage() {}

func (x *MultiSourceChartWidget_VisualizationSettings_HeatmapSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSourceChartWidget_VisualizationSettings_HeatmapSettings.ProtoReflect.Descriptor instead.
func (*MultiSourceChartWidget_VisualizationSettings_HeatmapSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *MultiSourceChartWidget_VisualizationSettings_HeatmapSettings) GetGreenValue() string {
	if x != nil {
		return x.GreenValue
	}
	return ""
}

func (x *MultiSourceChartWidget_VisualizationSettings_HeatmapSettings) GetYellowValue() string {
	if x != nil {
		return x.YellowValue
	}
	return ""
}

func (x *MultiSourceChartWidget_VisualizationSettings_HeatmapSettings) GetRedValue() string {
	if x != nil {
		return x.RedValue
	}
	return ""
}

func (x *MultiSourceChartWidget_VisualizationSettings_HeatmapSettings) GetVioletValue() string {
	if x != nil {
		return x.VioletValue
	}
	return ""
}

// Y axis settings.
type MultiSourceChartWidget_VisualizationSettings_Yaxis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type.
	Type MultiSourceChartWidget_VisualizationSettings_YaxisType `protobuf:"varint,1,opt,name=type,proto3,enum=yandex.cloud.monitoring.v3.MultiSourceChartWidget_VisualizationSettings_YaxisType" json:"type,omitempty"`
	// Title or empty.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Min value in extended number format or empty.
	Min string `protobuf:"bytes,3,opt,name=min,proto3" json:"min,omitempty"`
	// Max value in extended number format or empty.
	Max string `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	// Unit format.
	UnitFormat UnitFormat `protobuf:"varint,5,opt,name=unit_format,json=unitFormat,proto3,enum=yandex.cloud.monitoring.v3.UnitFormat" json:"unit_format,omitempty"`
	// Tick value precision (null as default, 0-7 in other cases).
	Precision *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=precision,proto3" json:"precision,omitempty"`
}

func (x *MultiSourceChartWidget_VisualizationSettings_Yaxis) Reset() {
	*x = MultiSourceChartWidget_VisualizationSettings_Yaxis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSourceChartWidget_VisualizationSettings_Yaxis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSourceChartWidget_VisualizationSettings_Yaxis) ProtoMessage() {}

func (x *MultiSourceChartWidget_VisualizationSettings_Yaxis) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSourceChartWidget_VisualizationSettings_Yaxis.ProtoReflect.Descriptor instead.
func (*MultiSourceChartWidget_VisualizationSettings_Yaxis) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 2, 2}
}

func (x *MultiSourceChartWidget_VisualizationSettings_Yaxis) GetType() MultiSourceChartWidget_VisualizationSettings_YaxisType {
	if x != nil {
		return x.Type
	}
	return MultiSourceChartWidget_VisualizationSettings_YAXIS_TYPE_UNSPECIFIED
}

func (x *MultiSourceChartWidget_VisualizationSettings_Yaxis) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MultiSourceChartWidget_VisualizationSettings_Yaxis) GetMin() string {
	if x != nil {
		return x.Min
	}
	return ""
}

func (x *MultiSourceChartWidget_VisualizationSettings_Yaxis) GetMax() string {
	if x != nil {
		return x.Max
	}
	return ""
}

func (x *MultiSourceChartWidget_VisualizationSettings_Yaxis) GetUnitFormat() UnitFormat {
	if x != nil {
		return x.UnitFormat
	}
	return UnitFormat_UNIT_FORMAT_UNSPECIFIED
}

func (x *MultiSourceChartWidget_VisualizationSettings_Yaxis) GetPrecision() *wrapperspb.Int64Value {
	if x != nil {
		return x.Precision
	}
	return nil
}

type MultiSourceChartWidget_VisualizationSettings_YaxisSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Left Y axis settings.
	Left *MultiSourceChartWidget_VisualizationSettings_Yaxis `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	// Right Y axis settings.
	Right *MultiSourceChartWidget_VisualizationSettings_Yaxis `protobuf:"bytes,2,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *MultiSourceChartWidget_VisualizationSettings_YaxisSettings) Reset() {
	*x = MultiSourceChartWidget_VisualizationSettings_YaxisSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSourceChartWidget_VisualizationSettings_YaxisSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSourceChartWidget_VisualizationSettings_YaxisSettings) ProtoMessage() {}

func (x *MultiSourceChartWidget_VisualizationSettings_YaxisSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSourceChartWidget_VisualizationSettings_YaxisSettings.ProtoReflect.Descriptor instead.
func (*MultiSourceChartWidget_VisualizationSettings_YaxisSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 2, 3}
}

func (x *MultiSourceChartWidget_VisualizationSettings_YaxisSettings) GetLeft() *MultiSourceChartWidget_VisualizationSettings_Yaxis {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *MultiSourceChartWidget_VisualizationSettings_YaxisSettings) GetRight() *MultiSourceChartWidget_VisualizationSettings_Yaxis {
	if x != nil {
		return x.Right
	}
	return nil
}

type MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_AutomaticColorScheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_AutomaticColorScheme) Reset() {
	*x = MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_AutomaticColorScheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_AutomaticColorScheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_AutomaticColorScheme) ProtoMessage() {
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_AutomaticColorScheme) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_AutomaticColorScheme.ProtoReflect.Descriptor instead.
func (*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_AutomaticColorScheme) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

type MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_StandardColorScheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_StandardColorScheme) Reset() {
	*x = MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_StandardColorScheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_StandardColorScheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_StandardColorScheme) ProtoMessage() {
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_StandardColorScheme) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_StandardColorScheme.ProtoReflect.Descriptor instead.
func (*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_StandardColorScheme) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 2, 0, 1}
}

type MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_GradientColorScheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gradient green value.
	GreenValue string `protobuf:"bytes,2,opt,name=green_value,json=greenValue,proto3" json:"green_value,omitempty"`
	// Gradient yellow value.
	YellowValue string `protobuf:"bytes,3,opt,name=yellow_value,json=yellowValue,proto3" json:"yellow_value,omitempty"`
	// Gradient red value.
	RedValue string `protobuf:"bytes,4,opt,name=red_value,json=redValue,proto3" json:"red_value,omitempty"`
	// Gradient violet_value.
	VioletValue string `protobuf:"bytes,5,opt,name=violet_value,json=violetValue,proto3" json:"violet_value,omitempty"`
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_GradientColorScheme) Reset() {
	*x = MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_GradientColorScheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_GradientColorScheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_GradientColorScheme) ProtoMessage() {
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_GradientColorScheme) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_GradientColorScheme.ProtoReflect.Descriptor instead.
func (*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_GradientColorScheme) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 2, 0, 2}
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_GradientColorScheme) GetGreenValue() string {
	if x != nil {
		return x.GreenValue
	}
	return ""
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_GradientColorScheme) GetYellowValue() string {
	if x != nil {
		return x.YellowValue
	}
	return ""
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_GradientColorScheme) GetRedValue() string {
	if x != nil {
		return x.RedValue
	}
	return ""
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_GradientColorScheme) GetVioletValue() string {
	if x != nil {
		return x.VioletValue
	}
	return ""
}

type MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_HashColorScheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_HashColorScheme) Reset() {
	*x = MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_HashColorScheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_HashColorScheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_HashColorScheme) ProtoMessage() {
}

func (x *MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_HashColorScheme) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_HashColorScheme.ProtoReflect.Descriptor instead.
func (*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_HashColorScheme) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 2, 0, 3}
}

type MultiSourceChartWidget_SeriesOverrides_SeriesOverrideSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Series name or empty.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Series color or empty.
	Color string `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	// Type.
	Type MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType `protobuf:"varint,3,opt,name=type,proto3,enum=yandex.cloud.monitoring.v3.MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType" json:"type,omitempty"`
	// Stack name or empty.
	StackName string `protobuf:"bytes,4,opt,name=stack_name,json=stackName,proto3" json:"stack_name,omitempty"`
	// Stack grow down.
	GrowDown bool `protobuf:"varint,5,opt,name=grow_down,json=growDown,proto3" json:"grow_down,omitempty"`
	// Yaxis position.
	YaxisPosition MultiSourceChartWidget_SeriesOverrides_YaxisPosition `protobuf:"varint,6,opt,name=yaxis_position,json=yaxisPosition,proto3,enum=yandex.cloud.monitoring.v3.MultiSourceChartWidget_SeriesOverrides_YaxisPosition" json:"yaxis_position,omitempty"`
}

func (x *MultiSourceChartWidget_SeriesOverrides_SeriesOverrideSettings) Reset() {
	*x = MultiSourceChartWidget_SeriesOverrides_SeriesOverrideSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSourceChartWidget_SeriesOverrides_SeriesOverrideSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSourceChartWidget_SeriesOverrides_SeriesOverrideSettings) ProtoMessage() {}

func (x *MultiSourceChartWidget_SeriesOverrides_SeriesOverrideSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSourceChartWidget_SeriesOverrides_SeriesOverrideSettings.ProtoReflect.Descriptor instead.
func (*MultiSourceChartWidget_SeriesOverrides_SeriesOverrideSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *MultiSourceChartWidget_SeriesOverrides_SeriesOverrideSettings) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MultiSourceChartWidget_SeriesOverrides_SeriesOverrideSettings) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *MultiSourceChartWidget_SeriesOverrides_SeriesOverrideSettings) GetType() MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType {
	if x != nil {
		return x.Type
	}
	return MultiSourceChartWidget_SeriesOverrides_SERIES_VISUALIZATION_TYPE_UNSPECIFIED
}

func (x *MultiSourceChartWidget_SeriesOverrides_SeriesOverrideSettings) GetStackName() string {
	if x != nil {
		return x.StackName
	}
	return ""
}

func (x *MultiSourceChartWidget_SeriesOverrides_SeriesOverrideSettings) GetGrowDown() bool {
	if x != nil {
		return x.GrowDown
	}
	return false
}

func (x *MultiSourceChartWidget_SeriesOverrides_SeriesOverrideSettings) GetYaxisPosition() MultiSourceChartWidget_SeriesOverrides_YaxisPosition {
	if x != nil {
		return x.YaxisPosition
	}
	return MultiSourceChartWidget_SeriesOverrides_YAXIS_POSITION_UNSPECIFIED
}

var File_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto protoreflect.FileDescriptor

var file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x33, 0x2f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2f, 0x76, 0x33, 0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2f, 0x76, 0x33, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x30, 0x0a, 0x16, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x53, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x57,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x60, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x16, 0x76, 0x69, 0x73, 0x75, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x56, 0x69, 0x73, 0x75,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x15, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6d, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x68, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x33, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x69,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x6e, 0x61,
	0x6d, 0x65, 0x48, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x12,
	0x59, 0x0a, 0x06, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x41, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x57, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x12, 0x59, 0x0a, 0x06, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x06, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x1a, 0xdf, 0x04, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x79, 0x0a, 0x11, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x79, 0x0a, 0x11, 0x70,
	0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x97, 0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x1a, 0xba, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0xe7, 0x03, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x16, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x14, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65,
	0x75, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x33, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x1a, 0x74, 0x0a, 0x14, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x6f, 0x77, 0x6e,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x1a, 0x3a, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74,
	0x68, 0x65, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x1a, 0x8e, 0x18, 0x0a, 0x15, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6e, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5a, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x56, 0x69,
	0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x76, 0x0a, 0x0b, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x7c, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x90, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x57, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x13, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x70, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x58, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x70, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x70,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x7d, 0x0a, 0x0e, 0x79, 0x61, 0x78, 0x69,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x56, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x57, 0x69,
	0x64, 0x67, 0x65, 0x74, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x59, 0x61, 0x78, 0x69, 0x73,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x79, 0x61, 0x78, 0x69, 0x73, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0xb8,
	0x06, 0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x71, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x56,
	0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x12, 0x8e, 0x01, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x70, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x8e, 0x01, 0x0a, 0x08,
	0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x70,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x47, 0x72, 0x61,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x82, 0x01, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6c, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e,
	0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x1a, 0x16, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x1a, 0x15, 0x0a, 0x13, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x1a, 0x99, 0x01, 0x0a, 0x13, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x65, 0x65,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67,
	0x72, 0x65, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x79, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x6f,
	0x6c, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x76, 0x69, 0x6f, 0x6c, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x11, 0x0a, 0x0f,
	0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x1a, 0x95, 0x01, 0x0a, 0x0f, 0x48, 0x65,
	0x61, 0x74, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x76, 0x69, 0x6f, 0x6c, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x69, 0x6f, 0x6c, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0xad, 0x02, 0x0a, 0x05, 0x59, 0x61, 0x78, 0x69, 0x73, 0x12, 0x66, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x56, 0x69,
	0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x59, 0x61, 0x78, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x47, 0x0a,
	0x0b, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e,
	0x55, 0x6e, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x1a, 0xd9, 0x01, 0x0a, 0x0d, 0x59, 0x61, 0x78, 0x69, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x62, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x57,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x59, 0x61, 0x78, 0x69,
	0x73, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x64, 0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x59, 0x61, 0x78, 0x69, 0x73, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0xae, 0x02,
	0x0a, 0x11, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x56, 0x49, 0x53, 0x55, 0x41, 0x4c, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x49, 0x53, 0x55, 0x41,
	0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49,
	0x4e, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x49, 0x53, 0x55, 0x41, 0x4c, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x49, 0x53, 0x55, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10,
	0x03, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x49, 0x53, 0x55, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x04,
	0x12, 0x1a, 0x0a, 0x16, 0x56, 0x49, 0x53, 0x55, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x49, 0x45, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17,
	0x56, 0x49, 0x53, 0x55, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x41, 0x52, 0x53, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x49, 0x53,
	0x55, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x1e,
	0x0a, 0x1a, 0x56, 0x49, 0x53, 0x55, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x54, 0x4d, 0x41, 0x50, 0x10, 0x08, 0x22, 0x6f,
	0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x50, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x4f, 0x4c, 0x41, 0x54,
	0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x50, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x03, 0x22,
	0x5a, 0x0a, 0x09, 0x59, 0x61, 0x78, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16,
	0x59, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x59, 0x41, 0x58, 0x49,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x59, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f,
	0x47, 0x41, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x49, 0x43, 0x10, 0x02, 0x22, 0xc4, 0x01, 0x0a, 0x11,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x41, 0x47, 0x47, 0x52,
	0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f,
	0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x56, 0x47, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x41, 0x47, 0x47, 0x52,
	0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52,
	0x49, 0x45, 0x53, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x41, 0x53, 0x54, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53,
	0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x4d,
	0x10, 0x05, 0x1a, 0xf5, 0x06, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0c,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x75, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0xe7, 0x02, 0x0a, 0x16, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x6e, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5a, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x2e,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x72, 0x6f, 0x77, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x67, 0x72, 0x6f, 0x77, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x77, 0x0a, 0x0e, 0x79, 0x61, 0x78,
	0x69, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x50, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x57,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x2e, 0x59, 0x61, 0x78, 0x69, 0x73, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x79, 0x61, 0x78, 0x69, 0x73, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x0d, 0x59, 0x61, 0x78, 0x69, 0x73, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x59, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x59, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x59, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x22, 0xd9, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x56, 0x49, 0x53,
	0x55, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a,
	0x1e, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x56, 0x49, 0x53, 0x55, 0x41, 0x4c, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x56, 0x49, 0x53, 0x55,
	0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53,
	0x5f, 0x56, 0x49, 0x53, 0x55, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20,
	0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x56, 0x49, 0x53, 0x55, 0x41, 0x4c, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53,
	0x10, 0x04, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x46, 0x0a, 0x12, 0x4e, 0x61,
	0x6d, 0x65, 0x48, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x1a, 0x58, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x62,
	0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x42,
	0x79, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61,
	0x78, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x49, 0x6e, 0x52, 0x6f, 0x77, 0x22, 0x99, 0x01, 0x0a,
	0x0e, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x1b, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x52,
	0x45, 0x45, 0x5a, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41,
	0x59, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x5f, 0x44, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x03, 0x12, 0x19, 0x0a,
	0x15, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x04, 0x42, 0x6b, 0x0a, 0x1e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x33, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x33, 0x3b, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescOnce sync.Once
	file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescData = file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDesc
)

func file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescGZIP() []byte {
	file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescData)
	})
	return file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDescData
}

var file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_goTypes = []any{
	(MultiSourceChartWidget_FreezeDuration)(0),                                                    // 0: yandex.cloud.monitoring.v3.MultiSourceChartWidget.FreezeDuration
	(MultiSourceChartWidget_VisualizationSettings_VisualizationType)(0),                           // 1: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.VisualizationType
	(MultiSourceChartWidget_VisualizationSettings_Interpolate)(0),                                 // 2: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.Interpolate
	(MultiSourceChartWidget_VisualizationSettings_YaxisType)(0),                                   // 3: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.YaxisType
	(MultiSourceChartWidget_VisualizationSettings_SeriesAggregation)(0),                           // 4: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.SeriesAggregation
	(MultiSourceChartWidget_SeriesOverrides_YaxisPosition)(0),                                     // 5: yandex.cloud.monitoring.v3.MultiSourceChartWidget.SeriesOverrides.YaxisPosition
	(MultiSourceChartWidget_SeriesOverrides_SeriesVisualizationType)(0),                           // 6: yandex.cloud.monitoring.v3.MultiSourceChartWidget.SeriesOverrides.SeriesVisualizationType
	(*MultiSourceChartWidget)(nil),                                                                // 7: yandex.cloud.monitoring.v3.MultiSourceChartWidget
	(*MultiSourceChartWidget_Target)(nil),                                                         // 8: yandex.cloud.monitoring.v3.MultiSourceChartWidget.Target
	(*MultiSourceChartWidget_DataSource)(nil),                                                     // 9: yandex.cloud.monitoring.v3.MultiSourceChartWidget.DataSource
	(*MultiSourceChartWidget_VisualizationSettings)(nil),                                          // 10: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings
	(*MultiSourceChartWidget_SeriesOverrides)(nil),                                                // 11: yandex.cloud.monitoring.v3.MultiSourceChartWidget.SeriesOverrides
	(*MultiSourceChartWidget_NameHidingSettings)(nil),                                             // 12: yandex.cloud.monitoring.v3.MultiSourceChartWidget.NameHidingSettings
	(*MultiSourceChartWidget_RepeatSettings)(nil),                                                 // 13: yandex.cloud.monitoring.v3.MultiSourceChartWidget.RepeatSettings
	(*MultiSourceChartWidget_Target_MonitoringTarget)(nil),                                        // 14: yandex.cloud.monitoring.v3.MultiSourceChartWidget.Target.MonitoringTarget
	(*MultiSourceChartWidget_Target_PrometheusTarget)(nil),                                        // 15: yandex.cloud.monitoring.v3.MultiSourceChartWidget.Target.PrometheusTarget
	(*MultiSourceChartWidget_DataSource_MonitoringDataSource)(nil),                                // 16: yandex.cloud.monitoring.v3.MultiSourceChartWidget.DataSource.MonitoringDataSource
	(*MultiSourceChartWidget_DataSource_PrometheusDataSource)(nil),                                // 17: yandex.cloud.monitoring.v3.MultiSourceChartWidget.DataSource.PrometheusDataSource
	(*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings)(nil),                      // 18: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.ColorSchemeSettings
	(*MultiSourceChartWidget_VisualizationSettings_HeatmapSettings)(nil),                          // 19: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.HeatmapSettings
	(*MultiSourceChartWidget_VisualizationSettings_Yaxis)(nil),                                    // 20: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.Yaxis
	(*MultiSourceChartWidget_VisualizationSettings_YaxisSettings)(nil),                            // 21: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.YaxisSettings
	(*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_AutomaticColorScheme)(nil), // 22: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.ColorSchemeSettings.AutomaticColorScheme
	(*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_StandardColorScheme)(nil),  // 23: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.ColorSchemeSettings.StandardColorScheme
	(*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_GradientColorScheme)(nil),  // 24: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.ColorSchemeSettings.GradientColorScheme
	(*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_HashColorScheme)(nil),      // 25: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.ColorSchemeSettings.HashColorScheme
	(*MultiSourceChartWidget_SeriesOverrides_SeriesOverrideSettings)(nil),                         // 26: yandex.cloud.monitoring.v3.MultiSourceChartWidget.SeriesOverrides.SeriesOverrideSettings
	(*Downsampling)(nil),          // 27: yandex.cloud.monitoring.v3.Downsampling
	(UnitFormat)(0),               // 28: yandex.cloud.monitoring.v3.UnitFormat
	(*wrapperspb.Int64Value)(nil), // 29: google.protobuf.Int64Value
}
var file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_depIdxs = []int32{
	8,  // 0: yandex.cloud.monitoring.v3.MultiSourceChartWidget.targets:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.Target
	9,  // 1: yandex.cloud.monitoring.v3.MultiSourceChartWidget.data_sources:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.DataSource
	10, // 2: yandex.cloud.monitoring.v3.MultiSourceChartWidget.visualization_settings:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings
	11, // 3: yandex.cloud.monitoring.v3.MultiSourceChartWidget.series_overrides:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.SeriesOverrides
	12, // 4: yandex.cloud.monitoring.v3.MultiSourceChartWidget.name_hiding_settings:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.NameHidingSettings
	0,  // 5: yandex.cloud.monitoring.v3.MultiSourceChartWidget.freeze:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.FreezeDuration
	13, // 6: yandex.cloud.monitoring.v3.MultiSourceChartWidget.repeat:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.RepeatSettings
	14, // 7: yandex.cloud.monitoring.v3.MultiSourceChartWidget.Target.monitoring_target:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.Target.MonitoringTarget
	15, // 8: yandex.cloud.monitoring.v3.MultiSourceChartWidget.Target.prometheus_target:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.Target.PrometheusTarget
	16, // 9: yandex.cloud.monitoring.v3.MultiSourceChartWidget.DataSource.monitoring_data_source:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.DataSource.MonitoringDataSource
	17, // 10: yandex.cloud.monitoring.v3.MultiSourceChartWidget.DataSource.prometheus_data_source:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.DataSource.PrometheusDataSource
	1,  // 11: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.type:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.VisualizationType
	2,  // 12: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.interpolate:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.Interpolate
	4,  // 13: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.aggregation:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.SeriesAggregation
	18, // 14: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.color_scheme_settings:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.ColorSchemeSettings
	19, // 15: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.heatmap_settings:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.HeatmapSettings
	21, // 16: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.yaxis_settings:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.YaxisSettings
	26, // 17: yandex.cloud.monitoring.v3.MultiSourceChartWidget.SeriesOverrides.settings:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.SeriesOverrides.SeriesOverrideSettings
	27, // 18: yandex.cloud.monitoring.v3.MultiSourceChartWidget.DataSource.MonitoringDataSource.downsampling:type_name -> yandex.cloud.monitoring.v3.Downsampling
	22, // 19: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.ColorSchemeSettings.automatic:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.ColorSchemeSettings.AutomaticColorScheme
	23, // 20: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.ColorSchemeSettings.standard:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.ColorSchemeSettings.StandardColorScheme
	24, // 21: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.ColorSchemeSettings.gradient:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.ColorSchemeSettings.GradientColorScheme
	25, // 22: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.ColorSchemeSettings.hash:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.ColorSchemeSettings.HashColorScheme
	3,  // 23: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.Yaxis.type:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.YaxisType
	28, // 24: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.Yaxis.unit_format:type_name -> yandex.cloud.monitoring.v3.UnitFormat
	29, // 25: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.Yaxis.precision:type_name -> google.protobuf.Int64Value
	20, // 26: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.YaxisSettings.left:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.Yaxis
	20, // 27: yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.YaxisSettings.right:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.VisualizationSettings.Yaxis
	6,  // 28: yandex.cloud.monitoring.v3.MultiSourceChartWidget.SeriesOverrides.SeriesOverrideSettings.type:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.SeriesOverrides.SeriesVisualizationType
	5,  // 29: yandex.cloud.monitoring.v3.MultiSourceChartWidget.SeriesOverrides.SeriesOverrideSettings.yaxis_position:type_name -> yandex.cloud.monitoring.v3.MultiSourceChartWidget.SeriesOverrides.YaxisPosition
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_init() }
func file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_init() {
	if File_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto != nil {
		return
	}
	file_yandex_cloud_monitoring_v3_downsampling_proto_init()
	file_yandex_cloud_monitoring_v3_unit_format_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSourceChartWidget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSourceChartWidget_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSourceChartWidget_DataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSourceChartWidget_VisualizationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSourceChartWidget_SeriesOverrides); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSourceChartWidget_NameHidingSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSourceChartWidget_RepeatSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSourceChartWidget_Target_MonitoringTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSourceChartWidget_Target_PrometheusTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSourceChartWidget_DataSource_MonitoringDataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSourceChartWidget_DataSource_PrometheusDataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSourceChartWidget_VisualizationSettings_HeatmapSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSourceChartWidget_VisualizationSettings_Yaxis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSourceChartWidget_VisualizationSettings_YaxisSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_AutomaticColorScheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_StandardColorScheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_GradientColorScheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_HashColorScheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSourceChartWidget_SeriesOverrides_SeriesOverrideSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[1].OneofWrappers = []any{
		(*MultiSourceChartWidget_Target_MonitoringTarget_)(nil),
		(*MultiSourceChartWidget_Target_PrometheusTarget_)(nil),
	}
	file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[2].OneofWrappers = []any{
		(*MultiSourceChartWidget_DataSource_MonitoringDataSource_)(nil),
		(*MultiSourceChartWidget_DataSource_PrometheusDataSource_)(nil),
	}
	file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[4].OneofWrappers = []any{
		(*MultiSourceChartWidget_SeriesOverrides_Name)(nil),
		(*MultiSourceChartWidget_SeriesOverrides_TargetIndex)(nil),
	}
	file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes[11].OneofWrappers = []any{
		(*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Automatic)(nil),
		(*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Standard)(nil),
		(*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Gradient)(nil),
		(*MultiSourceChartWidget_VisualizationSettings_ColorSchemeSettings_Hash)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_msgTypes,
	}.Build()
	File_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto = out.File
	file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_rawDesc = nil
	file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_goTypes = nil
	file_yandex_cloud_monitoring_v3_multi_source_chart_widget_proto_depIdxs = nil
}

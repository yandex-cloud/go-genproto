// Code generated by protoc-gen-goext. DO NOT EDIT.

package idp

import (
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

func (m *Userpool) SetId(v string) {
	m.Id = v
}

func (m *Userpool) SetOrganizationId(v string) {
	m.OrganizationId = v
}

func (m *Userpool) SetName(v string) {
	m.Name = v
}

func (m *Userpool) SetDescription(v string) {
	m.Description = v
}

func (m *Userpool) SetLabels(v map[string]string) {
	m.Labels = v
}

func (m *Userpool) SetCreatedAt(v *timestamppb.Timestamp) {
	m.CreatedAt = v
}

func (m *Userpool) SetUpdatedAt(v *timestamppb.Timestamp) {
	m.UpdatedAt = v
}

func (m *Userpool) SetDomains(v []string) {
	m.Domains = v
}

func (m *Userpool) SetStatus(v Userpool_Status) {
	m.Status = v
}

func (m *Userpool) SetUserSettings(v *UserSettings) {
	m.UserSettings = v
}

func (m *Userpool) SetPasswordQualityPolicy(v *PasswordQualityPolicy) {
	m.PasswordQualityPolicy = v
}

func (m *Userpool) SetPasswordLifetimePolicy(v *PasswordLifetimePolicy) {
	m.PasswordLifetimePolicy = v
}

func (m *Userpool) SetBruteforceProtectionPolicy(v *BruteforceProtectionPolicy) {
	m.BruteforceProtectionPolicy = v
}

func (m *UserSettings) SetAllowEditSelfPassword(v bool) {
	m.AllowEditSelfPassword = v
}

func (m *UserSettings) SetAllowEditSelfInfo(v bool) {
	m.AllowEditSelfInfo = v
}

func (m *UserSettings) SetAllowEditSelfContacts(v bool) {
	m.AllowEditSelfContacts = v
}

func (m *UserSettings) SetAllowEditSelfLogin(v bool) {
	m.AllowEditSelfLogin = v
}

func (m *Domain) SetDomain(v string) {
	m.Domain = v
}

func (m *Domain) SetStatus(v Domain_Status) {
	m.Status = v
}

func (m *Domain) SetStatusCode(v string) {
	m.StatusCode = v
}

func (m *Domain) SetCreatedAt(v *timestamppb.Timestamp) {
	m.CreatedAt = v
}

func (m *Domain) SetValidatedAt(v *timestamppb.Timestamp) {
	m.ValidatedAt = v
}

func (m *Domain) SetChallenges(v []*DomainChallenge) {
	m.Challenges = v
}

func (m *Domain) SetDeletionProtection(v bool) {
	m.DeletionProtection = v
}

type DomainChallenge_Challenge = isDomainChallenge_Challenge

func (m *DomainChallenge) SetChallenge(v DomainChallenge_Challenge) {
	m.Challenge = v
}

func (m *DomainChallenge) SetCreatedAt(v *timestamppb.Timestamp) {
	m.CreatedAt = v
}

func (m *DomainChallenge) SetUpdatedAt(v *timestamppb.Timestamp) {
	m.UpdatedAt = v
}

func (m *DomainChallenge) SetType(v DomainChallenge_Type) {
	m.Type = v
}

func (m *DomainChallenge) SetStatus(v DomainChallenge_Status) {
	m.Status = v
}

func (m *DomainChallenge) SetDnsChallenge(v *DomainChallenge_DnsRecord) {
	m.Challenge = &DomainChallenge_DnsChallenge{
		DnsChallenge: v,
	}
}

func (m *DomainChallenge_DnsRecord) SetName(v string) {
	m.Name = v
}

func (m *DomainChallenge_DnsRecord) SetType(v DomainChallenge_DnsRecord_Type) {
	m.Type = v
}

func (m *DomainChallenge_DnsRecord) SetValue(v string) {
	m.Value = v
}

func (m *PasswordQualityPolicy) SetAllowSimilar(v bool) {
	m.AllowSimilar = v
}

func (m *PasswordQualityPolicy) SetMaxLength(v int64) {
	m.MaxLength = v
}

func (m *PasswordQualityPolicy) SetMinLength(v int64) {
	m.MinLength = v
}

func (m *PasswordQualityPolicy) SetMatchLength(v int64) {
	m.MatchLength = v
}

func (m *PasswordQualityPolicy) SetRequiredClasses(v *PasswordQualityPolicy_RequiredClasses) {
	m.RequiredClasses = v
}

func (m *PasswordQualityPolicy) SetMinLengthByClassSettings(v *PasswordQualityPolicy_MinLengthByClassSettings) {
	m.MinLengthByClassSettings = v
}

func (m *PasswordQualityPolicy_RequiredClasses) SetLowers(v bool) {
	m.Lowers = v
}

func (m *PasswordQualityPolicy_RequiredClasses) SetUppers(v bool) {
	m.Uppers = v
}

func (m *PasswordQualityPolicy_RequiredClasses) SetDigits(v bool) {
	m.Digits = v
}

func (m *PasswordQualityPolicy_RequiredClasses) SetSpecials(v bool) {
	m.Specials = v
}

func (m *PasswordQualityPolicy_MinLengthByClassSettings) SetOne(v int64) {
	m.One = v
}

func (m *PasswordQualityPolicy_MinLengthByClassSettings) SetTwo(v int64) {
	m.Two = v
}

func (m *PasswordQualityPolicy_MinLengthByClassSettings) SetThree(v int64) {
	m.Three = v
}

func (m *PasswordLifetimePolicy) SetMinDaysCount(v int64) {
	m.MinDaysCount = v
}

func (m *PasswordLifetimePolicy) SetMaxDaysCount(v int64) {
	m.MaxDaysCount = v
}

func (m *BruteforceProtectionPolicy) SetWindow(v *durationpb.Duration) {
	m.Window = v
}

func (m *BruteforceProtectionPolicy) SetBlock(v *durationpb.Duration) {
	m.Block = v
}

func (m *BruteforceProtectionPolicy) SetAttempts(v int64) {
	m.Attempts = v
}

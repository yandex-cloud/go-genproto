// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: yandex/cloud/organizationmanager/v1/idp/userpool_service.proto

package idp

import (
	context "context"
	access "github.com/yandex-cloud/go-genproto/yandex/cloud/access"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserpoolService_Get_FullMethodName                  = "/yandex.cloud.organizationmanager.v1.idp.UserpoolService/Get"
	UserpoolService_List_FullMethodName                 = "/yandex.cloud.organizationmanager.v1.idp.UserpoolService/List"
	UserpoolService_Create_FullMethodName               = "/yandex.cloud.organizationmanager.v1.idp.UserpoolService/Create"
	UserpoolService_Update_FullMethodName               = "/yandex.cloud.organizationmanager.v1.idp.UserpoolService/Update"
	UserpoolService_Delete_FullMethodName               = "/yandex.cloud.organizationmanager.v1.idp.UserpoolService/Delete"
	UserpoolService_GetDomain_FullMethodName            = "/yandex.cloud.organizationmanager.v1.idp.UserpoolService/GetDomain"
	UserpoolService_ListDomains_FullMethodName          = "/yandex.cloud.organizationmanager.v1.idp.UserpoolService/ListDomains"
	UserpoolService_AddDomain_FullMethodName            = "/yandex.cloud.organizationmanager.v1.idp.UserpoolService/AddDomain"
	UserpoolService_ValidateDomain_FullMethodName       = "/yandex.cloud.organizationmanager.v1.idp.UserpoolService/ValidateDomain"
	UserpoolService_DeleteDomain_FullMethodName         = "/yandex.cloud.organizationmanager.v1.idp.UserpoolService/DeleteDomain"
	UserpoolService_ListOperations_FullMethodName       = "/yandex.cloud.organizationmanager.v1.idp.UserpoolService/ListOperations"
	UserpoolService_ListAccessBindings_FullMethodName   = "/yandex.cloud.organizationmanager.v1.idp.UserpoolService/ListAccessBindings"
	UserpoolService_SetAccessBindings_FullMethodName    = "/yandex.cloud.organizationmanager.v1.idp.UserpoolService/SetAccessBindings"
	UserpoolService_UpdateAccessBindings_FullMethodName = "/yandex.cloud.organizationmanager.v1.idp.UserpoolService/UpdateAccessBindings"
)

// UserpoolServiceClient is the client API for UserpoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A set of methods for managing userpools.
type UserpoolServiceClient interface {
	// Returns the specified userpool.
	//
	// To get the list of available userpools, make a [List] request.
	Get(ctx context.Context, in *GetUserpoolRequest, opts ...grpc.CallOption) (*Userpool, error)
	// Retrieves the list of userpools in the specified organization.
	List(ctx context.Context, in *ListUserpoolsRequest, opts ...grpc.CallOption) (*ListUserpoolsResponse, error)
	// Creates a userpool in the specified organization.
	Create(ctx context.Context, in *CreateUserpoolRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Updates the specified userpool.
	Update(ctx context.Context, in *UpdateUserpoolRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified userpool.
	Delete(ctx context.Context, in *DeleteUserpoolRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Returns the specified domain for a userpool.
	GetDomain(ctx context.Context, in *GetUserpoolDomainRequest, opts ...grpc.CallOption) (*Domain, error)
	// Lists domains for the specified userpool.
	ListDomains(ctx context.Context, in *ListUserpoolDomainsRequest, opts ...grpc.CallOption) (*ListUserpoolDomainsResponse, error)
	// Adds a domain to the specified userpool.
	AddDomain(ctx context.Context, in *AddUserpoolDomainRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Validates the specified domain for a userpool.
	ValidateDomain(ctx context.Context, in *ValidateUserpoolDomainRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Deletes the specified domain from a userpool.
	DeleteDomain(ctx context.Context, in *DeleteUserpoolDomainRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Lists operations for the specified userpool.
	ListOperations(ctx context.Context, in *ListUserpoolOperationsRequest, opts ...grpc.CallOption) (*ListUserpoolOperationsResponse, error)
	// Lists access bindings for the specified userpool.
	ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error)
	// Sets access bindings for the specified userpool.
	SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Updates access bindings for the specified userpool.
	UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error)
}

type userpoolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserpoolServiceClient(cc grpc.ClientConnInterface) UserpoolServiceClient {
	return &userpoolServiceClient{cc}
}

func (c *userpoolServiceClient) Get(ctx context.Context, in *GetUserpoolRequest, opts ...grpc.CallOption) (*Userpool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Userpool)
	err := c.cc.Invoke(ctx, UserpoolService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userpoolServiceClient) List(ctx context.Context, in *ListUserpoolsRequest, opts ...grpc.CallOption) (*ListUserpoolsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserpoolsResponse)
	err := c.cc.Invoke(ctx, UserpoolService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userpoolServiceClient) Create(ctx context.Context, in *CreateUserpoolRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, UserpoolService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userpoolServiceClient) Update(ctx context.Context, in *UpdateUserpoolRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, UserpoolService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userpoolServiceClient) Delete(ctx context.Context, in *DeleteUserpoolRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, UserpoolService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userpoolServiceClient) GetDomain(ctx context.Context, in *GetUserpoolDomainRequest, opts ...grpc.CallOption) (*Domain, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Domain)
	err := c.cc.Invoke(ctx, UserpoolService_GetDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userpoolServiceClient) ListDomains(ctx context.Context, in *ListUserpoolDomainsRequest, opts ...grpc.CallOption) (*ListUserpoolDomainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserpoolDomainsResponse)
	err := c.cc.Invoke(ctx, UserpoolService_ListDomains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userpoolServiceClient) AddDomain(ctx context.Context, in *AddUserpoolDomainRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, UserpoolService_AddDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userpoolServiceClient) ValidateDomain(ctx context.Context, in *ValidateUserpoolDomainRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, UserpoolService_ValidateDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userpoolServiceClient) DeleteDomain(ctx context.Context, in *DeleteUserpoolDomainRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, UserpoolService_DeleteDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userpoolServiceClient) ListOperations(ctx context.Context, in *ListUserpoolOperationsRequest, opts ...grpc.CallOption) (*ListUserpoolOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserpoolOperationsResponse)
	err := c.cc.Invoke(ctx, UserpoolService_ListOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userpoolServiceClient) ListAccessBindings(ctx context.Context, in *access.ListAccessBindingsRequest, opts ...grpc.CallOption) (*access.ListAccessBindingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(access.ListAccessBindingsResponse)
	err := c.cc.Invoke(ctx, UserpoolService_ListAccessBindings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userpoolServiceClient) SetAccessBindings(ctx context.Context, in *access.SetAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, UserpoolService_SetAccessBindings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userpoolServiceClient) UpdateAccessBindings(ctx context.Context, in *access.UpdateAccessBindingsRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, UserpoolService_UpdateAccessBindings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserpoolServiceServer is the server API for UserpoolService service.
// All implementations should embed UnimplementedUserpoolServiceServer
// for forward compatibility.
//
// A set of methods for managing userpools.
type UserpoolServiceServer interface {
	// Returns the specified userpool.
	//
	// To get the list of available userpools, make a [List] request.
	Get(context.Context, *GetUserpoolRequest) (*Userpool, error)
	// Retrieves the list of userpools in the specified organization.
	List(context.Context, *ListUserpoolsRequest) (*ListUserpoolsResponse, error)
	// Creates a userpool in the specified organization.
	Create(context.Context, *CreateUserpoolRequest) (*operation.Operation, error)
	// Updates the specified userpool.
	Update(context.Context, *UpdateUserpoolRequest) (*operation.Operation, error)
	// Deletes the specified userpool.
	Delete(context.Context, *DeleteUserpoolRequest) (*operation.Operation, error)
	// Returns the specified domain for a userpool.
	GetDomain(context.Context, *GetUserpoolDomainRequest) (*Domain, error)
	// Lists domains for the specified userpool.
	ListDomains(context.Context, *ListUserpoolDomainsRequest) (*ListUserpoolDomainsResponse, error)
	// Adds a domain to the specified userpool.
	AddDomain(context.Context, *AddUserpoolDomainRequest) (*operation.Operation, error)
	// Validates the specified domain for a userpool.
	ValidateDomain(context.Context, *ValidateUserpoolDomainRequest) (*operation.Operation, error)
	// Deletes the specified domain from a userpool.
	DeleteDomain(context.Context, *DeleteUserpoolDomainRequest) (*operation.Operation, error)
	// Lists operations for the specified userpool.
	ListOperations(context.Context, *ListUserpoolOperationsRequest) (*ListUserpoolOperationsResponse, error)
	// Lists access bindings for the specified userpool.
	ListAccessBindings(context.Context, *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error)
	// Sets access bindings for the specified userpool.
	SetAccessBindings(context.Context, *access.SetAccessBindingsRequest) (*operation.Operation, error)
	// Updates access bindings for the specified userpool.
	UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest) (*operation.Operation, error)
}

// UnimplementedUserpoolServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserpoolServiceServer struct{}

func (UnimplementedUserpoolServiceServer) Get(context.Context, *GetUserpoolRequest) (*Userpool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserpoolServiceServer) List(context.Context, *ListUserpoolsRequest) (*ListUserpoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedUserpoolServiceServer) Create(context.Context, *CreateUserpoolRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserpoolServiceServer) Update(context.Context, *UpdateUserpoolRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserpoolServiceServer) Delete(context.Context, *DeleteUserpoolRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserpoolServiceServer) GetDomain(context.Context, *GetUserpoolDomainRequest) (*Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomain not implemented")
}
func (UnimplementedUserpoolServiceServer) ListDomains(context.Context, *ListUserpoolDomainsRequest) (*ListUserpoolDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomains not implemented")
}
func (UnimplementedUserpoolServiceServer) AddDomain(context.Context, *AddUserpoolDomainRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDomain not implemented")
}
func (UnimplementedUserpoolServiceServer) ValidateDomain(context.Context, *ValidateUserpoolDomainRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateDomain not implemented")
}
func (UnimplementedUserpoolServiceServer) DeleteDomain(context.Context, *DeleteUserpoolDomainRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomain not implemented")
}
func (UnimplementedUserpoolServiceServer) ListOperations(context.Context, *ListUserpoolOperationsRequest) (*ListUserpoolOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (UnimplementedUserpoolServiceServer) ListAccessBindings(context.Context, *access.ListAccessBindingsRequest) (*access.ListAccessBindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessBindings not implemented")
}
func (UnimplementedUserpoolServiceServer) SetAccessBindings(context.Context, *access.SetAccessBindingsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccessBindings not implemented")
}
func (UnimplementedUserpoolServiceServer) UpdateAccessBindings(context.Context, *access.UpdateAccessBindingsRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccessBindings not implemented")
}
func (UnimplementedUserpoolServiceServer) testEmbeddedByValue() {}

// UnsafeUserpoolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserpoolServiceServer will
// result in compilation errors.
type UnsafeUserpoolServiceServer interface {
	mustEmbedUnimplementedUserpoolServiceServer()
}

func RegisterUserpoolServiceServer(s grpc.ServiceRegistrar, srv UserpoolServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserpoolServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserpoolService_ServiceDesc, srv)
}

func _UserpoolService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserpoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserpoolServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserpoolService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserpoolServiceServer).Get(ctx, req.(*GetUserpoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserpoolService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserpoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserpoolServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserpoolService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserpoolServiceServer).List(ctx, req.(*ListUserpoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserpoolService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserpoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserpoolServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserpoolService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserpoolServiceServer).Create(ctx, req.(*CreateUserpoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserpoolService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserpoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserpoolServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserpoolService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserpoolServiceServer).Update(ctx, req.(*UpdateUserpoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserpoolService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserpoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserpoolServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserpoolService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserpoolServiceServer).Delete(ctx, req.(*DeleteUserpoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserpoolService_GetDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserpoolDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserpoolServiceServer).GetDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserpoolService_GetDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserpoolServiceServer).GetDomain(ctx, req.(*GetUserpoolDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserpoolService_ListDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserpoolDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserpoolServiceServer).ListDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserpoolService_ListDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserpoolServiceServer).ListDomains(ctx, req.(*ListUserpoolDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserpoolService_AddDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserpoolDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserpoolServiceServer).AddDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserpoolService_AddDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserpoolServiceServer).AddDomain(ctx, req.(*AddUserpoolDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserpoolService_ValidateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateUserpoolDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserpoolServiceServer).ValidateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserpoolService_ValidateDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserpoolServiceServer).ValidateDomain(ctx, req.(*ValidateUserpoolDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserpoolService_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserpoolDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserpoolServiceServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserpoolService_DeleteDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserpoolServiceServer).DeleteDomain(ctx, req.(*DeleteUserpoolDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserpoolService_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserpoolOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserpoolServiceServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserpoolService_ListOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserpoolServiceServer).ListOperations(ctx, req.(*ListUserpoolOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserpoolService_ListAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(access.ListAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserpoolServiceServer).ListAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserpoolService_ListAccessBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserpoolServiceServer).ListAccessBindings(ctx, req.(*access.ListAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserpoolService_SetAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(access.SetAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserpoolServiceServer).SetAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserpoolService_SetAccessBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserpoolServiceServer).SetAccessBindings(ctx, req.(*access.SetAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserpoolService_UpdateAccessBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(access.UpdateAccessBindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserpoolServiceServer).UpdateAccessBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserpoolService_UpdateAccessBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserpoolServiceServer).UpdateAccessBindings(ctx, req.(*access.UpdateAccessBindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserpoolService_ServiceDesc is the grpc.ServiceDesc for UserpoolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserpoolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.organizationmanager.v1.idp.UserpoolService",
	HandlerType: (*UserpoolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _UserpoolService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _UserpoolService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _UserpoolService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserpoolService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserpoolService_Delete_Handler,
		},
		{
			MethodName: "GetDomain",
			Handler:    _UserpoolService_GetDomain_Handler,
		},
		{
			MethodName: "ListDomains",
			Handler:    _UserpoolService_ListDomains_Handler,
		},
		{
			MethodName: "AddDomain",
			Handler:    _UserpoolService_AddDomain_Handler,
		},
		{
			MethodName: "ValidateDomain",
			Handler:    _UserpoolService_ValidateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _UserpoolService_DeleteDomain_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _UserpoolService_ListOperations_Handler,
		},
		{
			MethodName: "ListAccessBindings",
			Handler:    _UserpoolService_ListAccessBindings_Handler,
		},
		{
			MethodName: "SetAccessBindings",
			Handler:    _UserpoolService_SetAccessBindings_Handler,
		},
		{
			MethodName: "UpdateAccessBindings",
			Handler:    _UserpoolService_UpdateAccessBindings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/organizationmanager/v1/idp/userpool_service.proto",
}

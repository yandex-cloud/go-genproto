// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: yandex/cloud/organizationmanager/v1/mfa_enforcement_service.proto

package organizationmanager

import (
	context "context"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MfaEnforcementService_Create_FullMethodName         = "/yandex.cloud.organizationmanager.v1.MfaEnforcementService/Create"
	MfaEnforcementService_Update_FullMethodName         = "/yandex.cloud.organizationmanager.v1.MfaEnforcementService/Update"
	MfaEnforcementService_Activate_FullMethodName       = "/yandex.cloud.organizationmanager.v1.MfaEnforcementService/Activate"
	MfaEnforcementService_Deactivate_FullMethodName     = "/yandex.cloud.organizationmanager.v1.MfaEnforcementService/Deactivate"
	MfaEnforcementService_Delete_FullMethodName         = "/yandex.cloud.organizationmanager.v1.MfaEnforcementService/Delete"
	MfaEnforcementService_Get_FullMethodName            = "/yandex.cloud.organizationmanager.v1.MfaEnforcementService/Get"
	MfaEnforcementService_List_FullMethodName           = "/yandex.cloud.organizationmanager.v1.MfaEnforcementService/List"
	MfaEnforcementService_UpdateAudience_FullMethodName = "/yandex.cloud.organizationmanager.v1.MfaEnforcementService/UpdateAudience"
	MfaEnforcementService_ListAudience_FullMethodName   = "/yandex.cloud.organizationmanager.v1.MfaEnforcementService/ListAudience"
)

// MfaEnforcementServiceClient is the client API for MfaEnforcementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// a set of methods for managing MFA enforcements
type MfaEnforcementServiceClient interface {
	Create(ctx context.Context, in *CreateMfaEnforcementRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	Update(ctx context.Context, in *UpdateMfaEnforcementRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	Activate(ctx context.Context, in *ActivateMfaEnforcementRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	Deactivate(ctx context.Context, in *DeactivateMfaEnforcementRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	Delete(ctx context.Context, in *DeleteMfaEnforcementRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	Get(ctx context.Context, in *GetMfaEnforcementRequest, opts ...grpc.CallOption) (*MfaEnforcement, error)
	List(ctx context.Context, in *ListMfaEnforcementsRequest, opts ...grpc.CallOption) (*ListMfaEnforcementsResponse, error)
	UpdateAudience(ctx context.Context, in *UpdateAudienceRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	ListAudience(ctx context.Context, in *ListAudienceRequest, opts ...grpc.CallOption) (*ListAudienceResponse, error)
}

type mfaEnforcementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMfaEnforcementServiceClient(cc grpc.ClientConnInterface) MfaEnforcementServiceClient {
	return &mfaEnforcementServiceClient{cc}
}

func (c *mfaEnforcementServiceClient) Create(ctx context.Context, in *CreateMfaEnforcementRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, MfaEnforcementService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mfaEnforcementServiceClient) Update(ctx context.Context, in *UpdateMfaEnforcementRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, MfaEnforcementService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mfaEnforcementServiceClient) Activate(ctx context.Context, in *ActivateMfaEnforcementRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, MfaEnforcementService_Activate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mfaEnforcementServiceClient) Deactivate(ctx context.Context, in *DeactivateMfaEnforcementRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, MfaEnforcementService_Deactivate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mfaEnforcementServiceClient) Delete(ctx context.Context, in *DeleteMfaEnforcementRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, MfaEnforcementService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mfaEnforcementServiceClient) Get(ctx context.Context, in *GetMfaEnforcementRequest, opts ...grpc.CallOption) (*MfaEnforcement, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MfaEnforcement)
	err := c.cc.Invoke(ctx, MfaEnforcementService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mfaEnforcementServiceClient) List(ctx context.Context, in *ListMfaEnforcementsRequest, opts ...grpc.CallOption) (*ListMfaEnforcementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMfaEnforcementsResponse)
	err := c.cc.Invoke(ctx, MfaEnforcementService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mfaEnforcementServiceClient) UpdateAudience(ctx context.Context, in *UpdateAudienceRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, MfaEnforcementService_UpdateAudience_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mfaEnforcementServiceClient) ListAudience(ctx context.Context, in *ListAudienceRequest, opts ...grpc.CallOption) (*ListAudienceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAudienceResponse)
	err := c.cc.Invoke(ctx, MfaEnforcementService_ListAudience_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MfaEnforcementServiceServer is the server API for MfaEnforcementService service.
// All implementations should embed UnimplementedMfaEnforcementServiceServer
// for forward compatibility.
//
// a set of methods for managing MFA enforcements
type MfaEnforcementServiceServer interface {
	Create(context.Context, *CreateMfaEnforcementRequest) (*operation.Operation, error)
	Update(context.Context, *UpdateMfaEnforcementRequest) (*operation.Operation, error)
	Activate(context.Context, *ActivateMfaEnforcementRequest) (*operation.Operation, error)
	Deactivate(context.Context, *DeactivateMfaEnforcementRequest) (*operation.Operation, error)
	Delete(context.Context, *DeleteMfaEnforcementRequest) (*operation.Operation, error)
	Get(context.Context, *GetMfaEnforcementRequest) (*MfaEnforcement, error)
	List(context.Context, *ListMfaEnforcementsRequest) (*ListMfaEnforcementsResponse, error)
	UpdateAudience(context.Context, *UpdateAudienceRequest) (*operation.Operation, error)
	ListAudience(context.Context, *ListAudienceRequest) (*ListAudienceResponse, error)
}

// UnimplementedMfaEnforcementServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMfaEnforcementServiceServer struct{}

func (UnimplementedMfaEnforcementServiceServer) Create(context.Context, *CreateMfaEnforcementRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMfaEnforcementServiceServer) Update(context.Context, *UpdateMfaEnforcementRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMfaEnforcementServiceServer) Activate(context.Context, *ActivateMfaEnforcementRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (UnimplementedMfaEnforcementServiceServer) Deactivate(context.Context, *DeactivateMfaEnforcementRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deactivate not implemented")
}
func (UnimplementedMfaEnforcementServiceServer) Delete(context.Context, *DeleteMfaEnforcementRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMfaEnforcementServiceServer) Get(context.Context, *GetMfaEnforcementRequest) (*MfaEnforcement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMfaEnforcementServiceServer) List(context.Context, *ListMfaEnforcementsRequest) (*ListMfaEnforcementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMfaEnforcementServiceServer) UpdateAudience(context.Context, *UpdateAudienceRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAudience not implemented")
}
func (UnimplementedMfaEnforcementServiceServer) ListAudience(context.Context, *ListAudienceRequest) (*ListAudienceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAudience not implemented")
}
func (UnimplementedMfaEnforcementServiceServer) testEmbeddedByValue() {}

// UnsafeMfaEnforcementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MfaEnforcementServiceServer will
// result in compilation errors.
type UnsafeMfaEnforcementServiceServer interface {
	mustEmbedUnimplementedMfaEnforcementServiceServer()
}

func RegisterMfaEnforcementServiceServer(s grpc.ServiceRegistrar, srv MfaEnforcementServiceServer) {
	// If the following call pancis, it indicates UnimplementedMfaEnforcementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MfaEnforcementService_ServiceDesc, srv)
}

func _MfaEnforcementService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMfaEnforcementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MfaEnforcementServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MfaEnforcementService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MfaEnforcementServiceServer).Create(ctx, req.(*CreateMfaEnforcementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MfaEnforcementService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMfaEnforcementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MfaEnforcementServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MfaEnforcementService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MfaEnforcementServiceServer).Update(ctx, req.(*UpdateMfaEnforcementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MfaEnforcementService_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateMfaEnforcementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MfaEnforcementServiceServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MfaEnforcementService_Activate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MfaEnforcementServiceServer).Activate(ctx, req.(*ActivateMfaEnforcementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MfaEnforcementService_Deactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateMfaEnforcementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MfaEnforcementServiceServer).Deactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MfaEnforcementService_Deactivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MfaEnforcementServiceServer).Deactivate(ctx, req.(*DeactivateMfaEnforcementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MfaEnforcementService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMfaEnforcementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MfaEnforcementServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MfaEnforcementService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MfaEnforcementServiceServer).Delete(ctx, req.(*DeleteMfaEnforcementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MfaEnforcementService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMfaEnforcementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MfaEnforcementServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MfaEnforcementService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MfaEnforcementServiceServer).Get(ctx, req.(*GetMfaEnforcementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MfaEnforcementService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMfaEnforcementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MfaEnforcementServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MfaEnforcementService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MfaEnforcementServiceServer).List(ctx, req.(*ListMfaEnforcementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MfaEnforcementService_UpdateAudience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAudienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MfaEnforcementServiceServer).UpdateAudience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MfaEnforcementService_UpdateAudience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MfaEnforcementServiceServer).UpdateAudience(ctx, req.(*UpdateAudienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MfaEnforcementService_ListAudience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAudienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MfaEnforcementServiceServer).ListAudience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MfaEnforcementService_ListAudience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MfaEnforcementServiceServer).ListAudience(ctx, req.(*ListAudienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MfaEnforcementService_ServiceDesc is the grpc.ServiceDesc for MfaEnforcementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MfaEnforcementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.organizationmanager.v1.MfaEnforcementService",
	HandlerType: (*MfaEnforcementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MfaEnforcementService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MfaEnforcementService_Update_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _MfaEnforcementService_Activate_Handler,
		},
		{
			MethodName: "Deactivate",
			Handler:    _MfaEnforcementService_Deactivate_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MfaEnforcementService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MfaEnforcementService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _MfaEnforcementService_List_Handler,
		},
		{
			MethodName: "UpdateAudience",
			Handler:    _MfaEnforcementService_UpdateAudience_Handler,
		},
		{
			MethodName: "ListAudience",
			Handler:    _MfaEnforcementService_ListAudience_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/organizationmanager/v1/mfa_enforcement_service.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: yandex/cloud/quotamanager/v1/quota_limit_service.proto

package quotamanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuotaLimitService_Get_FullMethodName          = "/yandex.cloud.quotamanager.v1.QuotaLimitService/Get"
	QuotaLimitService_List_FullMethodName         = "/yandex.cloud.quotamanager.v1.QuotaLimitService/List"
	QuotaLimitService_ListServices_FullMethodName = "/yandex.cloud.quotamanager.v1.QuotaLimitService/ListServices"
)

// QuotaLimitServiceClient is the client API for QuotaLimitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A set of methods for managing quota limits.
type QuotaLimitServiceClient interface {
	// Returns the specified quota limit.
	Get(ctx context.Context, in *GetQuotaLimitRequest, opts ...grpc.CallOption) (*QuotaLimit, error)
	// Retrieves the list of quota limits for a given service.
	List(ctx context.Context, in *ListQuotaLimitsRequest, opts ...grpc.CallOption) (*ListQuotaLimitsResponse, error)
	// Retrieves the list of services available for quota management.
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error)
}

type quotaLimitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuotaLimitServiceClient(cc grpc.ClientConnInterface) QuotaLimitServiceClient {
	return &quotaLimitServiceClient{cc}
}

func (c *quotaLimitServiceClient) Get(ctx context.Context, in *GetQuotaLimitRequest, opts ...grpc.CallOption) (*QuotaLimit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotaLimit)
	err := c.cc.Invoke(ctx, QuotaLimitService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaLimitServiceClient) List(ctx context.Context, in *ListQuotaLimitsRequest, opts ...grpc.CallOption) (*ListQuotaLimitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQuotaLimitsResponse)
	err := c.cc.Invoke(ctx, QuotaLimitService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaLimitServiceClient) ListServices(ctx context.Context, in *ListServicesRequest, opts ...grpc.CallOption) (*ListServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServicesResponse)
	err := c.cc.Invoke(ctx, QuotaLimitService_ListServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuotaLimitServiceServer is the server API for QuotaLimitService service.
// All implementations should embed UnimplementedQuotaLimitServiceServer
// for forward compatibility.
//
// A set of methods for managing quota limits.
type QuotaLimitServiceServer interface {
	// Returns the specified quota limit.
	Get(context.Context, *GetQuotaLimitRequest) (*QuotaLimit, error)
	// Retrieves the list of quota limits for a given service.
	List(context.Context, *ListQuotaLimitsRequest) (*ListQuotaLimitsResponse, error)
	// Retrieves the list of services available for quota management.
	ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error)
}

// UnimplementedQuotaLimitServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuotaLimitServiceServer struct{}

func (UnimplementedQuotaLimitServiceServer) Get(context.Context, *GetQuotaLimitRequest) (*QuotaLimit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedQuotaLimitServiceServer) List(context.Context, *ListQuotaLimitsRequest) (*ListQuotaLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedQuotaLimitServiceServer) ListServices(context.Context, *ListServicesRequest) (*ListServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedQuotaLimitServiceServer) testEmbeddedByValue() {}

// UnsafeQuotaLimitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuotaLimitServiceServer will
// result in compilation errors.
type UnsafeQuotaLimitServiceServer interface {
	mustEmbedUnimplementedQuotaLimitServiceServer()
}

func RegisterQuotaLimitServiceServer(s grpc.ServiceRegistrar, srv QuotaLimitServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuotaLimitServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuotaLimitService_ServiceDesc, srv)
}

func _QuotaLimitService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotaLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaLimitServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaLimitService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaLimitServiceServer).Get(ctx, req.(*GetQuotaLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaLimitService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuotaLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaLimitServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaLimitService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaLimitServiceServer).List(ctx, req.(*ListQuotaLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaLimitService_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaLimitServiceServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaLimitService_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaLimitServiceServer).ListServices(ctx, req.(*ListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuotaLimitService_ServiceDesc is the grpc.ServiceDesc for QuotaLimitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuotaLimitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.quotamanager.v1.QuotaLimitService",
	HandlerType: (*QuotaLimitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _QuotaLimitService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _QuotaLimitService_List_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _QuotaLimitService_ListServices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/quotamanager/v1/quota_limit_service.proto",
}

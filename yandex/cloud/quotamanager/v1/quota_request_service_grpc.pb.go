// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: yandex/cloud/quotamanager/v1/quota_request_service.proto

package quotamanager

import (
	context "context"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuotaRequestService_Get_FullMethodName            = "/yandex.cloud.quotamanager.v1.QuotaRequestService/Get"
	QuotaRequestService_Create_FullMethodName         = "/yandex.cloud.quotamanager.v1.QuotaRequestService/Create"
	QuotaRequestService_Cancel_FullMethodName         = "/yandex.cloud.quotamanager.v1.QuotaRequestService/Cancel"
	QuotaRequestService_List_FullMethodName           = "/yandex.cloud.quotamanager.v1.QuotaRequestService/List"
	QuotaRequestService_ListOperations_FullMethodName = "/yandex.cloud.quotamanager.v1.QuotaRequestService/ListOperations"
)

// QuotaRequestServiceClient is the client API for QuotaRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A set of methods for managing quota requests.
type QuotaRequestServiceClient interface {
	// Returns the specified quota request.
	Get(ctx context.Context, in *GetQuotaRequestRequest, opts ...grpc.CallOption) (*QuotaRequest, error)
	// Creates a quota request in the specified resource.
	Create(ctx context.Context, in *CreateQuotaRequestRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Cancels quotas in the specified quota request.
	Cancel(ctx context.Context, in *CancelQuotaRequestRequest, opts ...grpc.CallOption) (*operation.Operation, error)
	// Retrieves the list of quota requests in the specified resource.
	List(ctx context.Context, in *ListQuotaRequestRequest, opts ...grpc.CallOption) (*ListQuotaRequestResponse, error)
	// Lists operations for the specified quota request.
	ListOperations(ctx context.Context, in *ListQuotaRequestOperationsRequest, opts ...grpc.CallOption) (*ListQuotaRequestOperationsResponse, error)
}

type quotaRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuotaRequestServiceClient(cc grpc.ClientConnInterface) QuotaRequestServiceClient {
	return &quotaRequestServiceClient{cc}
}

func (c *quotaRequestServiceClient) Get(ctx context.Context, in *GetQuotaRequestRequest, opts ...grpc.CallOption) (*QuotaRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuotaRequest)
	err := c.cc.Invoke(ctx, QuotaRequestService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaRequestServiceClient) Create(ctx context.Context, in *CreateQuotaRequestRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, QuotaRequestService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaRequestServiceClient) Cancel(ctx context.Context, in *CancelQuotaRequestRequest, opts ...grpc.CallOption) (*operation.Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, QuotaRequestService_Cancel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaRequestServiceClient) List(ctx context.Context, in *ListQuotaRequestRequest, opts ...grpc.CallOption) (*ListQuotaRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQuotaRequestResponse)
	err := c.cc.Invoke(ctx, QuotaRequestService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaRequestServiceClient) ListOperations(ctx context.Context, in *ListQuotaRequestOperationsRequest, opts ...grpc.CallOption) (*ListQuotaRequestOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQuotaRequestOperationsResponse)
	err := c.cc.Invoke(ctx, QuotaRequestService_ListOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuotaRequestServiceServer is the server API for QuotaRequestService service.
// All implementations should embed UnimplementedQuotaRequestServiceServer
// for forward compatibility.
//
// A set of methods for managing quota requests.
type QuotaRequestServiceServer interface {
	// Returns the specified quota request.
	Get(context.Context, *GetQuotaRequestRequest) (*QuotaRequest, error)
	// Creates a quota request in the specified resource.
	Create(context.Context, *CreateQuotaRequestRequest) (*operation.Operation, error)
	// Cancels quotas in the specified quota request.
	Cancel(context.Context, *CancelQuotaRequestRequest) (*operation.Operation, error)
	// Retrieves the list of quota requests in the specified resource.
	List(context.Context, *ListQuotaRequestRequest) (*ListQuotaRequestResponse, error)
	// Lists operations for the specified quota request.
	ListOperations(context.Context, *ListQuotaRequestOperationsRequest) (*ListQuotaRequestOperationsResponse, error)
}

// UnimplementedQuotaRequestServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuotaRequestServiceServer struct{}

func (UnimplementedQuotaRequestServiceServer) Get(context.Context, *GetQuotaRequestRequest) (*QuotaRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedQuotaRequestServiceServer) Create(context.Context, *CreateQuotaRequestRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedQuotaRequestServiceServer) Cancel(context.Context, *CancelQuotaRequestRequest) (*operation.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedQuotaRequestServiceServer) List(context.Context, *ListQuotaRequestRequest) (*ListQuotaRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedQuotaRequestServiceServer) ListOperations(context.Context, *ListQuotaRequestOperationsRequest) (*ListQuotaRequestOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (UnimplementedQuotaRequestServiceServer) testEmbeddedByValue() {}

// UnsafeQuotaRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuotaRequestServiceServer will
// result in compilation errors.
type UnsafeQuotaRequestServiceServer interface {
	mustEmbedUnimplementedQuotaRequestServiceServer()
}

func RegisterQuotaRequestServiceServer(s grpc.ServiceRegistrar, srv QuotaRequestServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuotaRequestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuotaRequestService_ServiceDesc, srv)
}

func _QuotaRequestService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotaRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaRequestServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaRequestService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaRequestServiceServer).Get(ctx, req.(*GetQuotaRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaRequestService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuotaRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaRequestServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaRequestService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaRequestServiceServer).Create(ctx, req.(*CreateQuotaRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaRequestService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelQuotaRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaRequestServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaRequestService_Cancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaRequestServiceServer).Cancel(ctx, req.(*CancelQuotaRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaRequestService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuotaRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaRequestServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaRequestService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaRequestServiceServer).List(ctx, req.(*ListQuotaRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaRequestService_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuotaRequestOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaRequestServiceServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaRequestService_ListOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaRequestServiceServer).ListOperations(ctx, req.(*ListQuotaRequestOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuotaRequestService_ServiceDesc is the grpc.ServiceDesc for QuotaRequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuotaRequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yandex.cloud.quotamanager.v1.QuotaRequestService",
	HandlerType: (*QuotaRequestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _QuotaRequestService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _QuotaRequestService_Create_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _QuotaRequestService_Cancel_Handler,
		},
		{
			MethodName: "List",
			Handler:    _QuotaRequestService_List_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _QuotaRequestService_ListOperations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yandex/cloud/quotamanager/v1/quota_request_service.proto",
}

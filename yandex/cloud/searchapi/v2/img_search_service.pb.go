// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: yandex/cloud/searchapi/v2/img_search_service.proto

package searchapi

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ImageSpec_ImageFormat int32

const (
	ImageSpec_IMAGE_FORMAT_UNSPECIFIED ImageSpec_ImageFormat = 0
	// JPG format.
	ImageSpec_IMAGE_FORMAT_JPEG ImageSpec_ImageFormat = 1
	// GIF format.
	ImageSpec_IMAGE_FORMAT_GIF ImageSpec_ImageFormat = 2
	// PNG format.
	ImageSpec_IMAGE_FORMAT_PNG ImageSpec_ImageFormat = 3
)

// Enum value maps for ImageSpec_ImageFormat.
var (
	ImageSpec_ImageFormat_name = map[int32]string{
		0: "IMAGE_FORMAT_UNSPECIFIED",
		1: "IMAGE_FORMAT_JPEG",
		2: "IMAGE_FORMAT_GIF",
		3: "IMAGE_FORMAT_PNG",
	}
	ImageSpec_ImageFormat_value = map[string]int32{
		"IMAGE_FORMAT_UNSPECIFIED": 0,
		"IMAGE_FORMAT_JPEG":        1,
		"IMAGE_FORMAT_GIF":         2,
		"IMAGE_FORMAT_PNG":         3,
	}
)

func (x ImageSpec_ImageFormat) Enum() *ImageSpec_ImageFormat {
	p := new(ImageSpec_ImageFormat)
	*p = x
	return p
}

func (x ImageSpec_ImageFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageSpec_ImageFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_searchapi_v2_img_search_service_proto_enumTypes[0].Descriptor()
}

func (ImageSpec_ImageFormat) Type() protoreflect.EnumType {
	return &file_yandex_cloud_searchapi_v2_img_search_service_proto_enumTypes[0]
}

func (x ImageSpec_ImageFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageSpec_ImageFormat.Descriptor instead.
func (ImageSpec_ImageFormat) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_searchapi_v2_img_search_service_proto_rawDescGZIP(), []int{0, 0}
}

type ImageSpec_ImageOrientation int32

const (
	ImageSpec_IMAGE_ORIENTATION_UNSPECIFIED ImageSpec_ImageOrientation = 0
	// Horizontal orientation.
	ImageSpec_IMAGE_ORIENTATION_VERTICAL ImageSpec_ImageOrientation = 1
	// Vertical orientation.
	ImageSpec_IMAGE_ORIENTATION_HORIZONTAL ImageSpec_ImageOrientation = 2
	// Square aspect ratio.
	ImageSpec_IMAGE_ORIENTATION_SQUARE ImageSpec_ImageOrientation = 3
)

// Enum value maps for ImageSpec_ImageOrientation.
var (
	ImageSpec_ImageOrientation_name = map[int32]string{
		0: "IMAGE_ORIENTATION_UNSPECIFIED",
		1: "IMAGE_ORIENTATION_VERTICAL",
		2: "IMAGE_ORIENTATION_HORIZONTAL",
		3: "IMAGE_ORIENTATION_SQUARE",
	}
	ImageSpec_ImageOrientation_value = map[string]int32{
		"IMAGE_ORIENTATION_UNSPECIFIED": 0,
		"IMAGE_ORIENTATION_VERTICAL":    1,
		"IMAGE_ORIENTATION_HORIZONTAL":  2,
		"IMAGE_ORIENTATION_SQUARE":      3,
	}
)

func (x ImageSpec_ImageOrientation) Enum() *ImageSpec_ImageOrientation {
	p := new(ImageSpec_ImageOrientation)
	*p = x
	return p
}

func (x ImageSpec_ImageOrientation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageSpec_ImageOrientation) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_searchapi_v2_img_search_service_proto_enumTypes[1].Descriptor()
}

func (ImageSpec_ImageOrientation) Type() protoreflect.EnumType {
	return &file_yandex_cloud_searchapi_v2_img_search_service_proto_enumTypes[1]
}

func (x ImageSpec_ImageOrientation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageSpec_ImageOrientation.Descriptor instead.
func (ImageSpec_ImageOrientation) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_searchapi_v2_img_search_service_proto_rawDescGZIP(), []int{0, 1}
}

type ImageSpec_ImageSize int32

const (
	ImageSpec_IMAGE_SIZE_UNSPECIFIED ImageSpec_ImageSize = 0
	// Very large images (larger than 1,600 × 1,200 pixels).
	ImageSpec_IMAGE_SIZE_ENORMOUS ImageSpec_ImageSize = 1
	// Large images (from 800 × 600 to 1,600 × 1,200 pixels).
	ImageSpec_IMAGE_SIZE_LARGE ImageSpec_ImageSize = 2
	// Medium images (from 150 × 150 to 800 × 600 pixels).
	ImageSpec_IMAGE_SIZE_MEDIUM ImageSpec_ImageSize = 3
	// Small images (from 32 × 32 to 150 × 150 pixels).
	ImageSpec_IMAGE_SIZE_SMALL ImageSpec_ImageSize = 4
	// Icons (up to 32 × 32 pixels).
	ImageSpec_IMAGE_SIZE_TINY ImageSpec_ImageSize = 5
	// Desktop wallpapers.
	ImageSpec_IMAGE_SIZE_WALLPAPER ImageSpec_ImageSize = 6
)

// Enum value maps for ImageSpec_ImageSize.
var (
	ImageSpec_ImageSize_name = map[int32]string{
		0: "IMAGE_SIZE_UNSPECIFIED",
		1: "IMAGE_SIZE_ENORMOUS",
		2: "IMAGE_SIZE_LARGE",
		3: "IMAGE_SIZE_MEDIUM",
		4: "IMAGE_SIZE_SMALL",
		5: "IMAGE_SIZE_TINY",
		6: "IMAGE_SIZE_WALLPAPER",
	}
	ImageSpec_ImageSize_value = map[string]int32{
		"IMAGE_SIZE_UNSPECIFIED": 0,
		"IMAGE_SIZE_ENORMOUS":    1,
		"IMAGE_SIZE_LARGE":       2,
		"IMAGE_SIZE_MEDIUM":      3,
		"IMAGE_SIZE_SMALL":       4,
		"IMAGE_SIZE_TINY":        5,
		"IMAGE_SIZE_WALLPAPER":   6,
	}
)

func (x ImageSpec_ImageSize) Enum() *ImageSpec_ImageSize {
	p := new(ImageSpec_ImageSize)
	*p = x
	return p
}

func (x ImageSpec_ImageSize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageSpec_ImageSize) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_searchapi_v2_img_search_service_proto_enumTypes[2].Descriptor()
}

func (ImageSpec_ImageSize) Type() protoreflect.EnumType {
	return &file_yandex_cloud_searchapi_v2_img_search_service_proto_enumTypes[2]
}

func (x ImageSpec_ImageSize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageSpec_ImageSize.Descriptor instead.
func (ImageSpec_ImageSize) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_searchapi_v2_img_search_service_proto_rawDescGZIP(), []int{0, 2}
}

type ImageSpec_ImageColor int32

const (
	ImageSpec_IMAGE_COLOR_UNSPECIFIED ImageSpec_ImageColor = 0
	// Color images.
	ImageSpec_IMAGE_COLOR_COLOR ImageSpec_ImageColor = 1
	// Black and white images.
	ImageSpec_IMAGE_COLOR_GRAYSCALE ImageSpec_ImageColor = 2
	// Red is the main color of the image.
	ImageSpec_IMAGE_COLOR_RED ImageSpec_ImageColor = 3
	// Orange is the main color of the image.
	ImageSpec_IMAGE_COLOR_ORANGE ImageSpec_ImageColor = 4
	// Yellow is the main color of the image.
	ImageSpec_IMAGE_COLOR_YELLOW ImageSpec_ImageColor = 5
	// Green is the main color of the image.
	ImageSpec_IMAGE_COLOR_GREEN ImageSpec_ImageColor = 6
	// Cyan is the main color of the image.
	ImageSpec_IMAGE_COLOR_CYAN ImageSpec_ImageColor = 7
	// Blue is the main color of the image.
	ImageSpec_IMAGE_COLOR_BLUE ImageSpec_ImageColor = 8
	// Violet is the main color of the image.
	ImageSpec_IMAGE_COLOR_VIOLET ImageSpec_ImageColor = 9
	// White is the main color of the image.
	ImageSpec_IMAGE_COLOR_WHITE ImageSpec_ImageColor = 10
	// Black is the main color of the image.
	ImageSpec_IMAGE_COLOR_BLACK ImageSpec_ImageColor = 11
)

// Enum value maps for ImageSpec_ImageColor.
var (
	ImageSpec_ImageColor_name = map[int32]string{
		0:  "IMAGE_COLOR_UNSPECIFIED",
		1:  "IMAGE_COLOR_COLOR",
		2:  "IMAGE_COLOR_GRAYSCALE",
		3:  "IMAGE_COLOR_RED",
		4:  "IMAGE_COLOR_ORANGE",
		5:  "IMAGE_COLOR_YELLOW",
		6:  "IMAGE_COLOR_GREEN",
		7:  "IMAGE_COLOR_CYAN",
		8:  "IMAGE_COLOR_BLUE",
		9:  "IMAGE_COLOR_VIOLET",
		10: "IMAGE_COLOR_WHITE",
		11: "IMAGE_COLOR_BLACK",
	}
	ImageSpec_ImageColor_value = map[string]int32{
		"IMAGE_COLOR_UNSPECIFIED": 0,
		"IMAGE_COLOR_COLOR":       1,
		"IMAGE_COLOR_GRAYSCALE":   2,
		"IMAGE_COLOR_RED":         3,
		"IMAGE_COLOR_ORANGE":      4,
		"IMAGE_COLOR_YELLOW":      5,
		"IMAGE_COLOR_GREEN":       6,
		"IMAGE_COLOR_CYAN":        7,
		"IMAGE_COLOR_BLUE":        8,
		"IMAGE_COLOR_VIOLET":      9,
		"IMAGE_COLOR_WHITE":       10,
		"IMAGE_COLOR_BLACK":       11,
	}
)

func (x ImageSpec_ImageColor) Enum() *ImageSpec_ImageColor {
	p := new(ImageSpec_ImageColor)
	*p = x
	return p
}

func (x ImageSpec_ImageColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageSpec_ImageColor) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_searchapi_v2_img_search_service_proto_enumTypes[3].Descriptor()
}

func (ImageSpec_ImageColor) Type() protoreflect.EnumType {
	return &file_yandex_cloud_searchapi_v2_img_search_service_proto_enumTypes[3]
}

func (x ImageSpec_ImageColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageSpec_ImageColor.Descriptor instead.
func (ImageSpec_ImageColor) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_searchapi_v2_img_search_service_proto_rawDescGZIP(), []int{0, 3}
}

type ImageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Searching for images in a particular format.
	Format ImageSpec_ImageFormat `protobuf:"varint,1,opt,name=format,proto3,enum=yandex.cloud.searchapi.v2.ImageSpec_ImageFormat" json:"format,omitempty"`
	// Searching for images of a particular size.
	Size ImageSpec_ImageSize `protobuf:"varint,2,opt,name=size,proto3,enum=yandex.cloud.searchapi.v2.ImageSpec_ImageSize" json:"size,omitempty"`
	// Searching for images with a particular orientation.
	Orientation ImageSpec_ImageOrientation `protobuf:"varint,3,opt,name=orientation,proto3,enum=yandex.cloud.searchapi.v2.ImageSpec_ImageOrientation" json:"orientation,omitempty"`
	// Searching for images containing a particular color.
	Color ImageSpec_ImageColor `protobuf:"varint,4,opt,name=color,proto3,enum=yandex.cloud.searchapi.v2.ImageSpec_ImageColor" json:"color,omitempty"`
}

func (x *ImageSpec) Reset() {
	*x = ImageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_searchapi_v2_img_search_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSpec) ProtoMessage() {}

func (x *ImageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_searchapi_v2_img_search_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSpec.ProtoReflect.Descriptor instead.
func (*ImageSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_searchapi_v2_img_search_service_proto_rawDescGZIP(), []int{0}
}

func (x *ImageSpec) GetFormat() ImageSpec_ImageFormat {
	if x != nil {
		return x.Format
	}
	return ImageSpec_IMAGE_FORMAT_UNSPECIFIED
}

func (x *ImageSpec) GetSize() ImageSpec_ImageSize {
	if x != nil {
		return x.Size
	}
	return ImageSpec_IMAGE_SIZE_UNSPECIFIED
}

func (x *ImageSpec) GetOrientation() ImageSpec_ImageOrientation {
	if x != nil {
		return x.Orientation
	}
	return ImageSpec_IMAGE_ORIENTATION_UNSPECIFIED
}

func (x *ImageSpec) GetColor() ImageSpec_ImageColor {
	if x != nil {
		return x.Color
	}
	return ImageSpec_IMAGE_COLOR_UNSPECIFIED
}

type ImageSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Search query.
	Query *SearchQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Searching for images with a particular size, orientation, format or color.
	ImageSpec *ImageSpec `protobuf:"bytes,2,opt,name=image_spec,json=imageSpec,proto3" json:"image_spec,omitempty"`
	// Searching for images on a particular website only.
	Site string `protobuf:"bytes,3,opt,name=site,proto3" json:"site,omitempty"`
	// Number of results per search result page.
	DocsOnPage int64 `protobuf:"varint,4,opt,name=docs_on_page,json=docsOnPage,proto3" json:"docs_on_page,omitempty"`
	// ID of the folder.
	FolderId string `protobuf:"bytes,5,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// User-Agent request header value.
	UserAgent string `protobuf:"bytes,6,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
}

func (x *ImageSearchRequest) Reset() {
	*x = ImageSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_searchapi_v2_img_search_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSearchRequest) ProtoMessage() {}

func (x *ImageSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_searchapi_v2_img_search_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSearchRequest.ProtoReflect.Descriptor instead.
func (*ImageSearchRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_searchapi_v2_img_search_service_proto_rawDescGZIP(), []int{1}
}

func (x *ImageSearchRequest) GetQuery() *SearchQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ImageSearchRequest) GetImageSpec() *ImageSpec {
	if x != nil {
		return x.ImageSpec
	}
	return nil
}

func (x *ImageSearchRequest) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

func (x *ImageSearchRequest) GetDocsOnPage() int64 {
	if x != nil {
		return x.DocsOnPage
	}
	return 0
}

func (x *ImageSearchRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ImageSearchRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

type ImageSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Search results in XML format.
	RawData []byte `protobuf:"bytes,1,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
}

func (x *ImageSearchResponse) Reset() {
	*x = ImageSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_searchapi_v2_img_search_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSearchResponse) ProtoMessage() {}

func (x *ImageSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_searchapi_v2_img_search_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSearchResponse.ProtoReflect.Descriptor instead.
func (*ImageSearchResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_searchapi_v2_img_search_service_proto_rawDescGZIP(), []int{2}
}

func (x *ImageSearchResponse) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

type ImageSearchByImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Restricts the search to the specific website.
	Site string `protobuf:"bytes,1,opt,name=site,proto3" json:"site,omitempty"`
	// ID of the folder.
	FolderId string `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Types that are assignable to Image:
	//
	//	*ImageSearchByImageRequest_Url
	//	*ImageSearchByImageRequest_Data
	//	*ImageSearchByImageRequest_Id
	Image isImageSearchByImageRequest_Image `protobuf_oneof:"image"`
	// The number of a requested page with search results.
	Page int64 `protobuf:"varint,6,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ImageSearchByImageRequest) Reset() {
	*x = ImageSearchByImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_searchapi_v2_img_search_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSearchByImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSearchByImageRequest) ProtoMessage() {}

func (x *ImageSearchByImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_searchapi_v2_img_search_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSearchByImageRequest.ProtoReflect.Descriptor instead.
func (*ImageSearchByImageRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_searchapi_v2_img_search_service_proto_rawDescGZIP(), []int{3}
}

func (x *ImageSearchByImageRequest) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

func (x *ImageSearchByImageRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (m *ImageSearchByImageRequest) GetImage() isImageSearchByImageRequest_Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (x *ImageSearchByImageRequest) GetUrl() string {
	if x, ok := x.GetImage().(*ImageSearchByImageRequest_Url); ok {
		return x.Url
	}
	return ""
}

func (x *ImageSearchByImageRequest) GetData() []byte {
	if x, ok := x.GetImage().(*ImageSearchByImageRequest_Data); ok {
		return x.Data
	}
	return nil
}

func (x *ImageSearchByImageRequest) GetId() string {
	if x, ok := x.GetImage().(*ImageSearchByImageRequest_Id); ok {
		return x.Id
	}
	return ""
}

func (x *ImageSearchByImageRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

type isImageSearchByImageRequest_Image interface {
	isImageSearchByImageRequest_Image()
}

type ImageSearchByImageRequest_Url struct {
	// The image url to use for the search.
	Url string `protobuf:"bytes,3,opt,name=url,proto3,oneof"`
}

type ImageSearchByImageRequest_Data struct {
	// The image data to use for the search.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3,oneof"`
}

type ImageSearchByImageRequest_Id struct {
	// CBIR ID of the image to use for the search.
	Id string `protobuf:"bytes,5,opt,name=id,proto3,oneof"`
}

func (*ImageSearchByImageRequest_Url) isImageSearchByImageRequest_Image() {}

func (*ImageSearchByImageRequest_Data) isImageSearchByImageRequest_Image() {}

func (*ImageSearchByImageRequest_Id) isImageSearchByImageRequest_Image() {}

type ImageSearchByImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The images found.
	Images []*ImageSearchByImageResponse_ImageInfo `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	// The number of the page with search results.
	Page int64 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// The number of the last page with search results.
	MaxPage int64 `protobuf:"varint,3,opt,name=max_page,json=maxPage,proto3" json:"max_page,omitempty"`
	// CBIR ID of the image used for the search.
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ImageSearchByImageResponse) Reset() {
	*x = ImageSearchByImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_searchapi_v2_img_search_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSearchByImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSearchByImageResponse) ProtoMessage() {}

func (x *ImageSearchByImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_searchapi_v2_img_search_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSearchByImageResponse.ProtoReflect.Descriptor instead.
func (*ImageSearchByImageResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_searchapi_v2_img_search_service_proto_rawDescGZIP(), []int{4}
}

func (x *ImageSearchByImageResponse) GetImages() []*ImageSearchByImageResponse_ImageInfo {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ImageSearchByImageResponse) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ImageSearchByImageResponse) GetMaxPage() int64 {
	if x != nil {
		return x.MaxPage
	}
	return 0
}

func (x *ImageSearchByImageResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ImageSearchByImageResponse_ImageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Image URL.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Image format.
	Format ImageSpec_ImageFormat `protobuf:"varint,2,opt,name=format,proto3,enum=yandex.cloud.searchapi.v2.ImageSpec_ImageFormat" json:"format,omitempty"`
	// Image width.
	Width int64 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	// Image height.
	Height int64 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	// Text passage.
	Passage string `protobuf:"bytes,5,opt,name=passage,proto3" json:"passage,omitempty"`
	// Document host.
	Host string `protobuf:"bytes,6,opt,name=host,proto3" json:"host,omitempty"`
	// Document title.
	PageTitle string `protobuf:"bytes,7,opt,name=page_title,json=pageTitle,proto3" json:"page_title,omitempty"`
	// Document URL.
	PageUrl string `protobuf:"bytes,8,opt,name=page_url,json=pageUrl,proto3" json:"page_url,omitempty"`
}

func (x *ImageSearchByImageResponse_ImageInfo) Reset() {
	*x = ImageSearchByImageResponse_ImageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_searchapi_v2_img_search_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSearchByImageResponse_ImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSearchByImageResponse_ImageInfo) ProtoMessage() {}

func (x *ImageSearchByImageResponse_ImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_searchapi_v2_img_search_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSearchByImageResponse_ImageInfo.ProtoReflect.Descriptor instead.
func (*ImageSearchByImageResponse_ImageInfo) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_searchapi_v2_img_search_service_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ImageSearchByImageResponse_ImageInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ImageSearchByImageResponse_ImageInfo) GetFormat() ImageSpec_ImageFormat {
	if x != nil {
		return x.Format
	}
	return ImageSpec_IMAGE_FORMAT_UNSPECIFIED
}

func (x *ImageSearchByImageResponse_ImageInfo) GetWidth() int64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ImageSearchByImageResponse_ImageInfo) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ImageSearchByImageResponse_ImageInfo) GetPassage() string {
	if x != nil {
		return x.Passage
	}
	return ""
}

func (x *ImageSearchByImageResponse_ImageInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ImageSearchByImageResponse_ImageInfo) GetPageTitle() string {
	if x != nil {
		return x.PageTitle
	}
	return ""
}

func (x *ImageSearchByImageResponse_ImageInfo) GetPageUrl() string {
	if x != nil {
		return x.PageUrl
	}
	return ""
}

var File_yandex_cloud_searchapi_v2_img_search_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_searchapi_v2_img_search_service_proto_rawDesc = []byte{
	0x0a, 0x32, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6d, 0x67, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x1a,
	0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x08, 0x0a, 0x09, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x48, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x57, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x45, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x6e, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x4a, 0x50, 0x45, 0x47, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4d,
	0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x47, 0x49, 0x46, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x5f, 0x50, 0x4e, 0x47, 0x10, 0x03, 0x22, 0x95, 0x01, 0x0a, 0x10, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x49,
	0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e,
	0x0a, 0x1a, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x54, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x51, 0x55, 0x41, 0x52, 0x45, 0x10, 0x03, 0x22, 0xb2,
	0x01, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x16,
	0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4d, 0x41, 0x47,
	0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x45, 0x4e, 0x4f, 0x52, 0x4d, 0x4f, 0x55, 0x53, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f,
	0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4d, 0x41, 0x47, 0x45,
	0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x4d, 0x41,
	0x4c, 0x4c, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x49,
	0x5a, 0x45, 0x5f, 0x54, 0x49, 0x4e, 0x59, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x50, 0x41, 0x50, 0x45,
	0x52, 0x10, 0x06, 0x22, 0xa9, 0x02, 0x0a, 0x0a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x43,
	0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f,
	0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x41, 0x59, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f,
	0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x12, 0x16,
	0x0a, 0x12, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x59, 0x45,
	0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f,
	0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x06, 0x12, 0x14, 0x0a,
	0x10, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x43, 0x59, 0x41,
	0x4e, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4c,
	0x4f, 0x52, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x45, 0x54, 0x10,
	0x09, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
	0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4d, 0x41, 0x47,
	0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x0b, 0x22,
	0xaf, 0x02, 0x0a, 0x12, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x04, 0xe8,
	0xc7, 0x31, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x69, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xfa, 0xc7, 0x31, 0x05, 0x31,
	0x2d, 0x31, 0x30, 0x30, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x73, 0x4f, 0x6e, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x25, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x08, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31,
	0x05, 0x3c, 0x3d, 0x32, 0x30, 0x30, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x22, 0x36, 0x0a, 0x13, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01,
	0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf7, 0x01, 0x0a, 0x19, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x8a, 0xc8, 0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x32,
	0x34, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xc8, 0x31, 0x04,
	0x3c, 0x3d, 0x35, 0x30, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xe8, 0xc7, 0x31,
	0x01, 0x8a, 0xc8, 0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x32, 0x34, 0x48, 0x00, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x11, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x09, 0x3c, 0x3d, 0x33, 0x31, 0x34, 0x35,
	0x37, 0x32, 0x38, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31,
	0x06, 0x3c, 0x3d, 0x31, 0x30, 0x32, 0x34, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0xc7, 0x31,
	0x03, 0x3e, 0x3d, 0x30, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x22, 0xb4, 0x03, 0x0a, 0x1a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x42, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x57, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0xfd, 0x01, 0x0a, 0x09, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x48, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x32, 0xc0, 0x02, 0x0a, 0x12, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x84, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2d, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0xa2, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x42, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x34, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x42, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x32, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a,
	0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x65, 0x0a,
	0x1a, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x32, 0x5a, 0x47, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x3b, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_searchapi_v2_img_search_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_searchapi_v2_img_search_service_proto_rawDescData = file_yandex_cloud_searchapi_v2_img_search_service_proto_rawDesc
)

func file_yandex_cloud_searchapi_v2_img_search_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_searchapi_v2_img_search_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_searchapi_v2_img_search_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_searchapi_v2_img_search_service_proto_rawDescData)
	})
	return file_yandex_cloud_searchapi_v2_img_search_service_proto_rawDescData
}

var file_yandex_cloud_searchapi_v2_img_search_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_yandex_cloud_searchapi_v2_img_search_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_yandex_cloud_searchapi_v2_img_search_service_proto_goTypes = []any{
	(ImageSpec_ImageFormat)(0),                   // 0: yandex.cloud.searchapi.v2.ImageSpec.ImageFormat
	(ImageSpec_ImageOrientation)(0),              // 1: yandex.cloud.searchapi.v2.ImageSpec.ImageOrientation
	(ImageSpec_ImageSize)(0),                     // 2: yandex.cloud.searchapi.v2.ImageSpec.ImageSize
	(ImageSpec_ImageColor)(0),                    // 3: yandex.cloud.searchapi.v2.ImageSpec.ImageColor
	(*ImageSpec)(nil),                            // 4: yandex.cloud.searchapi.v2.ImageSpec
	(*ImageSearchRequest)(nil),                   // 5: yandex.cloud.searchapi.v2.ImageSearchRequest
	(*ImageSearchResponse)(nil),                  // 6: yandex.cloud.searchapi.v2.ImageSearchResponse
	(*ImageSearchByImageRequest)(nil),            // 7: yandex.cloud.searchapi.v2.ImageSearchByImageRequest
	(*ImageSearchByImageResponse)(nil),           // 8: yandex.cloud.searchapi.v2.ImageSearchByImageResponse
	(*ImageSearchByImageResponse_ImageInfo)(nil), // 9: yandex.cloud.searchapi.v2.ImageSearchByImageResponse.ImageInfo
	(*SearchQuery)(nil),                          // 10: yandex.cloud.searchapi.v2.SearchQuery
}
var file_yandex_cloud_searchapi_v2_img_search_service_proto_depIdxs = []int32{
	0,  // 0: yandex.cloud.searchapi.v2.ImageSpec.format:type_name -> yandex.cloud.searchapi.v2.ImageSpec.ImageFormat
	2,  // 1: yandex.cloud.searchapi.v2.ImageSpec.size:type_name -> yandex.cloud.searchapi.v2.ImageSpec.ImageSize
	1,  // 2: yandex.cloud.searchapi.v2.ImageSpec.orientation:type_name -> yandex.cloud.searchapi.v2.ImageSpec.ImageOrientation
	3,  // 3: yandex.cloud.searchapi.v2.ImageSpec.color:type_name -> yandex.cloud.searchapi.v2.ImageSpec.ImageColor
	10, // 4: yandex.cloud.searchapi.v2.ImageSearchRequest.query:type_name -> yandex.cloud.searchapi.v2.SearchQuery
	4,  // 5: yandex.cloud.searchapi.v2.ImageSearchRequest.image_spec:type_name -> yandex.cloud.searchapi.v2.ImageSpec
	9,  // 6: yandex.cloud.searchapi.v2.ImageSearchByImageResponse.images:type_name -> yandex.cloud.searchapi.v2.ImageSearchByImageResponse.ImageInfo
	0,  // 7: yandex.cloud.searchapi.v2.ImageSearchByImageResponse.ImageInfo.format:type_name -> yandex.cloud.searchapi.v2.ImageSpec.ImageFormat
	5,  // 8: yandex.cloud.searchapi.v2.ImageSearchService.Search:input_type -> yandex.cloud.searchapi.v2.ImageSearchRequest
	7,  // 9: yandex.cloud.searchapi.v2.ImageSearchService.SearchByImage:input_type -> yandex.cloud.searchapi.v2.ImageSearchByImageRequest
	6,  // 10: yandex.cloud.searchapi.v2.ImageSearchService.Search:output_type -> yandex.cloud.searchapi.v2.ImageSearchResponse
	8,  // 11: yandex.cloud.searchapi.v2.ImageSearchService.SearchByImage:output_type -> yandex.cloud.searchapi.v2.ImageSearchByImageResponse
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_yandex_cloud_searchapi_v2_img_search_service_proto_init() }
func file_yandex_cloud_searchapi_v2_img_search_service_proto_init() {
	if File_yandex_cloud_searchapi_v2_img_search_service_proto != nil {
		return
	}
	file_yandex_cloud_searchapi_v2_search_query_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_searchapi_v2_img_search_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ImageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_searchapi_v2_img_search_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ImageSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_searchapi_v2_img_search_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ImageSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_searchapi_v2_img_search_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ImageSearchByImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_searchapi_v2_img_search_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ImageSearchByImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_searchapi_v2_img_search_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ImageSearchByImageResponse_ImageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_searchapi_v2_img_search_service_proto_msgTypes[3].OneofWrappers = []any{
		(*ImageSearchByImageRequest_Url)(nil),
		(*ImageSearchByImageRequest_Data)(nil),
		(*ImageSearchByImageRequest_Id)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_searchapi_v2_img_search_service_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_searchapi_v2_img_search_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_searchapi_v2_img_search_service_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_searchapi_v2_img_search_service_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_searchapi_v2_img_search_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_searchapi_v2_img_search_service_proto = out.File
	file_yandex_cloud_searchapi_v2_img_search_service_proto_rawDesc = nil
	file_yandex_cloud_searchapi_v2_img_search_service_proto_goTypes = nil
	file_yandex_cloud_searchapi_v2_img_search_service_proto_depIdxs = nil
}

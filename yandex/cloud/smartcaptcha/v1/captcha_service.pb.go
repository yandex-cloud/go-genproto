// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/smartcaptcha/v1/captcha_service.proto

package smartcaptcha

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetCaptchaRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Captcha resource to return.
	CaptchaId     string `protobuf:"bytes,1,opt,name=captcha_id,json=captchaId,proto3" json:"captcha_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCaptchaRequest) Reset() {
	*x = GetCaptchaRequest{}
	mi := &file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCaptchaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCaptchaRequest) ProtoMessage() {}

func (x *GetCaptchaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCaptchaRequest.ProtoReflect.Descriptor instead.
func (*GetCaptchaRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetCaptchaRequest) GetCaptchaId() string {
	if x != nil {
		return x.CaptchaId
	}
	return ""
}

type ListCaptchasRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder that the captcha belongs to.
	// Currently page_size, page_token, filter and order_by are not supported and List method will return all captchas in the folder.
	FolderId      string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCaptchasRequest) Reset() {
	*x = ListCaptchasRequest{}
	mi := &file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCaptchasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCaptchasRequest) ProtoMessage() {}

func (x *ListCaptchasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCaptchasRequest.ProtoReflect.Descriptor instead.
func (*ListCaptchasRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListCaptchasRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

type ListCaptchasResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of Captcha resources.
	// Currently next_page_token is not supported and List method will return all captchas in the folder.
	Resources     []*Captcha `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCaptchasResponse) Reset() {
	*x = ListCaptchasResponse{}
	mi := &file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCaptchasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCaptchasResponse) ProtoMessage() {}

func (x *ListCaptchasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCaptchasResponse.ProtoReflect.Descriptor instead.
func (*ListCaptchasResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListCaptchasResponse) GetResources() []*Captcha {
	if x != nil {
		return x.Resources
	}
	return nil
}

type CreateCaptchaRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to create a captcha in.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the captcha.
	// The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// List of allowed host names, see [Domain validation](/docs/smartcaptcha/concepts/domain-validation).
	AllowedSites []string `protobuf:"bytes,3,rep,name=allowed_sites,json=allowedSites,proto3" json:"allowed_sites,omitempty"`
	// Complexity of the captcha.
	Complexity CaptchaComplexity `protobuf:"varint,4,opt,name=complexity,proto3,enum=yandex.cloud.smartcaptcha.v1.CaptchaComplexity" json:"complexity,omitempty"`
	// JSON with variables to define the captcha appearance. For more details see generated JSON in cloud console.
	StyleJson string `protobuf:"bytes,5,opt,name=style_json,json=styleJson,proto3" json:"style_json,omitempty"`
	// Turn off host name check, see [Domain validation](/docs/smartcaptcha/concepts/domain-validation).
	TurnOffHostnameCheck bool `protobuf:"varint,6,opt,name=turn_off_hostname_check,json=turnOffHostnameCheck,proto3" json:"turn_off_hostname_check,omitempty"`
	// Basic check type of the captcha.
	PreCheckType CaptchaPreCheckType `protobuf:"varint,8,opt,name=pre_check_type,json=preCheckType,proto3,enum=yandex.cloud.smartcaptcha.v1.CaptchaPreCheckType" json:"pre_check_type,omitempty"`
	// Additional task type of the captcha.
	ChallengeType CaptchaChallengeType `protobuf:"varint,9,opt,name=challenge_type,json=challengeType,proto3,enum=yandex.cloud.smartcaptcha.v1.CaptchaChallengeType" json:"challenge_type,omitempty"`
	// List of security rules.
	SecurityRules []*SecurityRule `protobuf:"bytes,11,rep,name=security_rules,json=securityRules,proto3" json:"security_rules,omitempty"`
	// Determines whether captcha is protected from being deleted.
	DeletionProtection bool `protobuf:"varint,12,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// List of variants to use in security_rules
	OverrideVariants []*OverrideVariant `protobuf:"bytes,13,rep,name=override_variants,json=overrideVariants,proto3" json:"override_variants,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CreateCaptchaRequest) Reset() {
	*x = CreateCaptchaRequest{}
	mi := &file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCaptchaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCaptchaRequest) ProtoMessage() {}

func (x *CreateCaptchaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCaptchaRequest.ProtoReflect.Descriptor instead.
func (*CreateCaptchaRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCaptchaRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateCaptchaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCaptchaRequest) GetAllowedSites() []string {
	if x != nil {
		return x.AllowedSites
	}
	return nil
}

func (x *CreateCaptchaRequest) GetComplexity() CaptchaComplexity {
	if x != nil {
		return x.Complexity
	}
	return CaptchaComplexity_CAPTCHA_COMPLEXITY_UNSPECIFIED
}

func (x *CreateCaptchaRequest) GetStyleJson() string {
	if x != nil {
		return x.StyleJson
	}
	return ""
}

func (x *CreateCaptchaRequest) GetTurnOffHostnameCheck() bool {
	if x != nil {
		return x.TurnOffHostnameCheck
	}
	return false
}

func (x *CreateCaptchaRequest) GetPreCheckType() CaptchaPreCheckType {
	if x != nil {
		return x.PreCheckType
	}
	return CaptchaPreCheckType_CAPTCHA_PRE_CHECK_TYPE_UNSPECIFIED
}

func (x *CreateCaptchaRequest) GetChallengeType() CaptchaChallengeType {
	if x != nil {
		return x.ChallengeType
	}
	return CaptchaChallengeType_CAPTCHA_CHALLENGE_TYPE_UNSPECIFIED
}

func (x *CreateCaptchaRequest) GetSecurityRules() []*SecurityRule {
	if x != nil {
		return x.SecurityRules
	}
	return nil
}

func (x *CreateCaptchaRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *CreateCaptchaRequest) GetOverrideVariants() []*OverrideVariant {
	if x != nil {
		return x.OverrideVariants
	}
	return nil
}

type CreateCaptchaMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the captcha that is being created.
	CaptchaId     string `protobuf:"bytes,1,opt,name=captcha_id,json=captchaId,proto3" json:"captcha_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCaptchaMetadata) Reset() {
	*x = CreateCaptchaMetadata{}
	mi := &file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCaptchaMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCaptchaMetadata) ProtoMessage() {}

func (x *CreateCaptchaMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCaptchaMetadata.ProtoReflect.Descriptor instead.
func (*CreateCaptchaMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCaptchaMetadata) GetCaptchaId() string {
	if x != nil {
		return x.CaptchaId
	}
	return ""
}

type DeleteCaptchaRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the captcha to delete.
	CaptchaId     string `protobuf:"bytes,1,opt,name=captcha_id,json=captchaId,proto3" json:"captcha_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCaptchaRequest) Reset() {
	*x = DeleteCaptchaRequest{}
	mi := &file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCaptchaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCaptchaRequest) ProtoMessage() {}

func (x *DeleteCaptchaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCaptchaRequest.ProtoReflect.Descriptor instead.
func (*DeleteCaptchaRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteCaptchaRequest) GetCaptchaId() string {
	if x != nil {
		return x.CaptchaId
	}
	return ""
}

type DeleteCaptchaMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Captcha resource that is being deleted.
	CaptchaId     string `protobuf:"bytes,1,opt,name=captcha_id,json=captchaId,proto3" json:"captcha_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCaptchaMetadata) Reset() {
	*x = DeleteCaptchaMetadata{}
	mi := &file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCaptchaMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCaptchaMetadata) ProtoMessage() {}

func (x *DeleteCaptchaMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCaptchaMetadata.ProtoReflect.Descriptor instead.
func (*DeleteCaptchaMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteCaptchaMetadata) GetCaptchaId() string {
	if x != nil {
		return x.CaptchaId
	}
	return ""
}

type UpdateCaptchaRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the captcha to update.
	CaptchaId string `protobuf:"bytes,1,opt,name=captcha_id,json=captchaId,proto3" json:"captcha_id,omitempty"`
	// Field mask that specifies which fields of the Captcha resource are going to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Name of the captcha.
	// The name must be unique within the folder.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// List of allowed host names, see [Domain validation](/docs/smartcaptcha/concepts/domain-validation).
	AllowedSites []string `protobuf:"bytes,4,rep,name=allowed_sites,json=allowedSites,proto3" json:"allowed_sites,omitempty"`
	// Complexity of the captcha.
	Complexity CaptchaComplexity `protobuf:"varint,5,opt,name=complexity,proto3,enum=yandex.cloud.smartcaptcha.v1.CaptchaComplexity" json:"complexity,omitempty"`
	// JSON with variables to define the captcha appearance. For more details see generated JSON in cloud console.
	StyleJson string `protobuf:"bytes,6,opt,name=style_json,json=styleJson,proto3" json:"style_json,omitempty"`
	// Turn off host name check, see [Domain validation](/docs/smartcaptcha/concepts/domain-validation).
	TurnOffHostnameCheck bool `protobuf:"varint,7,opt,name=turn_off_hostname_check,json=turnOffHostnameCheck,proto3" json:"turn_off_hostname_check,omitempty"`
	// Basic check type of the captcha.
	PreCheckType CaptchaPreCheckType `protobuf:"varint,9,opt,name=pre_check_type,json=preCheckType,proto3,enum=yandex.cloud.smartcaptcha.v1.CaptchaPreCheckType" json:"pre_check_type,omitempty"`
	// Additional task type of the captcha.
	ChallengeType CaptchaChallengeType `protobuf:"varint,10,opt,name=challenge_type,json=challengeType,proto3,enum=yandex.cloud.smartcaptcha.v1.CaptchaChallengeType" json:"challenge_type,omitempty"`
	// List of security rules.
	SecurityRules []*SecurityRule `protobuf:"bytes,12,rep,name=security_rules,json=securityRules,proto3" json:"security_rules,omitempty"`
	// Determines whether captcha is protected from being deleted.
	DeletionProtection bool `protobuf:"varint,13,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// List of variants to use in security_rules
	OverrideVariants []*OverrideVariant `protobuf:"bytes,14,rep,name=override_variants,json=overrideVariants,proto3" json:"override_variants,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UpdateCaptchaRequest) Reset() {
	*x = UpdateCaptchaRequest{}
	mi := &file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCaptchaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCaptchaRequest) ProtoMessage() {}

func (x *UpdateCaptchaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCaptchaRequest.ProtoReflect.Descriptor instead.
func (*UpdateCaptchaRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateCaptchaRequest) GetCaptchaId() string {
	if x != nil {
		return x.CaptchaId
	}
	return ""
}

func (x *UpdateCaptchaRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateCaptchaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCaptchaRequest) GetAllowedSites() []string {
	if x != nil {
		return x.AllowedSites
	}
	return nil
}

func (x *UpdateCaptchaRequest) GetComplexity() CaptchaComplexity {
	if x != nil {
		return x.Complexity
	}
	return CaptchaComplexity_CAPTCHA_COMPLEXITY_UNSPECIFIED
}

func (x *UpdateCaptchaRequest) GetStyleJson() string {
	if x != nil {
		return x.StyleJson
	}
	return ""
}

func (x *UpdateCaptchaRequest) GetTurnOffHostnameCheck() bool {
	if x != nil {
		return x.TurnOffHostnameCheck
	}
	return false
}

func (x *UpdateCaptchaRequest) GetPreCheckType() CaptchaPreCheckType {
	if x != nil {
		return x.PreCheckType
	}
	return CaptchaPreCheckType_CAPTCHA_PRE_CHECK_TYPE_UNSPECIFIED
}

func (x *UpdateCaptchaRequest) GetChallengeType() CaptchaChallengeType {
	if x != nil {
		return x.ChallengeType
	}
	return CaptchaChallengeType_CAPTCHA_CHALLENGE_TYPE_UNSPECIFIED
}

func (x *UpdateCaptchaRequest) GetSecurityRules() []*SecurityRule {
	if x != nil {
		return x.SecurityRules
	}
	return nil
}

func (x *UpdateCaptchaRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *UpdateCaptchaRequest) GetOverrideVariants() []*OverrideVariant {
	if x != nil {
		return x.OverrideVariants
	}
	return nil
}

type UpdateCaptchaMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Captcha resource that is being updated.
	CaptchaId     string `protobuf:"bytes,1,opt,name=captcha_id,json=captchaId,proto3" json:"captcha_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCaptchaMetadata) Reset() {
	*x = UpdateCaptchaMetadata{}
	mi := &file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCaptchaMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCaptchaMetadata) ProtoMessage() {}

func (x *UpdateCaptchaMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCaptchaMetadata.ProtoReflect.Descriptor instead.
func (*UpdateCaptchaMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateCaptchaMetadata) GetCaptchaId() string {
	if x != nil {
		return x.CaptchaId
	}
	return ""
}

var File_yandex_cloud_smartcaptcha_v1_captcha_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_rawDesc = "" +
	"\n" +
	"2yandex/cloud/smartcaptcha/v1/captcha_service.proto\x12\x1cyandex.cloud.smartcaptcha.v1\x1a\x1cgoogle/api/annotations.proto\x1a google/protobuf/field_mask.proto\x1a yandex/cloud/api/operation.proto\x1a\x1dyandex/cloud/validation.proto\x1a&yandex/cloud/operation/operation.proto\x1a*yandex/cloud/smartcaptcha/v1/captcha.proto\"@\n" +
	"\x11GetCaptchaRequest\x12+\n" +
	"\n" +
	"captcha_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tcaptchaId\"@\n" +
	"\x13ListCaptchasRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\"g\n" +
	"\x14ListCaptchasResponse\x12C\n" +
	"\tresources\x18\x03 \x03(\v2%.yandex.cloud.smartcaptcha.v1.CaptchaR\tresourcesJ\x04\b\x01\x10\x02J\x04\b\x02\x10\x03\"\xe7\x05\n" +
	"\x14CreateCaptchaRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x128\n" +
	"\x04name\x18\x02 \x01(\tB$\xf2\xc71 |[a-z]([-a-z0-9]{0,61}[a-z0-9])?R\x04name\x12#\n" +
	"\rallowed_sites\x18\x03 \x03(\tR\fallowedSites\x12O\n" +
	"\n" +
	"complexity\x18\x04 \x01(\x0e2/.yandex.cloud.smartcaptcha.v1.CaptchaComplexityR\n" +
	"complexity\x12\x1d\n" +
	"\n" +
	"style_json\x18\x05 \x01(\tR\tstyleJson\x125\n" +
	"\x17turn_off_hostname_check\x18\x06 \x01(\bR\x14turnOffHostnameCheck\x12W\n" +
	"\x0epre_check_type\x18\b \x01(\x0e21.yandex.cloud.smartcaptcha.v1.CaptchaPreCheckTypeR\fpreCheckType\x12Y\n" +
	"\x0echallenge_type\x18\t \x01(\x0e22.yandex.cloud.smartcaptcha.v1.CaptchaChallengeTypeR\rchallengeType\x12Q\n" +
	"\x0esecurity_rules\x18\v \x03(\v2*.yandex.cloud.smartcaptcha.v1.SecurityRuleR\rsecurityRules\x12/\n" +
	"\x13deletion_protection\x18\f \x01(\bR\x12deletionProtection\x12Z\n" +
	"\x11override_variants\x18\r \x03(\v2-.yandex.cloud.smartcaptcha.v1.OverrideVariantR\x10overrideVariantsJ\x04\b\a\x10\bJ\x04\b\n" +
	"\x10\v\"6\n" +
	"\x15CreateCaptchaMetadata\x12\x1d\n" +
	"\n" +
	"captcha_id\x18\x01 \x01(\tR\tcaptchaId\"C\n" +
	"\x14DeleteCaptchaRequest\x12+\n" +
	"\n" +
	"captcha_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tcaptchaId\"6\n" +
	"\x15DeleteCaptchaMetadata\x12\x1d\n" +
	"\n" +
	"captcha_id\x18\x01 \x01(\tR\tcaptchaId\"\xa6\x06\n" +
	"\x14UpdateCaptchaRequest\x12+\n" +
	"\n" +
	"captcha_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tcaptchaId\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x128\n" +
	"\x04name\x18\x03 \x01(\tB$\xf2\xc71 |[a-z]([-a-z0-9]{0,61}[a-z0-9])?R\x04name\x12#\n" +
	"\rallowed_sites\x18\x04 \x03(\tR\fallowedSites\x12O\n" +
	"\n" +
	"complexity\x18\x05 \x01(\x0e2/.yandex.cloud.smartcaptcha.v1.CaptchaComplexityR\n" +
	"complexity\x12\x1d\n" +
	"\n" +
	"style_json\x18\x06 \x01(\tR\tstyleJson\x125\n" +
	"\x17turn_off_hostname_check\x18\a \x01(\bR\x14turnOffHostnameCheck\x12W\n" +
	"\x0epre_check_type\x18\t \x01(\x0e21.yandex.cloud.smartcaptcha.v1.CaptchaPreCheckTypeR\fpreCheckType\x12Y\n" +
	"\x0echallenge_type\x18\n" +
	" \x01(\x0e22.yandex.cloud.smartcaptcha.v1.CaptchaChallengeTypeR\rchallengeType\x12Q\n" +
	"\x0esecurity_rules\x18\f \x03(\v2*.yandex.cloud.smartcaptcha.v1.SecurityRuleR\rsecurityRules\x12/\n" +
	"\x13deletion_protection\x18\r \x01(\bR\x12deletionProtection\x12Z\n" +
	"\x11override_variants\x18\x0e \x03(\v2-.yandex.cloud.smartcaptcha.v1.OverrideVariantR\x10overrideVariantsJ\x04\b\b\x10\tJ\x04\b\v\x10\f\"6\n" +
	"\x15UpdateCaptchaMetadata\x12\x1d\n" +
	"\n" +
	"captcha_id\x18\x01 \x01(\tR\tcaptchaId2\x8b\b\n" +
	"\x0eCaptchaService\x12\x8d\x01\n" +
	"\x03Get\x12/.yandex.cloud.smartcaptcha.v1.GetCaptchaRequest\x1a%.yandex.cloud.smartcaptcha.v1.Captcha\".\x82\xd3\xe4\x93\x02(\x12&/smartcaptcha/v1/captchas/{captcha_id}\x12\xac\x01\n" +
	"\fGetSecretKey\x12/.yandex.cloud.smartcaptcha.v1.GetCaptchaRequest\x1a..yandex.cloud.smartcaptcha.v1.CaptchaSecretKey\";\x82\xd3\xe4\x93\x025\x123/smartcaptcha/v1/captchas/{captcha_id}:getSecretKey\x12\x90\x01\n" +
	"\x04List\x121.yandex.cloud.smartcaptcha.v1.ListCaptchasRequest\x1a2.yandex.cloud.smartcaptcha.v1.ListCaptchasResponse\"!\x82\xd3\xe4\x93\x02\x1b\x12\x19/smartcaptcha/v1/captchas\x12\xa9\x01\n" +
	"\x06Create\x122.yandex.cloud.smartcaptcha.v1.CreateCaptchaRequest\x1a!.yandex.cloud.operation.Operation\"H\xb2\xd2* \n" +
	"\x15CreateCaptchaMetadata\x12\aCaptcha\x82\xd3\xe4\x93\x02\x1e:\x01*\"\x19/smartcaptcha/v1/captchas\x12\xb6\x01\n" +
	"\x06Update\x122.yandex.cloud.smartcaptcha.v1.UpdateCaptchaRequest\x1a!.yandex.cloud.operation.Operation\"U\xb2\xd2* \n" +
	"\x15UpdateCaptchaMetadata\x12\aCaptcha\x82\xd3\xe4\x93\x02+:\x01*2&/smartcaptcha/v1/captchas/{captcha_id}\x12\xc1\x01\n" +
	"\x06Delete\x122.yandex.cloud.smartcaptcha.v1.DeleteCaptchaRequest\x1a!.yandex.cloud.operation.Operation\"`\xb2\xd2*.\n" +
	"\x15DeleteCaptchaMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02(*&/smartcaptcha/v1/captchas/{captcha_id}Bq\n" +
	" yandex.cloud.api.smartcaptcha.v1ZMgithub.com/yandex-cloud/go-genproto/yandex/cloud/smartcaptcha/v1;smartcaptchab\x06proto3"

var (
	file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_rawDescData []byte
)

func file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_rawDesc), len(file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_rawDesc)))
	})
	return file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_rawDescData
}

var file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_goTypes = []any{
	(*GetCaptchaRequest)(nil),     // 0: yandex.cloud.smartcaptcha.v1.GetCaptchaRequest
	(*ListCaptchasRequest)(nil),   // 1: yandex.cloud.smartcaptcha.v1.ListCaptchasRequest
	(*ListCaptchasResponse)(nil),  // 2: yandex.cloud.smartcaptcha.v1.ListCaptchasResponse
	(*CreateCaptchaRequest)(nil),  // 3: yandex.cloud.smartcaptcha.v1.CreateCaptchaRequest
	(*CreateCaptchaMetadata)(nil), // 4: yandex.cloud.smartcaptcha.v1.CreateCaptchaMetadata
	(*DeleteCaptchaRequest)(nil),  // 5: yandex.cloud.smartcaptcha.v1.DeleteCaptchaRequest
	(*DeleteCaptchaMetadata)(nil), // 6: yandex.cloud.smartcaptcha.v1.DeleteCaptchaMetadata
	(*UpdateCaptchaRequest)(nil),  // 7: yandex.cloud.smartcaptcha.v1.UpdateCaptchaRequest
	(*UpdateCaptchaMetadata)(nil), // 8: yandex.cloud.smartcaptcha.v1.UpdateCaptchaMetadata
	(*Captcha)(nil),               // 9: yandex.cloud.smartcaptcha.v1.Captcha
	(CaptchaComplexity)(0),        // 10: yandex.cloud.smartcaptcha.v1.CaptchaComplexity
	(CaptchaPreCheckType)(0),      // 11: yandex.cloud.smartcaptcha.v1.CaptchaPreCheckType
	(CaptchaChallengeType)(0),     // 12: yandex.cloud.smartcaptcha.v1.CaptchaChallengeType
	(*SecurityRule)(nil),          // 13: yandex.cloud.smartcaptcha.v1.SecurityRule
	(*OverrideVariant)(nil),       // 14: yandex.cloud.smartcaptcha.v1.OverrideVariant
	(*fieldmaskpb.FieldMask)(nil), // 15: google.protobuf.FieldMask
	(*CaptchaSecretKey)(nil),      // 16: yandex.cloud.smartcaptcha.v1.CaptchaSecretKey
	(*operation.Operation)(nil),   // 17: yandex.cloud.operation.Operation
}
var file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_depIdxs = []int32{
	9,  // 0: yandex.cloud.smartcaptcha.v1.ListCaptchasResponse.resources:type_name -> yandex.cloud.smartcaptcha.v1.Captcha
	10, // 1: yandex.cloud.smartcaptcha.v1.CreateCaptchaRequest.complexity:type_name -> yandex.cloud.smartcaptcha.v1.CaptchaComplexity
	11, // 2: yandex.cloud.smartcaptcha.v1.CreateCaptchaRequest.pre_check_type:type_name -> yandex.cloud.smartcaptcha.v1.CaptchaPreCheckType
	12, // 3: yandex.cloud.smartcaptcha.v1.CreateCaptchaRequest.challenge_type:type_name -> yandex.cloud.smartcaptcha.v1.CaptchaChallengeType
	13, // 4: yandex.cloud.smartcaptcha.v1.CreateCaptchaRequest.security_rules:type_name -> yandex.cloud.smartcaptcha.v1.SecurityRule
	14, // 5: yandex.cloud.smartcaptcha.v1.CreateCaptchaRequest.override_variants:type_name -> yandex.cloud.smartcaptcha.v1.OverrideVariant
	15, // 6: yandex.cloud.smartcaptcha.v1.UpdateCaptchaRequest.update_mask:type_name -> google.protobuf.FieldMask
	10, // 7: yandex.cloud.smartcaptcha.v1.UpdateCaptchaRequest.complexity:type_name -> yandex.cloud.smartcaptcha.v1.CaptchaComplexity
	11, // 8: yandex.cloud.smartcaptcha.v1.UpdateCaptchaRequest.pre_check_type:type_name -> yandex.cloud.smartcaptcha.v1.CaptchaPreCheckType
	12, // 9: yandex.cloud.smartcaptcha.v1.UpdateCaptchaRequest.challenge_type:type_name -> yandex.cloud.smartcaptcha.v1.CaptchaChallengeType
	13, // 10: yandex.cloud.smartcaptcha.v1.UpdateCaptchaRequest.security_rules:type_name -> yandex.cloud.smartcaptcha.v1.SecurityRule
	14, // 11: yandex.cloud.smartcaptcha.v1.UpdateCaptchaRequest.override_variants:type_name -> yandex.cloud.smartcaptcha.v1.OverrideVariant
	0,  // 12: yandex.cloud.smartcaptcha.v1.CaptchaService.Get:input_type -> yandex.cloud.smartcaptcha.v1.GetCaptchaRequest
	0,  // 13: yandex.cloud.smartcaptcha.v1.CaptchaService.GetSecretKey:input_type -> yandex.cloud.smartcaptcha.v1.GetCaptchaRequest
	1,  // 14: yandex.cloud.smartcaptcha.v1.CaptchaService.List:input_type -> yandex.cloud.smartcaptcha.v1.ListCaptchasRequest
	3,  // 15: yandex.cloud.smartcaptcha.v1.CaptchaService.Create:input_type -> yandex.cloud.smartcaptcha.v1.CreateCaptchaRequest
	7,  // 16: yandex.cloud.smartcaptcha.v1.CaptchaService.Update:input_type -> yandex.cloud.smartcaptcha.v1.UpdateCaptchaRequest
	5,  // 17: yandex.cloud.smartcaptcha.v1.CaptchaService.Delete:input_type -> yandex.cloud.smartcaptcha.v1.DeleteCaptchaRequest
	9,  // 18: yandex.cloud.smartcaptcha.v1.CaptchaService.Get:output_type -> yandex.cloud.smartcaptcha.v1.Captcha
	16, // 19: yandex.cloud.smartcaptcha.v1.CaptchaService.GetSecretKey:output_type -> yandex.cloud.smartcaptcha.v1.CaptchaSecretKey
	2,  // 20: yandex.cloud.smartcaptcha.v1.CaptchaService.List:output_type -> yandex.cloud.smartcaptcha.v1.ListCaptchasResponse
	17, // 21: yandex.cloud.smartcaptcha.v1.CaptchaService.Create:output_type -> yandex.cloud.operation.Operation
	17, // 22: yandex.cloud.smartcaptcha.v1.CaptchaService.Update:output_type -> yandex.cloud.operation.Operation
	17, // 23: yandex.cloud.smartcaptcha.v1.CaptchaService.Delete:output_type -> yandex.cloud.operation.Operation
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_init() }
func file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_init() {
	if File_yandex_cloud_smartcaptcha_v1_captcha_service_proto != nil {
		return
	}
	file_yandex_cloud_smartcaptcha_v1_captcha_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_rawDesc), len(file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_smartcaptcha_v1_captcha_service_proto = out.File
	file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_goTypes = nil
	file_yandex_cloud_smartcaptcha_v1_captcha_service_proto_depIdxs = nil
}

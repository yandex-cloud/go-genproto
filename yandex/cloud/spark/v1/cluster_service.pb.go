// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/spark/v1/cluster_service.proto

package spark

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Spark cluster to return.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterRequest) Reset() {
	*x = GetClusterRequest{}
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterRequest) ProtoMessage() {}

func (x *GetClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterRequest.ProtoReflect.Descriptor instead.
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_spark_v1_cluster_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ListClustersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to list Spark clusters in.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page that should be returned. If the number of available
	// results is larger than `page_size`, the service returns a `next_page_token` that can be used
	// to get the next page of results in subsequent ListClusters requests.
	// Acceptable values are 0 to 1000, inclusive. Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. Set `page_token` to the `next_page_token` returned by a previous ListClusters
	// request to get the next page of results.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// String that describes a display filter.
	Filter        string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_spark_v1_cluster_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListClustersRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListClustersRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClustersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListClustersRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListClustersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Requested list of Spark clusters.
	Clusters []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	// This token allows you to get the next page of results for ListClusters requests,
	// if the number of results is larger than `page_size` specified in the request.
	// To get the next page, specify the value of `next_page_token` as a value for
	// the `page_token` parameter in the next ListClusters request. Subsequent ListClusters
	// requests will have their own `next_page_token` to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersResponse) Reset() {
	*x = ListClustersResponse{}
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersResponse) ProtoMessage() {}

func (x *ListClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersResponse.ProtoReflect.Descriptor instead.
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_spark_v1_cluster_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListClustersResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ListClustersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to create Spark cluster in.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the Spark cluster. The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the Spark cluster. 0-256 characters long.
	Description string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Labels      map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Config      *ClusterConfig    `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	Network     *NetworkConfig    `protobuf:"bytes,6,opt,name=network,proto3" json:"network,omitempty"`
	// Deletion Protection inhibits deletion of the cluster
	DeletionProtection bool `protobuf:"varint,7,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// Service account that will be used to access YC resources
	ServiceAccountId string `protobuf:"bytes,8,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	// Cloud logging configuration
	Logging *LoggingConfig `protobuf:"bytes,9,opt,name=logging,proto3" json:"logging,omitempty"`
	// Window of maintenance operations.
	MaintenanceWindow *MaintenanceWindow `protobuf:"bytes,10,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CreateClusterRequest) Reset() {
	*x = CreateClusterRequest{}
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterRequest) ProtoMessage() {}

func (x *CreateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_spark_v1_cluster_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateClusterRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateClusterRequest) GetConfig() *ClusterConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateClusterRequest) GetNetwork() *NetworkConfig {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *CreateClusterRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *CreateClusterRequest) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *CreateClusterRequest) GetLogging() *LoggingConfig {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (x *CreateClusterRequest) GetMaintenanceWindow() *MaintenanceWindow {
	if x != nil {
		return x.MaintenanceWindow
	}
	return nil
}

type CreateClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the creating Spark cluster.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClusterMetadata) Reset() {
	*x = CreateClusterMetadata{}
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterMetadata) ProtoMessage() {}

func (x *CreateClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterMetadata.ProtoReflect.Descriptor instead.
func (*CreateClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_spark_v1_cluster_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type UpdateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Spark cluster.
	ClusterId  string                 `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	Name       string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the Spark cluster. 0-256 characters long.
	Description string                   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Labels      map[string]string        `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ConfigSpec  *UpdateClusterConfigSpec `protobuf:"bytes,6,opt,name=config_spec,json=configSpec,proto3" json:"config_spec,omitempty"`
	NetworkSpec *UpdateNetworkConfigSpec `protobuf:"bytes,7,opt,name=network_spec,json=networkSpec,proto3" json:"network_spec,omitempty"`
	// Deletion Protection inhibits deletion of the cluster
	DeletionProtection bool `protobuf:"varint,8,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// Service account used to access Cloud resources.
	ServiceAccountId string `protobuf:"bytes,9,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	// Cloud logging configuration
	Logging *LoggingConfig `protobuf:"bytes,10,opt,name=logging,proto3" json:"logging,omitempty"`
	// Window of maintenance operations.
	MaintenanceWindow *MaintenanceWindow `protobuf:"bytes,11,opt,name=maintenance_window,json=maintenanceWindow,proto3" json:"maintenance_window,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdateClusterRequest) Reset() {
	*x = UpdateClusterRequest{}
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterRequest) ProtoMessage() {}

func (x *UpdateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_spark_v1_cluster_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateClusterRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateClusterRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateClusterRequest) GetConfigSpec() *UpdateClusterConfigSpec {
	if x != nil {
		return x.ConfigSpec
	}
	return nil
}

func (x *UpdateClusterRequest) GetNetworkSpec() *UpdateNetworkConfigSpec {
	if x != nil {
		return x.NetworkSpec
	}
	return nil
}

func (x *UpdateClusterRequest) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *UpdateClusterRequest) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *UpdateClusterRequest) GetLogging() *LoggingConfig {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (x *UpdateClusterRequest) GetMaintenanceWindow() *MaintenanceWindow {
	if x != nil {
		return x.MaintenanceWindow
	}
	return nil
}

type UpdateClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the updating Spark cluster.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterMetadata) Reset() {
	*x = UpdateClusterMetadata{}
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterMetadata) ProtoMessage() {}

func (x *UpdateClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterMetadata.ProtoReflect.Descriptor instead.
func (*UpdateClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_spark_v1_cluster_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type DeleteClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Spark cluster to delete.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_spark_v1_cluster_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type DeleteClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the deleting Spark cluster.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterMetadata) Reset() {
	*x = DeleteClusterMetadata{}
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterMetadata) ProtoMessage() {}

func (x *DeleteClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterMetadata.ProtoReflect.Descriptor instead.
func (*DeleteClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_spark_v1_cluster_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StartClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Spark cluster that is being started.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterRequest) Reset() {
	*x = StartClusterRequest{}
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterRequest) ProtoMessage() {}

func (x *StartClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterRequest.ProtoReflect.Descriptor instead.
func (*StartClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_spark_v1_cluster_service_proto_rawDescGZIP(), []int{9}
}

func (x *StartClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StartClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Spark cluster.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartClusterMetadata) Reset() {
	*x = StartClusterMetadata{}
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusterMetadata) ProtoMessage() {}

func (x *StartClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusterMetadata.ProtoReflect.Descriptor instead.
func (*StartClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_spark_v1_cluster_service_proto_rawDescGZIP(), []int{10}
}

func (x *StartClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StopClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Spark cluster that is being stopped.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopClusterRequest) Reset() {
	*x = StopClusterRequest{}
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClusterRequest) ProtoMessage() {}

func (x *StopClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClusterRequest.ProtoReflect.Descriptor instead.
func (*StopClusterRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_spark_v1_cluster_service_proto_rawDescGZIP(), []int{11}
}

func (x *StopClusterRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type StopClusterMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Spark cluster.
	ClusterId     string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopClusterMetadata) Reset() {
	*x = StopClusterMetadata{}
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopClusterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopClusterMetadata) ProtoMessage() {}

func (x *StopClusterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopClusterMetadata.ProtoReflect.Descriptor instead.
func (*StopClusterMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_spark_v1_cluster_service_proto_rawDescGZIP(), []int{12}
}

func (x *StopClusterMetadata) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

type ListClusterOperationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Spark cluster.
	ClusterId string `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The maximum number of results per page that should be returned. If the number of available
	// results is larger than `page_size`, the service returns a `next_page_token` that can be used
	// to get the next page of results in subsequent ListOperations requests.
	// Acceptable values are 0 to 1000, inclusive. Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. Set `page_token` to the `next_page_token` returned by a previous ListOperations
	// request to get the next page of results.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterOperationsRequest) Reset() {
	*x = ListClusterOperationsRequest{}
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterOperationsRequest) ProtoMessage() {}

func (x *ListClusterOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListClusterOperationsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_spark_v1_cluster_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListClusterOperationsRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ListClusterOperationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClusterOperationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClusterOperationsResponse struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// This token allows you to get the next page of results for ListOperations requests,
	// if the number of results is larger than `page_size` specified in the request.
	// To get the next page, specify the value of `next_page_token` as a value for
	// the `page_token` parameter in the next ListOperations request. Subsequent ListOperations
	// requests will have their own `next_page_token` to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClusterOperationsResponse) Reset() {
	*x = ListClusterOperationsResponse{}
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClusterOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClusterOperationsResponse) ProtoMessage() {}

func (x *ListClusterOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClusterOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListClusterOperationsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_spark_v1_cluster_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListClusterOperationsResponse) GetOperations() []*operation.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListClusterOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_yandex_cloud_spark_v1_cluster_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_spark_v1_cluster_service_proto_rawDesc = "" +
	"\n" +
	"+yandex/cloud/spark/v1/cluster_service.proto\x12\x15yandex.cloud.spark.v1\x1a google/protobuf/field_mask.proto\x1a#yandex/cloud/spark/v1/cluster.proto\x1a'yandex/cloud/spark/v1/maintenance.proto\x1a&yandex/cloud/operation/operation.proto\x1a\x1dyandex/cloud/validation.proto\x1a yandex/cloud/api/operation.proto\"@\n" +
	"\x11GetClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"\xb7\x01\n" +
	"\x13ListClustersRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=200R\tpageToken\x12\"\n" +
	"\x06filter\x18\x04 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"\x85\x01\n" +
	"\x14ListClustersResponse\x12:\n" +
	"\bclusters\x18\x01 \x03(\v2\x1e.yandex.cloud.spark.v1.ClusterR\bclusters\x121\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tB\t\x8a\xc81\x05<=200R\rnextPageToken\"\x8c\x06\n" +
	"\x14CreateClusterRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x12B\n" +
	"\x04name\x18\x02 \x01(\tB.\xe8\xc71\x01\xf2\xc71\x1e^[a-z][-a-z0-9]{1,61}[a-z0-9]$\x8a\xc81\x04<=63R\x04name\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x8c\x01\n" +
	"\x06labels\x18\x04 \x03(\v27.yandex.cloud.spark.v1.CreateClusterRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x041-63R\x06labels\x12B\n" +
	"\x06config\x18\x05 \x01(\v2$.yandex.cloud.spark.v1.ClusterConfigB\x04\xe8\xc71\x01R\x06config\x12D\n" +
	"\anetwork\x18\x06 \x01(\v2$.yandex.cloud.spark.v1.NetworkConfigB\x04\xe8\xc71\x01R\anetwork\x12/\n" +
	"\x13deletion_protection\x18\a \x01(\bR\x12deletionProtection\x12:\n" +
	"\x12service_account_id\x18\b \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x10serviceAccountId\x12>\n" +
	"\alogging\x18\t \x01(\v2$.yandex.cloud.spark.v1.LoggingConfigR\alogging\x12W\n" +
	"\x12maintenance_window\x18\n" +
	" \x01(\v2(.yandex.cloud.spark.v1.MaintenanceWindowR\x11maintenanceWindow\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"<\n" +
	"\x15CreateClusterMetadata\x12#\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\tclusterId\"\xd4\x06\n" +
	"\x14UpdateClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x125\n" +
	"\x04name\x18\x03 \x01(\tB!\xf2\xc71\x1d|[a-z][-a-z0-9]{1,61}[a-z0-9]R\x04name\x12+\n" +
	"\vdescription\x18\x04 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x8c\x01\n" +
	"\x06labels\x18\x05 \x03(\v27.yandex.cloud.spark.v1.UpdateClusterRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x041-63R\x06labels\x12O\n" +
	"\vconfig_spec\x18\x06 \x01(\v2..yandex.cloud.spark.v1.UpdateClusterConfigSpecR\n" +
	"configSpec\x12Q\n" +
	"\fnetwork_spec\x18\a \x01(\v2..yandex.cloud.spark.v1.UpdateNetworkConfigSpecR\vnetworkSpec\x12/\n" +
	"\x13deletion_protection\x18\b \x01(\bR\x12deletionProtection\x126\n" +
	"\x12service_account_id\x18\t \x01(\tB\b\x8a\xc81\x04<=50R\x10serviceAccountId\x12>\n" +
	"\alogging\x18\n" +
	" \x01(\v2$.yandex.cloud.spark.v1.LoggingConfigR\alogging\x12W\n" +
	"\x12maintenance_window\x18\v \x01(\v2(.yandex.cloud.spark.v1.MaintenanceWindowR\x11maintenanceWindow\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"D\n" +
	"\x15UpdateClusterMetadata\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"C\n" +
	"\x14DeleteClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"<\n" +
	"\x15DeleteClusterMetadata\x12#\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\tclusterId\"B\n" +
	"\x13StartClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"5\n" +
	"\x14StartClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"A\n" +
	"\x12StopClusterRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\"4\n" +
	"\x13StopClusterMetadata\x12\x1d\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tR\tclusterId\"\x9e\x01\n" +
	"\x1cListClusterOperationsRequest\x12+\n" +
	"\n" +
	"cluster_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tclusterId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=200R\tpageToken\"\x95\x01\n" +
	"\x1dListClusterOperationsResponse\x12A\n" +
	"\n" +
	"operations\x18\x01 \x03(\v2!.yandex.cloud.operation.OperationR\n" +
	"operations\x121\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tB\t\x8a\xc81\x05<=200R\rnextPageToken2\xcb\a\n" +
	"\x0eClusterService\x12Q\n" +
	"\x03Get\x12(.yandex.cloud.spark.v1.GetClusterRequest\x1a\x1e.yandex.cloud.spark.v1.Cluster\"\x00\x12a\n" +
	"\x04List\x12*.yandex.cloud.spark.v1.ListClustersRequest\x1a+.yandex.cloud.spark.v1.ListClustersResponse\"\x00\x12~\n" +
	"\x06Create\x12+.yandex.cloud.spark.v1.CreateClusterRequest\x1a!.yandex.cloud.operation.Operation\"$\xb2\xd2* \n" +
	"\x15CreateClusterMetadata\x12\aCluster\x12~\n" +
	"\x06Update\x12+.yandex.cloud.spark.v1.UpdateClusterRequest\x1a!.yandex.cloud.operation.Operation\"$\xb2\xd2* \n" +
	"\x15UpdateClusterMetadata\x12\aCluster\x12\x8c\x01\n" +
	"\x06Delete\x12+.yandex.cloud.spark.v1.DeleteClusterRequest\x1a!.yandex.cloud.operation.Operation\"2\xb2\xd2*.\n" +
	"\x15DeleteClusterMetadata\x12\x15google.protobuf.Empty\x12{\n" +
	"\x05Start\x12*.yandex.cloud.spark.v1.StartClusterRequest\x1a!.yandex.cloud.operation.Operation\"#\xb2\xd2*\x1f\n" +
	"\x14StartClusterMetadata\x12\aCluster\x12x\n" +
	"\x04Stop\x12).yandex.cloud.spark.v1.StopClusterRequest\x1a!.yandex.cloud.operation.Operation\"\"\xb2\xd2*\x1e\n" +
	"\x13StopClusterMetadata\x12\aCluster\x12}\n" +
	"\x0eListOperations\x123.yandex.cloud.spark.v1.ListClusterOperationsRequest\x1a4.yandex.cloud.spark.v1.ListClusterOperationsResponse\"\x00B\\\n" +
	"\x19yandex.cloud.api.spark.v1Z?github.com/yandex-cloud/go-genproto/yandex/cloud/spark/v1;sparkb\x06proto3"

var (
	file_yandex_cloud_spark_v1_cluster_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_spark_v1_cluster_service_proto_rawDescData []byte
)

func file_yandex_cloud_spark_v1_cluster_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_spark_v1_cluster_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_spark_v1_cluster_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_spark_v1_cluster_service_proto_rawDesc), len(file_yandex_cloud_spark_v1_cluster_service_proto_rawDesc)))
	})
	return file_yandex_cloud_spark_v1_cluster_service_proto_rawDescData
}

var file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_yandex_cloud_spark_v1_cluster_service_proto_goTypes = []any{
	(*GetClusterRequest)(nil),             // 0: yandex.cloud.spark.v1.GetClusterRequest
	(*ListClustersRequest)(nil),           // 1: yandex.cloud.spark.v1.ListClustersRequest
	(*ListClustersResponse)(nil),          // 2: yandex.cloud.spark.v1.ListClustersResponse
	(*CreateClusterRequest)(nil),          // 3: yandex.cloud.spark.v1.CreateClusterRequest
	(*CreateClusterMetadata)(nil),         // 4: yandex.cloud.spark.v1.CreateClusterMetadata
	(*UpdateClusterRequest)(nil),          // 5: yandex.cloud.spark.v1.UpdateClusterRequest
	(*UpdateClusterMetadata)(nil),         // 6: yandex.cloud.spark.v1.UpdateClusterMetadata
	(*DeleteClusterRequest)(nil),          // 7: yandex.cloud.spark.v1.DeleteClusterRequest
	(*DeleteClusterMetadata)(nil),         // 8: yandex.cloud.spark.v1.DeleteClusterMetadata
	(*StartClusterRequest)(nil),           // 9: yandex.cloud.spark.v1.StartClusterRequest
	(*StartClusterMetadata)(nil),          // 10: yandex.cloud.spark.v1.StartClusterMetadata
	(*StopClusterRequest)(nil),            // 11: yandex.cloud.spark.v1.StopClusterRequest
	(*StopClusterMetadata)(nil),           // 12: yandex.cloud.spark.v1.StopClusterMetadata
	(*ListClusterOperationsRequest)(nil),  // 13: yandex.cloud.spark.v1.ListClusterOperationsRequest
	(*ListClusterOperationsResponse)(nil), // 14: yandex.cloud.spark.v1.ListClusterOperationsResponse
	nil,                                   // 15: yandex.cloud.spark.v1.CreateClusterRequest.LabelsEntry
	nil,                                   // 16: yandex.cloud.spark.v1.UpdateClusterRequest.LabelsEntry
	(*Cluster)(nil),                       // 17: yandex.cloud.spark.v1.Cluster
	(*ClusterConfig)(nil),                 // 18: yandex.cloud.spark.v1.ClusterConfig
	(*NetworkConfig)(nil),                 // 19: yandex.cloud.spark.v1.NetworkConfig
	(*LoggingConfig)(nil),                 // 20: yandex.cloud.spark.v1.LoggingConfig
	(*MaintenanceWindow)(nil),             // 21: yandex.cloud.spark.v1.MaintenanceWindow
	(*fieldmaskpb.FieldMask)(nil),         // 22: google.protobuf.FieldMask
	(*UpdateClusterConfigSpec)(nil),       // 23: yandex.cloud.spark.v1.UpdateClusterConfigSpec
	(*UpdateNetworkConfigSpec)(nil),       // 24: yandex.cloud.spark.v1.UpdateNetworkConfigSpec
	(*operation.Operation)(nil),           // 25: yandex.cloud.operation.Operation
}
var file_yandex_cloud_spark_v1_cluster_service_proto_depIdxs = []int32{
	17, // 0: yandex.cloud.spark.v1.ListClustersResponse.clusters:type_name -> yandex.cloud.spark.v1.Cluster
	15, // 1: yandex.cloud.spark.v1.CreateClusterRequest.labels:type_name -> yandex.cloud.spark.v1.CreateClusterRequest.LabelsEntry
	18, // 2: yandex.cloud.spark.v1.CreateClusterRequest.config:type_name -> yandex.cloud.spark.v1.ClusterConfig
	19, // 3: yandex.cloud.spark.v1.CreateClusterRequest.network:type_name -> yandex.cloud.spark.v1.NetworkConfig
	20, // 4: yandex.cloud.spark.v1.CreateClusterRequest.logging:type_name -> yandex.cloud.spark.v1.LoggingConfig
	21, // 5: yandex.cloud.spark.v1.CreateClusterRequest.maintenance_window:type_name -> yandex.cloud.spark.v1.MaintenanceWindow
	22, // 6: yandex.cloud.spark.v1.UpdateClusterRequest.update_mask:type_name -> google.protobuf.FieldMask
	16, // 7: yandex.cloud.spark.v1.UpdateClusterRequest.labels:type_name -> yandex.cloud.spark.v1.UpdateClusterRequest.LabelsEntry
	23, // 8: yandex.cloud.spark.v1.UpdateClusterRequest.config_spec:type_name -> yandex.cloud.spark.v1.UpdateClusterConfigSpec
	24, // 9: yandex.cloud.spark.v1.UpdateClusterRequest.network_spec:type_name -> yandex.cloud.spark.v1.UpdateNetworkConfigSpec
	20, // 10: yandex.cloud.spark.v1.UpdateClusterRequest.logging:type_name -> yandex.cloud.spark.v1.LoggingConfig
	21, // 11: yandex.cloud.spark.v1.UpdateClusterRequest.maintenance_window:type_name -> yandex.cloud.spark.v1.MaintenanceWindow
	25, // 12: yandex.cloud.spark.v1.ListClusterOperationsResponse.operations:type_name -> yandex.cloud.operation.Operation
	0,  // 13: yandex.cloud.spark.v1.ClusterService.Get:input_type -> yandex.cloud.spark.v1.GetClusterRequest
	1,  // 14: yandex.cloud.spark.v1.ClusterService.List:input_type -> yandex.cloud.spark.v1.ListClustersRequest
	3,  // 15: yandex.cloud.spark.v1.ClusterService.Create:input_type -> yandex.cloud.spark.v1.CreateClusterRequest
	5,  // 16: yandex.cloud.spark.v1.ClusterService.Update:input_type -> yandex.cloud.spark.v1.UpdateClusterRequest
	7,  // 17: yandex.cloud.spark.v1.ClusterService.Delete:input_type -> yandex.cloud.spark.v1.DeleteClusterRequest
	9,  // 18: yandex.cloud.spark.v1.ClusterService.Start:input_type -> yandex.cloud.spark.v1.StartClusterRequest
	11, // 19: yandex.cloud.spark.v1.ClusterService.Stop:input_type -> yandex.cloud.spark.v1.StopClusterRequest
	13, // 20: yandex.cloud.spark.v1.ClusterService.ListOperations:input_type -> yandex.cloud.spark.v1.ListClusterOperationsRequest
	17, // 21: yandex.cloud.spark.v1.ClusterService.Get:output_type -> yandex.cloud.spark.v1.Cluster
	2,  // 22: yandex.cloud.spark.v1.ClusterService.List:output_type -> yandex.cloud.spark.v1.ListClustersResponse
	25, // 23: yandex.cloud.spark.v1.ClusterService.Create:output_type -> yandex.cloud.operation.Operation
	25, // 24: yandex.cloud.spark.v1.ClusterService.Update:output_type -> yandex.cloud.operation.Operation
	25, // 25: yandex.cloud.spark.v1.ClusterService.Delete:output_type -> yandex.cloud.operation.Operation
	25, // 26: yandex.cloud.spark.v1.ClusterService.Start:output_type -> yandex.cloud.operation.Operation
	25, // 27: yandex.cloud.spark.v1.ClusterService.Stop:output_type -> yandex.cloud.operation.Operation
	14, // 28: yandex.cloud.spark.v1.ClusterService.ListOperations:output_type -> yandex.cloud.spark.v1.ListClusterOperationsResponse
	21, // [21:29] is the sub-list for method output_type
	13, // [13:21] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_yandex_cloud_spark_v1_cluster_service_proto_init() }
func file_yandex_cloud_spark_v1_cluster_service_proto_init() {
	if File_yandex_cloud_spark_v1_cluster_service_proto != nil {
		return
	}
	file_yandex_cloud_spark_v1_cluster_proto_init()
	file_yandex_cloud_spark_v1_maintenance_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_spark_v1_cluster_service_proto_rawDesc), len(file_yandex_cloud_spark_v1_cluster_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_spark_v1_cluster_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_spark_v1_cluster_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_spark_v1_cluster_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_spark_v1_cluster_service_proto = out.File
	file_yandex_cloud_spark_v1_cluster_service_proto_goTypes = nil
	file_yandex_cloud_spark_v1_cluster_service_proto_depIdxs = nil
}

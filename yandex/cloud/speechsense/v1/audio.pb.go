// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/speechsense/v1/audio.proto

package speechsense

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RawAudio_AudioEncoding int32

const (
	RawAudio_AUDIO_ENCODING_UNSPECIFIED RawAudio_AudioEncoding = 0
	// Audio bit depth 16-bit signed little-endian (Linear PCM).
	RawAudio_AUDIO_ENCODING_LINEAR16_PCM RawAudio_AudioEncoding = 1
)

// Enum value maps for RawAudio_AudioEncoding.
var (
	RawAudio_AudioEncoding_name = map[int32]string{
		0: "AUDIO_ENCODING_UNSPECIFIED",
		1: "AUDIO_ENCODING_LINEAR16_PCM",
	}
	RawAudio_AudioEncoding_value = map[string]int32{
		"AUDIO_ENCODING_UNSPECIFIED":  0,
		"AUDIO_ENCODING_LINEAR16_PCM": 1,
	}
)

func (x RawAudio_AudioEncoding) Enum() *RawAudio_AudioEncoding {
	p := new(RawAudio_AudioEncoding)
	*p = x
	return p
}

func (x RawAudio_AudioEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RawAudio_AudioEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_speechsense_v1_audio_proto_enumTypes[0].Descriptor()
}

func (RawAudio_AudioEncoding) Type() protoreflect.EnumType {
	return &file_yandex_cloud_speechsense_v1_audio_proto_enumTypes[0]
}

func (x RawAudio_AudioEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RawAudio_AudioEncoding.Descriptor instead.
func (RawAudio_AudioEncoding) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_audio_proto_rawDescGZIP(), []int{0, 0}
}

type ContainerAudio_ContainerAudioType int32

const (
	ContainerAudio_CONTAINER_AUDIO_TYPE_UNSPECIFIED ContainerAudio_ContainerAudioType = 0
	// Audio bit depth 16-bit signed little-endian (Linear PCM).
	ContainerAudio_CONTAINER_AUDIO_TYPE_WAV ContainerAudio_ContainerAudioType = 1
	// Data is encoded using the OPUS audio codec and compressed using the OGG container format.
	ContainerAudio_CONTAINER_AUDIO_TYPE_OGG_OPUS ContainerAudio_ContainerAudioType = 2
	// Data is encoded using MPEG-1/2 Layer III and compressed using the MP3 container format.
	ContainerAudio_CONTAINER_AUDIO_TYPE_MP3 ContainerAudio_ContainerAudioType = 3
)

// Enum value maps for ContainerAudio_ContainerAudioType.
var (
	ContainerAudio_ContainerAudioType_name = map[int32]string{
		0: "CONTAINER_AUDIO_TYPE_UNSPECIFIED",
		1: "CONTAINER_AUDIO_TYPE_WAV",
		2: "CONTAINER_AUDIO_TYPE_OGG_OPUS",
		3: "CONTAINER_AUDIO_TYPE_MP3",
	}
	ContainerAudio_ContainerAudioType_value = map[string]int32{
		"CONTAINER_AUDIO_TYPE_UNSPECIFIED": 0,
		"CONTAINER_AUDIO_TYPE_WAV":         1,
		"CONTAINER_AUDIO_TYPE_OGG_OPUS":    2,
		"CONTAINER_AUDIO_TYPE_MP3":         3,
	}
)

func (x ContainerAudio_ContainerAudioType) Enum() *ContainerAudio_ContainerAudioType {
	p := new(ContainerAudio_ContainerAudioType)
	*p = x
	return p
}

func (x ContainerAudio_ContainerAudioType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerAudio_ContainerAudioType) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_speechsense_v1_audio_proto_enumTypes[1].Descriptor()
}

func (ContainerAudio_ContainerAudioType) Type() protoreflect.EnumType {
	return &file_yandex_cloud_speechsense_v1_audio_proto_enumTypes[1]
}

func (x ContainerAudio_ContainerAudioType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContainerAudio_ContainerAudioType.Descriptor instead.
func (ContainerAudio_ContainerAudioType) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_audio_proto_rawDescGZIP(), []int{1, 0}
}

// RAW Audio format spec (no container to infer type). Used in AudioFormat options.
type RawAudio struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of audio encoding
	AudioEncoding RawAudio_AudioEncoding `protobuf:"varint,1,opt,name=audio_encoding,json=audioEncoding,proto3,enum=yandex.cloud.speechsense.v1.RawAudio_AudioEncoding" json:"audio_encoding,omitempty"`
	// PCM sample rate
	SampleRateHertz int64 `protobuf:"varint,2,opt,name=sample_rate_hertz,json=sampleRateHertz,proto3" json:"sample_rate_hertz,omitempty"`
	// PCM channel count.
	AudioChannelCount int64 `protobuf:"varint,3,opt,name=audio_channel_count,json=audioChannelCount,proto3" json:"audio_channel_count,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RawAudio) Reset() {
	*x = RawAudio{}
	mi := &file_yandex_cloud_speechsense_v1_audio_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RawAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawAudio) ProtoMessage() {}

func (x *RawAudio) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_audio_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawAudio.ProtoReflect.Descriptor instead.
func (*RawAudio) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_audio_proto_rawDescGZIP(), []int{0}
}

func (x *RawAudio) GetAudioEncoding() RawAudio_AudioEncoding {
	if x != nil {
		return x.AudioEncoding
	}
	return RawAudio_AUDIO_ENCODING_UNSPECIFIED
}

func (x *RawAudio) GetSampleRateHertz() int64 {
	if x != nil {
		return x.SampleRateHertz
	}
	return 0
}

func (x *RawAudio) GetAudioChannelCount() int64 {
	if x != nil {
		return x.AudioChannelCount
	}
	return 0
}

// Audio with fixed type in container. Used in AudioFormat options.
type ContainerAudio struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of audio container.
	ContainerAudioType ContainerAudio_ContainerAudioType `protobuf:"varint,1,opt,name=container_audio_type,json=containerAudioType,proto3,enum=yandex.cloud.speechsense.v1.ContainerAudio_ContainerAudioType" json:"container_audio_type,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ContainerAudio) Reset() {
	*x = ContainerAudio{}
	mi := &file_yandex_cloud_speechsense_v1_audio_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerAudio) ProtoMessage() {}

func (x *ContainerAudio) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_audio_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerAudio.ProtoReflect.Descriptor instead.
func (*ContainerAudio) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_audio_proto_rawDescGZIP(), []int{1}
}

func (x *ContainerAudio) GetContainerAudioType() ContainerAudio_ContainerAudioType {
	if x != nil {
		return x.ContainerAudioType
	}
	return ContainerAudio_CONTAINER_AUDIO_TYPE_UNSPECIFIED
}

// Audio format options.
type AudioMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to AudioFormat:
	//
	//	*AudioMetadata_RawAudio
	//	*AudioMetadata_ContainerAudio
	AudioFormat   isAudioMetadata_AudioFormat `protobuf_oneof:"AudioFormat"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioMetadata) Reset() {
	*x = AudioMetadata{}
	mi := &file_yandex_cloud_speechsense_v1_audio_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioMetadata) ProtoMessage() {}

func (x *AudioMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_audio_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioMetadata.ProtoReflect.Descriptor instead.
func (*AudioMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_audio_proto_rawDescGZIP(), []int{2}
}

func (x *AudioMetadata) GetAudioFormat() isAudioMetadata_AudioFormat {
	if x != nil {
		return x.AudioFormat
	}
	return nil
}

func (x *AudioMetadata) GetRawAudio() *RawAudio {
	if x != nil {
		if x, ok := x.AudioFormat.(*AudioMetadata_RawAudio); ok {
			return x.RawAudio
		}
	}
	return nil
}

func (x *AudioMetadata) GetContainerAudio() *ContainerAudio {
	if x != nil {
		if x, ok := x.AudioFormat.(*AudioMetadata_ContainerAudio); ok {
			return x.ContainerAudio
		}
	}
	return nil
}

type isAudioMetadata_AudioFormat interface {
	isAudioMetadata_AudioFormat()
}

type AudioMetadata_RawAudio struct {
	// Audio without container.
	RawAudio *RawAudio `protobuf:"bytes,1,opt,name=raw_audio,json=rawAudio,proto3,oneof"`
}

type AudioMetadata_ContainerAudio struct {
	// Audio is wrapped in container.
	ContainerAudio *ContainerAudio `protobuf:"bytes,2,opt,name=container_audio,json=containerAudio,proto3,oneof"`
}

func (*AudioMetadata_RawAudio) isAudioMetadata_AudioFormat() {}

func (*AudioMetadata_ContainerAudio) isAudioMetadata_AudioFormat() {}

// Data chunk with audio.
type AudioChunk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Bytes with audio data.
	Data          []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioChunk) Reset() {
	*x = AudioChunk{}
	mi := &file_yandex_cloud_speechsense_v1_audio_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioChunk) ProtoMessage() {}

func (x *AudioChunk) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_audio_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioChunk.ProtoReflect.Descriptor instead.
func (*AudioChunk) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_audio_proto_rawDescGZIP(), []int{3}
}

func (x *AudioChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Streaming audio request
// First message should be audio metadata.
// The next messages are audio data chunks.
type AudioStreamingRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to AudioEvent:
	//
	//	*AudioStreamingRequest_AudioMetadata
	//	*AudioStreamingRequest_Chunk
	AudioEvent    isAudioStreamingRequest_AudioEvent `protobuf_oneof:"AudioEvent"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioStreamingRequest) Reset() {
	*x = AudioStreamingRequest{}
	mi := &file_yandex_cloud_speechsense_v1_audio_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioStreamingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioStreamingRequest) ProtoMessage() {}

func (x *AudioStreamingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_audio_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioStreamingRequest.ProtoReflect.Descriptor instead.
func (*AudioStreamingRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_audio_proto_rawDescGZIP(), []int{4}
}

func (x *AudioStreamingRequest) GetAudioEvent() isAudioStreamingRequest_AudioEvent {
	if x != nil {
		return x.AudioEvent
	}
	return nil
}

func (x *AudioStreamingRequest) GetAudioMetadata() *AudioMetadata {
	if x != nil {
		if x, ok := x.AudioEvent.(*AudioStreamingRequest_AudioMetadata); ok {
			return x.AudioMetadata
		}
	}
	return nil
}

func (x *AudioStreamingRequest) GetChunk() *AudioChunk {
	if x != nil {
		if x, ok := x.AudioEvent.(*AudioStreamingRequest_Chunk); ok {
			return x.Chunk
		}
	}
	return nil
}

type isAudioStreamingRequest_AudioEvent interface {
	isAudioStreamingRequest_AudioEvent()
}

type AudioStreamingRequest_AudioMetadata struct {
	// Session options. Should be the first message from user.
	AudioMetadata *AudioMetadata `protobuf:"bytes,1,opt,name=audio_metadata,json=audioMetadata,proto3,oneof"`
}

type AudioStreamingRequest_Chunk struct {
	// Chunk with audio data.
	Chunk *AudioChunk `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*AudioStreamingRequest_AudioMetadata) isAudioStreamingRequest_AudioEvent() {}

func (*AudioStreamingRequest_Chunk) isAudioStreamingRequest_AudioEvent() {}

// request for sending small audios (< 128 mb) in one go
type AudioRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// audio metadata
	AudioMetadata *AudioMetadata `protobuf:"bytes,1,opt,name=audio_metadata,json=audioMetadata,proto3" json:"audio_metadata,omitempty"`
	// Bytes with audio data.
	AudioData     *AudioChunk `protobuf:"bytes,2,opt,name=audio_data,json=audioData,proto3" json:"audio_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioRequest) Reset() {
	*x = AudioRequest{}
	mi := &file_yandex_cloud_speechsense_v1_audio_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioRequest) ProtoMessage() {}

func (x *AudioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_audio_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioRequest.ProtoReflect.Descriptor instead.
func (*AudioRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_audio_proto_rawDescGZIP(), []int{5}
}

func (x *AudioRequest) GetAudioMetadata() *AudioMetadata {
	if x != nil {
		return x.AudioMetadata
	}
	return nil
}

func (x *AudioRequest) GetAudioData() *AudioChunk {
	if x != nil {
		return x.AudioData
	}
	return nil
}

var File_yandex_cloud_speechsense_v1_audio_proto protoreflect.FileDescriptor

const file_yandex_cloud_speechsense_v1_audio_proto_rawDesc = "" +
	"\n" +
	"'yandex/cloud/speechsense/v1/audio.proto\x12\x1byandex.cloud.speechsense.v1\"\x94\x02\n" +
	"\bRawAudio\x12Z\n" +
	"\x0eaudio_encoding\x18\x01 \x01(\x0e23.yandex.cloud.speechsense.v1.RawAudio.AudioEncodingR\raudioEncoding\x12*\n" +
	"\x11sample_rate_hertz\x18\x02 \x01(\x03R\x0fsampleRateHertz\x12.\n" +
	"\x13audio_channel_count\x18\x03 \x01(\x03R\x11audioChannelCount\"P\n" +
	"\rAudioEncoding\x12\x1e\n" +
	"\x1aAUDIO_ENCODING_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bAUDIO_ENCODING_LINEAR16_PCM\x10\x01\"\x9e\x02\n" +
	"\x0eContainerAudio\x12p\n" +
	"\x14container_audio_type\x18\x01 \x01(\x0e2>.yandex.cloud.speechsense.v1.ContainerAudio.ContainerAudioTypeR\x12containerAudioType\"\x99\x01\n" +
	"\x12ContainerAudioType\x12$\n" +
	" CONTAINER_AUDIO_TYPE_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18CONTAINER_AUDIO_TYPE_WAV\x10\x01\x12!\n" +
	"\x1dCONTAINER_AUDIO_TYPE_OGG_OPUS\x10\x02\x12\x1c\n" +
	"\x18CONTAINER_AUDIO_TYPE_MP3\x10\x03\"\xbc\x01\n" +
	"\rAudioMetadata\x12D\n" +
	"\traw_audio\x18\x01 \x01(\v2%.yandex.cloud.speechsense.v1.RawAudioH\x00R\brawAudio\x12V\n" +
	"\x0fcontainer_audio\x18\x02 \x01(\v2+.yandex.cloud.speechsense.v1.ContainerAudioH\x00R\x0econtainerAudioB\r\n" +
	"\vAudioFormat\" \n" +
	"\n" +
	"AudioChunk\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\"\xbb\x01\n" +
	"\x15AudioStreamingRequest\x12S\n" +
	"\x0eaudio_metadata\x18\x01 \x01(\v2*.yandex.cloud.speechsense.v1.AudioMetadataH\x00R\raudioMetadata\x12?\n" +
	"\x05chunk\x18\x02 \x01(\v2'.yandex.cloud.speechsense.v1.AudioChunkH\x00R\x05chunkB\f\n" +
	"\n" +
	"AudioEvent\"\xa9\x01\n" +
	"\fAudioRequest\x12Q\n" +
	"\x0eaudio_metadata\x18\x01 \x01(\v2*.yandex.cloud.speechsense.v1.AudioMetadataR\raudioMetadata\x12F\n" +
	"\n" +
	"audio_data\x18\x02 \x01(\v2'.yandex.cloud.speechsense.v1.AudioChunkR\taudioDataBz\n" +
	"\x1fyandex.cloud.api.speechsense.v1B\n" +
	"AudioProtoZKgithub.com/yandex-cloud/go-genproto/yandex/cloud/speechsense/v1;speechsenseb\x06proto3"

var (
	file_yandex_cloud_speechsense_v1_audio_proto_rawDescOnce sync.Once
	file_yandex_cloud_speechsense_v1_audio_proto_rawDescData []byte
)

func file_yandex_cloud_speechsense_v1_audio_proto_rawDescGZIP() []byte {
	file_yandex_cloud_speechsense_v1_audio_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_speechsense_v1_audio_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_speechsense_v1_audio_proto_rawDesc), len(file_yandex_cloud_speechsense_v1_audio_proto_rawDesc)))
	})
	return file_yandex_cloud_speechsense_v1_audio_proto_rawDescData
}

var file_yandex_cloud_speechsense_v1_audio_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_yandex_cloud_speechsense_v1_audio_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_yandex_cloud_speechsense_v1_audio_proto_goTypes = []any{
	(RawAudio_AudioEncoding)(0),            // 0: yandex.cloud.speechsense.v1.RawAudio.AudioEncoding
	(ContainerAudio_ContainerAudioType)(0), // 1: yandex.cloud.speechsense.v1.ContainerAudio.ContainerAudioType
	(*RawAudio)(nil),                       // 2: yandex.cloud.speechsense.v1.RawAudio
	(*ContainerAudio)(nil),                 // 3: yandex.cloud.speechsense.v1.ContainerAudio
	(*AudioMetadata)(nil),                  // 4: yandex.cloud.speechsense.v1.AudioMetadata
	(*AudioChunk)(nil),                     // 5: yandex.cloud.speechsense.v1.AudioChunk
	(*AudioStreamingRequest)(nil),          // 6: yandex.cloud.speechsense.v1.AudioStreamingRequest
	(*AudioRequest)(nil),                   // 7: yandex.cloud.speechsense.v1.AudioRequest
}
var file_yandex_cloud_speechsense_v1_audio_proto_depIdxs = []int32{
	0, // 0: yandex.cloud.speechsense.v1.RawAudio.audio_encoding:type_name -> yandex.cloud.speechsense.v1.RawAudio.AudioEncoding
	1, // 1: yandex.cloud.speechsense.v1.ContainerAudio.container_audio_type:type_name -> yandex.cloud.speechsense.v1.ContainerAudio.ContainerAudioType
	2, // 2: yandex.cloud.speechsense.v1.AudioMetadata.raw_audio:type_name -> yandex.cloud.speechsense.v1.RawAudio
	3, // 3: yandex.cloud.speechsense.v1.AudioMetadata.container_audio:type_name -> yandex.cloud.speechsense.v1.ContainerAudio
	4, // 4: yandex.cloud.speechsense.v1.AudioStreamingRequest.audio_metadata:type_name -> yandex.cloud.speechsense.v1.AudioMetadata
	5, // 5: yandex.cloud.speechsense.v1.AudioStreamingRequest.chunk:type_name -> yandex.cloud.speechsense.v1.AudioChunk
	4, // 6: yandex.cloud.speechsense.v1.AudioRequest.audio_metadata:type_name -> yandex.cloud.speechsense.v1.AudioMetadata
	5, // 7: yandex.cloud.speechsense.v1.AudioRequest.audio_data:type_name -> yandex.cloud.speechsense.v1.AudioChunk
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_yandex_cloud_speechsense_v1_audio_proto_init() }
func file_yandex_cloud_speechsense_v1_audio_proto_init() {
	if File_yandex_cloud_speechsense_v1_audio_proto != nil {
		return
	}
	file_yandex_cloud_speechsense_v1_audio_proto_msgTypes[2].OneofWrappers = []any{
		(*AudioMetadata_RawAudio)(nil),
		(*AudioMetadata_ContainerAudio)(nil),
	}
	file_yandex_cloud_speechsense_v1_audio_proto_msgTypes[4].OneofWrappers = []any{
		(*AudioStreamingRequest_AudioMetadata)(nil),
		(*AudioStreamingRequest_Chunk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_speechsense_v1_audio_proto_rawDesc), len(file_yandex_cloud_speechsense_v1_audio_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_speechsense_v1_audio_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_speechsense_v1_audio_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_speechsense_v1_audio_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_speechsense_v1_audio_proto_msgTypes,
	}.Build()
	File_yandex_cloud_speechsense_v1_audio_proto = out.File
	file_yandex_cloud_speechsense_v1_audio_proto_goTypes = nil
	file_yandex_cloud_speechsense_v1_audio_proto_depIdxs = nil
}

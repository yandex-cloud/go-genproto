// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: yandex/cloud/speechsense/v1/search.proto

package speechsense

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SortOrder int32

const (
	SortOrder_SORT_ORDER_UNSPECIFIED SortOrder = 0
	SortOrder_SORT_ORDER_ASC         SortOrder = 1
	SortOrder_SORT_ORDER_DESC        SortOrder = 2
)

// Enum value maps for SortOrder.
var (
	SortOrder_name = map[int32]string{
		0: "SORT_ORDER_UNSPECIFIED",
		1: "SORT_ORDER_ASC",
		2: "SORT_ORDER_DESC",
	}
	SortOrder_value = map[string]int32{
		"SORT_ORDER_UNSPECIFIED": 0,
		"SORT_ORDER_ASC":         1,
		"SORT_ORDER_DESC":        2,
	}
)

func (x SortOrder) Enum() *SortOrder {
	p := new(SortOrder)
	*p = x
	return p
}

func (x SortOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_speechsense_v1_search_proto_enumTypes[0].Descriptor()
}

func (SortOrder) Type() protoreflect.EnumType {
	return &file_yandex_cloud_speechsense_v1_search_proto_enumTypes[0]
}

func (x SortOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOrder.Descriptor instead.
func (SortOrder) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_search_proto_rawDescGZIP(), []int{0}
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// metadata key (user.some_key / system.created_at / analysis.speechkit.duration)
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are assignable to Filter:
	//
	//	*Filter_AnyMatch
	//	*Filter_IntRange
	//	*Filter_DoubleRange
	//	*Filter_DateRange
	//	*Filter_DurationRange
	//	*Filter_BooleanMatch
	Filter  isFilter_Filter `protobuf_oneof:"filter"`
	Inverse bool            `protobuf:"varint,7,opt,name=inverse,proto3" json:"inverse,omitempty"`
	// channel number to apply filter for, starting with 0. applies to all channels if not specified
	ChannelNumber *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_search_proto_rawDescGZIP(), []int{0}
}

func (x *Filter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (m *Filter) GetFilter() isFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *Filter) GetAnyMatch() *AnyMatchFilter {
	if x, ok := x.GetFilter().(*Filter_AnyMatch); ok {
		return x.AnyMatch
	}
	return nil
}

func (x *Filter) GetIntRange() *IntRangeFilter {
	if x, ok := x.GetFilter().(*Filter_IntRange); ok {
		return x.IntRange
	}
	return nil
}

func (x *Filter) GetDoubleRange() *DoubleRangeFilter {
	if x, ok := x.GetFilter().(*Filter_DoubleRange); ok {
		return x.DoubleRange
	}
	return nil
}

func (x *Filter) GetDateRange() *DateRangeFilter {
	if x, ok := x.GetFilter().(*Filter_DateRange); ok {
		return x.DateRange
	}
	return nil
}

func (x *Filter) GetDurationRange() *DurationRangeFilter {
	if x, ok := x.GetFilter().(*Filter_DurationRange); ok {
		return x.DurationRange
	}
	return nil
}

func (x *Filter) GetBooleanMatch() *BooleanFilter {
	if x, ok := x.GetFilter().(*Filter_BooleanMatch); ok {
		return x.BooleanMatch
	}
	return nil
}

func (x *Filter) GetInverse() bool {
	if x != nil {
		return x.Inverse
	}
	return false
}

func (x *Filter) GetChannelNumber() *wrapperspb.Int64Value {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

type isFilter_Filter interface {
	isFilter_Filter()
}

type Filter_AnyMatch struct {
	// find talk matched by any text filters
	AnyMatch *AnyMatchFilter `protobuf:"bytes,2,opt,name=any_match,json=anyMatch,proto3,oneof"`
}

type Filter_IntRange struct {
	// find talks with value from int range
	IntRange *IntRangeFilter `protobuf:"bytes,3,opt,name=int_range,json=intRange,proto3,oneof"`
}

type Filter_DoubleRange struct {
	// find talks with value from double range
	DoubleRange *DoubleRangeFilter `protobuf:"bytes,4,opt,name=double_range,json=doubleRange,proto3,oneof"`
}

type Filter_DateRange struct {
	// find talks with value from date range
	DateRange *DateRangeFilter `protobuf:"bytes,5,opt,name=date_range,json=dateRange,proto3,oneof"`
}

type Filter_DurationRange struct {
	// find talks with value from duration range
	DurationRange *DurationRangeFilter `protobuf:"bytes,6,opt,name=duration_range,json=durationRange,proto3,oneof"`
}

type Filter_BooleanMatch struct {
	// find talks with value equals boolean
	BooleanMatch *BooleanFilter `protobuf:"bytes,9,opt,name=boolean_match,json=booleanMatch,proto3,oneof"`
}

func (*Filter_AnyMatch) isFilter_Filter() {}

func (*Filter_IntRange) isFilter_Filter() {}

func (*Filter_DoubleRange) isFilter_Filter() {}

func (*Filter_DateRange) isFilter_Filter() {}

func (*Filter_DurationRange) isFilter_Filter() {}

func (*Filter_BooleanMatch) isFilter_Filter() {}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// should or should NOT match
	Inverse bool `protobuf:"varint,2,opt,name=inverse,proto3" json:"inverse,omitempty"`
	// id of channel to search ("1", "2", ..., any channel if not set)
	ChannelNumber *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_search_proto_rawDescGZIP(), []int{1}
}

func (x *Query) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Query) GetInverse() bool {
	if x != nil {
		return x.Inverse
	}
	return false
}

func (x *Query) GetChannelNumber() *wrapperspb.Int64Value {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

type AnyMatchFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values list to match with "OR" operator
	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *AnyMatchFilter) Reset() {
	*x = AnyMatchFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnyMatchFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyMatchFilter) ProtoMessage() {}

func (x *AnyMatchFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyMatchFilter.ProtoReflect.Descriptor instead.
func (*AnyMatchFilter) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_search_proto_rawDescGZIP(), []int{2}
}

func (x *AnyMatchFilter) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// indicates whether to include range boundaries
type BoundsInclusive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// include from bound
	FromInclusive bool `protobuf:"varint,1,opt,name=from_inclusive,json=fromInclusive,proto3" json:"from_inclusive,omitempty"`
	// include to bound
	ToInclusive bool `protobuf:"varint,2,opt,name=to_inclusive,json=toInclusive,proto3" json:"to_inclusive,omitempty"`
}

func (x *BoundsInclusive) Reset() {
	*x = BoundsInclusive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoundsInclusive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundsInclusive) ProtoMessage() {}

func (x *BoundsInclusive) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundsInclusive.ProtoReflect.Descriptor instead.
func (*BoundsInclusive) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_search_proto_rawDescGZIP(), []int{3}
}

func (x *BoundsInclusive) GetFromInclusive() bool {
	if x != nil {
		return x.FromInclusive
	}
	return false
}

func (x *BoundsInclusive) GetToInclusive() bool {
	if x != nil {
		return x.ToInclusive
	}
	return false
}

type IntRangeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromValue       *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=from_value,json=fromValue,proto3" json:"from_value,omitempty"`
	ToValue         *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=to_value,json=toValue,proto3" json:"to_value,omitempty"`
	BoundsInclusive *BoundsInclusive       `protobuf:"bytes,3,opt,name=bounds_inclusive,json=boundsInclusive,proto3" json:"bounds_inclusive,omitempty"`
}

func (x *IntRangeFilter) Reset() {
	*x = IntRangeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntRangeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntRangeFilter) ProtoMessage() {}

func (x *IntRangeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntRangeFilter.ProtoReflect.Descriptor instead.
func (*IntRangeFilter) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_search_proto_rawDescGZIP(), []int{4}
}

func (x *IntRangeFilter) GetFromValue() *wrapperspb.Int64Value {
	if x != nil {
		return x.FromValue
	}
	return nil
}

func (x *IntRangeFilter) GetToValue() *wrapperspb.Int64Value {
	if x != nil {
		return x.ToValue
	}
	return nil
}

func (x *IntRangeFilter) GetBoundsInclusive() *BoundsInclusive {
	if x != nil {
		return x.BoundsInclusive
	}
	return nil
}

type DoubleRangeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromValue       *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=from_value,json=fromValue,proto3" json:"from_value,omitempty"`
	ToValue         *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=to_value,json=toValue,proto3" json:"to_value,omitempty"`
	BoundsInclusive *BoundsInclusive        `protobuf:"bytes,3,opt,name=bounds_inclusive,json=boundsInclusive,proto3" json:"bounds_inclusive,omitempty"`
}

func (x *DoubleRangeFilter) Reset() {
	*x = DoubleRangeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleRangeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleRangeFilter) ProtoMessage() {}

func (x *DoubleRangeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleRangeFilter.ProtoReflect.Descriptor instead.
func (*DoubleRangeFilter) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_search_proto_rawDescGZIP(), []int{5}
}

func (x *DoubleRangeFilter) GetFromValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.FromValue
	}
	return nil
}

func (x *DoubleRangeFilter) GetToValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.ToValue
	}
	return nil
}

func (x *DoubleRangeFilter) GetBoundsInclusive() *BoundsInclusive {
	if x != nil {
		return x.BoundsInclusive
	}
	return nil
}

type DateRangeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromValue       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from_value,json=fromValue,proto3" json:"from_value,omitempty"`
	ToValue         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to_value,json=toValue,proto3" json:"to_value,omitempty"`
	BoundsInclusive *BoundsInclusive       `protobuf:"bytes,3,opt,name=bounds_inclusive,json=boundsInclusive,proto3" json:"bounds_inclusive,omitempty"`
}

func (x *DateRangeFilter) Reset() {
	*x = DateRangeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateRangeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateRangeFilter) ProtoMessage() {}

func (x *DateRangeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateRangeFilter.ProtoReflect.Descriptor instead.
func (*DateRangeFilter) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_search_proto_rawDescGZIP(), []int{6}
}

func (x *DateRangeFilter) GetFromValue() *timestamppb.Timestamp {
	if x != nil {
		return x.FromValue
	}
	return nil
}

func (x *DateRangeFilter) GetToValue() *timestamppb.Timestamp {
	if x != nil {
		return x.ToValue
	}
	return nil
}

func (x *DateRangeFilter) GetBoundsInclusive() *BoundsInclusive {
	if x != nil {
		return x.BoundsInclusive
	}
	return nil
}

type DurationRangeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromValue       *durationpb.Duration `protobuf:"bytes,1,opt,name=from_value,json=fromValue,proto3" json:"from_value,omitempty"`
	ToValue         *durationpb.Duration `protobuf:"bytes,2,opt,name=to_value,json=toValue,proto3" json:"to_value,omitempty"`
	BoundsInclusive *BoundsInclusive     `protobuf:"bytes,3,opt,name=bounds_inclusive,json=boundsInclusive,proto3" json:"bounds_inclusive,omitempty"`
}

func (x *DurationRangeFilter) Reset() {
	*x = DurationRangeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DurationRangeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurationRangeFilter) ProtoMessage() {}

func (x *DurationRangeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurationRangeFilter.ProtoReflect.Descriptor instead.
func (*DurationRangeFilter) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_search_proto_rawDescGZIP(), []int{7}
}

func (x *DurationRangeFilter) GetFromValue() *durationpb.Duration {
	if x != nil {
		return x.FromValue
	}
	return nil
}

func (x *DurationRangeFilter) GetToValue() *durationpb.Duration {
	if x != nil {
		return x.ToValue
	}
	return nil
}

func (x *DurationRangeFilter) GetBoundsInclusive() *BoundsInclusive {
	if x != nil {
		return x.BoundsInclusive
	}
	return nil
}

type BooleanFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BooleanFilter) Reset() {
	*x = BooleanFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanFilter) ProtoMessage() {}

func (x *BooleanFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanFilter.ProtoReflect.Descriptor instead.
func (*BooleanFilter) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_search_proto_rawDescGZIP(), []int{8}
}

func (x *BooleanFilter) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type SortData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*SortField `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *SortData) Reset() {
	*x = SortData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortData) ProtoMessage() {}

func (x *SortData) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortData.ProtoReflect.Descriptor instead.
func (*SortData) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_search_proto_rawDescGZIP(), []int{9}
}

func (x *SortData) GetFields() []*SortField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type SortField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sorting key
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// sorting order by current `field`
	Order SortOrder `protobuf:"varint,2,opt,name=order,proto3,enum=yandex.cloud.speechsense.v1.SortOrder" json:"order,omitempty"`
	// number of field in comparing order (sort by key1 (position = 0), then key2 (position = 1), then key3...)
	Position int64 `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *SortField) Reset() {
	*x = SortField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortField) ProtoMessage() {}

func (x *SortField) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_speechsense_v1_search_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortField.ProtoReflect.Descriptor instead.
func (*SortField) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_speechsense_v1_search_proto_rawDescGZIP(), []int{10}
}

func (x *SortField) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SortField) GetOrder() SortOrder {
	if x != nil {
		return x.Order
	}
	return SortOrder_SORT_ORDER_UNSPECIFIED
}

func (x *SortField) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

var File_yandex_cloud_speechsense_v1_search_proto protoreflect.FileDescriptor

var file_yandex_cloud_speechsense_v1_search_proto_rawDesc = []byte{
	0x0a, 0x28, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73,
	0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xec, 0x04, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x09, 0x61, 0x6e, 0x79, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65,
	0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x61, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x4a, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x53, 0x0a,
	0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x59, 0x0a, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73,
	0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x0d,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x08, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x79, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x28, 0x0a, 0x0e, 0x41, 0x6e, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x0f,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x6f,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x0e, 0x49, 0x6e,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0a,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x57, 0x0a, 0x10, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x11, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x08,
	0x74, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x6f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22, 0xdc,
	0x01, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x74, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x74, 0x6f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22, 0xde, 0x01,
	0x0a, 0x13, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x34, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x6f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22, 0x25,
	0x0a, 0x0d, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x3e, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0x7b, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x50,
	0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x53,
	0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x52, 0x54, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x43, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x02,
	0x42, 0x7b, 0x0a, 0x1f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x42, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x2f, 0x76,
	0x31, 0x3b, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_speechsense_v1_search_proto_rawDescOnce sync.Once
	file_yandex_cloud_speechsense_v1_search_proto_rawDescData = file_yandex_cloud_speechsense_v1_search_proto_rawDesc
)

func file_yandex_cloud_speechsense_v1_search_proto_rawDescGZIP() []byte {
	file_yandex_cloud_speechsense_v1_search_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_speechsense_v1_search_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_speechsense_v1_search_proto_rawDescData)
	})
	return file_yandex_cloud_speechsense_v1_search_proto_rawDescData
}

var file_yandex_cloud_speechsense_v1_search_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yandex_cloud_speechsense_v1_search_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_yandex_cloud_speechsense_v1_search_proto_goTypes = []any{
	(SortOrder)(0),                 // 0: yandex.cloud.speechsense.v1.SortOrder
	(*Filter)(nil),                 // 1: yandex.cloud.speechsense.v1.Filter
	(*Query)(nil),                  // 2: yandex.cloud.speechsense.v1.Query
	(*AnyMatchFilter)(nil),         // 3: yandex.cloud.speechsense.v1.AnyMatchFilter
	(*BoundsInclusive)(nil),        // 4: yandex.cloud.speechsense.v1.BoundsInclusive
	(*IntRangeFilter)(nil),         // 5: yandex.cloud.speechsense.v1.IntRangeFilter
	(*DoubleRangeFilter)(nil),      // 6: yandex.cloud.speechsense.v1.DoubleRangeFilter
	(*DateRangeFilter)(nil),        // 7: yandex.cloud.speechsense.v1.DateRangeFilter
	(*DurationRangeFilter)(nil),    // 8: yandex.cloud.speechsense.v1.DurationRangeFilter
	(*BooleanFilter)(nil),          // 9: yandex.cloud.speechsense.v1.BooleanFilter
	(*SortData)(nil),               // 10: yandex.cloud.speechsense.v1.SortData
	(*SortField)(nil),              // 11: yandex.cloud.speechsense.v1.SortField
	(*wrapperspb.Int64Value)(nil),  // 12: google.protobuf.Int64Value
	(*wrapperspb.DoubleValue)(nil), // 13: google.protobuf.DoubleValue
	(*timestamppb.Timestamp)(nil),  // 14: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),    // 15: google.protobuf.Duration
}
var file_yandex_cloud_speechsense_v1_search_proto_depIdxs = []int32{
	3,  // 0: yandex.cloud.speechsense.v1.Filter.any_match:type_name -> yandex.cloud.speechsense.v1.AnyMatchFilter
	5,  // 1: yandex.cloud.speechsense.v1.Filter.int_range:type_name -> yandex.cloud.speechsense.v1.IntRangeFilter
	6,  // 2: yandex.cloud.speechsense.v1.Filter.double_range:type_name -> yandex.cloud.speechsense.v1.DoubleRangeFilter
	7,  // 3: yandex.cloud.speechsense.v1.Filter.date_range:type_name -> yandex.cloud.speechsense.v1.DateRangeFilter
	8,  // 4: yandex.cloud.speechsense.v1.Filter.duration_range:type_name -> yandex.cloud.speechsense.v1.DurationRangeFilter
	9,  // 5: yandex.cloud.speechsense.v1.Filter.boolean_match:type_name -> yandex.cloud.speechsense.v1.BooleanFilter
	12, // 6: yandex.cloud.speechsense.v1.Filter.channel_number:type_name -> google.protobuf.Int64Value
	12, // 7: yandex.cloud.speechsense.v1.Query.channel_number:type_name -> google.protobuf.Int64Value
	12, // 8: yandex.cloud.speechsense.v1.IntRangeFilter.from_value:type_name -> google.protobuf.Int64Value
	12, // 9: yandex.cloud.speechsense.v1.IntRangeFilter.to_value:type_name -> google.protobuf.Int64Value
	4,  // 10: yandex.cloud.speechsense.v1.IntRangeFilter.bounds_inclusive:type_name -> yandex.cloud.speechsense.v1.BoundsInclusive
	13, // 11: yandex.cloud.speechsense.v1.DoubleRangeFilter.from_value:type_name -> google.protobuf.DoubleValue
	13, // 12: yandex.cloud.speechsense.v1.DoubleRangeFilter.to_value:type_name -> google.protobuf.DoubleValue
	4,  // 13: yandex.cloud.speechsense.v1.DoubleRangeFilter.bounds_inclusive:type_name -> yandex.cloud.speechsense.v1.BoundsInclusive
	14, // 14: yandex.cloud.speechsense.v1.DateRangeFilter.from_value:type_name -> google.protobuf.Timestamp
	14, // 15: yandex.cloud.speechsense.v1.DateRangeFilter.to_value:type_name -> google.protobuf.Timestamp
	4,  // 16: yandex.cloud.speechsense.v1.DateRangeFilter.bounds_inclusive:type_name -> yandex.cloud.speechsense.v1.BoundsInclusive
	15, // 17: yandex.cloud.speechsense.v1.DurationRangeFilter.from_value:type_name -> google.protobuf.Duration
	15, // 18: yandex.cloud.speechsense.v1.DurationRangeFilter.to_value:type_name -> google.protobuf.Duration
	4,  // 19: yandex.cloud.speechsense.v1.DurationRangeFilter.bounds_inclusive:type_name -> yandex.cloud.speechsense.v1.BoundsInclusive
	11, // 20: yandex.cloud.speechsense.v1.SortData.fields:type_name -> yandex.cloud.speechsense.v1.SortField
	0,  // 21: yandex.cloud.speechsense.v1.SortField.order:type_name -> yandex.cloud.speechsense.v1.SortOrder
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_yandex_cloud_speechsense_v1_search_proto_init() }
func file_yandex_cloud_speechsense_v1_search_proto_init() {
	if File_yandex_cloud_speechsense_v1_search_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_speechsense_v1_search_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_speechsense_v1_search_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_speechsense_v1_search_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AnyMatchFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_speechsense_v1_search_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*BoundsInclusive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_speechsense_v1_search_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*IntRangeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_speechsense_v1_search_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DoubleRangeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_speechsense_v1_search_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DateRangeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_speechsense_v1_search_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DurationRangeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_speechsense_v1_search_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*BooleanFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_speechsense_v1_search_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*SortData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_speechsense_v1_search_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SortField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_speechsense_v1_search_proto_msgTypes[0].OneofWrappers = []any{
		(*Filter_AnyMatch)(nil),
		(*Filter_IntRange)(nil),
		(*Filter_DoubleRange)(nil),
		(*Filter_DateRange)(nil),
		(*Filter_DurationRange)(nil),
		(*Filter_BooleanMatch)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_speechsense_v1_search_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_speechsense_v1_search_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_speechsense_v1_search_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_speechsense_v1_search_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_speechsense_v1_search_proto_msgTypes,
	}.Build()
	File_yandex_cloud_speechsense_v1_search_proto = out.File
	file_yandex_cloud_speechsense_v1_search_proto_rawDesc = nil
	file_yandex_cloud_speechsense_v1_search_proto_goTypes = nil
	file_yandex_cloud_speechsense_v1_search_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: yandex/cloud/trino/v1/catalog.proto

package trino

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Connector configuration. Exactly one connector type must be specified.
type Connector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Connector_Hive
	//	*Connector_Iceberg
	//	*Connector_DeltaLake
	//	*Connector_Postgresql
	//	*Connector_Clickhouse
	//	*Connector_Tpch
	//	*Connector_Tpcds
	//	*Connector_Oracle
	//	*Connector_Sqlserver
	Type isConnector_Type `protobuf_oneof:"type"`
}

func (x *Connector) Reset() {
	*x = Connector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connector) ProtoMessage() {}

func (x *Connector) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connector.ProtoReflect.Descriptor instead.
func (*Connector) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{0}
}

func (m *Connector) GetType() isConnector_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Connector) GetHive() *HiveConnector {
	if x, ok := x.GetType().(*Connector_Hive); ok {
		return x.Hive
	}
	return nil
}

func (x *Connector) GetIceberg() *IcebergConnector {
	if x, ok := x.GetType().(*Connector_Iceberg); ok {
		return x.Iceberg
	}
	return nil
}

func (x *Connector) GetDeltaLake() *DeltaLakeConnector {
	if x, ok := x.GetType().(*Connector_DeltaLake); ok {
		return x.DeltaLake
	}
	return nil
}

func (x *Connector) GetPostgresql() *PostgresqlConnector {
	if x, ok := x.GetType().(*Connector_Postgresql); ok {
		return x.Postgresql
	}
	return nil
}

func (x *Connector) GetClickhouse() *ClickhouseConnector {
	if x, ok := x.GetType().(*Connector_Clickhouse); ok {
		return x.Clickhouse
	}
	return nil
}

func (x *Connector) GetTpch() *TPCHConnector {
	if x, ok := x.GetType().(*Connector_Tpch); ok {
		return x.Tpch
	}
	return nil
}

func (x *Connector) GetTpcds() *TPCDSConnector {
	if x, ok := x.GetType().(*Connector_Tpcds); ok {
		return x.Tpcds
	}
	return nil
}

func (x *Connector) GetOracle() *OracleConnector {
	if x, ok := x.GetType().(*Connector_Oracle); ok {
		return x.Oracle
	}
	return nil
}

func (x *Connector) GetSqlserver() *SQLServerConnector {
	if x, ok := x.GetType().(*Connector_Sqlserver); ok {
		return x.Sqlserver
	}
	return nil
}

type isConnector_Type interface {
	isConnector_Type()
}

type Connector_Hive struct {
	// Hive connector configuration.
	Hive *HiveConnector `protobuf:"bytes,1,opt,name=hive,proto3,oneof"`
}

type Connector_Iceberg struct {
	// Iceberg connector configuration.
	Iceberg *IcebergConnector `protobuf:"bytes,2,opt,name=iceberg,proto3,oneof"`
}

type Connector_DeltaLake struct {
	// Delta Lake connector configuration.
	DeltaLake *DeltaLakeConnector `protobuf:"bytes,3,opt,name=delta_lake,json=deltaLake,proto3,oneof"`
}

type Connector_Postgresql struct {
	// PostgreSQL connector configuration.
	Postgresql *PostgresqlConnector `protobuf:"bytes,4,opt,name=postgresql,proto3,oneof"`
}

type Connector_Clickhouse struct {
	// ClickHouse connector configuration.
	Clickhouse *ClickhouseConnector `protobuf:"bytes,5,opt,name=clickhouse,proto3,oneof"`
}

type Connector_Tpch struct {
	// TPC-H connector for synthetic benchmarking.
	Tpch *TPCHConnector `protobuf:"bytes,6,opt,name=tpch,proto3,oneof"`
}

type Connector_Tpcds struct {
	// TPC-DS connector for synthetic benchmarking.
	Tpcds *TPCDSConnector `protobuf:"bytes,7,opt,name=tpcds,proto3,oneof"`
}

type Connector_Oracle struct {
	// Oracle connector configuration for connecting to Oracle Database instances.
	Oracle *OracleConnector `protobuf:"bytes,8,opt,name=oracle,proto3,oneof"`
}

type Connector_Sqlserver struct {
	// SQLServer connector configuration for connecting to SQLServer Database instances.
	Sqlserver *SQLServerConnector `protobuf:"bytes,9,opt,name=sqlserver,proto3,oneof"`
}

func (*Connector_Hive) isConnector_Type() {}

func (*Connector_Iceberg) isConnector_Type() {}

func (*Connector_DeltaLake) isConnector_Type() {}

func (*Connector_Postgresql) isConnector_Type() {}

func (*Connector_Clickhouse) isConnector_Type() {}

func (*Connector_Tpch) isConnector_Type() {}

func (*Connector_Tpcds) isConnector_Type() {}

func (*Connector_Oracle) isConnector_Type() {}

func (*Connector_Sqlserver) isConnector_Type() {}

// Catalog is a logical Trino catalog backed by a specific connector.
type Catalog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the catalog.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the catalog.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Connector backing this catalog.
	Connector *Connector `protobuf:"bytes,3,opt,name=connector,proto3" json:"connector,omitempty"`
	// Description of the catalog.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Labels associated with the catalog.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Catalog) Reset() {
	*x = Catalog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Catalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Catalog) ProtoMessage() {}

func (x *Catalog) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Catalog.ProtoReflect.Descriptor instead.
func (*Catalog) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{1}
}

func (x *Catalog) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Catalog) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Catalog) GetConnector() *Connector {
	if x != nil {
		return x.Connector
	}
	return nil
}

func (x *Catalog) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Catalog) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// CatalogSpec defines the desired state of a new catalog.
type CatalogSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the catalog.
	// Must be unique within a Trino cluster.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Connector backing this catalog.
	Connector *Connector `protobuf:"bytes,2,opt,name=connector,proto3" json:"connector,omitempty"`
	// Description of the catalog.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Labels associated with the catalog.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CatalogSpec) Reset() {
	*x = CatalogSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CatalogSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatalogSpec) ProtoMessage() {}

func (x *CatalogSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatalogSpec.ProtoReflect.Descriptor instead.
func (*CatalogSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{2}
}

func (x *CatalogSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CatalogSpec) GetConnector() *Connector {
	if x != nil {
		return x.Connector
	}
	return nil
}

func (x *CatalogSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CatalogSpec) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// CatalogUpdateSpec defines changes to an existing catalog.
// Fields are optional and only provided fields will be updated.
type CatalogUpdateSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New name of the catalog.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Updated connector configuration.
	// If specified, replaces the existing connector.
	Connector *Connector `protobuf:"bytes,2,opt,name=connector,proto3" json:"connector,omitempty"`
	// Description of the catalog.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Labels associated with the catalog.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CatalogUpdateSpec) Reset() {
	*x = CatalogUpdateSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CatalogUpdateSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatalogUpdateSpec) ProtoMessage() {}

func (x *CatalogUpdateSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatalogUpdateSpec.ProtoReflect.Descriptor instead.
func (*CatalogUpdateSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{3}
}

func (x *CatalogUpdateSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CatalogUpdateSpec) GetConnector() *Connector {
	if x != nil {
		return x.Connector
	}
	return nil
}

func (x *CatalogUpdateSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CatalogUpdateSpec) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Metastore configuration.
type Metastore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Metastore_Hive
	Type isMetastore_Type `protobuf_oneof:"type"`
}

func (x *Metastore) Reset() {
	*x = Metastore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metastore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metastore) ProtoMessage() {}

func (x *Metastore) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metastore.ProtoReflect.Descriptor instead.
func (*Metastore) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{4}
}

func (m *Metastore) GetType() isMetastore_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Metastore) GetHive() *Metastore_HiveMetastore {
	if x, ok := x.GetType().(*Metastore_Hive); ok {
		return x.Hive
	}
	return nil
}

type isMetastore_Type interface {
	isMetastore_Type()
}

type Metastore_Hive struct {
	Hive *Metastore_HiveMetastore `protobuf:"bytes,1,opt,name=hive,proto3,oneof"`
}

func (*Metastore_Hive) isMetastore_Type() {}

// Configuration of file system used by a connector.
type FileSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*FileSystem_S3
	//	*FileSystem_ExternalS3
	Type isFileSystem_Type `protobuf_oneof:"type"`
}

func (x *FileSystem) Reset() {
	*x = FileSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSystem) ProtoMessage() {}

func (x *FileSystem) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSystem.ProtoReflect.Descriptor instead.
func (*FileSystem) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{5}
}

func (m *FileSystem) GetType() isFileSystem_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *FileSystem) GetS3() *FileSystem_S3FileSystem {
	if x, ok := x.GetType().(*FileSystem_S3); ok {
		return x.S3
	}
	return nil
}

func (x *FileSystem) GetExternalS3() *FileSystem_ExternalS3FileSystem {
	if x, ok := x.GetType().(*FileSystem_ExternalS3); ok {
		return x.ExternalS3
	}
	return nil
}

type isFileSystem_Type interface {
	isFileSystem_Type()
}

type FileSystem_S3 struct {
	S3 *FileSystem_S3FileSystem `protobuf:"bytes,1,opt,name=s3,proto3,oneof"`
}

type FileSystem_ExternalS3 struct {
	ExternalS3 *FileSystem_ExternalS3FileSystem `protobuf:"bytes,2,opt,name=external_s3,json=externalS3,proto3,oneof"`
}

func (*FileSystem_S3) isFileSystem_Type() {}

func (*FileSystem_ExternalS3) isFileSystem_Type() {}

type HiveConnector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metastore configuration.
	Metastore *Metastore `protobuf:"bytes,1,opt,name=metastore,proto3" json:"metastore,omitempty"`
	// File system configuration.
	Filesystem *FileSystem `protobuf:"bytes,2,opt,name=filesystem,proto3" json:"filesystem,omitempty"`
	// Additional properties.
	AdditionalProperties map[string]string `protobuf:"bytes,3,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HiveConnector) Reset() {
	*x = HiveConnector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HiveConnector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HiveConnector) ProtoMessage() {}

func (x *HiveConnector) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HiveConnector.ProtoReflect.Descriptor instead.
func (*HiveConnector) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{6}
}

func (x *HiveConnector) GetMetastore() *Metastore {
	if x != nil {
		return x.Metastore
	}
	return nil
}

func (x *HiveConnector) GetFilesystem() *FileSystem {
	if x != nil {
		return x.Filesystem
	}
	return nil
}

func (x *HiveConnector) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

type IcebergConnector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metastore configuration.
	Metastore *Metastore `protobuf:"bytes,1,opt,name=metastore,proto3" json:"metastore,omitempty"`
	// File system configuration.
	Filesystem *FileSystem `protobuf:"bytes,2,opt,name=filesystem,proto3" json:"filesystem,omitempty"`
	// Additional properties.
	AdditionalProperties map[string]string `protobuf:"bytes,3,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IcebergConnector) Reset() {
	*x = IcebergConnector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IcebergConnector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IcebergConnector) ProtoMessage() {}

func (x *IcebergConnector) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IcebergConnector.ProtoReflect.Descriptor instead.
func (*IcebergConnector) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{7}
}

func (x *IcebergConnector) GetMetastore() *Metastore {
	if x != nil {
		return x.Metastore
	}
	return nil
}

func (x *IcebergConnector) GetFilesystem() *FileSystem {
	if x != nil {
		return x.Filesystem
	}
	return nil
}

func (x *IcebergConnector) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

type DeltaLakeConnector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metastore configuration.
	Metastore *Metastore `protobuf:"bytes,1,opt,name=metastore,proto3" json:"metastore,omitempty"`
	// File system configuration.
	Filesystem *FileSystem `protobuf:"bytes,2,opt,name=filesystem,proto3" json:"filesystem,omitempty"`
	// Additional properties.
	AdditionalProperties map[string]string `protobuf:"bytes,3,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeltaLakeConnector) Reset() {
	*x = DeltaLakeConnector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeltaLakeConnector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeltaLakeConnector) ProtoMessage() {}

func (x *DeltaLakeConnector) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeltaLakeConnector.ProtoReflect.Descriptor instead.
func (*DeltaLakeConnector) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{8}
}

func (x *DeltaLakeConnector) GetMetastore() *Metastore {
	if x != nil {
		return x.Metastore
	}
	return nil
}

func (x *DeltaLakeConnector) GetFilesystem() *FileSystem {
	if x != nil {
		return x.Filesystem
	}
	return nil
}

func (x *DeltaLakeConnector) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

type PostgresqlConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*PostgresqlConnection_OnPremise_
	//	*PostgresqlConnection_ConnectionManager_
	Type isPostgresqlConnection_Type `protobuf_oneof:"type"`
}

func (x *PostgresqlConnection) Reset() {
	*x = PostgresqlConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgresqlConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresqlConnection) ProtoMessage() {}

func (x *PostgresqlConnection) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresqlConnection.ProtoReflect.Descriptor instead.
func (*PostgresqlConnection) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{9}
}

func (m *PostgresqlConnection) GetType() isPostgresqlConnection_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *PostgresqlConnection) GetOnPremise() *PostgresqlConnection_OnPremise {
	if x, ok := x.GetType().(*PostgresqlConnection_OnPremise_); ok {
		return x.OnPremise
	}
	return nil
}

func (x *PostgresqlConnection) GetConnectionManager() *PostgresqlConnection_ConnectionManager {
	if x, ok := x.GetType().(*PostgresqlConnection_ConnectionManager_); ok {
		return x.ConnectionManager
	}
	return nil
}

type isPostgresqlConnection_Type interface {
	isPostgresqlConnection_Type()
}

type PostgresqlConnection_OnPremise_ struct {
	OnPremise *PostgresqlConnection_OnPremise `protobuf:"bytes,1,opt,name=on_premise,json=onPremise,proto3,oneof"`
}

type PostgresqlConnection_ConnectionManager_ struct {
	ConnectionManager *PostgresqlConnection_ConnectionManager `protobuf:"bytes,2,opt,name=connection_manager,json=connectionManager,proto3,oneof"`
}

func (*PostgresqlConnection_OnPremise_) isPostgresqlConnection_Type() {}

func (*PostgresqlConnection_ConnectionManager_) isPostgresqlConnection_Type() {}

type PostgresqlConnector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connection configuration.
	Connection *PostgresqlConnection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
	// Additional properties.
	AdditionalProperties map[string]string `protobuf:"bytes,2,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PostgresqlConnector) Reset() {
	*x = PostgresqlConnector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgresqlConnector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresqlConnector) ProtoMessage() {}

func (x *PostgresqlConnector) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresqlConnector.ProtoReflect.Descriptor instead.
func (*PostgresqlConnector) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{10}
}

func (x *PostgresqlConnector) GetConnection() *PostgresqlConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *PostgresqlConnector) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

type ClickhouseConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*ClickhouseConnection_OnPremise_
	//	*ClickhouseConnection_ConnectionManager_
	Type isClickhouseConnection_Type `protobuf_oneof:"type"`
}

func (x *ClickhouseConnection) Reset() {
	*x = ClickhouseConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConnection) ProtoMessage() {}

func (x *ClickhouseConnection) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConnection.ProtoReflect.Descriptor instead.
func (*ClickhouseConnection) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{11}
}

func (m *ClickhouseConnection) GetType() isClickhouseConnection_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ClickhouseConnection) GetOnPremise() *ClickhouseConnection_OnPremise {
	if x, ok := x.GetType().(*ClickhouseConnection_OnPremise_); ok {
		return x.OnPremise
	}
	return nil
}

func (x *ClickhouseConnection) GetConnectionManager() *ClickhouseConnection_ConnectionManager {
	if x, ok := x.GetType().(*ClickhouseConnection_ConnectionManager_); ok {
		return x.ConnectionManager
	}
	return nil
}

type isClickhouseConnection_Type interface {
	isClickhouseConnection_Type()
}

type ClickhouseConnection_OnPremise_ struct {
	OnPremise *ClickhouseConnection_OnPremise `protobuf:"bytes,1,opt,name=on_premise,json=onPremise,proto3,oneof"`
}

type ClickhouseConnection_ConnectionManager_ struct {
	ConnectionManager *ClickhouseConnection_ConnectionManager `protobuf:"bytes,2,opt,name=connection_manager,json=connectionManager,proto3,oneof"`
}

func (*ClickhouseConnection_OnPremise_) isClickhouseConnection_Type() {}

func (*ClickhouseConnection_ConnectionManager_) isClickhouseConnection_Type() {}

type ClickhouseConnector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connection configuration.
	Connection *ClickhouseConnection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
	// Additional properties.
	AdditionalProperties map[string]string `protobuf:"bytes,2,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ClickhouseConnector) Reset() {
	*x = ClickhouseConnector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConnector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConnector) ProtoMessage() {}

func (x *ClickhouseConnector) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConnector.ProtoReflect.Descriptor instead.
func (*ClickhouseConnector) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{12}
}

func (x *ClickhouseConnector) GetConnection() *ClickhouseConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *ClickhouseConnector) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

type TPCHConnector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Additional properties.
	AdditionalProperties map[string]string `protobuf:"bytes,1,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TPCHConnector) Reset() {
	*x = TPCHConnector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPCHConnector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPCHConnector) ProtoMessage() {}

func (x *TPCHConnector) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPCHConnector.ProtoReflect.Descriptor instead.
func (*TPCHConnector) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{13}
}

func (x *TPCHConnector) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

type TPCDSConnector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Additional properties.
	AdditionalProperties map[string]string `protobuf:"bytes,1,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TPCDSConnector) Reset() {
	*x = TPCDSConnector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPCDSConnector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPCDSConnector) ProtoMessage() {}

func (x *TPCDSConnector) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPCDSConnector.ProtoReflect.Descriptor instead.
func (*TPCDSConnector) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{14}
}

func (x *TPCDSConnector) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

type OracleConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*OracleConnection_OnPremise_
	Type isOracleConnection_Type `protobuf_oneof:"type"`
}

func (x *OracleConnection) Reset() {
	*x = OracleConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleConnection) ProtoMessage() {}

func (x *OracleConnection) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleConnection.ProtoReflect.Descriptor instead.
func (*OracleConnection) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{15}
}

func (m *OracleConnection) GetType() isOracleConnection_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *OracleConnection) GetOnPremise() *OracleConnection_OnPremise {
	if x, ok := x.GetType().(*OracleConnection_OnPremise_); ok {
		return x.OnPremise
	}
	return nil
}

type isOracleConnection_Type interface {
	isOracleConnection_Type()
}

type OracleConnection_OnPremise_ struct {
	OnPremise *OracleConnection_OnPremise `protobuf:"bytes,1,opt,name=on_premise,json=onPremise,proto3,oneof"`
}

func (*OracleConnection_OnPremise_) isOracleConnection_Type() {}

type OracleConnector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connection configuration.
	Connection *OracleConnection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
	// Additional properties.
	AdditionalProperties map[string]string `protobuf:"bytes,2,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *OracleConnector) Reset() {
	*x = OracleConnector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleConnector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleConnector) ProtoMessage() {}

func (x *OracleConnector) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleConnector.ProtoReflect.Descriptor instead.
func (*OracleConnector) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{16}
}

func (x *OracleConnector) GetConnection() *OracleConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *OracleConnector) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

type SQLServerConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*SQLServerConnection_OnPremise_
	Type isSQLServerConnection_Type `protobuf_oneof:"type"`
}

func (x *SQLServerConnection) Reset() {
	*x = SQLServerConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLServerConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLServerConnection) ProtoMessage() {}

func (x *SQLServerConnection) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLServerConnection.ProtoReflect.Descriptor instead.
func (*SQLServerConnection) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{17}
}

func (m *SQLServerConnection) GetType() isSQLServerConnection_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SQLServerConnection) GetOnPremise() *SQLServerConnection_OnPremise {
	if x, ok := x.GetType().(*SQLServerConnection_OnPremise_); ok {
		return x.OnPremise
	}
	return nil
}

type isSQLServerConnection_Type interface {
	isSQLServerConnection_Type()
}

type SQLServerConnection_OnPremise_ struct {
	OnPremise *SQLServerConnection_OnPremise `protobuf:"bytes,1,opt,name=on_premise,json=onPremise,proto3,oneof"`
}

func (*SQLServerConnection_OnPremise_) isSQLServerConnection_Type() {}

type SQLServerConnector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connection configuration.
	Connection *SQLServerConnection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
	// Additional properties.
	AdditionalProperties map[string]string `protobuf:"bytes,2,rep,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SQLServerConnector) Reset() {
	*x = SQLServerConnector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLServerConnector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLServerConnector) ProtoMessage() {}

func (x *SQLServerConnector) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLServerConnector.ProtoReflect.Descriptor instead.
func (*SQLServerConnector) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{18}
}

func (x *SQLServerConnector) GetConnection() *SQLServerConnection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *SQLServerConnector) GetAdditionalProperties() map[string]string {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

// Configuration of Hive's metastore type.
type Metastore_HiveMetastore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Connection:
	//
	//	*Metastore_HiveMetastore_Uri
	Connection isMetastore_HiveMetastore_Connection `protobuf_oneof:"connection"`
}

func (x *Metastore_HiveMetastore) Reset() {
	*x = Metastore_HiveMetastore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metastore_HiveMetastore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metastore_HiveMetastore) ProtoMessage() {}

func (x *Metastore_HiveMetastore) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metastore_HiveMetastore.ProtoReflect.Descriptor instead.
func (*Metastore_HiveMetastore) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{4, 0}
}

func (m *Metastore_HiveMetastore) GetConnection() isMetastore_HiveMetastore_Connection {
	if m != nil {
		return m.Connection
	}
	return nil
}

func (x *Metastore_HiveMetastore) GetUri() string {
	if x, ok := x.GetConnection().(*Metastore_HiveMetastore_Uri); ok {
		return x.Uri
	}
	return ""
}

type isMetastore_HiveMetastore_Connection interface {
	isMetastore_HiveMetastore_Connection()
}

type Metastore_HiveMetastore_Uri struct {
	// URI or cluster ID of the Hive Metastore.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3,oneof"`
}

func (*Metastore_HiveMetastore_Uri) isMetastore_HiveMetastore_Connection() {}

// Describes YandexCloud native S3 file system.
// Currently does not require configuration.
type FileSystem_S3FileSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FileSystem_S3FileSystem) Reset() {
	*x = FileSystem_S3FileSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSystem_S3FileSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSystem_S3FileSystem) ProtoMessage() {}

func (x *FileSystem_S3FileSystem) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSystem_S3FileSystem.ProtoReflect.Descriptor instead.
func (*FileSystem_S3FileSystem) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{5, 0}
}

// Describes External S3 compatible file system.
type FileSystem_ExternalS3FileSystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwsAccessKey string `protobuf:"bytes,1,opt,name=aws_access_key,json=awsAccessKey,proto3" json:"aws_access_key,omitempty"`
	AwsSecretKey string `protobuf:"bytes,2,opt,name=aws_secret_key,json=awsSecretKey,proto3" json:"aws_secret_key,omitempty"`
	AwsEndpoint  string `protobuf:"bytes,3,opt,name=aws_endpoint,json=awsEndpoint,proto3" json:"aws_endpoint,omitempty"`
	AwsRegion    string `protobuf:"bytes,4,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
}

func (x *FileSystem_ExternalS3FileSystem) Reset() {
	*x = FileSystem_ExternalS3FileSystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSystem_ExternalS3FileSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSystem_ExternalS3FileSystem) ProtoMessage() {}

func (x *FileSystem_ExternalS3FileSystem) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSystem_ExternalS3FileSystem.ProtoReflect.Descriptor instead.
func (*FileSystem_ExternalS3FileSystem) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{5, 1}
}

func (x *FileSystem_ExternalS3FileSystem) GetAwsAccessKey() string {
	if x != nil {
		return x.AwsAccessKey
	}
	return ""
}

func (x *FileSystem_ExternalS3FileSystem) GetAwsSecretKey() string {
	if x != nil {
		return x.AwsSecretKey
	}
	return ""
}

func (x *FileSystem_ExternalS3FileSystem) GetAwsEndpoint() string {
	if x != nil {
		return x.AwsEndpoint
	}
	return ""
}

func (x *FileSystem_ExternalS3FileSystem) GetAwsRegion() string {
	if x != nil {
		return x.AwsRegion
	}
	return ""
}

type PostgresqlConnection_OnPremise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connection to the Postgresql.
	ConnectionUrl string `protobuf:"bytes,1,opt,name=connection_url,json=connectionUrl,proto3" json:"connection_url,omitempty"`
	// Name of the Postgresql user.
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// Password of the Postgresql user.
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *PostgresqlConnection_OnPremise) Reset() {
	*x = PostgresqlConnection_OnPremise{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgresqlConnection_OnPremise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresqlConnection_OnPremise) ProtoMessage() {}

func (x *PostgresqlConnection_OnPremise) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresqlConnection_OnPremise.ProtoReflect.Descriptor instead.
func (*PostgresqlConnection_OnPremise) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{9, 0}
}

func (x *PostgresqlConnection_OnPremise) GetConnectionUrl() string {
	if x != nil {
		return x.ConnectionUrl
	}
	return ""
}

func (x *PostgresqlConnection_OnPremise) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *PostgresqlConnection_OnPremise) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type PostgresqlConnection_ConnectionManager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connection ID.
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Database.
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	// Additional connection properties.
	ConnectionProperties map[string]string `protobuf:"bytes,3,rep,name=connection_properties,json=connectionProperties,proto3" json:"connection_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PostgresqlConnection_ConnectionManager) Reset() {
	*x = PostgresqlConnection_ConnectionManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgresqlConnection_ConnectionManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresqlConnection_ConnectionManager) ProtoMessage() {}

func (x *PostgresqlConnection_ConnectionManager) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresqlConnection_ConnectionManager.ProtoReflect.Descriptor instead.
func (*PostgresqlConnection_ConnectionManager) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{9, 1}
}

func (x *PostgresqlConnection_ConnectionManager) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *PostgresqlConnection_ConnectionManager) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *PostgresqlConnection_ConnectionManager) GetConnectionProperties() map[string]string {
	if x != nil {
		return x.ConnectionProperties
	}
	return nil
}

type ClickhouseConnection_OnPremise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connection to the Clickhouse.
	ConnectionUrl string `protobuf:"bytes,1,opt,name=connection_url,json=connectionUrl,proto3" json:"connection_url,omitempty"`
	// Name of the Clickhouse user.
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// Password of the Clickhouse user.
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ClickhouseConnection_OnPremise) Reset() {
	*x = ClickhouseConnection_OnPremise{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConnection_OnPremise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConnection_OnPremise) ProtoMessage() {}

func (x *ClickhouseConnection_OnPremise) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConnection_OnPremise.ProtoReflect.Descriptor instead.
func (*ClickhouseConnection_OnPremise) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{11, 0}
}

func (x *ClickhouseConnection_OnPremise) GetConnectionUrl() string {
	if x != nil {
		return x.ConnectionUrl
	}
	return ""
}

func (x *ClickhouseConnection_OnPremise) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ClickhouseConnection_OnPremise) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ClickhouseConnection_ConnectionManager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connection ID.
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Database.
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	// Additional connection properties.
	ConnectionProperties map[string]string `protobuf:"bytes,3,rep,name=connection_properties,json=connectionProperties,proto3" json:"connection_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ClickhouseConnection_ConnectionManager) Reset() {
	*x = ClickhouseConnection_ConnectionManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClickhouseConnection_ConnectionManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClickhouseConnection_ConnectionManager) ProtoMessage() {}

func (x *ClickhouseConnection_ConnectionManager) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClickhouseConnection_ConnectionManager.ProtoReflect.Descriptor instead.
func (*ClickhouseConnection_ConnectionManager) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{11, 1}
}

func (x *ClickhouseConnection_ConnectionManager) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *ClickhouseConnection_ConnectionManager) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *ClickhouseConnection_ConnectionManager) GetConnectionProperties() map[string]string {
	if x != nil {
		return x.ConnectionProperties
	}
	return nil
}

type OracleConnection_OnPremise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connection to the Oracle.
	ConnectionUrl string `protobuf:"bytes,1,opt,name=connection_url,json=connectionUrl,proto3" json:"connection_url,omitempty"`
	// Name of the Oracle user.
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// Password of the Oracle user.
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *OracleConnection_OnPremise) Reset() {
	*x = OracleConnection_OnPremise{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleConnection_OnPremise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleConnection_OnPremise) ProtoMessage() {}

func (x *OracleConnection_OnPremise) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleConnection_OnPremise.ProtoReflect.Descriptor instead.
func (*OracleConnection_OnPremise) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{15, 0}
}

func (x *OracleConnection_OnPremise) GetConnectionUrl() string {
	if x != nil {
		return x.ConnectionUrl
	}
	return ""
}

func (x *OracleConnection_OnPremise) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *OracleConnection_OnPremise) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type SQLServerConnection_OnPremise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connection to the SQLServer.
	ConnectionUrl string `protobuf:"bytes,1,opt,name=connection_url,json=connectionUrl,proto3" json:"connection_url,omitempty"`
	// Name of the SQLServer user.
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// Password of the SQLServer user.
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *SQLServerConnection_OnPremise) Reset() {
	*x = SQLServerConnection_OnPremise{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLServerConnection_OnPremise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLServerConnection_OnPremise) ProtoMessage() {}

func (x *SQLServerConnection_OnPremise) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_trino_v1_catalog_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLServerConnection_OnPremise.ProtoReflect.Descriptor instead.
func (*SQLServerConnection_OnPremise) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP(), []int{17, 0}
}

func (x *SQLServerConnection_OnPremise) GetConnectionUrl() string {
	if x != nil {
		return x.ConnectionUrl
	}
	return ""
}

func (x *SQLServerConnection_OnPremise) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *SQLServerConnection_OnPremise) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

var File_yandex_cloud_trino_v1_catalog_proto protoreflect.FileDescriptor

var file_yandex_cloud_trino_v1_catalog_proto_rawDesc = []byte{
	0x0a, 0x23, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x74,
	0x72, 0x69, 0x6e, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1d, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x05, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x04, 0x68, 0x69, 0x76,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x04, 0x68, 0x69, 0x76, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x69, 0x63, 0x65, 0x62, 0x65, 0x72, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x63, 0x65, 0x62, 0x65, 0x72, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x07, 0x69, 0x63, 0x65, 0x62, 0x65, 0x72, 0x67, 0x12, 0x4a, 0x0a, 0x0a, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x5f, 0x6c, 0x61, 0x6b, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72,
	0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4c, 0x61, 0x6b, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x4c, 0x61, 0x6b, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x71, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x71, 0x6c, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x70, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x50, 0x43, 0x48, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x04, 0x74, 0x70, 0x63, 0x68, 0x12, 0x3d,
	0x0a, 0x05, 0x74, 0x70, 0x63, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69,
	0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x50, 0x43, 0x44, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x74, 0x70, 0x63, 0x64, 0x73, 0x12, 0x40, 0x0a,
	0x06, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69,
	0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x12,
	0x49, 0x0a, 0x09, 0x73, 0x71, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x51, 0x4c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x71, 0x6c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x22, 0x8e, 0x02, 0x0a, 0x07, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf5, 0x02, 0x0a, 0x0b, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe8, 0xc7, 0x31, 0x01, 0xf2, 0xc7, 0x31,
	0x0e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2a, 0x8a,
	0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d,
	0x32, 0x35, 0x36, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x83, 0x01, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x3b, 0xf2, 0xc7, 0x31, 0x0b, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x5d, 0x2a, 0x82, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x34, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d,
	0x36, 0x33, 0xb2, 0xc8, 0x31, 0x18, 0x12, 0x10, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x1a, 0x04, 0x31, 0x2d, 0x36, 0x33, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xf7, 0x02, 0x0a, 0x11, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xf2, 0xc7, 0x31, 0x0e, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2a, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36,
	0x33, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xc8,
	0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35, 0x36, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x89, 0x01, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x3b, 0xf2, 0xc7, 0x31,
	0x0b, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x82, 0xc8, 0x31, 0x04,
	0x3c, 0x3d, 0x36, 0x34, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0xb2, 0xc8, 0x31, 0x18,
	0x12, 0x10, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x5d, 0x2a, 0x1a, 0x04, 0x31, 0x2d, 0x36, 0x33, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x98, 0x01, 0x0a, 0x09,
	0x4d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x68, 0x69, 0x76,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x69, 0x76, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x04, 0x68, 0x69, 0x76, 0x65, 0x1a,
	0x37, 0x0a, 0x0d, 0x48, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x12, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x42, 0x12, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x42, 0x0c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x22, 0x86, 0x03, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x40, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x48, 0x00, 0x52, 0x02, 0x73, 0x33, 0x12, 0x59, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x33, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x33, 0x1a, 0x0e, 0x0a, 0x0c, 0x53, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x1a, 0xbc, 0x01, 0x0a, 0x14, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53,
	0x33, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x0e, 0x61,
	0x77, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0c, 0x61, 0x77, 0x73, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0c, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0c, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52,
	0x0b, 0x61, 0x77, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0a,
	0x61, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x09, 0x61, 0x77, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x42, 0x0c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x22,
	0xa8, 0x03, 0x0a, 0x0d, 0x48, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x44, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x09, 0x6d, 0x65,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x04,
	0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0xbe, 0x01, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x49, 0xf2, 0xc7, 0x31, 0x15, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x2e, 0x2c, 0x3a, 0x5c, 0x2f, 0x5f, 0x20, 0x5d, 0x2a, 0x82, 0xc8, 0x31, 0x05, 0x3c,
	0x3d, 0x32, 0x35, 0x36, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x32, 0x38, 0xb2, 0xc8, 0x31,
	0x1a, 0x12, 0x11, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x7a, 0x2e, 0x5d, 0x2a, 0x1a, 0x05, 0x31, 0x2d, 0x31, 0x32, 0x38, 0x52, 0x14, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x03, 0x0a, 0x10, 0x49,
	0x63, 0x65, 0x62, 0x65, 0x72, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x44, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x04, 0xe8, 0xc7,
	0x31, 0x01, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0xc1,
	0x01, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72,
	0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x63, 0x65, 0x62, 0x65, 0x72, 0x67, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x49, 0xf2, 0xc7, 0x31, 0x15, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x2e, 0x2c, 0x3a, 0x5c, 0x2f, 0x5f, 0x20, 0x5d, 0x2a, 0x82, 0xc8, 0x31, 0x05,
	0x3c, 0x3d, 0x32, 0x35, 0x36, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x32, 0x38, 0xb2, 0xc8,
	0x31, 0x1a, 0x12, 0x11, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x7a, 0x2e, 0x5d, 0x2a, 0x1a, 0x05, 0x31, 0x2d, 0x31, 0x32, 0x38, 0x52, 0x14, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb2, 0x03, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x4c, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x44, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x09, 0x6d,
	0x65, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42,
	0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0xc3, 0x01, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4c,
	0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x49, 0xf2, 0xc7, 0x31, 0x15, 0x5b, 0x2d, 0x5f, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2e, 0x2c, 0x3a, 0x5c, 0x2f, 0x5f, 0x20, 0x5d,
	0x2a, 0x82, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35, 0x36, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d,
	0x31, 0x32, 0x38, 0xb2, 0xc8, 0x31, 0x1a, 0x12, 0x11, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d,
	0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x2e, 0x5d, 0x2a, 0x1a, 0x05, 0x31, 0x2d, 0x31, 0x32,
	0x38, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xd6, 0x06, 0x0a, 0x14, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0a, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69,
	0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x50, 0x72, 0x65,
	0x6d, 0x69, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x73,
	0x65, 0x12, 0x6e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69,
	0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x1a, 0xc8, 0x01, 0x0a, 0x09, 0x4f, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe8, 0xc7, 0x31, 0x01, 0xf2, 0xc7, 0x31,
	0x24, 0x5e, 0x6a, 0x64, 0x62, 0x63, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b,
	0x3a, 0x2f, 0x2f, 0x28, 0x3f, 0x3a, 0x2e, 0x2b, 0x3a, 0x5c, 0x64, 0x2b, 0x29, 0x2f, 0x28, 0x3f,
	0x3a, 0x2e, 0x2a, 0x29, 0x24, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe8, 0xc7, 0x31, 0x01, 0xf2, 0xc7, 0x31,
	0x0e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2a, 0x8a,
	0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x05, 0x30, 0x2d, 0x31,
	0x32, 0x38, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x9c, 0x03, 0x0a,
	0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x12, 0x31, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a,
	0xc8, 0x31, 0x04, 0x31, 0x2d, 0x35, 0x30, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe8, 0xc7, 0x31, 0x01, 0xf2, 0xc7, 0x31,
	0x0e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2a, 0x8a,
	0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x12, 0xce, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x57, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x40, 0xf2, 0xc7, 0x31, 0x14,
	0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2e, 0x2c, 0x3a, 0x5c,
	0x2f, 0x5f, 0x5d, 0x2a, 0x82, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35, 0x36, 0x8a, 0xc8, 0x31,
	0x05, 0x3c, 0x3d, 0x31, 0x32, 0x38, 0xb2, 0xc8, 0x31, 0x12, 0x12, 0x09, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x5d, 0x2a, 0x1a, 0x05, 0x31, 0x2d, 0x31, 0x32, 0x38, 0x52, 0x14, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x22, 0xf2, 0x02, 0x0a, 0x13, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc4,
	0x01, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72,
	0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71,
	0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x49, 0xf2, 0xc7, 0x31, 0x15, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2e, 0x2c, 0x3a, 0x5c, 0x2f, 0x5f, 0x20, 0x5d, 0x2a, 0x82,
	0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35, 0x36, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x32,
	0x38, 0xb2, 0xc8, 0x31, 0x1a, 0x12, 0x11, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x2e, 0x5d, 0x2a, 0x1a, 0x05, 0x31, 0x2d, 0x31, 0x32, 0x38, 0x52,
	0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd7,
	0x06, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0a, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x65, 0x6d, 0x69, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x12,
	0x6e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x1a,
	0xc8, 0x01, 0x0a, 0x09, 0x4f, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x12, 0x53, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe8, 0xc7, 0x31, 0x01, 0xf2, 0xc7, 0x31, 0x24, 0x5e,
	0x6a, 0x64, 0x62, 0x63, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x3a, 0x2f,
	0x2f, 0x28, 0x3f, 0x3a, 0x2e, 0x2b, 0x3a, 0x5c, 0x64, 0x2b, 0x29, 0x2f, 0x28, 0x3f, 0x3a, 0x2e,
	0x2a, 0x29, 0x24, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe8, 0xc7, 0x31, 0x01, 0xf2, 0xc7, 0x31, 0x0e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2a, 0x8a, 0xc8, 0x31,
	0x04, 0x3c, 0x3d, 0x36, 0x33, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0d, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x05, 0x30, 0x2d, 0x31, 0x32, 0x38,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x9d, 0x03, 0x0a, 0x11, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x31, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31,
	0x04, 0x31, 0x2d, 0x35, 0x30, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe8, 0xc7, 0x31, 0x01, 0xf2, 0xc7, 0x31, 0x0e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2a, 0x8a, 0xc8, 0x31,
	0x04, 0x3c, 0x3d, 0x36, 0x33, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0xcf, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x57, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x41, 0xf2, 0xc7, 0x31, 0x14, 0x5b, 0x2d,
	0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2e, 0x2c, 0x3a, 0x5c, 0x2f, 0x5f,
	0x5d, 0x2a, 0x82, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35, 0x36, 0x8a, 0xc8, 0x31, 0x05, 0x3c,
	0x3d, 0x31, 0x32, 0x38, 0xb2, 0xc8, 0x31, 0x13, 0x12, 0x0a, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x5f, 0x5d, 0x2a, 0x1a, 0x05, 0x31, 0x2d, 0x31, 0x32, 0x38, 0x52, 0x14, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x1a, 0x47, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x22, 0xf2, 0x02, 0x0a, 0x13, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc4, 0x01,
	0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69,
	0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x49, 0xf2, 0xc7, 0x31, 0x15, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2e, 0x2c, 0x3a, 0x5c, 0x2f, 0x5f, 0x20, 0x5d, 0x2a, 0x82, 0xc8,
	0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35, 0x36, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x32, 0x38,
	0xb2, 0xc8, 0x31, 0x1a, 0x12, 0x11, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x2e, 0x5d, 0x2a, 0x1a, 0x05, 0x31, 0x2d, 0x31, 0x32, 0x38, 0x52, 0x14,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x02,
	0x0a, 0x0d, 0x54, 0x50, 0x43, 0x48, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0xbe, 0x01, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74,
	0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x50, 0x43, 0x48, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x49, 0xf2, 0xc7, 0x31, 0x15, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x2e, 0x2c, 0x3a, 0x5c, 0x2f, 0x5f, 0x20, 0x5d, 0x2a, 0x82, 0xc8, 0x31, 0x05, 0x3c, 0x3d,
	0x32, 0x35, 0x36, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x32, 0x38, 0xb2, 0xc8, 0x31, 0x1a,
	0x12, 0x11, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x2e, 0x5d, 0x2a, 0x1a, 0x05, 0x31, 0x2d, 0x31, 0x32, 0x38, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x1a, 0x47, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x02, 0x0a, 0x0e, 0x54, 0x50,
	0x43, 0x44, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0xbf, 0x01, 0x0a,
	0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x50, 0x43, 0x44, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x49, 0xf2,
	0xc7, 0x31, 0x15, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2e,
	0x2c, 0x3a, 0x5c, 0x2f, 0x5f, 0x20, 0x5d, 0x2a, 0x82, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35,
	0x36, 0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x32, 0x38, 0xb2, 0xc8, 0x31, 0x1a, 0x12, 0x11,
	0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x2e, 0x5d,
	0x2a, 0x1a, 0x05, 0x31, 0x2d, 0x31, 0x32, 0x38, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x47,
	0x0a, 0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3, 0x02, 0x0a, 0x10, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0a,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x50, 0x72, 0x65, 0x6d,
	0x69, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65,
	0x1a, 0xbc, 0x01, 0x0a, 0x09, 0x4f, 0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xe8, 0xc7, 0x31, 0x01, 0xf2, 0xc7, 0x31, 0x18,
	0x5e, 0x6a, 0x64, 0x62, 0x63, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x3a,
	0x28, 0x3f, 0x73, 0x3a, 0x2e, 0x2a, 0x29, 0x24, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe8, 0xc7, 0x31, 0x01,
	0xf2, 0xc7, 0x31, 0x0e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x2d,
	0x5d, 0x2a, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x05,
	0x30, 0x2d, 0x31, 0x32, 0x38, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42,
	0x0c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x22, 0xe6, 0x02,
	0x0a, 0x0f, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x47, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc0, 0x01, 0x0a, 0x15, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x49, 0xf2, 0xc7,
	0x31, 0x15, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2e, 0x2c,
	0x3a, 0x5c, 0x2f, 0x5f, 0x20, 0x5d, 0x2a, 0x82, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35, 0x36,
	0x8a, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x32, 0x38, 0xb2, 0xc8, 0x31, 0x1a, 0x12, 0x11, 0x5b,
	0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x2e, 0x5d, 0x2a,
	0x1a, 0x05, 0x31, 0x2d, 0x31, 0x32, 0x38, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x47, 0x0a,
	0x19, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x02, 0x0a, 0x13, 0x53, 0x51, 0x4c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55,
	0x0a, 0x0a, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x51, 0x4c, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f,
	0x6e, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x6d, 0x69, 0x73, 0x65, 0x1a, 0xbc, 0x01, 0x0a, 0x09, 0x4f, 0x6e, 0x50, 0x72, 0x65, 0x6d,
	0x69, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xe8, 0xc7, 0x31,
	0x01, 0xf2, 0xc7, 0x31, 0x18, 0x5e, 0x6a, 0x64, 0x62, 0x63, 0x3a, 0x5b, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5d, 0x2b, 0x3a, 0x28, 0x3f, 0x73, 0x3a, 0x2e, 0x2a, 0x29, 0x24, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1e, 0xe8, 0xc7, 0x31, 0x01, 0xf2, 0xc7, 0x31, 0x0e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2a, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe8, 0xc7, 0x31,
	0x01, 0x8a, 0xc8, 0x31, 0x05, 0x30, 0x2d, 0x31, 0x32, 0x38, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x42, 0x0c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x04, 0xc0, 0xc1,
	0x31, 0x01, 0x22, 0xef, 0x02, 0x0a, 0x12, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69,
	0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x51, 0x4c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xc3, 0x01, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x51,
	0x4c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x49, 0xf2, 0xc7, 0x31, 0x15,
	0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2e, 0x2c, 0x3a, 0x5c,
	0x2f, 0x5f, 0x20, 0x5d, 0x2a, 0x82, 0xc8, 0x31, 0x05, 0x3c, 0x3d, 0x32, 0x35, 0x36, 0x8a, 0xc8,
	0x31, 0x05, 0x3c, 0x3d, 0x31, 0x32, 0x38, 0xb2, 0xc8, 0x31, 0x1a, 0x12, 0x11, 0x5b, 0x61, 0x2d,
	0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x2e, 0x5d, 0x2a, 0x1a, 0x05,
	0x31, 0x2d, 0x31, 0x32, 0x38, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x41,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x5c, 0x0a, 0x19, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2e, 0x76,
	0x31, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x72, 0x69,
	0x6e, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_trino_v1_catalog_proto_rawDescOnce sync.Once
	file_yandex_cloud_trino_v1_catalog_proto_rawDescData = file_yandex_cloud_trino_v1_catalog_proto_rawDesc
)

func file_yandex_cloud_trino_v1_catalog_proto_rawDescGZIP() []byte {
	file_yandex_cloud_trino_v1_catalog_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_trino_v1_catalog_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_trino_v1_catalog_proto_rawDescData)
	})
	return file_yandex_cloud_trino_v1_catalog_proto_rawDescData
}

var file_yandex_cloud_trino_v1_catalog_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_yandex_cloud_trino_v1_catalog_proto_goTypes = []any{
	(*Connector)(nil),                       // 0: yandex.cloud.trino.v1.Connector
	(*Catalog)(nil),                         // 1: yandex.cloud.trino.v1.Catalog
	(*CatalogSpec)(nil),                     // 2: yandex.cloud.trino.v1.CatalogSpec
	(*CatalogUpdateSpec)(nil),               // 3: yandex.cloud.trino.v1.CatalogUpdateSpec
	(*Metastore)(nil),                       // 4: yandex.cloud.trino.v1.Metastore
	(*FileSystem)(nil),                      // 5: yandex.cloud.trino.v1.FileSystem
	(*HiveConnector)(nil),                   // 6: yandex.cloud.trino.v1.HiveConnector
	(*IcebergConnector)(nil),                // 7: yandex.cloud.trino.v1.IcebergConnector
	(*DeltaLakeConnector)(nil),              // 8: yandex.cloud.trino.v1.DeltaLakeConnector
	(*PostgresqlConnection)(nil),            // 9: yandex.cloud.trino.v1.PostgresqlConnection
	(*PostgresqlConnector)(nil),             // 10: yandex.cloud.trino.v1.PostgresqlConnector
	(*ClickhouseConnection)(nil),            // 11: yandex.cloud.trino.v1.ClickhouseConnection
	(*ClickhouseConnector)(nil),             // 12: yandex.cloud.trino.v1.ClickhouseConnector
	(*TPCHConnector)(nil),                   // 13: yandex.cloud.trino.v1.TPCHConnector
	(*TPCDSConnector)(nil),                  // 14: yandex.cloud.trino.v1.TPCDSConnector
	(*OracleConnection)(nil),                // 15: yandex.cloud.trino.v1.OracleConnection
	(*OracleConnector)(nil),                 // 16: yandex.cloud.trino.v1.OracleConnector
	(*SQLServerConnection)(nil),             // 17: yandex.cloud.trino.v1.SQLServerConnection
	(*SQLServerConnector)(nil),              // 18: yandex.cloud.trino.v1.SQLServerConnector
	nil,                                     // 19: yandex.cloud.trino.v1.Catalog.LabelsEntry
	nil,                                     // 20: yandex.cloud.trino.v1.CatalogSpec.LabelsEntry
	nil,                                     // 21: yandex.cloud.trino.v1.CatalogUpdateSpec.LabelsEntry
	(*Metastore_HiveMetastore)(nil),         // 22: yandex.cloud.trino.v1.Metastore.HiveMetastore
	(*FileSystem_S3FileSystem)(nil),         // 23: yandex.cloud.trino.v1.FileSystem.S3FileSystem
	(*FileSystem_ExternalS3FileSystem)(nil), // 24: yandex.cloud.trino.v1.FileSystem.ExternalS3FileSystem
	nil,                                     // 25: yandex.cloud.trino.v1.HiveConnector.AdditionalPropertiesEntry
	nil,                                     // 26: yandex.cloud.trino.v1.IcebergConnector.AdditionalPropertiesEntry
	nil,                                     // 27: yandex.cloud.trino.v1.DeltaLakeConnector.AdditionalPropertiesEntry
	(*PostgresqlConnection_OnPremise)(nil),  // 28: yandex.cloud.trino.v1.PostgresqlConnection.OnPremise
	(*PostgresqlConnection_ConnectionManager)(nil), // 29: yandex.cloud.trino.v1.PostgresqlConnection.ConnectionManager
	nil,                                    // 30: yandex.cloud.trino.v1.PostgresqlConnection.ConnectionManager.ConnectionPropertiesEntry
	nil,                                    // 31: yandex.cloud.trino.v1.PostgresqlConnector.AdditionalPropertiesEntry
	(*ClickhouseConnection_OnPremise)(nil), // 32: yandex.cloud.trino.v1.ClickhouseConnection.OnPremise
	(*ClickhouseConnection_ConnectionManager)(nil), // 33: yandex.cloud.trino.v1.ClickhouseConnection.ConnectionManager
	nil,                                   // 34: yandex.cloud.trino.v1.ClickhouseConnection.ConnectionManager.ConnectionPropertiesEntry
	nil,                                   // 35: yandex.cloud.trino.v1.ClickhouseConnector.AdditionalPropertiesEntry
	nil,                                   // 36: yandex.cloud.trino.v1.TPCHConnector.AdditionalPropertiesEntry
	nil,                                   // 37: yandex.cloud.trino.v1.TPCDSConnector.AdditionalPropertiesEntry
	(*OracleConnection_OnPremise)(nil),    // 38: yandex.cloud.trino.v1.OracleConnection.OnPremise
	nil,                                   // 39: yandex.cloud.trino.v1.OracleConnector.AdditionalPropertiesEntry
	(*SQLServerConnection_OnPremise)(nil), // 40: yandex.cloud.trino.v1.SQLServerConnection.OnPremise
	nil,                                   // 41: yandex.cloud.trino.v1.SQLServerConnector.AdditionalPropertiesEntry
}
var file_yandex_cloud_trino_v1_catalog_proto_depIdxs = []int32{
	6,  // 0: yandex.cloud.trino.v1.Connector.hive:type_name -> yandex.cloud.trino.v1.HiveConnector
	7,  // 1: yandex.cloud.trino.v1.Connector.iceberg:type_name -> yandex.cloud.trino.v1.IcebergConnector
	8,  // 2: yandex.cloud.trino.v1.Connector.delta_lake:type_name -> yandex.cloud.trino.v1.DeltaLakeConnector
	10, // 3: yandex.cloud.trino.v1.Connector.postgresql:type_name -> yandex.cloud.trino.v1.PostgresqlConnector
	12, // 4: yandex.cloud.trino.v1.Connector.clickhouse:type_name -> yandex.cloud.trino.v1.ClickhouseConnector
	13, // 5: yandex.cloud.trino.v1.Connector.tpch:type_name -> yandex.cloud.trino.v1.TPCHConnector
	14, // 6: yandex.cloud.trino.v1.Connector.tpcds:type_name -> yandex.cloud.trino.v1.TPCDSConnector
	16, // 7: yandex.cloud.trino.v1.Connector.oracle:type_name -> yandex.cloud.trino.v1.OracleConnector
	18, // 8: yandex.cloud.trino.v1.Connector.sqlserver:type_name -> yandex.cloud.trino.v1.SQLServerConnector
	0,  // 9: yandex.cloud.trino.v1.Catalog.connector:type_name -> yandex.cloud.trino.v1.Connector
	19, // 10: yandex.cloud.trino.v1.Catalog.labels:type_name -> yandex.cloud.trino.v1.Catalog.LabelsEntry
	0,  // 11: yandex.cloud.trino.v1.CatalogSpec.connector:type_name -> yandex.cloud.trino.v1.Connector
	20, // 12: yandex.cloud.trino.v1.CatalogSpec.labels:type_name -> yandex.cloud.trino.v1.CatalogSpec.LabelsEntry
	0,  // 13: yandex.cloud.trino.v1.CatalogUpdateSpec.connector:type_name -> yandex.cloud.trino.v1.Connector
	21, // 14: yandex.cloud.trino.v1.CatalogUpdateSpec.labels:type_name -> yandex.cloud.trino.v1.CatalogUpdateSpec.LabelsEntry
	22, // 15: yandex.cloud.trino.v1.Metastore.hive:type_name -> yandex.cloud.trino.v1.Metastore.HiveMetastore
	23, // 16: yandex.cloud.trino.v1.FileSystem.s3:type_name -> yandex.cloud.trino.v1.FileSystem.S3FileSystem
	24, // 17: yandex.cloud.trino.v1.FileSystem.external_s3:type_name -> yandex.cloud.trino.v1.FileSystem.ExternalS3FileSystem
	4,  // 18: yandex.cloud.trino.v1.HiveConnector.metastore:type_name -> yandex.cloud.trino.v1.Metastore
	5,  // 19: yandex.cloud.trino.v1.HiveConnector.filesystem:type_name -> yandex.cloud.trino.v1.FileSystem
	25, // 20: yandex.cloud.trino.v1.HiveConnector.additional_properties:type_name -> yandex.cloud.trino.v1.HiveConnector.AdditionalPropertiesEntry
	4,  // 21: yandex.cloud.trino.v1.IcebergConnector.metastore:type_name -> yandex.cloud.trino.v1.Metastore
	5,  // 22: yandex.cloud.trino.v1.IcebergConnector.filesystem:type_name -> yandex.cloud.trino.v1.FileSystem
	26, // 23: yandex.cloud.trino.v1.IcebergConnector.additional_properties:type_name -> yandex.cloud.trino.v1.IcebergConnector.AdditionalPropertiesEntry
	4,  // 24: yandex.cloud.trino.v1.DeltaLakeConnector.metastore:type_name -> yandex.cloud.trino.v1.Metastore
	5,  // 25: yandex.cloud.trino.v1.DeltaLakeConnector.filesystem:type_name -> yandex.cloud.trino.v1.FileSystem
	27, // 26: yandex.cloud.trino.v1.DeltaLakeConnector.additional_properties:type_name -> yandex.cloud.trino.v1.DeltaLakeConnector.AdditionalPropertiesEntry
	28, // 27: yandex.cloud.trino.v1.PostgresqlConnection.on_premise:type_name -> yandex.cloud.trino.v1.PostgresqlConnection.OnPremise
	29, // 28: yandex.cloud.trino.v1.PostgresqlConnection.connection_manager:type_name -> yandex.cloud.trino.v1.PostgresqlConnection.ConnectionManager
	9,  // 29: yandex.cloud.trino.v1.PostgresqlConnector.connection:type_name -> yandex.cloud.trino.v1.PostgresqlConnection
	31, // 30: yandex.cloud.trino.v1.PostgresqlConnector.additional_properties:type_name -> yandex.cloud.trino.v1.PostgresqlConnector.AdditionalPropertiesEntry
	32, // 31: yandex.cloud.trino.v1.ClickhouseConnection.on_premise:type_name -> yandex.cloud.trino.v1.ClickhouseConnection.OnPremise
	33, // 32: yandex.cloud.trino.v1.ClickhouseConnection.connection_manager:type_name -> yandex.cloud.trino.v1.ClickhouseConnection.ConnectionManager
	11, // 33: yandex.cloud.trino.v1.ClickhouseConnector.connection:type_name -> yandex.cloud.trino.v1.ClickhouseConnection
	35, // 34: yandex.cloud.trino.v1.ClickhouseConnector.additional_properties:type_name -> yandex.cloud.trino.v1.ClickhouseConnector.AdditionalPropertiesEntry
	36, // 35: yandex.cloud.trino.v1.TPCHConnector.additional_properties:type_name -> yandex.cloud.trino.v1.TPCHConnector.AdditionalPropertiesEntry
	37, // 36: yandex.cloud.trino.v1.TPCDSConnector.additional_properties:type_name -> yandex.cloud.trino.v1.TPCDSConnector.AdditionalPropertiesEntry
	38, // 37: yandex.cloud.trino.v1.OracleConnection.on_premise:type_name -> yandex.cloud.trino.v1.OracleConnection.OnPremise
	15, // 38: yandex.cloud.trino.v1.OracleConnector.connection:type_name -> yandex.cloud.trino.v1.OracleConnection
	39, // 39: yandex.cloud.trino.v1.OracleConnector.additional_properties:type_name -> yandex.cloud.trino.v1.OracleConnector.AdditionalPropertiesEntry
	40, // 40: yandex.cloud.trino.v1.SQLServerConnection.on_premise:type_name -> yandex.cloud.trino.v1.SQLServerConnection.OnPremise
	17, // 41: yandex.cloud.trino.v1.SQLServerConnector.connection:type_name -> yandex.cloud.trino.v1.SQLServerConnection
	41, // 42: yandex.cloud.trino.v1.SQLServerConnector.additional_properties:type_name -> yandex.cloud.trino.v1.SQLServerConnector.AdditionalPropertiesEntry
	30, // 43: yandex.cloud.trino.v1.PostgresqlConnection.ConnectionManager.connection_properties:type_name -> yandex.cloud.trino.v1.PostgresqlConnection.ConnectionManager.ConnectionPropertiesEntry
	34, // 44: yandex.cloud.trino.v1.ClickhouseConnection.ConnectionManager.connection_properties:type_name -> yandex.cloud.trino.v1.ClickhouseConnection.ConnectionManager.ConnectionPropertiesEntry
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_yandex_cloud_trino_v1_catalog_proto_init() }
func file_yandex_cloud_trino_v1_catalog_proto_init() {
	if File_yandex_cloud_trino_v1_catalog_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Connector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Catalog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CatalogSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CatalogUpdateSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Metastore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*FileSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*HiveConnector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*IcebergConnector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DeltaLakeConnector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PostgresqlConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*PostgresqlConnector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ClickhouseConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ClickhouseConnector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*TPCHConnector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*TPCDSConnector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*OracleConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*OracleConnector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*SQLServerConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*SQLServerConnector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*Metastore_HiveMetastore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*FileSystem_S3FileSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*FileSystem_ExternalS3FileSystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*PostgresqlConnection_OnPremise); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*PostgresqlConnection_ConnectionManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*ClickhouseConnection_OnPremise); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*ClickhouseConnection_ConnectionManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*OracleConnection_OnPremise); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_trino_v1_catalog_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*SQLServerConnection_OnPremise); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_trino_v1_catalog_proto_msgTypes[0].OneofWrappers = []any{
		(*Connector_Hive)(nil),
		(*Connector_Iceberg)(nil),
		(*Connector_DeltaLake)(nil),
		(*Connector_Postgresql)(nil),
		(*Connector_Clickhouse)(nil),
		(*Connector_Tpch)(nil),
		(*Connector_Tpcds)(nil),
		(*Connector_Oracle)(nil),
		(*Connector_Sqlserver)(nil),
	}
	file_yandex_cloud_trino_v1_catalog_proto_msgTypes[4].OneofWrappers = []any{
		(*Metastore_Hive)(nil),
	}
	file_yandex_cloud_trino_v1_catalog_proto_msgTypes[5].OneofWrappers = []any{
		(*FileSystem_S3)(nil),
		(*FileSystem_ExternalS3)(nil),
	}
	file_yandex_cloud_trino_v1_catalog_proto_msgTypes[9].OneofWrappers = []any{
		(*PostgresqlConnection_OnPremise_)(nil),
		(*PostgresqlConnection_ConnectionManager_)(nil),
	}
	file_yandex_cloud_trino_v1_catalog_proto_msgTypes[11].OneofWrappers = []any{
		(*ClickhouseConnection_OnPremise_)(nil),
		(*ClickhouseConnection_ConnectionManager_)(nil),
	}
	file_yandex_cloud_trino_v1_catalog_proto_msgTypes[15].OneofWrappers = []any{
		(*OracleConnection_OnPremise_)(nil),
	}
	file_yandex_cloud_trino_v1_catalog_proto_msgTypes[17].OneofWrappers = []any{
		(*SQLServerConnection_OnPremise_)(nil),
	}
	file_yandex_cloud_trino_v1_catalog_proto_msgTypes[22].OneofWrappers = []any{
		(*Metastore_HiveMetastore_Uri)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_trino_v1_catalog_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_trino_v1_catalog_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_trino_v1_catalog_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_trino_v1_catalog_proto_msgTypes,
	}.Build()
	File_yandex_cloud_trino_v1_catalog_proto = out.File
	file_yandex_cloud_trino_v1_catalog_proto_rawDesc = nil
	file_yandex_cloud_trino_v1_catalog_proto_goTypes = nil
	file_yandex_cloud_trino_v1_catalog_proto_depIdxs = nil
}

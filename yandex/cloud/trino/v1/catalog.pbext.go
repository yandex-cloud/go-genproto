// Code generated by protoc-gen-goext. DO NOT EDIT.

package trino

type Connector_Type = isConnector_Type

func (m *Connector) SetType(v Connector_Type) {
	m.Type = v
}

func (m *Connector) SetHive(v *HiveConnector) {
	m.Type = &Connector_Hive{
		Hive: v,
	}
}

func (m *Connector) SetIceberg(v *IcebergConnector) {
	m.Type = &Connector_Iceberg{
		Iceberg: v,
	}
}

func (m *Connector) SetDeltaLake(v *DeltaLakeConnector) {
	m.Type = &Connector_DeltaLake{
		DeltaLake: v,
	}
}

func (m *Connector) SetPostgresql(v *PostgresqlConnector) {
	m.Type = &Connector_Postgresql{
		Postgresql: v,
	}
}

func (m *Connector) SetClickhouse(v *ClickhouseConnector) {
	m.Type = &Connector_Clickhouse{
		Clickhouse: v,
	}
}

func (m *Connector) SetTpch(v *TPCHConnector) {
	m.Type = &Connector_Tpch{
		Tpch: v,
	}
}

func (m *Connector) SetTpcds(v *TPCDSConnector) {
	m.Type = &Connector_Tpcds{
		Tpcds: v,
	}
}

func (m *Connector) SetOracle(v *OracleConnector) {
	m.Type = &Connector_Oracle{
		Oracle: v,
	}
}

func (m *Connector) SetSqlserver(v *SQLServerConnector) {
	m.Type = &Connector_Sqlserver{
		Sqlserver: v,
	}
}

func (m *Catalog) SetId(v string) {
	m.Id = v
}

func (m *Catalog) SetName(v string) {
	m.Name = v
}

func (m *Catalog) SetConnector(v *Connector) {
	m.Connector = v
}

func (m *Catalog) SetDescription(v string) {
	m.Description = v
}

func (m *Catalog) SetLabels(v map[string]string) {
	m.Labels = v
}

func (m *CatalogSpec) SetName(v string) {
	m.Name = v
}

func (m *CatalogSpec) SetConnector(v *Connector) {
	m.Connector = v
}

func (m *CatalogSpec) SetDescription(v string) {
	m.Description = v
}

func (m *CatalogSpec) SetLabels(v map[string]string) {
	m.Labels = v
}

func (m *CatalogUpdateSpec) SetName(v string) {
	m.Name = v
}

func (m *CatalogUpdateSpec) SetConnector(v *Connector) {
	m.Connector = v
}

func (m *CatalogUpdateSpec) SetDescription(v string) {
	m.Description = v
}

func (m *CatalogUpdateSpec) SetLabels(v map[string]string) {
	m.Labels = v
}

type Metastore_Type = isMetastore_Type

func (m *Metastore) SetType(v Metastore_Type) {
	m.Type = v
}

func (m *Metastore) SetHive(v *Metastore_HiveMetastore) {
	m.Type = &Metastore_Hive{
		Hive: v,
	}
}

type Metastore_HiveMetastore_Connection = isMetastore_HiveMetastore_Connection

func (m *Metastore_HiveMetastore) SetConnection(v Metastore_HiveMetastore_Connection) {
	m.Connection = v
}

func (m *Metastore_HiveMetastore) SetUri(v string) {
	m.Connection = &Metastore_HiveMetastore_Uri{
		Uri: v,
	}
}

type FileSystem_Type = isFileSystem_Type

func (m *FileSystem) SetType(v FileSystem_Type) {
	m.Type = v
}

func (m *FileSystem) SetS3(v *FileSystem_S3FileSystem) {
	m.Type = &FileSystem_S3{
		S3: v,
	}
}

func (m *FileSystem) SetExternalS3(v *FileSystem_ExternalS3FileSystem) {
	m.Type = &FileSystem_ExternalS3{
		ExternalS3: v,
	}
}

func (m *FileSystem_ExternalS3FileSystem) SetAwsAccessKey(v string) {
	m.AwsAccessKey = v
}

func (m *FileSystem_ExternalS3FileSystem) SetAwsSecretKey(v string) {
	m.AwsSecretKey = v
}

func (m *FileSystem_ExternalS3FileSystem) SetAwsEndpoint(v string) {
	m.AwsEndpoint = v
}

func (m *FileSystem_ExternalS3FileSystem) SetAwsRegion(v string) {
	m.AwsRegion = v
}

func (m *HiveConnector) SetMetastore(v *Metastore) {
	m.Metastore = v
}

func (m *HiveConnector) SetFilesystem(v *FileSystem) {
	m.Filesystem = v
}

func (m *HiveConnector) SetAdditionalProperties(v map[string]string) {
	m.AdditionalProperties = v
}

func (m *IcebergConnector) SetMetastore(v *Metastore) {
	m.Metastore = v
}

func (m *IcebergConnector) SetFilesystem(v *FileSystem) {
	m.Filesystem = v
}

func (m *IcebergConnector) SetAdditionalProperties(v map[string]string) {
	m.AdditionalProperties = v
}

func (m *DeltaLakeConnector) SetMetastore(v *Metastore) {
	m.Metastore = v
}

func (m *DeltaLakeConnector) SetFilesystem(v *FileSystem) {
	m.Filesystem = v
}

func (m *DeltaLakeConnector) SetAdditionalProperties(v map[string]string) {
	m.AdditionalProperties = v
}

type PostgresqlConnection_Type = isPostgresqlConnection_Type

func (m *PostgresqlConnection) SetType(v PostgresqlConnection_Type) {
	m.Type = v
}

func (m *PostgresqlConnection) SetOnPremise(v *PostgresqlConnection_OnPremise) {
	m.Type = &PostgresqlConnection_OnPremise_{
		OnPremise: v,
	}
}

func (m *PostgresqlConnection) SetConnectionManager(v *PostgresqlConnection_ConnectionManager) {
	m.Type = &PostgresqlConnection_ConnectionManager_{
		ConnectionManager: v,
	}
}

func (m *PostgresqlConnection_OnPremise) SetConnectionUrl(v string) {
	m.ConnectionUrl = v
}

func (m *PostgresqlConnection_OnPremise) SetUserName(v string) {
	m.UserName = v
}

func (m *PostgresqlConnection_OnPremise) SetPassword(v string) {
	m.Password = v
}

func (m *PostgresqlConnection_ConnectionManager) SetConnectionId(v string) {
	m.ConnectionId = v
}

func (m *PostgresqlConnection_ConnectionManager) SetDatabase(v string) {
	m.Database = v
}

func (m *PostgresqlConnection_ConnectionManager) SetConnectionProperties(v map[string]string) {
	m.ConnectionProperties = v
}

func (m *PostgresqlConnector) SetConnection(v *PostgresqlConnection) {
	m.Connection = v
}

func (m *PostgresqlConnector) SetAdditionalProperties(v map[string]string) {
	m.AdditionalProperties = v
}

type ClickhouseConnection_Type = isClickhouseConnection_Type

func (m *ClickhouseConnection) SetType(v ClickhouseConnection_Type) {
	m.Type = v
}

func (m *ClickhouseConnection) SetOnPremise(v *ClickhouseConnection_OnPremise) {
	m.Type = &ClickhouseConnection_OnPremise_{
		OnPremise: v,
	}
}

func (m *ClickhouseConnection) SetConnectionManager(v *ClickhouseConnection_ConnectionManager) {
	m.Type = &ClickhouseConnection_ConnectionManager_{
		ConnectionManager: v,
	}
}

func (m *ClickhouseConnection_OnPremise) SetConnectionUrl(v string) {
	m.ConnectionUrl = v
}

func (m *ClickhouseConnection_OnPremise) SetUserName(v string) {
	m.UserName = v
}

func (m *ClickhouseConnection_OnPremise) SetPassword(v string) {
	m.Password = v
}

func (m *ClickhouseConnection_ConnectionManager) SetConnectionId(v string) {
	m.ConnectionId = v
}

func (m *ClickhouseConnection_ConnectionManager) SetDatabase(v string) {
	m.Database = v
}

func (m *ClickhouseConnection_ConnectionManager) SetConnectionProperties(v map[string]string) {
	m.ConnectionProperties = v
}

func (m *ClickhouseConnector) SetConnection(v *ClickhouseConnection) {
	m.Connection = v
}

func (m *ClickhouseConnector) SetAdditionalProperties(v map[string]string) {
	m.AdditionalProperties = v
}

func (m *TPCHConnector) SetAdditionalProperties(v map[string]string) {
	m.AdditionalProperties = v
}

func (m *TPCDSConnector) SetAdditionalProperties(v map[string]string) {
	m.AdditionalProperties = v
}

type OracleConnection_Type = isOracleConnection_Type

func (m *OracleConnection) SetType(v OracleConnection_Type) {
	m.Type = v
}

func (m *OracleConnection) SetOnPremise(v *OracleConnection_OnPremise) {
	m.Type = &OracleConnection_OnPremise_{
		OnPremise: v,
	}
}

func (m *OracleConnection_OnPremise) SetConnectionUrl(v string) {
	m.ConnectionUrl = v
}

func (m *OracleConnection_OnPremise) SetUserName(v string) {
	m.UserName = v
}

func (m *OracleConnection_OnPremise) SetPassword(v string) {
	m.Password = v
}

func (m *OracleConnector) SetConnection(v *OracleConnection) {
	m.Connection = v
}

func (m *OracleConnector) SetAdditionalProperties(v map[string]string) {
	m.AdditionalProperties = v
}

type SQLServerConnection_Type = isSQLServerConnection_Type

func (m *SQLServerConnection) SetType(v SQLServerConnection_Type) {
	m.Type = v
}

func (m *SQLServerConnection) SetOnPremise(v *SQLServerConnection_OnPremise) {
	m.Type = &SQLServerConnection_OnPremise_{
		OnPremise: v,
	}
}

func (m *SQLServerConnection_OnPremise) SetConnectionUrl(v string) {
	m.ConnectionUrl = v
}

func (m *SQLServerConnection_OnPremise) SetUserName(v string) {
	m.UserName = v
}

func (m *SQLServerConnection_OnPremise) SetPassword(v string) {
	m.Password = v
}

func (m *SQLServerConnector) SetConnection(v *SQLServerConnection) {
	m.Connection = v
}

func (m *SQLServerConnector) SetAdditionalProperties(v map[string]string) {
	m.AdditionalProperties = v
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/video/v1/stream_line_service.proto

package video

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetStreamLineRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the stream line to retrieve.
	StreamLineId  string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStreamLineRequest) Reset() {
	*x = GetStreamLineRequest{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamLineRequest) ProtoMessage() {}

func (x *GetStreamLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamLineRequest.ProtoReflect.Descriptor instead.
func (*GetStreamLineRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetStreamLineRequest) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

type ListStreamLinesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the channel containing the stream lines to list.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The maximum number of stream lines to return per page.
	PageSize int64 `protobuf:"varint,100,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token for retrieving the next page of results.
	// This token is obtained from the next_page_token field in the previous ListStreamLinesResponse.
	PageToken string `protobuf:"bytes,101,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Specifies the ordering of results.
	// Format is "<field> <order>" (e.g., "createdAt desc").
	// Default: "id asc".
	// Supported fields: ["id", "title", "createdAt", "updatedAt"].
	// Both snake_case and camelCase field names are supported.
	OrderBy string `protobuf:"bytes,102,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Filter expression to narrow down the list of returned stream lines.
	// Expressions consist of terms connected by logical operators.
	// Values containing spaces or quotes must be enclosed in quotes (`'` or `"`)
	// with inner quotes being backslash-escaped.
	//
	// Supported logical operators: ["AND", "OR"].
	// Supported comparison operators: ["=", "!=", ":"] where ":" enables substring matching.
	// Parentheses can be used to group logical expressions.
	//
	// Example: `title:'main' AND id='line-1'`
	//
	// Filterable fields: ["id", "title"].
	// Both snake_case and camelCase field names are supported.
	Filter        string `protobuf:"bytes,103,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStreamLinesRequest) Reset() {
	*x = ListStreamLinesRequest{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStreamLinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamLinesRequest) ProtoMessage() {}

func (x *ListStreamLinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamLinesRequest.ProtoReflect.Descriptor instead.
func (*ListStreamLinesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListStreamLinesRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ListStreamLinesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListStreamLinesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListStreamLinesRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListStreamLinesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListStreamLinesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of stream lines matching the request criteria.
	// May be empty if no stream lines match the criteria or if the channel has no stream lines.
	StreamLines []*StreamLine `protobuf:"bytes,1,rep,name=stream_lines,json=streamLines,proto3" json:"stream_lines,omitempty"`
	// Token for retrieving the next page of results.
	// Empty if there are no more results available.
	NextPageToken string `protobuf:"bytes,100,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStreamLinesResponse) Reset() {
	*x = ListStreamLinesResponse{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStreamLinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamLinesResponse) ProtoMessage() {}

func (x *ListStreamLinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamLinesResponse.ProtoReflect.Descriptor instead.
func (*ListStreamLinesResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListStreamLinesResponse) GetStreamLines() []*StreamLine {
	if x != nil {
		return x.StreamLines
	}
	return nil
}

func (x *ListStreamLinesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type BatchGetStreamLinesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the channel containing the stream lines to retrieve.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// List of stream line IDs to retrieve.
	StreamLineIds []string `protobuf:"bytes,2,rep,name=stream_line_ids,json=streamLineIds,proto3" json:"stream_line_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetStreamLinesRequest) Reset() {
	*x = BatchGetStreamLinesRequest{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetStreamLinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetStreamLinesRequest) ProtoMessage() {}

func (x *BatchGetStreamLinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetStreamLinesRequest.ProtoReflect.Descriptor instead.
func (*BatchGetStreamLinesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{3}
}

func (x *BatchGetStreamLinesRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *BatchGetStreamLinesRequest) GetStreamLineIds() []string {
	if x != nil {
		return x.StreamLineIds
	}
	return nil
}

type BatchGetStreamLinesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of stream lines matching the requested IDs.
	StreamLines   []*StreamLine `protobuf:"bytes,1,rep,name=stream_lines,json=streamLines,proto3" json:"stream_lines,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetStreamLinesResponse) Reset() {
	*x = BatchGetStreamLinesResponse{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetStreamLinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetStreamLinesResponse) ProtoMessage() {}

func (x *BatchGetStreamLinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetStreamLinesResponse.ProtoReflect.Descriptor instead.
func (*BatchGetStreamLinesResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{4}
}

func (x *BatchGetStreamLinesResponse) GetStreamLines() []*StreamLine {
	if x != nil {
		return x.StreamLines
	}
	return nil
}

type CreateStreamLineRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the channel.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Line title.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Video signal settings.
	//
	// Types that are valid to be assigned to InputParams:
	//
	//	*CreateStreamLineRequest_RtmpPush
	//	*CreateStreamLineRequest_RtmpPull
	InputParams isCreateStreamLineRequest_InputParams `protobuf_oneof:"input_params"`
	// Line type.
	//
	// Types that are valid to be assigned to LineTypeParams:
	//
	//	*CreateStreamLineRequest_ManualLine
	//	*CreateStreamLineRequest_AutoLine
	LineTypeParams isCreateStreamLineRequest_LineTypeParams `protobuf_oneof:"line_type_params"`
	// Custom user-defined labels as key:value pairs.
	// Maximum 64 labels per stream line.
	// Keys must be lowercase alphanumeric strings with optional hyphens/underscores.
	// Values can contain alphanumeric characters and various symbols.
	Labels        map[string]string `protobuf:"bytes,200,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateStreamLineRequest) Reset() {
	*x = CreateStreamLineRequest{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStreamLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamLineRequest) ProtoMessage() {}

func (x *CreateStreamLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamLineRequest.ProtoReflect.Descriptor instead.
func (*CreateStreamLineRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateStreamLineRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *CreateStreamLineRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateStreamLineRequest) GetInputParams() isCreateStreamLineRequest_InputParams {
	if x != nil {
		return x.InputParams
	}
	return nil
}

func (x *CreateStreamLineRequest) GetRtmpPush() *RTMPPushParams {
	if x != nil {
		if x, ok := x.InputParams.(*CreateStreamLineRequest_RtmpPush); ok {
			return x.RtmpPush
		}
	}
	return nil
}

func (x *CreateStreamLineRequest) GetRtmpPull() *RTMPPullParams {
	if x != nil {
		if x, ok := x.InputParams.(*CreateStreamLineRequest_RtmpPull); ok {
			return x.RtmpPull
		}
	}
	return nil
}

func (x *CreateStreamLineRequest) GetLineTypeParams() isCreateStreamLineRequest_LineTypeParams {
	if x != nil {
		return x.LineTypeParams
	}
	return nil
}

func (x *CreateStreamLineRequest) GetManualLine() *ManualLineParams {
	if x != nil {
		if x, ok := x.LineTypeParams.(*CreateStreamLineRequest_ManualLine); ok {
			return x.ManualLine
		}
	}
	return nil
}

func (x *CreateStreamLineRequest) GetAutoLine() *AutoLineParams {
	if x != nil {
		if x, ok := x.LineTypeParams.(*CreateStreamLineRequest_AutoLine); ok {
			return x.AutoLine
		}
	}
	return nil
}

func (x *CreateStreamLineRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type isCreateStreamLineRequest_InputParams interface {
	isCreateStreamLineRequest_InputParams()
}

type CreateStreamLineRequest_RtmpPush struct {
	// RTMP push input type.
	RtmpPush *RTMPPushParams `protobuf:"bytes,1000,opt,name=rtmp_push,json=rtmpPush,proto3,oneof"`
}

type CreateStreamLineRequest_RtmpPull struct {
	// RTMP pull input type.
	RtmpPull *RTMPPullParams `protobuf:"bytes,1002,opt,name=rtmp_pull,json=rtmpPull,proto3,oneof"`
}

func (*CreateStreamLineRequest_RtmpPush) isCreateStreamLineRequest_InputParams() {}

func (*CreateStreamLineRequest_RtmpPull) isCreateStreamLineRequest_InputParams() {}

type isCreateStreamLineRequest_LineTypeParams interface {
	isCreateStreamLineRequest_LineTypeParams()
}

type CreateStreamLineRequest_ManualLine struct {
	// Manual stream control.
	ManualLine *ManualLineParams `protobuf:"bytes,2000,opt,name=manual_line,json=manualLine,proto3,oneof"`
}

type CreateStreamLineRequest_AutoLine struct {
	// Automatic stream control.
	AutoLine *AutoLineParams `protobuf:"bytes,2001,opt,name=auto_line,json=autoLine,proto3,oneof"`
}

func (*CreateStreamLineRequest_ManualLine) isCreateStreamLineRequest_LineTypeParams() {}

func (*CreateStreamLineRequest_AutoLine) isCreateStreamLineRequest_LineTypeParams() {}

type CreateStreamLineMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the stream line.
	StreamLineId  string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateStreamLineMetadata) Reset() {
	*x = CreateStreamLineMetadata{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStreamLineMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamLineMetadata) ProtoMessage() {}

func (x *CreateStreamLineMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamLineMetadata.ProtoReflect.Descriptor instead.
func (*CreateStreamLineMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{6}
}

func (x *CreateStreamLineMetadata) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

type UpdateStreamLineRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the line.
	StreamLineId string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
	// Field mask specifying which fields of the stream line should be updated.
	// Only fields specified in this mask will be modified;
	// all other fields will retain their current values.
	// This allows for partial updates.
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// Line title.
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// Video signal settings.
	//
	// Types that are valid to be assigned to InputParams:
	//
	//	*UpdateStreamLineRequest_RtmpPush
	//	*UpdateStreamLineRequest_RtmpPull
	InputParams isUpdateStreamLineRequest_InputParams `protobuf_oneof:"input_params"`
	// New custom labels for the stream line as `key:value` pairs.
	// Maximum 64 labels per stream line.
	// If provided, replaces all existing labels.
	Labels        map[string]string `protobuf:"bytes,200,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateStreamLineRequest) Reset() {
	*x = UpdateStreamLineRequest{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStreamLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamLineRequest) ProtoMessage() {}

func (x *UpdateStreamLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamLineRequest.ProtoReflect.Descriptor instead.
func (*UpdateStreamLineRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateStreamLineRequest) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

func (x *UpdateStreamLineRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

func (x *UpdateStreamLineRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateStreamLineRequest) GetInputParams() isUpdateStreamLineRequest_InputParams {
	if x != nil {
		return x.InputParams
	}
	return nil
}

func (x *UpdateStreamLineRequest) GetRtmpPush() *RTMPPushParams {
	if x != nil {
		if x, ok := x.InputParams.(*UpdateStreamLineRequest_RtmpPush); ok {
			return x.RtmpPush
		}
	}
	return nil
}

func (x *UpdateStreamLineRequest) GetRtmpPull() *RTMPPullParams {
	if x != nil {
		if x, ok := x.InputParams.(*UpdateStreamLineRequest_RtmpPull); ok {
			return x.RtmpPull
		}
	}
	return nil
}

func (x *UpdateStreamLineRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type isUpdateStreamLineRequest_InputParams interface {
	isUpdateStreamLineRequest_InputParams()
}

type UpdateStreamLineRequest_RtmpPush struct {
	// RTMP push input type.
	RtmpPush *RTMPPushParams `protobuf:"bytes,1000,opt,name=rtmp_push,json=rtmpPush,proto3,oneof"`
}

type UpdateStreamLineRequest_RtmpPull struct {
	// RTMP pull input type.
	RtmpPull *RTMPPullParams `protobuf:"bytes,1002,opt,name=rtmp_pull,json=rtmpPull,proto3,oneof"`
}

func (*UpdateStreamLineRequest_RtmpPush) isUpdateStreamLineRequest_InputParams() {}

func (*UpdateStreamLineRequest_RtmpPull) isUpdateStreamLineRequest_InputParams() {}

type UpdateStreamLineMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the stream line.
	StreamLineId  string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateStreamLineMetadata) Reset() {
	*x = UpdateStreamLineMetadata{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStreamLineMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamLineMetadata) ProtoMessage() {}

func (x *UpdateStreamLineMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamLineMetadata.ProtoReflect.Descriptor instead.
func (*UpdateStreamLineMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateStreamLineMetadata) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

type DeleteStreamLineRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the stream line to delete.
	StreamLineId  string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteStreamLineRequest) Reset() {
	*x = DeleteStreamLineRequest{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteStreamLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStreamLineRequest) ProtoMessage() {}

func (x *DeleteStreamLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStreamLineRequest.ProtoReflect.Descriptor instead.
func (*DeleteStreamLineRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteStreamLineRequest) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

type DeleteStreamLineMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the stream line.
	// This identifier can be used to track the stream line deletion operation.
	StreamLineId  string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteStreamLineMetadata) Reset() {
	*x = DeleteStreamLineMetadata{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteStreamLineMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStreamLineMetadata) ProtoMessage() {}

func (x *DeleteStreamLineMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStreamLineMetadata.ProtoReflect.Descriptor instead.
func (*DeleteStreamLineMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteStreamLineMetadata) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

type BatchDeleteStreamLinesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the channel containing the stream lines to delete.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// List of stream line IDs to delete.
	// All stream lines must exist in the specified channel.
	StreamLineIds []string `protobuf:"bytes,2,rep,name=stream_line_ids,json=streamLineIds,proto3" json:"stream_line_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchDeleteStreamLinesRequest) Reset() {
	*x = BatchDeleteStreamLinesRequest{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchDeleteStreamLinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteStreamLinesRequest) ProtoMessage() {}

func (x *BatchDeleteStreamLinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteStreamLinesRequest.ProtoReflect.Descriptor instead.
func (*BatchDeleteStreamLinesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{11}
}

func (x *BatchDeleteStreamLinesRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *BatchDeleteStreamLinesRequest) GetStreamLineIds() []string {
	if x != nil {
		return x.StreamLineIds
	}
	return nil
}

type BatchDeleteStreamLinesMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of stream line IDs being deleted.
	// This list can be used to track which stream lines are included
	// in the batch deletion operation.
	StreamLineIds []string `protobuf:"bytes,1,rep,name=stream_line_ids,json=streamLineIds,proto3" json:"stream_line_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchDeleteStreamLinesMetadata) Reset() {
	*x = BatchDeleteStreamLinesMetadata{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchDeleteStreamLinesMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteStreamLinesMetadata) ProtoMessage() {}

func (x *BatchDeleteStreamLinesMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteStreamLinesMetadata.ProtoReflect.Descriptor instead.
func (*BatchDeleteStreamLinesMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{12}
}

func (x *BatchDeleteStreamLinesMetadata) GetStreamLineIds() []string {
	if x != nil {
		return x.StreamLineIds
	}
	return nil
}

type PerformLineActionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the stream line on which to perform the action.
	StreamLineId string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
	// Specifies which action to perform on the stream line.
	//
	// Types that are valid to be assigned to Action:
	//
	//	*PerformLineActionRequest_Activate
	//	*PerformLineActionRequest_Deactivate
	Action        isPerformLineActionRequest_Action `protobuf_oneof:"action"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PerformLineActionRequest) Reset() {
	*x = PerformLineActionRequest{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerformLineActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformLineActionRequest) ProtoMessage() {}

func (x *PerformLineActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformLineActionRequest.ProtoReflect.Descriptor instead.
func (*PerformLineActionRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{13}
}

func (x *PerformLineActionRequest) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

func (x *PerformLineActionRequest) GetAction() isPerformLineActionRequest_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *PerformLineActionRequest) GetActivate() *ActivateAction {
	if x != nil {
		if x, ok := x.Action.(*PerformLineActionRequest_Activate); ok {
			return x.Activate
		}
	}
	return nil
}

func (x *PerformLineActionRequest) GetDeactivate() *DeactivateAction {
	if x != nil {
		if x, ok := x.Action.(*PerformLineActionRequest_Deactivate); ok {
			return x.Deactivate
		}
	}
	return nil
}

type isPerformLineActionRequest_Action interface {
	isPerformLineActionRequest_Action()
}

type PerformLineActionRequest_Activate struct {
	// Activate the stream line, enabling it to receive and process video signals.
	// This is typically used for automatic stream lines.
	Activate *ActivateAction `protobuf:"bytes,1000,opt,name=activate,proto3,oneof"`
}

type PerformLineActionRequest_Deactivate struct {
	// Deactivate the stream line, disabling it from receiving and processing video signals.
	// This is typically used for automatic stream lines.
	Deactivate *DeactivateAction `protobuf:"bytes,1001,opt,name=deactivate,proto3,oneof"`
}

func (*PerformLineActionRequest_Activate) isPerformLineActionRequest_Action() {}

func (*PerformLineActionRequest_Deactivate) isPerformLineActionRequest_Action() {}

type PerformLineActionMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the stream line on which the action is being performed.
	// This identifier can be used to track the action operation
	// and to verify that the action is being applied to the correct stream line.
	StreamLineId  string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PerformLineActionMetadata) Reset() {
	*x = PerformLineActionMetadata{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerformLineActionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformLineActionMetadata) ProtoMessage() {}

func (x *PerformLineActionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformLineActionMetadata.ProtoReflect.Descriptor instead.
func (*PerformLineActionMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{14}
}

func (x *PerformLineActionMetadata) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

// Parameters for creating an RTMP push input type stream line.
type RTMPPushParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RTMPPushParams) Reset() {
	*x = RTMPPushParams{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RTMPPushParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTMPPushParams) ProtoMessage() {}

func (x *RTMPPushParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTMPPushParams.ProtoReflect.Descriptor instead.
func (*RTMPPushParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{15}
}

// Parameters for creating an RTMP pull input type stream line.
type RTMPPullParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The RTMP URL from which to pull the video stream.
	// Must be a valid RTMP URL starting with "rtmp://".
	Url           string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RTMPPullParams) Reset() {
	*x = RTMPPullParams{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RTMPPullParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTMPPullParams) ProtoMessage() {}

func (x *RTMPPullParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTMPPullParams.ProtoReflect.Descriptor instead.
func (*RTMPPullParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{16}
}

func (x *RTMPPullParams) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Parameters for manual stream line.
type ManualLineParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManualLineParams) Reset() {
	*x = ManualLineParams{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManualLineParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualLineParams) ProtoMessage() {}

func (x *ManualLineParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualLineParams.ProtoReflect.Descriptor instead.
func (*ManualLineParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{17}
}

// Parameters for auto stream line.
type AutoLineParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutoLineParams) Reset() {
	*x = AutoLineParams{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoLineParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoLineParams) ProtoMessage() {}

func (x *AutoLineParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoLineParams.ProtoReflect.Descriptor instead.
func (*AutoLineParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{18}
}

// Parameters for the activate action.
type ActivateAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivateAction) Reset() {
	*x = ActivateAction{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivateAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateAction) ProtoMessage() {}

func (x *ActivateAction) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateAction.ProtoReflect.Descriptor instead.
func (*ActivateAction) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{19}
}

// Parameters for the deactivate action.
type DeactivateAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeactivateAction) Reset() {
	*x = DeactivateAction{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeactivateAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateAction) ProtoMessage() {}

func (x *DeactivateAction) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateAction.ProtoReflect.Descriptor instead.
func (*DeactivateAction) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{20}
}

type GetStreamKeyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the stream line for which to retrieve the stream key.
	// The stream line must be a push-type input (RTMP push or SRT push).
	StreamLineId  string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStreamKeyRequest) Reset() {
	*x = GetStreamKeyRequest{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamKeyRequest) ProtoMessage() {}

func (x *GetStreamKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamKeyRequest.ProtoReflect.Descriptor instead.
func (*GetStreamKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{21}
}

func (x *GetStreamKeyRequest) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

type UpdateStreamKeyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the stream line for which to update the stream key.
	// The stream line must be a push-type input (RTMP push or SRT push).
	StreamLineId  string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateStreamKeyRequest) Reset() {
	*x = UpdateStreamKeyRequest{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStreamKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamKeyRequest) ProtoMessage() {}

func (x *UpdateStreamKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamKeyRequest.ProtoReflect.Descriptor instead.
func (*UpdateStreamKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateStreamKeyRequest) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

type UpdateStreamKeyMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the stream line.
	StreamLineId  string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateStreamKeyMetadata) Reset() {
	*x = UpdateStreamKeyMetadata{}
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStreamKeyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamKeyMetadata) ProtoMessage() {}

func (x *UpdateStreamKeyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamKeyMetadata.ProtoReflect.Descriptor instead.
func (*UpdateStreamKeyMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateStreamKeyMetadata) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

var File_yandex_cloud_video_v1_stream_line_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_video_v1_stream_line_service_proto_rawDesc = "" +
	"\n" +
	"/yandex/cloud/video/v1/stream_line_service.proto\x12\x15yandex.cloud.video.v1\x1a\x1cgoogle/api/annotations.proto\x1a google/protobuf/field_mask.proto\x1a yandex/cloud/api/operation.proto\x1a&yandex/cloud/operation/operation.proto\x1a\x1dyandex/cloud/validation.proto\x1a'yandex/cloud/video/v1/stream_line.proto\"J\n" +
	"\x14GetStreamLineRequest\x122\n" +
	"\x0estream_line_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\fstreamLineId\"\xe8\x01\n" +
	"\x16ListStreamLinesRequest\x12+\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tchannelId\x12&\n" +
	"\tpage_size\x18d \x01(\x03B\t\xfa\xc71\x05<=100R\bpageSize\x12*\n" +
	"\n" +
	"page_token\x18e \x01(\tB\v\x8a\xc81\a<=15000R\tpageToken\x12#\n" +
	"\border_by\x18f \x01(\tB\b\x8a\xc81\x04<=50R\aorderBy\x12\"\n" +
	"\x06filter\x18g \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filterJ\x04\b\x02\x10d\"\x8d\x01\n" +
	"\x17ListStreamLinesResponse\x12D\n" +
	"\fstream_lines\x18\x01 \x03(\v2!.yandex.cloud.video.v1.StreamLineR\vstreamLines\x12&\n" +
	"\x0fnext_page_token\x18d \x01(\tR\rnextPageTokenJ\x04\b\x02\x10d\"\x84\x01\n" +
	"\x1aBatchGetStreamLinesRequest\x12+\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tchannelId\x129\n" +
	"\x0fstream_line_ids\x18\x02 \x03(\tB\x11\x82\xc81\x051-100\x8a\xc81\x04<=50R\rstreamLineIds\"c\n" +
	"\x1bBatchGetStreamLinesResponse\x12D\n" +
	"\fstream_lines\x18\x01 \x03(\v2!.yandex.cloud.video.v1.StreamLineR\vstreamLines\"\xb7\x05\n" +
	"\x17CreateStreamLineRequest\x12+\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tchannelId\x12#\n" +
	"\x05title\x18\x02 \x01(\tB\r\xe8\xc71\x01\x8a\xc81\x05<=300R\x05title\x12E\n" +
	"\trtmp_push\x18\xe8\a \x01(\v2%.yandex.cloud.video.v1.RTMPPushParamsH\x00R\brtmpPush\x12E\n" +
	"\trtmp_pull\x18\xea\a \x01(\v2%.yandex.cloud.video.v1.RTMPPullParamsH\x00R\brtmpPull\x12K\n" +
	"\vmanual_line\x18\xd0\x0f \x01(\v2'.yandex.cloud.video.v1.ManualLineParamsH\x01R\n" +
	"manualLine\x12E\n" +
	"\tauto_line\x18\xd1\x0f \x01(\v2%.yandex.cloud.video.v1.AutoLineParamsH\x01R\bautoLine\x12\x97\x01\n" +
	"\x06labels\x18\xc8\x01 \x03(\v2:.yandex.cloud.video.v1.CreateStreamLineRequest.LabelsEntryBB\xf2\xc71\x12[-_.@:/0-9a-zA-Z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x04<=63R\x06labels\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x14\n" +
	"\finput_params\x12\x04\xc0\xc11\x01B\x18\n" +
	"\x10line_type_params\x12\x04\xc0\xc11\x01J\x04\b\x03\x10\x04J\x05\b\x04\x10\xc8\x01J\x06\b\xc9\x01\x10\xe8\aJ\x06\b\xe9\a\x10\xea\aJ\x06\b\xeb\a\x10\xd0\x0f\"@\n" +
	"\x18CreateStreamLineMetadata\x12$\n" +
	"\x0estream_line_id\x18\x01 \x01(\tR\fstreamLineId\"\xc7\x04\n" +
	"\x17UpdateStreamLineRequest\x122\n" +
	"\x0estream_line_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\fstreamLineId\x12?\n" +
	"\n" +
	"field_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskB\x04\xe8\xc71\x01R\tfieldMask\x12\x1f\n" +
	"\x05title\x18\x03 \x01(\tB\t\x8a\xc81\x05<=300R\x05title\x12E\n" +
	"\trtmp_push\x18\xe8\a \x01(\v2%.yandex.cloud.video.v1.RTMPPushParamsH\x00R\brtmpPush\x12E\n" +
	"\trtmp_pull\x18\xea\a \x01(\v2%.yandex.cloud.video.v1.RTMPPullParamsH\x00R\brtmpPull\x12\x97\x01\n" +
	"\x06labels\x18\xc8\x01 \x03(\v2:.yandex.cloud.video.v1.UpdateStreamLineRequest.LabelsEntryBB\xf2\xc71\x12[-_.@:/0-9a-zA-Z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x04<=63R\x06labels\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x0e\n" +
	"\finput_paramsJ\x04\b\x04\x10\x05J\x05\b\x05\x10\xc8\x01J\x06\b\xc9\x01\x10\xe8\aJ\x06\b\xe9\a\x10\xea\aJ\x06\b\xeb\a\x10\xef\a\"@\n" +
	"\x18UpdateStreamLineMetadata\x12$\n" +
	"\x0estream_line_id\x18\x01 \x01(\tR\fstreamLineId\"M\n" +
	"\x17DeleteStreamLineRequest\x122\n" +
	"\x0estream_line_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\fstreamLineId\"@\n" +
	"\x18DeleteStreamLineMetadata\x12$\n" +
	"\x0estream_line_id\x18\x01 \x01(\tR\fstreamLineId\"\x87\x01\n" +
	"\x1dBatchDeleteStreamLinesRequest\x12+\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tchannelId\x129\n" +
	"\x0fstream_line_ids\x18\x02 \x03(\tB\x11\x82\xc81\x051-100\x8a\xc81\x04<=50R\rstreamLineIds\"H\n" +
	"\x1eBatchDeleteStreamLinesMetadata\x12&\n" +
	"\x0fstream_line_ids\x18\x01 \x03(\tR\rstreamLineIds\"\xf7\x01\n" +
	"\x18PerformLineActionRequest\x122\n" +
	"\x0estream_line_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\fstreamLineId\x12D\n" +
	"\bactivate\x18\xe8\a \x01(\v2%.yandex.cloud.video.v1.ActivateActionH\x00R\bactivate\x12J\n" +
	"\n" +
	"deactivate\x18\xe9\a \x01(\v2'.yandex.cloud.video.v1.DeactivateActionH\x00R\n" +
	"deactivateB\x0e\n" +
	"\x06action\x12\x04\xc0\xc11\x01J\x05\b\x02\x10\xe8\a\"A\n" +
	"\x19PerformLineActionMetadata\x12$\n" +
	"\x0estream_line_id\x18\x01 \x01(\tR\fstreamLineId\"\x10\n" +
	"\x0eRTMPPushParams\"5\n" +
	"\x0eRTMPPullParams\x12#\n" +
	"\x03url\x18\x01 \x01(\tB\x11\xe8\xc71\x01\xf2\xc71\trtmp://.*R\x03url\"\x12\n" +
	"\x10ManualLineParams\"\x10\n" +
	"\x0eAutoLineParams\"\x10\n" +
	"\x0eActivateAction\"\x12\n" +
	"\x10DeactivateAction\"I\n" +
	"\x13GetStreamKeyRequest\x122\n" +
	"\x0estream_line_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\fstreamLineId\"L\n" +
	"\x16UpdateStreamKeyRequest\x122\n" +
	"\x0estream_line_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\fstreamLineId\"?\n" +
	"\x17UpdateStreamKeyMetadata\x12$\n" +
	"\x0estream_line_id\x18\x01 \x01(\tR\fstreamLineId2\x82\x0e\n" +
	"\x11StreamLineService\x12\x85\x01\n" +
	"\x03Get\x12+.yandex.cloud.video.v1.GetStreamLineRequest\x1a!.yandex.cloud.video.v1.StreamLine\".\x82\xd3\xe4\x93\x02(\x12&/video/v1/streamLines/{stream_line_id}\x12\x84\x01\n" +
	"\x04List\x12-.yandex.cloud.video.v1.ListStreamLinesRequest\x1a..yandex.cloud.video.v1.ListStreamLinesResponse\"\x1d\x82\xd3\xe4\x93\x02\x17\x12\x15/video/v1/streamLines\x12\x9c\x01\n" +
	"\bBatchGet\x121.yandex.cloud.video.v1.BatchGetStreamLinesRequest\x1a2.yandex.cloud.video.v1.BatchGetStreamLinesResponse\")\x82\xd3\xe4\x93\x02#:\x01*\"\x1e/video/v1/streamLines:batchGet\x12\xa7\x01\n" +
	"\x06Create\x12..yandex.cloud.video.v1.CreateStreamLineRequest\x1a!.yandex.cloud.operation.Operation\"J\xb2\xd2*&\n" +
	"\x18CreateStreamLineMetadata\x12\n" +
	"StreamLine\x82\xd3\xe4\x93\x02\x1a:\x01*\"\x15/video/v1/streamLines\x12\xb8\x01\n" +
	"\x06Update\x12..yandex.cloud.video.v1.UpdateStreamLineRequest\x1a!.yandex.cloud.operation.Operation\"[\xb2\xd2*&\n" +
	"\x18UpdateStreamLineMetadata\x12\n" +
	"StreamLine\x82\xd3\xe4\x93\x02+:\x01*2&/video/v1/streamLines/{stream_line_id}\x12\xc0\x01\n" +
	"\x06Delete\x12..yandex.cloud.video.v1.DeleteStreamLineRequest\x1a!.yandex.cloud.operation.Operation\"c\xb2\xd2*1\n" +
	"\x18DeleteStreamLineMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02(*&/video/v1/streamLines/{stream_line_id}\x12\xcf\x01\n" +
	"\vBatchDelete\x124.yandex.cloud.video.v1.BatchDeleteStreamLinesRequest\x1a!.yandex.cloud.operation.Operation\"g\xb2\xd2*7\n" +
	"\x1eBatchDeleteStreamLinesMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02&:\x01*\"!/video/v1/streamLines:batchDelete\x12\xcf\x01\n" +
	"\rPerformAction\x12/.yandex.cloud.video.v1.PerformLineActionRequest\x1a!.yandex.cloud.operation.Operation\"j\xb2\xd2*'\n" +
	"\x19PerformLineActionMetadata\x12\n" +
	"StreamLine\x82\xd3\xe4\x93\x029:\x01*\"4/video/v1/streamLines/{stream_line_id}:performAction\x12\x9d\x01\n" +
	"\fGetStreamKey\x12*.yandex.cloud.video.v1.GetStreamKeyRequest\x1a$.yandex.cloud.video.v1.PushStreamKey\";\x82\xd3\xe4\x93\x025\x123/video/v1/streamLines/{stream_line_id}:getStreamKey\x12\xd2\x01\n" +
	"\x0fUpdateStreamKey\x12-.yandex.cloud.video.v1.UpdateStreamKeyRequest\x1a!.yandex.cloud.operation.Operation\"m\xb2\xd2*(\n" +
	"\x17UpdateStreamKeyMetadata\x12\rPushStreamKey\x82\xd3\xe4\x93\x02;:\x01*26/video/v1/streamLines/{stream_line_id}:updateStreamKeyB\\\n" +
	"\x19yandex.cloud.api.video.v1Z?github.com/yandex-cloud/go-genproto/yandex/cloud/video/v1;videob\x06proto3"

var (
	file_yandex_cloud_video_v1_stream_line_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_video_v1_stream_line_service_proto_rawDescData []byte
)

func file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_video_v1_stream_line_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_video_v1_stream_line_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_video_v1_stream_line_service_proto_rawDesc), len(file_yandex_cloud_video_v1_stream_line_service_proto_rawDesc)))
	})
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescData
}

var file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_yandex_cloud_video_v1_stream_line_service_proto_goTypes = []any{
	(*GetStreamLineRequest)(nil),           // 0: yandex.cloud.video.v1.GetStreamLineRequest
	(*ListStreamLinesRequest)(nil),         // 1: yandex.cloud.video.v1.ListStreamLinesRequest
	(*ListStreamLinesResponse)(nil),        // 2: yandex.cloud.video.v1.ListStreamLinesResponse
	(*BatchGetStreamLinesRequest)(nil),     // 3: yandex.cloud.video.v1.BatchGetStreamLinesRequest
	(*BatchGetStreamLinesResponse)(nil),    // 4: yandex.cloud.video.v1.BatchGetStreamLinesResponse
	(*CreateStreamLineRequest)(nil),        // 5: yandex.cloud.video.v1.CreateStreamLineRequest
	(*CreateStreamLineMetadata)(nil),       // 6: yandex.cloud.video.v1.CreateStreamLineMetadata
	(*UpdateStreamLineRequest)(nil),        // 7: yandex.cloud.video.v1.UpdateStreamLineRequest
	(*UpdateStreamLineMetadata)(nil),       // 8: yandex.cloud.video.v1.UpdateStreamLineMetadata
	(*DeleteStreamLineRequest)(nil),        // 9: yandex.cloud.video.v1.DeleteStreamLineRequest
	(*DeleteStreamLineMetadata)(nil),       // 10: yandex.cloud.video.v1.DeleteStreamLineMetadata
	(*BatchDeleteStreamLinesRequest)(nil),  // 11: yandex.cloud.video.v1.BatchDeleteStreamLinesRequest
	(*BatchDeleteStreamLinesMetadata)(nil), // 12: yandex.cloud.video.v1.BatchDeleteStreamLinesMetadata
	(*PerformLineActionRequest)(nil),       // 13: yandex.cloud.video.v1.PerformLineActionRequest
	(*PerformLineActionMetadata)(nil),      // 14: yandex.cloud.video.v1.PerformLineActionMetadata
	(*RTMPPushParams)(nil),                 // 15: yandex.cloud.video.v1.RTMPPushParams
	(*RTMPPullParams)(nil),                 // 16: yandex.cloud.video.v1.RTMPPullParams
	(*ManualLineParams)(nil),               // 17: yandex.cloud.video.v1.ManualLineParams
	(*AutoLineParams)(nil),                 // 18: yandex.cloud.video.v1.AutoLineParams
	(*ActivateAction)(nil),                 // 19: yandex.cloud.video.v1.ActivateAction
	(*DeactivateAction)(nil),               // 20: yandex.cloud.video.v1.DeactivateAction
	(*GetStreamKeyRequest)(nil),            // 21: yandex.cloud.video.v1.GetStreamKeyRequest
	(*UpdateStreamKeyRequest)(nil),         // 22: yandex.cloud.video.v1.UpdateStreamKeyRequest
	(*UpdateStreamKeyMetadata)(nil),        // 23: yandex.cloud.video.v1.UpdateStreamKeyMetadata
	nil,                                    // 24: yandex.cloud.video.v1.CreateStreamLineRequest.LabelsEntry
	nil,                                    // 25: yandex.cloud.video.v1.UpdateStreamLineRequest.LabelsEntry
	(*StreamLine)(nil),                     // 26: yandex.cloud.video.v1.StreamLine
	(*fieldmaskpb.FieldMask)(nil),          // 27: google.protobuf.FieldMask
	(*operation.Operation)(nil),            // 28: yandex.cloud.operation.Operation
	(*PushStreamKey)(nil),                  // 29: yandex.cloud.video.v1.PushStreamKey
}
var file_yandex_cloud_video_v1_stream_line_service_proto_depIdxs = []int32{
	26, // 0: yandex.cloud.video.v1.ListStreamLinesResponse.stream_lines:type_name -> yandex.cloud.video.v1.StreamLine
	26, // 1: yandex.cloud.video.v1.BatchGetStreamLinesResponse.stream_lines:type_name -> yandex.cloud.video.v1.StreamLine
	15, // 2: yandex.cloud.video.v1.CreateStreamLineRequest.rtmp_push:type_name -> yandex.cloud.video.v1.RTMPPushParams
	16, // 3: yandex.cloud.video.v1.CreateStreamLineRequest.rtmp_pull:type_name -> yandex.cloud.video.v1.RTMPPullParams
	17, // 4: yandex.cloud.video.v1.CreateStreamLineRequest.manual_line:type_name -> yandex.cloud.video.v1.ManualLineParams
	18, // 5: yandex.cloud.video.v1.CreateStreamLineRequest.auto_line:type_name -> yandex.cloud.video.v1.AutoLineParams
	24, // 6: yandex.cloud.video.v1.CreateStreamLineRequest.labels:type_name -> yandex.cloud.video.v1.CreateStreamLineRequest.LabelsEntry
	27, // 7: yandex.cloud.video.v1.UpdateStreamLineRequest.field_mask:type_name -> google.protobuf.FieldMask
	15, // 8: yandex.cloud.video.v1.UpdateStreamLineRequest.rtmp_push:type_name -> yandex.cloud.video.v1.RTMPPushParams
	16, // 9: yandex.cloud.video.v1.UpdateStreamLineRequest.rtmp_pull:type_name -> yandex.cloud.video.v1.RTMPPullParams
	25, // 10: yandex.cloud.video.v1.UpdateStreamLineRequest.labels:type_name -> yandex.cloud.video.v1.UpdateStreamLineRequest.LabelsEntry
	19, // 11: yandex.cloud.video.v1.PerformLineActionRequest.activate:type_name -> yandex.cloud.video.v1.ActivateAction
	20, // 12: yandex.cloud.video.v1.PerformLineActionRequest.deactivate:type_name -> yandex.cloud.video.v1.DeactivateAction
	0,  // 13: yandex.cloud.video.v1.StreamLineService.Get:input_type -> yandex.cloud.video.v1.GetStreamLineRequest
	1,  // 14: yandex.cloud.video.v1.StreamLineService.List:input_type -> yandex.cloud.video.v1.ListStreamLinesRequest
	3,  // 15: yandex.cloud.video.v1.StreamLineService.BatchGet:input_type -> yandex.cloud.video.v1.BatchGetStreamLinesRequest
	5,  // 16: yandex.cloud.video.v1.StreamLineService.Create:input_type -> yandex.cloud.video.v1.CreateStreamLineRequest
	7,  // 17: yandex.cloud.video.v1.StreamLineService.Update:input_type -> yandex.cloud.video.v1.UpdateStreamLineRequest
	9,  // 18: yandex.cloud.video.v1.StreamLineService.Delete:input_type -> yandex.cloud.video.v1.DeleteStreamLineRequest
	11, // 19: yandex.cloud.video.v1.StreamLineService.BatchDelete:input_type -> yandex.cloud.video.v1.BatchDeleteStreamLinesRequest
	13, // 20: yandex.cloud.video.v1.StreamLineService.PerformAction:input_type -> yandex.cloud.video.v1.PerformLineActionRequest
	21, // 21: yandex.cloud.video.v1.StreamLineService.GetStreamKey:input_type -> yandex.cloud.video.v1.GetStreamKeyRequest
	22, // 22: yandex.cloud.video.v1.StreamLineService.UpdateStreamKey:input_type -> yandex.cloud.video.v1.UpdateStreamKeyRequest
	26, // 23: yandex.cloud.video.v1.StreamLineService.Get:output_type -> yandex.cloud.video.v1.StreamLine
	2,  // 24: yandex.cloud.video.v1.StreamLineService.List:output_type -> yandex.cloud.video.v1.ListStreamLinesResponse
	4,  // 25: yandex.cloud.video.v1.StreamLineService.BatchGet:output_type -> yandex.cloud.video.v1.BatchGetStreamLinesResponse
	28, // 26: yandex.cloud.video.v1.StreamLineService.Create:output_type -> yandex.cloud.operation.Operation
	28, // 27: yandex.cloud.video.v1.StreamLineService.Update:output_type -> yandex.cloud.operation.Operation
	28, // 28: yandex.cloud.video.v1.StreamLineService.Delete:output_type -> yandex.cloud.operation.Operation
	28, // 29: yandex.cloud.video.v1.StreamLineService.BatchDelete:output_type -> yandex.cloud.operation.Operation
	28, // 30: yandex.cloud.video.v1.StreamLineService.PerformAction:output_type -> yandex.cloud.operation.Operation
	29, // 31: yandex.cloud.video.v1.StreamLineService.GetStreamKey:output_type -> yandex.cloud.video.v1.PushStreamKey
	28, // 32: yandex.cloud.video.v1.StreamLineService.UpdateStreamKey:output_type -> yandex.cloud.operation.Operation
	23, // [23:33] is the sub-list for method output_type
	13, // [13:23] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_yandex_cloud_video_v1_stream_line_service_proto_init() }
func file_yandex_cloud_video_v1_stream_line_service_proto_init() {
	if File_yandex_cloud_video_v1_stream_line_service_proto != nil {
		return
	}
	file_yandex_cloud_video_v1_stream_line_proto_init()
	file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[5].OneofWrappers = []any{
		(*CreateStreamLineRequest_RtmpPush)(nil),
		(*CreateStreamLineRequest_RtmpPull)(nil),
		(*CreateStreamLineRequest_ManualLine)(nil),
		(*CreateStreamLineRequest_AutoLine)(nil),
	}
	file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[7].OneofWrappers = []any{
		(*UpdateStreamLineRequest_RtmpPush)(nil),
		(*UpdateStreamLineRequest_RtmpPull)(nil),
	}
	file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[13].OneofWrappers = []any{
		(*PerformLineActionRequest_Activate)(nil),
		(*PerformLineActionRequest_Deactivate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_video_v1_stream_line_service_proto_rawDesc), len(file_yandex_cloud_video_v1_stream_line_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_video_v1_stream_line_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_video_v1_stream_line_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_video_v1_stream_line_service_proto = out.File
	file_yandex_cloud_video_v1_stream_line_service_proto_goTypes = nil
	file_yandex_cloud_video_v1_stream_line_service_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.17.3
// source: yandex/cloud/video/v1/stream_line_service.proto

package video

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetStreamLineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the line.
	StreamLineId string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
}

func (x *GetStreamLineRequest) Reset() {
	*x = GetStreamLineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStreamLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamLineRequest) ProtoMessage() {}

func (x *GetStreamLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamLineRequest.ProtoReflect.Descriptor instead.
func (*GetStreamLineRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetStreamLineRequest) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

type ListStreamLinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the channel.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The maximum number of the results per page to return. Default value: 100.
	PageSize int64 `protobuf:"varint,100,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token for getting the next page of the result.
	PageToken string `protobuf:"bytes,101,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// By which column the listing should be ordered and in which direction,
	// format is "createdAt desc". "id asc" if omitted.
	// Possible fields: ["id", "title", "createdAt", "updatedAt"]
	// Both snake_case and camelCase are supported for fields.
	OrderBy string `protobuf:"bytes,102,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Filter expression that filters resources listed in the response.
	// Expressions are composed of terms connected by logic operators.
	// Value in quotes: `'` or `"`
	// Example: "key1='value' AND key2='value'"
	// Supported operators: ["AND"].
	// Supported fields: ["title"]
	// Both snake_case and camelCase are supported for fields.
	Filter string `protobuf:"bytes,103,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListStreamLinesRequest) Reset() {
	*x = ListStreamLinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStreamLinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamLinesRequest) ProtoMessage() {}

func (x *ListStreamLinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamLinesRequest.ProtoReflect.Descriptor instead.
func (*ListStreamLinesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListStreamLinesRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ListStreamLinesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListStreamLinesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListStreamLinesRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListStreamLinesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListStreamLinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of lines for channel.
	StreamLines []*StreamLine `protobuf:"bytes,1,rep,name=stream_lines,json=streamLines,proto3" json:"stream_lines,omitempty"`
	// Token for getting the next page.
	NextPageToken string `protobuf:"bytes,100,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListStreamLinesResponse) Reset() {
	*x = ListStreamLinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStreamLinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamLinesResponse) ProtoMessage() {}

func (x *ListStreamLinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamLinesResponse.ProtoReflect.Descriptor instead.
func (*ListStreamLinesResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListStreamLinesResponse) GetStreamLines() []*StreamLine {
	if x != nil {
		return x.StreamLines
	}
	return nil
}

func (x *ListStreamLinesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateStreamLineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the channel.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Line title.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// ID of the thumbnail.
	ThumbnailId string `protobuf:"bytes,3,opt,name=thumbnail_id,json=thumbnailId,proto3" json:"thumbnail_id,omitempty"`
	// Custom labels as “ key:value “ pairs. Maximum 64 per resource.
	Labels map[string]string `protobuf:"bytes,200,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Video signal settings.
	//
	// Types that are assignable to InputParams:
	//
	//	*CreateStreamLineRequest_RtmpPush
	//	*CreateStreamLineRequest_SrtPush
	//	*CreateStreamLineRequest_RtmpPull
	//	*CreateStreamLineRequest_SrtPull
	//	*CreateStreamLineRequest_TcpPull
	//	*CreateStreamLineRequest_RtspPull
	InputParams isCreateStreamLineRequest_InputParams `protobuf_oneof:"input_params"`
	// Line type.
	//
	// Types that are assignable to LineTypeParams:
	//
	//	*CreateStreamLineRequest_ManualLine
	//	*CreateStreamLineRequest_AutoLine
	LineTypeParams isCreateStreamLineRequest_LineTypeParams `protobuf_oneof:"line_type_params"`
}

func (x *CreateStreamLineRequest) Reset() {
	*x = CreateStreamLineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStreamLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamLineRequest) ProtoMessage() {}

func (x *CreateStreamLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamLineRequest.ProtoReflect.Descriptor instead.
func (*CreateStreamLineRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateStreamLineRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *CreateStreamLineRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateStreamLineRequest) GetThumbnailId() string {
	if x != nil {
		return x.ThumbnailId
	}
	return ""
}

func (x *CreateStreamLineRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (m *CreateStreamLineRequest) GetInputParams() isCreateStreamLineRequest_InputParams {
	if m != nil {
		return m.InputParams
	}
	return nil
}

func (x *CreateStreamLineRequest) GetRtmpPush() *RTMPPushParams {
	if x, ok := x.GetInputParams().(*CreateStreamLineRequest_RtmpPush); ok {
		return x.RtmpPush
	}
	return nil
}

func (x *CreateStreamLineRequest) GetSrtPush() *SRTPushParams {
	if x, ok := x.GetInputParams().(*CreateStreamLineRequest_SrtPush); ok {
		return x.SrtPush
	}
	return nil
}

func (x *CreateStreamLineRequest) GetRtmpPull() *RTMPPullParams {
	if x, ok := x.GetInputParams().(*CreateStreamLineRequest_RtmpPull); ok {
		return x.RtmpPull
	}
	return nil
}

func (x *CreateStreamLineRequest) GetSrtPull() *SRTPullParams {
	if x, ok := x.GetInputParams().(*CreateStreamLineRequest_SrtPull); ok {
		return x.SrtPull
	}
	return nil
}

func (x *CreateStreamLineRequest) GetTcpPull() *TCPPullParams {
	if x, ok := x.GetInputParams().(*CreateStreamLineRequest_TcpPull); ok {
		return x.TcpPull
	}
	return nil
}

func (x *CreateStreamLineRequest) GetRtspPull() *RTSPPullParams {
	if x, ok := x.GetInputParams().(*CreateStreamLineRequest_RtspPull); ok {
		return x.RtspPull
	}
	return nil
}

func (m *CreateStreamLineRequest) GetLineTypeParams() isCreateStreamLineRequest_LineTypeParams {
	if m != nil {
		return m.LineTypeParams
	}
	return nil
}

func (x *CreateStreamLineRequest) GetManualLine() *ManualLineParams {
	if x, ok := x.GetLineTypeParams().(*CreateStreamLineRequest_ManualLine); ok {
		return x.ManualLine
	}
	return nil
}

func (x *CreateStreamLineRequest) GetAutoLine() *AutoLineParams {
	if x, ok := x.GetLineTypeParams().(*CreateStreamLineRequest_AutoLine); ok {
		return x.AutoLine
	}
	return nil
}

type isCreateStreamLineRequest_InputParams interface {
	isCreateStreamLineRequest_InputParams()
}

type CreateStreamLineRequest_RtmpPush struct {
	// RTMP push input type.
	RtmpPush *RTMPPushParams `protobuf:"bytes,1000,opt,name=rtmp_push,json=rtmpPush,proto3,oneof"`
}

type CreateStreamLineRequest_SrtPush struct {
	// SRT push input type.
	SrtPush *SRTPushParams `protobuf:"bytes,1001,opt,name=srt_push,json=srtPush,proto3,oneof"`
}

type CreateStreamLineRequest_RtmpPull struct {
	// RTMP pull input type.
	RtmpPull *RTMPPullParams `protobuf:"bytes,1002,opt,name=rtmp_pull,json=rtmpPull,proto3,oneof"`
}

type CreateStreamLineRequest_SrtPull struct {
	// SRT pull input type.
	SrtPull *SRTPullParams `protobuf:"bytes,1003,opt,name=srt_pull,json=srtPull,proto3,oneof"`
}

type CreateStreamLineRequest_TcpPull struct {
	// TCP pull input type.
	TcpPull *TCPPullParams `protobuf:"bytes,1004,opt,name=tcp_pull,json=tcpPull,proto3,oneof"`
}

type CreateStreamLineRequest_RtspPull struct {
	// RTSP pull input type.
	RtspPull *RTSPPullParams `protobuf:"bytes,1006,opt,name=rtsp_pull,json=rtspPull,proto3,oneof"`
}

func (*CreateStreamLineRequest_RtmpPush) isCreateStreamLineRequest_InputParams() {}

func (*CreateStreamLineRequest_SrtPush) isCreateStreamLineRequest_InputParams() {}

func (*CreateStreamLineRequest_RtmpPull) isCreateStreamLineRequest_InputParams() {}

func (*CreateStreamLineRequest_SrtPull) isCreateStreamLineRequest_InputParams() {}

func (*CreateStreamLineRequest_TcpPull) isCreateStreamLineRequest_InputParams() {}

func (*CreateStreamLineRequest_RtspPull) isCreateStreamLineRequest_InputParams() {}

type isCreateStreamLineRequest_LineTypeParams interface {
	isCreateStreamLineRequest_LineTypeParams()
}

type CreateStreamLineRequest_ManualLine struct {
	// Manual control of stream.
	ManualLine *ManualLineParams `protobuf:"bytes,2000,opt,name=manual_line,json=manualLine,proto3,oneof"`
}

type CreateStreamLineRequest_AutoLine struct {
	// Automatic control of stream.
	AutoLine *AutoLineParams `protobuf:"bytes,2001,opt,name=auto_line,json=autoLine,proto3,oneof"`
}

func (*CreateStreamLineRequest_ManualLine) isCreateStreamLineRequest_LineTypeParams() {}

func (*CreateStreamLineRequest_AutoLine) isCreateStreamLineRequest_LineTypeParams() {}

type CreateStreamLineMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the line.
	StreamLineId string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
}

func (x *CreateStreamLineMetadata) Reset() {
	*x = CreateStreamLineMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStreamLineMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamLineMetadata) ProtoMessage() {}

func (x *CreateStreamLineMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamLineMetadata.ProtoReflect.Descriptor instead.
func (*CreateStreamLineMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateStreamLineMetadata) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

type UpdateStreamLineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the line.
	StreamLineId string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
	// Field mask that specifies which fields of the line are going to be updated.
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// Line title.
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// ID of the thumbnail.
	ThumbnailId string `protobuf:"bytes,4,opt,name=thumbnail_id,json=thumbnailId,proto3" json:"thumbnail_id,omitempty"`
	// Custom labels as “ key:value “ pairs. Maximum 64 per resource.
	Labels map[string]string `protobuf:"bytes,200,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Video signal settings.
	//
	// Types that are assignable to InputParams:
	//
	//	*UpdateStreamLineRequest_RtmpPush
	//	*UpdateStreamLineRequest_SrtPush
	//	*UpdateStreamLineRequest_RtmpPull
	//	*UpdateStreamLineRequest_SrtPull
	//	*UpdateStreamLineRequest_TcpPull
	//	*UpdateStreamLineRequest_RtspPull
	InputParams isUpdateStreamLineRequest_InputParams `protobuf_oneof:"input_params"`
}

func (x *UpdateStreamLineRequest) Reset() {
	*x = UpdateStreamLineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStreamLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamLineRequest) ProtoMessage() {}

func (x *UpdateStreamLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamLineRequest.ProtoReflect.Descriptor instead.
func (*UpdateStreamLineRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateStreamLineRequest) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

func (x *UpdateStreamLineRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

func (x *UpdateStreamLineRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateStreamLineRequest) GetThumbnailId() string {
	if x != nil {
		return x.ThumbnailId
	}
	return ""
}

func (x *UpdateStreamLineRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (m *UpdateStreamLineRequest) GetInputParams() isUpdateStreamLineRequest_InputParams {
	if m != nil {
		return m.InputParams
	}
	return nil
}

func (x *UpdateStreamLineRequest) GetRtmpPush() *RTMPPushParams {
	if x, ok := x.GetInputParams().(*UpdateStreamLineRequest_RtmpPush); ok {
		return x.RtmpPush
	}
	return nil
}

func (x *UpdateStreamLineRequest) GetSrtPush() *SRTPushParams {
	if x, ok := x.GetInputParams().(*UpdateStreamLineRequest_SrtPush); ok {
		return x.SrtPush
	}
	return nil
}

func (x *UpdateStreamLineRequest) GetRtmpPull() *RTMPPullParams {
	if x, ok := x.GetInputParams().(*UpdateStreamLineRequest_RtmpPull); ok {
		return x.RtmpPull
	}
	return nil
}

func (x *UpdateStreamLineRequest) GetSrtPull() *SRTPullParams {
	if x, ok := x.GetInputParams().(*UpdateStreamLineRequest_SrtPull); ok {
		return x.SrtPull
	}
	return nil
}

func (x *UpdateStreamLineRequest) GetTcpPull() *TCPPullParams {
	if x, ok := x.GetInputParams().(*UpdateStreamLineRequest_TcpPull); ok {
		return x.TcpPull
	}
	return nil
}

func (x *UpdateStreamLineRequest) GetRtspPull() *RTSPPullParams {
	if x, ok := x.GetInputParams().(*UpdateStreamLineRequest_RtspPull); ok {
		return x.RtspPull
	}
	return nil
}

type isUpdateStreamLineRequest_InputParams interface {
	isUpdateStreamLineRequest_InputParams()
}

type UpdateStreamLineRequest_RtmpPush struct {
	// RTMP push input type.
	RtmpPush *RTMPPushParams `protobuf:"bytes,1000,opt,name=rtmp_push,json=rtmpPush,proto3,oneof"`
}

type UpdateStreamLineRequest_SrtPush struct {
	// SRT push input type.
	SrtPush *SRTPushParams `protobuf:"bytes,1001,opt,name=srt_push,json=srtPush,proto3,oneof"`
}

type UpdateStreamLineRequest_RtmpPull struct {
	// RTMP pull input type.
	RtmpPull *RTMPPullParams `protobuf:"bytes,1002,opt,name=rtmp_pull,json=rtmpPull,proto3,oneof"`
}

type UpdateStreamLineRequest_SrtPull struct {
	// SRT pull input type.
	SrtPull *SRTPullParams `protobuf:"bytes,1003,opt,name=srt_pull,json=srtPull,proto3,oneof"`
}

type UpdateStreamLineRequest_TcpPull struct {
	// TCP pull input type.
	TcpPull *TCPPullParams `protobuf:"bytes,1004,opt,name=tcp_pull,json=tcpPull,proto3,oneof"`
}

type UpdateStreamLineRequest_RtspPull struct {
	// RTSP pull input type.
	RtspPull *RTSPPullParams `protobuf:"bytes,1006,opt,name=rtsp_pull,json=rtspPull,proto3,oneof"`
}

func (*UpdateStreamLineRequest_RtmpPush) isUpdateStreamLineRequest_InputParams() {}

func (*UpdateStreamLineRequest_SrtPush) isUpdateStreamLineRequest_InputParams() {}

func (*UpdateStreamLineRequest_RtmpPull) isUpdateStreamLineRequest_InputParams() {}

func (*UpdateStreamLineRequest_SrtPull) isUpdateStreamLineRequest_InputParams() {}

func (*UpdateStreamLineRequest_TcpPull) isUpdateStreamLineRequest_InputParams() {}

func (*UpdateStreamLineRequest_RtspPull) isUpdateStreamLineRequest_InputParams() {}

type UpdateStreamLineMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the line.
	StreamLineId string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
}

func (x *UpdateStreamLineMetadata) Reset() {
	*x = UpdateStreamLineMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStreamLineMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamLineMetadata) ProtoMessage() {}

func (x *UpdateStreamLineMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamLineMetadata.ProtoReflect.Descriptor instead.
func (*UpdateStreamLineMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateStreamLineMetadata) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

type DeleteStreamLineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the line.
	StreamLineId string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
}

func (x *DeleteStreamLineRequest) Reset() {
	*x = DeleteStreamLineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStreamLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStreamLineRequest) ProtoMessage() {}

func (x *DeleteStreamLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStreamLineRequest.ProtoReflect.Descriptor instead.
func (*DeleteStreamLineRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteStreamLineRequest) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

type DeleteStreamLineMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the line.
	StreamLineId string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
}

func (x *DeleteStreamLineMetadata) Reset() {
	*x = DeleteStreamLineMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStreamLineMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStreamLineMetadata) ProtoMessage() {}

func (x *DeleteStreamLineMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStreamLineMetadata.ProtoReflect.Descriptor instead.
func (*DeleteStreamLineMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteStreamLineMetadata) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

type PerformLineActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the line.
	StreamLineId string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
	// Types that are assignable to Action:
	//
	//	*PerformLineActionRequest_Activate
	//	*PerformLineActionRequest_Deactivate
	Action isPerformLineActionRequest_Action `protobuf_oneof:"action"`
}

func (x *PerformLineActionRequest) Reset() {
	*x = PerformLineActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformLineActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformLineActionRequest) ProtoMessage() {}

func (x *PerformLineActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformLineActionRequest.ProtoReflect.Descriptor instead.
func (*PerformLineActionRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{9}
}

func (x *PerformLineActionRequest) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

func (m *PerformLineActionRequest) GetAction() isPerformLineActionRequest_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *PerformLineActionRequest) GetActivate() *ActivateAction {
	if x, ok := x.GetAction().(*PerformLineActionRequest_Activate); ok {
		return x.Activate
	}
	return nil
}

func (x *PerformLineActionRequest) GetDeactivate() *DeactivateAction {
	if x, ok := x.GetAction().(*PerformLineActionRequest_Deactivate); ok {
		return x.Deactivate
	}
	return nil
}

type isPerformLineActionRequest_Action interface {
	isPerformLineActionRequest_Action()
}

type PerformLineActionRequest_Activate struct {
	Activate *ActivateAction `protobuf:"bytes,1000,opt,name=activate,proto3,oneof"`
}

type PerformLineActionRequest_Deactivate struct {
	Deactivate *DeactivateAction `protobuf:"bytes,1001,opt,name=deactivate,proto3,oneof"`
}

func (*PerformLineActionRequest_Activate) isPerformLineActionRequest_Action() {}

func (*PerformLineActionRequest_Deactivate) isPerformLineActionRequest_Action() {}

type PerformLineActionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the line.
	StreamLineId string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
}

func (x *PerformLineActionMetadata) Reset() {
	*x = PerformLineActionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformLineActionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformLineActionMetadata) ProtoMessage() {}

func (x *PerformLineActionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformLineActionMetadata.ProtoReflect.Descriptor instead.
func (*PerformLineActionMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{10}
}

func (x *PerformLineActionMetadata) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

type RTMPPushParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RTMPPushParams) Reset() {
	*x = RTMPPushParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTMPPushParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTMPPushParams) ProtoMessage() {}

func (x *RTMPPushParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTMPPushParams.ProtoReflect.Descriptor instead.
func (*RTMPPushParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{11}
}

type SRTPushParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SRTPushParams) Reset() {
	*x = SRTPushParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTPushParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTPushParams) ProtoMessage() {}

func (x *SRTPushParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTPushParams.ProtoReflect.Descriptor instead.
func (*SRTPushParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{12}
}

type RTMPPullParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL of a RTMP streaming server.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *RTMPPullParams) Reset() {
	*x = RTMPPullParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTMPPullParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTMPPullParams) ProtoMessage() {}

func (x *RTMPPullParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTMPPullParams.ProtoReflect.Descriptor instead.
func (*RTMPPullParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{13}
}

func (x *RTMPPullParams) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type SRTPullParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL of a SRT streaming server.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *SRTPullParams) Reset() {
	*x = SRTPullParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRTPullParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRTPullParams) ProtoMessage() {}

func (x *SRTPullParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRTPullParams.ProtoReflect.Descriptor instead.
func (*SRTPullParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{14}
}

func (x *SRTPullParams) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type TCPPullParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL of a TCP streaming server.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *TCPPullParams) Reset() {
	*x = TCPPullParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCPPullParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPPullParams) ProtoMessage() {}

func (x *TCPPullParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPPullParams.ProtoReflect.Descriptor instead.
func (*TCPPullParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{15}
}

func (x *TCPPullParams) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type RTSPPullParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL of a RTSP streaming server.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *RTSPPullParams) Reset() {
	*x = RTSPPullParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTSPPullParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTSPPullParams) ProtoMessage() {}

func (x *RTSPPullParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTSPPullParams.ProtoReflect.Descriptor instead.
func (*RTSPPullParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{16}
}

func (x *RTSPPullParams) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ManualLineParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ManualLineParams) Reset() {
	*x = ManualLineParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualLineParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualLineParams) ProtoMessage() {}

func (x *ManualLineParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualLineParams.ProtoReflect.Descriptor instead.
func (*ManualLineParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{17}
}

type AutoLineParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AutoLineParams) Reset() {
	*x = AutoLineParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoLineParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoLineParams) ProtoMessage() {}

func (x *AutoLineParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoLineParams.ProtoReflect.Descriptor instead.
func (*AutoLineParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{18}
}

type ActivateAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActivateAction) Reset() {
	*x = ActivateAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateAction) ProtoMessage() {}

func (x *ActivateAction) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateAction.ProtoReflect.Descriptor instead.
func (*ActivateAction) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{19}
}

type DeactivateAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeactivateAction) Reset() {
	*x = DeactivateAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateAction) ProtoMessage() {}

func (x *DeactivateAction) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateAction.ProtoReflect.Descriptor instead.
func (*DeactivateAction) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{20}
}

type GetStreamKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the line.
	StreamLineId string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
}

func (x *GetStreamKeyRequest) Reset() {
	*x = GetStreamKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStreamKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamKeyRequest) ProtoMessage() {}

func (x *GetStreamKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamKeyRequest.ProtoReflect.Descriptor instead.
func (*GetStreamKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{21}
}

func (x *GetStreamKeyRequest) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

type UpdateStreamKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the line.
	StreamLineId string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
}

func (x *UpdateStreamKeyRequest) Reset() {
	*x = UpdateStreamKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStreamKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamKeyRequest) ProtoMessage() {}

func (x *UpdateStreamKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamKeyRequest.ProtoReflect.Descriptor instead.
func (*UpdateStreamKeyRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateStreamKeyRequest) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

type UpdateStreamKeyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the line.
	StreamLineId string `protobuf:"bytes,1,opt,name=stream_line_id,json=streamLineId,proto3" json:"stream_line_id,omitempty"`
}

func (x *UpdateStreamKeyMetadata) Reset() {
	*x = UpdateStreamKeyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStreamKeyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamKeyMetadata) ProtoMessage() {}

func (x *UpdateStreamKeyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamKeyMetadata.ProtoReflect.Descriptor instead.
func (*UpdateStreamKeyMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateStreamKeyMetadata) GetStreamLineId() string {
	if x != nil {
		return x.StreamLineId
	}
	return ""
}

var File_yandex_cloud_video_v1_stream_line_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_video_v1_stream_line_service_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x15, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x27, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x64, 0x22, 0xf9, 0x06, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x45, 0x0a, 0x09, 0x72, 0x74, 0x6d, 0x70, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0xe8,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x4d, 0x50, 0x50, 0x75, 0x73, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x08,
	0x72, 0x74, 0x6d, 0x70, 0x50, 0x75, 0x73, 0x68, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x72, 0x74, 0x5f,
	0x70, 0x75, 0x73, 0x68, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x52, 0x54, 0x50, 0x75, 0x73, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x72, 0x74, 0x50, 0x75, 0x73, 0x68, 0x12, 0x45, 0x0a, 0x09,
	0x72, 0x74, 0x6d, 0x70, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x4d, 0x50, 0x50, 0x75, 0x6c,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x08, 0x72, 0x74, 0x6d, 0x70, 0x50,
	0x75, 0x6c, 0x6c, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x72, 0x74, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x18,
	0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x52, 0x54, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x07,
	0x73, 0x72, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x42, 0x0a, 0x08, 0x74, 0x63, 0x70, 0x5f, 0x70,
	0x75, 0x6c, 0x6c, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x43, 0x50, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x48, 0x00, 0x52, 0x07, 0x74, 0x63, 0x70, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x45, 0x0a, 0x09, 0x72,
	0x74, 0x73, 0x70, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x18, 0xee, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x53, 0x50, 0x50, 0x75, 0x6c, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x08, 0x72, 0x74, 0x73, 0x70, 0x50, 0x75,
	0x6c, 0x6c, 0x12, 0x4b, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0xd0, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x48, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x12,
	0x45, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0xd1, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x4c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x01, 0x52, 0x08, 0x61, 0x75,
	0x74, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x42, 0x12, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x4a, 0x06, 0x08, 0xc9, 0x01, 0x10, 0xe8, 0x07, 0x4a, 0x06, 0x08,
	0xed, 0x07, 0x10, 0xee, 0x07, 0x4a, 0x06, 0x08, 0xef, 0x07, 0x10, 0xd0, 0x0f, 0x4a, 0x05, 0x08,
	0x04, 0x10, 0xc8, 0x01, 0x22, 0x40, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x8b, 0x06, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x45, 0x0a, 0x09, 0x72, 0x74, 0x6d, 0x70, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0xe8,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54,
	0x4d, 0x50, 0x50, 0x75, 0x73, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x08,
	0x72, 0x74, 0x6d, 0x70, 0x50, 0x75, 0x73, 0x68, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x72, 0x74, 0x5f,
	0x70, 0x75, 0x73, 0x68, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x52, 0x54, 0x50, 0x75, 0x73, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x72, 0x74, 0x50, 0x75, 0x73, 0x68, 0x12, 0x45, 0x0a, 0x09,
	0x72, 0x74, 0x6d, 0x70, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x4d, 0x50, 0x50, 0x75, 0x6c,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x08, 0x72, 0x74, 0x6d, 0x70, 0x50,
	0x75, 0x6c, 0x6c, 0x12, 0x42, 0x0a, 0x08, 0x73, 0x72, 0x74, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x18,
	0xeb, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x52, 0x54, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x07,
	0x73, 0x72, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x42, 0x0a, 0x08, 0x74, 0x63, 0x70, 0x5f, 0x70,
	0x75, 0x6c, 0x6c, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x43, 0x50, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x48, 0x00, 0x52, 0x07, 0x74, 0x63, 0x70, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x45, 0x0a, 0x09, 0x72,
	0x74, 0x73, 0x70, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x18, 0xee, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x54, 0x53, 0x50, 0x50, 0x75, 0x6c, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x08, 0x72, 0x74, 0x73, 0x70, 0x50, 0x75,
	0x6c, 0x6c, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a,
	0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4a, 0x06, 0x08,
	0xc9, 0x01, 0x10, 0xe8, 0x07, 0x4a, 0x06, 0x08, 0xed, 0x07, 0x10, 0xee, 0x07, 0x4a, 0x05, 0x08,
	0x05, 0x10, 0xc8, 0x01, 0x22, 0x40, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x18, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x05, 0x08, 0x02, 0x10, 0xe8, 0x07, 0x22,
	0x41, 0x0a, 0x19, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x52, 0x54, 0x4d, 0x50, 0x50, 0x75, 0x73, 0x68, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x52, 0x54, 0x50, 0x75, 0x73, 0x68, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x22, 0x0a, 0x0e, 0x52, 0x54, 0x4d, 0x50, 0x50, 0x75, 0x6c,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x21, 0x0a, 0x0d, 0x53, 0x52, 0x54,
	0x50, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x21, 0x0a, 0x0d,
	0x54, 0x43, 0x50, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0x22, 0x0a, 0x0e, 0x52, 0x54, 0x53, 0x50, 0x50, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0x12, 0x0a, 0x10, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x6f, 0x4c,
	0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x12, 0x0a, 0x10, 0x44,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x3b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x32, 0x91, 0x0b,
	0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x84, 0x01, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x4a, 0xb2, 0xd2, 0x2a, 0x26, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0xb8, 0x01, 0x0a,
	0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0xb2, 0xd2, 0x2a, 0x26,
	0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69,
	0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0a, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x32,
	0x26, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xc0, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0xb2, 0xd2, 0x2a, 0x31, 0x0a, 0x18, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x28, 0x2a, 0x26, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xcf, 0x01, 0x0a, 0x0d, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x69, 0x6e, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x6a, 0xb2, 0xd2, 0x2a, 0x27, 0x0a, 0x19, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x4c,
	0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x39, 0x3a, 0x01, 0x2a, 0x22, 0x34, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9d, 0x01, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x22,
	0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x3a,
	0x67, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0xd2, 0x01, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79,
	0x12, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x6d, 0xb2, 0xd2, 0x2a, 0x28, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x0d, 0x50, 0x75, 0x73, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x3a, 0x01, 0x2a, 0x32, 0x36, 0x2f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x73,
	0x2f, 0x7b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65,
	0x79, 0x42, 0x5c, 0x0a, 0x19, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x5a, 0x3f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_video_v1_stream_line_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_video_v1_stream_line_service_proto_rawDescData = file_yandex_cloud_video_v1_stream_line_service_proto_rawDesc
)

func file_yandex_cloud_video_v1_stream_line_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_video_v1_stream_line_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_video_v1_stream_line_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_video_v1_stream_line_service_proto_rawDescData)
	})
	return file_yandex_cloud_video_v1_stream_line_service_proto_rawDescData
}

var file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_yandex_cloud_video_v1_stream_line_service_proto_goTypes = []interface{}{
	(*GetStreamLineRequest)(nil),      // 0: yandex.cloud.video.v1.GetStreamLineRequest
	(*ListStreamLinesRequest)(nil),    // 1: yandex.cloud.video.v1.ListStreamLinesRequest
	(*ListStreamLinesResponse)(nil),   // 2: yandex.cloud.video.v1.ListStreamLinesResponse
	(*CreateStreamLineRequest)(nil),   // 3: yandex.cloud.video.v1.CreateStreamLineRequest
	(*CreateStreamLineMetadata)(nil),  // 4: yandex.cloud.video.v1.CreateStreamLineMetadata
	(*UpdateStreamLineRequest)(nil),   // 5: yandex.cloud.video.v1.UpdateStreamLineRequest
	(*UpdateStreamLineMetadata)(nil),  // 6: yandex.cloud.video.v1.UpdateStreamLineMetadata
	(*DeleteStreamLineRequest)(nil),   // 7: yandex.cloud.video.v1.DeleteStreamLineRequest
	(*DeleteStreamLineMetadata)(nil),  // 8: yandex.cloud.video.v1.DeleteStreamLineMetadata
	(*PerformLineActionRequest)(nil),  // 9: yandex.cloud.video.v1.PerformLineActionRequest
	(*PerformLineActionMetadata)(nil), // 10: yandex.cloud.video.v1.PerformLineActionMetadata
	(*RTMPPushParams)(nil),            // 11: yandex.cloud.video.v1.RTMPPushParams
	(*SRTPushParams)(nil),             // 12: yandex.cloud.video.v1.SRTPushParams
	(*RTMPPullParams)(nil),            // 13: yandex.cloud.video.v1.RTMPPullParams
	(*SRTPullParams)(nil),             // 14: yandex.cloud.video.v1.SRTPullParams
	(*TCPPullParams)(nil),             // 15: yandex.cloud.video.v1.TCPPullParams
	(*RTSPPullParams)(nil),            // 16: yandex.cloud.video.v1.RTSPPullParams
	(*ManualLineParams)(nil),          // 17: yandex.cloud.video.v1.ManualLineParams
	(*AutoLineParams)(nil),            // 18: yandex.cloud.video.v1.AutoLineParams
	(*ActivateAction)(nil),            // 19: yandex.cloud.video.v1.ActivateAction
	(*DeactivateAction)(nil),          // 20: yandex.cloud.video.v1.DeactivateAction
	(*GetStreamKeyRequest)(nil),       // 21: yandex.cloud.video.v1.GetStreamKeyRequest
	(*UpdateStreamKeyRequest)(nil),    // 22: yandex.cloud.video.v1.UpdateStreamKeyRequest
	(*UpdateStreamKeyMetadata)(nil),   // 23: yandex.cloud.video.v1.UpdateStreamKeyMetadata
	nil,                               // 24: yandex.cloud.video.v1.CreateStreamLineRequest.LabelsEntry
	nil,                               // 25: yandex.cloud.video.v1.UpdateStreamLineRequest.LabelsEntry
	(*StreamLine)(nil),                // 26: yandex.cloud.video.v1.StreamLine
	(*fieldmaskpb.FieldMask)(nil),     // 27: google.protobuf.FieldMask
	(*operation.Operation)(nil),       // 28: yandex.cloud.operation.Operation
	(*PushStreamKey)(nil),             // 29: yandex.cloud.video.v1.PushStreamKey
}
var file_yandex_cloud_video_v1_stream_line_service_proto_depIdxs = []int32{
	26, // 0: yandex.cloud.video.v1.ListStreamLinesResponse.stream_lines:type_name -> yandex.cloud.video.v1.StreamLine
	24, // 1: yandex.cloud.video.v1.CreateStreamLineRequest.labels:type_name -> yandex.cloud.video.v1.CreateStreamLineRequest.LabelsEntry
	11, // 2: yandex.cloud.video.v1.CreateStreamLineRequest.rtmp_push:type_name -> yandex.cloud.video.v1.RTMPPushParams
	12, // 3: yandex.cloud.video.v1.CreateStreamLineRequest.srt_push:type_name -> yandex.cloud.video.v1.SRTPushParams
	13, // 4: yandex.cloud.video.v1.CreateStreamLineRequest.rtmp_pull:type_name -> yandex.cloud.video.v1.RTMPPullParams
	14, // 5: yandex.cloud.video.v1.CreateStreamLineRequest.srt_pull:type_name -> yandex.cloud.video.v1.SRTPullParams
	15, // 6: yandex.cloud.video.v1.CreateStreamLineRequest.tcp_pull:type_name -> yandex.cloud.video.v1.TCPPullParams
	16, // 7: yandex.cloud.video.v1.CreateStreamLineRequest.rtsp_pull:type_name -> yandex.cloud.video.v1.RTSPPullParams
	17, // 8: yandex.cloud.video.v1.CreateStreamLineRequest.manual_line:type_name -> yandex.cloud.video.v1.ManualLineParams
	18, // 9: yandex.cloud.video.v1.CreateStreamLineRequest.auto_line:type_name -> yandex.cloud.video.v1.AutoLineParams
	27, // 10: yandex.cloud.video.v1.UpdateStreamLineRequest.field_mask:type_name -> google.protobuf.FieldMask
	25, // 11: yandex.cloud.video.v1.UpdateStreamLineRequest.labels:type_name -> yandex.cloud.video.v1.UpdateStreamLineRequest.LabelsEntry
	11, // 12: yandex.cloud.video.v1.UpdateStreamLineRequest.rtmp_push:type_name -> yandex.cloud.video.v1.RTMPPushParams
	12, // 13: yandex.cloud.video.v1.UpdateStreamLineRequest.srt_push:type_name -> yandex.cloud.video.v1.SRTPushParams
	13, // 14: yandex.cloud.video.v1.UpdateStreamLineRequest.rtmp_pull:type_name -> yandex.cloud.video.v1.RTMPPullParams
	14, // 15: yandex.cloud.video.v1.UpdateStreamLineRequest.srt_pull:type_name -> yandex.cloud.video.v1.SRTPullParams
	15, // 16: yandex.cloud.video.v1.UpdateStreamLineRequest.tcp_pull:type_name -> yandex.cloud.video.v1.TCPPullParams
	16, // 17: yandex.cloud.video.v1.UpdateStreamLineRequest.rtsp_pull:type_name -> yandex.cloud.video.v1.RTSPPullParams
	19, // 18: yandex.cloud.video.v1.PerformLineActionRequest.activate:type_name -> yandex.cloud.video.v1.ActivateAction
	20, // 19: yandex.cloud.video.v1.PerformLineActionRequest.deactivate:type_name -> yandex.cloud.video.v1.DeactivateAction
	0,  // 20: yandex.cloud.video.v1.StreamLineService.Get:input_type -> yandex.cloud.video.v1.GetStreamLineRequest
	1,  // 21: yandex.cloud.video.v1.StreamLineService.List:input_type -> yandex.cloud.video.v1.ListStreamLinesRequest
	3,  // 22: yandex.cloud.video.v1.StreamLineService.Create:input_type -> yandex.cloud.video.v1.CreateStreamLineRequest
	5,  // 23: yandex.cloud.video.v1.StreamLineService.Update:input_type -> yandex.cloud.video.v1.UpdateStreamLineRequest
	7,  // 24: yandex.cloud.video.v1.StreamLineService.Delete:input_type -> yandex.cloud.video.v1.DeleteStreamLineRequest
	9,  // 25: yandex.cloud.video.v1.StreamLineService.PerformAction:input_type -> yandex.cloud.video.v1.PerformLineActionRequest
	21, // 26: yandex.cloud.video.v1.StreamLineService.GetStreamKey:input_type -> yandex.cloud.video.v1.GetStreamKeyRequest
	22, // 27: yandex.cloud.video.v1.StreamLineService.UpdateStreamKey:input_type -> yandex.cloud.video.v1.UpdateStreamKeyRequest
	26, // 28: yandex.cloud.video.v1.StreamLineService.Get:output_type -> yandex.cloud.video.v1.StreamLine
	2,  // 29: yandex.cloud.video.v1.StreamLineService.List:output_type -> yandex.cloud.video.v1.ListStreamLinesResponse
	28, // 30: yandex.cloud.video.v1.StreamLineService.Create:output_type -> yandex.cloud.operation.Operation
	28, // 31: yandex.cloud.video.v1.StreamLineService.Update:output_type -> yandex.cloud.operation.Operation
	28, // 32: yandex.cloud.video.v1.StreamLineService.Delete:output_type -> yandex.cloud.operation.Operation
	28, // 33: yandex.cloud.video.v1.StreamLineService.PerformAction:output_type -> yandex.cloud.operation.Operation
	29, // 34: yandex.cloud.video.v1.StreamLineService.GetStreamKey:output_type -> yandex.cloud.video.v1.PushStreamKey
	28, // 35: yandex.cloud.video.v1.StreamLineService.UpdateStreamKey:output_type -> yandex.cloud.operation.Operation
	28, // [28:36] is the sub-list for method output_type
	20, // [20:28] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_yandex_cloud_video_v1_stream_line_service_proto_init() }
func file_yandex_cloud_video_v1_stream_line_service_proto_init() {
	if File_yandex_cloud_video_v1_stream_line_service_proto != nil {
		return
	}
	file_yandex_cloud_video_v1_stream_line_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStreamLineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStreamLinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStreamLinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStreamLineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStreamLineMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStreamLineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStreamLineMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStreamLineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStreamLineMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformLineActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformLineActionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTMPPushParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTPushParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTMPPullParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRTPullParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCPPullParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTSPPullParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualLineParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoLineParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStreamKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStreamKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStreamKeyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CreateStreamLineRequest_RtmpPush)(nil),
		(*CreateStreamLineRequest_SrtPush)(nil),
		(*CreateStreamLineRequest_RtmpPull)(nil),
		(*CreateStreamLineRequest_SrtPull)(nil),
		(*CreateStreamLineRequest_TcpPull)(nil),
		(*CreateStreamLineRequest_RtspPull)(nil),
		(*CreateStreamLineRequest_ManualLine)(nil),
		(*CreateStreamLineRequest_AutoLine)(nil),
	}
	file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*UpdateStreamLineRequest_RtmpPush)(nil),
		(*UpdateStreamLineRequest_SrtPush)(nil),
		(*UpdateStreamLineRequest_RtmpPull)(nil),
		(*UpdateStreamLineRequest_SrtPull)(nil),
		(*UpdateStreamLineRequest_TcpPull)(nil),
		(*UpdateStreamLineRequest_RtspPull)(nil),
	}
	file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*PerformLineActionRequest_Activate)(nil),
		(*PerformLineActionRequest_Deactivate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_video_v1_stream_line_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_video_v1_stream_line_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_video_v1_stream_line_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_video_v1_stream_line_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_video_v1_stream_line_service_proto = out.File
	file_yandex_cloud_video_v1_stream_line_service_proto_rawDesc = nil
	file_yandex_cloud_video_v1_stream_line_service_proto_goTypes = nil
	file_yandex_cloud_video_v1_stream_line_service_proto_depIdxs = nil
}

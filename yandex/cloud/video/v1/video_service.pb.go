// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/video/v1/video_service.proto

package video

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetVideoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the video to retrieve.
	VideoId       string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVideoRequest) Reset() {
	*x = GetVideoRequest{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoRequest) ProtoMessage() {}

func (x *GetVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoRequest.ProtoReflect.Descriptor instead.
func (*GetVideoRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetVideoRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type ListVideoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the channel containing the videos to list.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The maximum number of videos to return per page.
	PageSize int64 `protobuf:"varint,100,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token for retrieving the next page of results.
	// This token is obtained from the next_page_token field in the previous ListVideoResponse.
	PageToken string `protobuf:"bytes,101,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Specifies the ordering of results.
	// Format is "<field> <order>" (e.g., "createdAt desc").
	// Default: "id asc".
	// Supported fields: ["id", "title", "createdAt", "updatedAt"].
	// Both snake_case and camelCase field names are supported.
	OrderBy string `protobuf:"bytes,102,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Filter expression to narrow down the list of returned videos.
	// Expressions consist of terms connected by logical operators.
	// Values containing spaces or quotes must be enclosed in quotes (`'` or `"`)
	// with inner quotes being backslash-escaped.
	//
	// Supported logical operators: ["AND", "OR"].
	// Supported comparison operators: ["=", "!=", ":"] where ":" enables substring matching.
	// Parentheses can be used to group logical expressions.
	//
	// Example: `title:'sample' AND (status='READY' OR visibilityStatus='PUBLISHED')`
	//
	// Filterable fields: ["id", "title", "status", "visibilityStatus"].
	// Both snake_case and camelCase field names are supported.
	Filter        string `protobuf:"bytes,103,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVideoRequest) Reset() {
	*x = ListVideoRequest{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVideoRequest) ProtoMessage() {}

func (x *ListVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVideoRequest.ProtoReflect.Descriptor instead.
func (*ListVideoRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListVideoRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ListVideoRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListVideoRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListVideoRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListVideoRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListVideoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of videos matching the request criteria.
	// May be empty if no videos match the criteria or if the channel is empty.
	Videos []*Video `protobuf:"bytes,1,rep,name=videos,proto3" json:"videos,omitempty"`
	// Token for retrieving the next page of results.
	// Empty if there are no more results available.
	NextPageToken string `protobuf:"bytes,100,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVideoResponse) Reset() {
	*x = ListVideoResponse{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVideoResponse) ProtoMessage() {}

func (x *ListVideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVideoResponse.ProtoReflect.Descriptor instead.
func (*ListVideoResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListVideoResponse) GetVideos() []*Video {
	if x != nil {
		return x.Videos
	}
	return nil
}

func (x *ListVideoResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type BatchGetVideosRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the channel containing the videos to retrieve.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// List of video IDs to retrieve.
	VideoIds      []string `protobuf:"bytes,2,rep,name=video_ids,json=videoIds,proto3" json:"video_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetVideosRequest) Reset() {
	*x = BatchGetVideosRequest{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetVideosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetVideosRequest) ProtoMessage() {}

func (x *BatchGetVideosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetVideosRequest.ProtoReflect.Descriptor instead.
func (*BatchGetVideosRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{3}
}

func (x *BatchGetVideosRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *BatchGetVideosRequest) GetVideoIds() []string {
	if x != nil {
		return x.VideoIds
	}
	return nil
}

type BatchGetVideosResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of videos matching the requested IDs.
	Videos        []*Video `protobuf:"bytes,1,rep,name=videos,proto3" json:"videos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetVideosResponse) Reset() {
	*x = BatchGetVideosResponse{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetVideosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetVideosResponse) ProtoMessage() {}

func (x *BatchGetVideosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetVideosResponse.ProtoReflect.Descriptor instead.
func (*BatchGetVideosResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{4}
}

func (x *BatchGetVideosResponse) GetVideos() []*Video {
	if x != nil {
		return x.Videos
	}
	return nil
}

type CreateVideoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the channel where the video will be created.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Title of the video to be displayed in interfaces and players.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Detailed description of the video content and context.
	// Optional field that can provide additional information about the video.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// ID of the thumbnail image to be used for the video.
	// If not provided, a thumbnail may be automatically generated during transcoding.
	ThumbnailId string `protobuf:"bytes,4,opt,name=thumbnail_id,json=thumbnailId,proto3" json:"thumbnail_id,omitempty"`
	// Controls whether transcoding starts automatically after upload.
	// Set to ENABLE to automatically initiate transcoding after upload,
	// or DISABLE for manual initiation via the Transcode() method.
	AutoTranscode AutoTranscode `protobuf:"varint,5,opt,name=auto_transcode,json=autoTranscode,proto3,enum=yandex.cloud.video.v1.AutoTranscode" json:"auto_transcode,omitempty"`
	// ID of the style preset to apply to the video during processing.
	// Style presets define visual appearance settings for the video player.
	StylePresetId string `protobuf:"bytes,6,opt,name=style_preset_id,json=stylePresetId,proto3" json:"style_preset_id,omitempty"`
	// Controls whether the video is automatically published after transcoding.
	// When set to true, the video's visibility status will be set to PUBLISHED
	// once transcoding is complete, making it available for watching.
	AutoPublish *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=auto_publish,json=autoPublish,proto3" json:"auto_publish,omitempty"`
	// Controls the ability to display advertisements for this video.
	// Default: true
	// Set explicitly to false to disable advertisements for this specific video.
	EnableAd *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=enable_ad,json=enableAd,proto3" json:"enable_ad,omitempty"`
	// Custom user-defined labels as `key:value` pairs.
	// Maximum 64 labels per video.
	// Keys must be lowercase alphanumeric strings with optional hyphens/underscores.
	// Values can contain alphanumeric characters and various symbols.
	Labels map[string]string `protobuf:"bytes,200,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Specifies the video upload source method (exactly one must be chosen).
	//
	// Types that are valid to be assigned to Source:
	//
	//	*CreateVideoRequest_Tusd
	Source isCreateVideoRequest_Source `protobuf_oneof:"source"`
	// Video access permission settings (exactly one must be chosen).
	//
	// Types that are valid to be assigned to AccessRights:
	//
	//	*CreateVideoRequest_PublicAccess
	//	*CreateVideoRequest_SignUrlAccess
	AccessRights  isCreateVideoRequest_AccessRights `protobuf_oneof:"access_rights"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVideoRequest) Reset() {
	*x = CreateVideoRequest{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVideoRequest) ProtoMessage() {}

func (x *CreateVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVideoRequest.ProtoReflect.Descriptor instead.
func (*CreateVideoRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateVideoRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *CreateVideoRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateVideoRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateVideoRequest) GetThumbnailId() string {
	if x != nil {
		return x.ThumbnailId
	}
	return ""
}

func (x *CreateVideoRequest) GetAutoTranscode() AutoTranscode {
	if x != nil {
		return x.AutoTranscode
	}
	return AutoTranscode_AUTO_TRANSCODE_UNSPECIFIED
}

func (x *CreateVideoRequest) GetStylePresetId() string {
	if x != nil {
		return x.StylePresetId
	}
	return ""
}

func (x *CreateVideoRequest) GetAutoPublish() *wrapperspb.BoolValue {
	if x != nil {
		return x.AutoPublish
	}
	return nil
}

func (x *CreateVideoRequest) GetEnableAd() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableAd
	}
	return nil
}

func (x *CreateVideoRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateVideoRequest) GetSource() isCreateVideoRequest_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *CreateVideoRequest) GetTusd() *VideoTUSDParams {
	if x != nil {
		if x, ok := x.Source.(*CreateVideoRequest_Tusd); ok {
			return x.Tusd
		}
	}
	return nil
}

func (x *CreateVideoRequest) GetAccessRights() isCreateVideoRequest_AccessRights {
	if x != nil {
		return x.AccessRights
	}
	return nil
}

func (x *CreateVideoRequest) GetPublicAccess() *VideoPublicAccessParams {
	if x != nil {
		if x, ok := x.AccessRights.(*CreateVideoRequest_PublicAccess); ok {
			return x.PublicAccess
		}
	}
	return nil
}

func (x *CreateVideoRequest) GetSignUrlAccess() *VideoSignURLAccessParams {
	if x != nil {
		if x, ok := x.AccessRights.(*CreateVideoRequest_SignUrlAccess); ok {
			return x.SignUrlAccess
		}
	}
	return nil
}

type isCreateVideoRequest_Source interface {
	isCreateVideoRequest_Source()
}

type CreateVideoRequest_Tusd struct {
	// Upload video using the TUS (Tus Resumable Upload Protocol) protocol.
	// This is a push-based upload method where the client pushes data to the server.
	Tusd *VideoTUSDParams `protobuf:"bytes,1000,opt,name=tusd,proto3,oneof"`
}

func (*CreateVideoRequest_Tusd) isCreateVideoRequest_Source() {}

type isCreateVideoRequest_AccessRights interface {
	isCreateVideoRequest_AccessRights()
}

type CreateVideoRequest_PublicAccess struct {
	// Video is publicly available.
	PublicAccess *VideoPublicAccessParams `protobuf:"bytes,2000,opt,name=public_access,json=publicAccess,proto3,oneof"`
}

type CreateVideoRequest_SignUrlAccess struct {
	// Access to the video is restricted by temporarily signed links.
	SignUrlAccess *VideoSignURLAccessParams `protobuf:"bytes,2003,opt,name=sign_url_access,json=signUrlAccess,proto3,oneof"`
}

func (*CreateVideoRequest_PublicAccess) isCreateVideoRequest_AccessRights() {}

func (*CreateVideoRequest_SignUrlAccess) isCreateVideoRequest_AccessRights() {}

type VideoTUSDParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total size of the file to be uploaded, in bytes.
	FileSize int64 `protobuf:"varint,1,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	// Original name of the file being uploaded.
	// This is used for reference and does not affect the upload process.
	FileName      string `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoTUSDParams) Reset() {
	*x = VideoTUSDParams{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoTUSDParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTUSDParams) ProtoMessage() {}

func (x *VideoTUSDParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTUSDParams.ProtoReflect.Descriptor instead.
func (*VideoTUSDParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{6}
}

func (x *VideoTUSDParams) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *VideoTUSDParams) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

// Parameters for video public access rights.
type VideoPublicAccessParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoPublicAccessParams) Reset() {
	*x = VideoPublicAccessParams{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoPublicAccessParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoPublicAccessParams) ProtoMessage() {}

func (x *VideoPublicAccessParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoPublicAccessParams.ProtoReflect.Descriptor instead.
func (*VideoPublicAccessParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{7}
}

// Parameters for video access restrictions based on temporary signed links.
type VideoSignURLAccessParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoSignURLAccessParams) Reset() {
	*x = VideoSignURLAccessParams{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoSignURLAccessParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoSignURLAccessParams) ProtoMessage() {}

func (x *VideoSignURLAccessParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoSignURLAccessParams.ProtoReflect.Descriptor instead.
func (*VideoSignURLAccessParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{8}
}

type CreateVideoMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier of the video.
	VideoId       string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVideoMetadata) Reset() {
	*x = CreateVideoMetadata{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVideoMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVideoMetadata) ProtoMessage() {}

func (x *CreateVideoMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVideoMetadata.ProtoReflect.Descriptor instead.
func (*CreateVideoMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{9}
}

func (x *CreateVideoMetadata) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type UpdateVideoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the video to update.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	// Field mask specifying which fields of the video should be updated.
	// Only fields specified in this mask will be modified;
	// all other fields will retain their current values.
	// This allows for partial updates.
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// New title for the video.
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// New description for the video.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// New thumbnail ID for the video.
	ThumbnailId string `protobuf:"bytes,5,opt,name=thumbnail_id,json=thumbnailId,proto3" json:"thumbnail_id,omitempty"`
	// New auto-transcoding setting for the video.
	// Controls whether transcoding starts automatically after upload.
	AutoTranscode AutoTranscode `protobuf:"varint,6,opt,name=auto_transcode,json=autoTranscode,proto3,enum=yandex.cloud.video.v1.AutoTranscode" json:"auto_transcode,omitempty"`
	// New style preset ID for the video.
	StylePresetId string `protobuf:"bytes,7,opt,name=style_preset_id,json=stylePresetId,proto3" json:"style_preset_id,omitempty"`
	// New advertisement setting for the video.
	// Set to false to disable advertisements for this specific video.
	EnableAd *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=enable_ad,json=enableAd,proto3" json:"enable_ad,omitempty"`
	// New custom labels for the video as `key:value` pairs.
	// Maximum 64 labels per video.
	// If provided, replaces all existing labels.
	Labels map[string]string `protobuf:"bytes,200,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// New access rights setting for the video.
	//
	// Types that are valid to be assigned to AccessRights:
	//
	//	*UpdateVideoRequest_PublicAccess
	//	*UpdateVideoRequest_SignUrlAccess
	AccessRights  isUpdateVideoRequest_AccessRights `protobuf_oneof:"access_rights"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateVideoRequest) Reset() {
	*x = UpdateVideoRequest{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVideoRequest) ProtoMessage() {}

func (x *UpdateVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVideoRequest.ProtoReflect.Descriptor instead.
func (*UpdateVideoRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateVideoRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *UpdateVideoRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

func (x *UpdateVideoRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateVideoRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateVideoRequest) GetThumbnailId() string {
	if x != nil {
		return x.ThumbnailId
	}
	return ""
}

func (x *UpdateVideoRequest) GetAutoTranscode() AutoTranscode {
	if x != nil {
		return x.AutoTranscode
	}
	return AutoTranscode_AUTO_TRANSCODE_UNSPECIFIED
}

func (x *UpdateVideoRequest) GetStylePresetId() string {
	if x != nil {
		return x.StylePresetId
	}
	return ""
}

func (x *UpdateVideoRequest) GetEnableAd() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableAd
	}
	return nil
}

func (x *UpdateVideoRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateVideoRequest) GetAccessRights() isUpdateVideoRequest_AccessRights {
	if x != nil {
		return x.AccessRights
	}
	return nil
}

func (x *UpdateVideoRequest) GetPublicAccess() *VideoPublicAccessParams {
	if x != nil {
		if x, ok := x.AccessRights.(*UpdateVideoRequest_PublicAccess); ok {
			return x.PublicAccess
		}
	}
	return nil
}

func (x *UpdateVideoRequest) GetSignUrlAccess() *VideoSignURLAccessParams {
	if x != nil {
		if x, ok := x.AccessRights.(*UpdateVideoRequest_SignUrlAccess); ok {
			return x.SignUrlAccess
		}
	}
	return nil
}

type isUpdateVideoRequest_AccessRights interface {
	isUpdateVideoRequest_AccessRights()
}

type UpdateVideoRequest_PublicAccess struct {
	// Makes the video publicly accessible to anyone with the direct link.
	PublicAccess *VideoPublicAccessParams `protobuf:"bytes,2000,opt,name=public_access,json=publicAccess,proto3,oneof"`
}

type UpdateVideoRequest_SignUrlAccess struct {
	// Restricts video access using URL signatures for secure time-limited access.
	SignUrlAccess *VideoSignURLAccessParams `protobuf:"bytes,2003,opt,name=sign_url_access,json=signUrlAccess,proto3,oneof"`
}

func (*UpdateVideoRequest_PublicAccess) isUpdateVideoRequest_AccessRights() {}

func (*UpdateVideoRequest_SignUrlAccess) isUpdateVideoRequest_AccessRights() {}

type UpdateVideoMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the video.
	VideoId       string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateVideoMetadata) Reset() {
	*x = UpdateVideoMetadata{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVideoMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVideoMetadata) ProtoMessage() {}

func (x *UpdateVideoMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVideoMetadata.ProtoReflect.Descriptor instead.
func (*UpdateVideoMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateVideoMetadata) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type TranscodeVideoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the video to transcode.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	// Field mask specifying which transcoding-specific fields should be updated.
	// Only fields specified in this mask will be modified;
	// all other fields will retain their current values.
	// This allows for partial updates.
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// IDs of manually uploaded subtitle files to include in the transcoding process.
	// These subtitles will be embedded in the video output.
	SubtitleIds []string `protobuf:"bytes,3,rep,name=subtitle_ids,json=subtitleIds,proto3" json:"subtitle_ids,omitempty"`
	// Settings for automatic translation of audio tracks.
	// Defines source tracks and target languages for subtitle and audio translation.
	TranslationSettings *VideoTranslationSettings `protobuf:"bytes,4,opt,name=translation_settings,json=translationSettings,proto3" json:"translation_settings,omitempty"`
	// Settings for automatic video content summarization.
	// Defines which audio tracks should be processed to generate text summaries.
	SummarizationSettings *VideoSummarizationSettings `protobuf:"bytes,5,opt,name=summarization_settings,json=summarizationSettings,proto3" json:"summarization_settings,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TranscodeVideoRequest) Reset() {
	*x = TranscodeVideoRequest{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TranscodeVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeVideoRequest) ProtoMessage() {}

func (x *TranscodeVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeVideoRequest.ProtoReflect.Descriptor instead.
func (*TranscodeVideoRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{12}
}

func (x *TranscodeVideoRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *TranscodeVideoRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

func (x *TranscodeVideoRequest) GetSubtitleIds() []string {
	if x != nil {
		return x.SubtitleIds
	}
	return nil
}

func (x *TranscodeVideoRequest) GetTranslationSettings() *VideoTranslationSettings {
	if x != nil {
		return x.TranslationSettings
	}
	return nil
}

func (x *TranscodeVideoRequest) GetSummarizationSettings() *VideoSummarizationSettings {
	if x != nil {
		return x.SummarizationSettings
	}
	return nil
}

type VideoTranslationSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Translation settings for each track.
	Tracks        []*VideoTranslationSettings_TranslationTrack `protobuf:"bytes,1,rep,name=tracks,proto3" json:"tracks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoTranslationSettings) Reset() {
	*x = VideoTranslationSettings{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoTranslationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTranslationSettings) ProtoMessage() {}

func (x *VideoTranslationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTranslationSettings.ProtoReflect.Descriptor instead.
func (*VideoTranslationSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{13}
}

func (x *VideoTranslationSettings) GetTracks() []*VideoTranslationSettings_TranslationTrack {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type VideoSummarizationSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Summarization settings for each track.
	Tracks []*VideoSummarizationSettings_SummarizationTrack `protobuf:"bytes,2,rep,name=tracks,proto3" json:"tracks,omitempty"`
	// Summarize all available tracks.
	// If enabled, `tracks` parameter is ignored.
	// Enables automatic source language deduction for each track
	// and thus may lead to performance degradation.
	ProcessAllTracks bool `protobuf:"varint,3,opt,name=process_all_tracks,json=processAllTracks,proto3" json:"process_all_tracks,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *VideoSummarizationSettings) Reset() {
	*x = VideoSummarizationSettings{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoSummarizationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoSummarizationSettings) ProtoMessage() {}

func (x *VideoSummarizationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoSummarizationSettings.ProtoReflect.Descriptor instead.
func (*VideoSummarizationSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{14}
}

func (x *VideoSummarizationSettings) GetTracks() []*VideoSummarizationSettings_SummarizationTrack {
	if x != nil {
		return x.Tracks
	}
	return nil
}

func (x *VideoSummarizationSettings) GetProcessAllTracks() bool {
	if x != nil {
		return x.ProcessAllTracks
	}
	return false
}

type TranscodeVideoMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the video.
	VideoId       string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TranscodeVideoMetadata) Reset() {
	*x = TranscodeVideoMetadata{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TranscodeVideoMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeVideoMetadata) ProtoMessage() {}

func (x *TranscodeVideoMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeVideoMetadata.ProtoReflect.Descriptor instead.
func (*TranscodeVideoMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{15}
}

func (x *TranscodeVideoMetadata) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type DeleteVideoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the video to delete.
	VideoId       string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVideoRequest) Reset() {
	*x = DeleteVideoRequest{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVideoRequest) ProtoMessage() {}

func (x *DeleteVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVideoRequest.ProtoReflect.Descriptor instead.
func (*DeleteVideoRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteVideoRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type DeleteVideoMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the video.
	// This identifier can be used to track the video deletion operation.
	VideoId       string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVideoMetadata) Reset() {
	*x = DeleteVideoMetadata{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVideoMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVideoMetadata) ProtoMessage() {}

func (x *DeleteVideoMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVideoMetadata.ProtoReflect.Descriptor instead.
func (*DeleteVideoMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteVideoMetadata) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type BatchDeleteVideosRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the channel containing the videos to delete.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// List of video IDs to delete.
	VideoIds      []string `protobuf:"bytes,2,rep,name=video_ids,json=videoIds,proto3" json:"video_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchDeleteVideosRequest) Reset() {
	*x = BatchDeleteVideosRequest{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchDeleteVideosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteVideosRequest) ProtoMessage() {}

func (x *BatchDeleteVideosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteVideosRequest.ProtoReflect.Descriptor instead.
func (*BatchDeleteVideosRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{18}
}

func (x *BatchDeleteVideosRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *BatchDeleteVideosRequest) GetVideoIds() []string {
	if x != nil {
		return x.VideoIds
	}
	return nil
}

type BatchDeleteVideosMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of video IDs being deleted.
	// This list can be used to track which videos are included
	// in the batch deletion operation.
	VideoIds      []string `protobuf:"bytes,1,rep,name=video_ids,json=videoIds,proto3" json:"video_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchDeleteVideosMetadata) Reset() {
	*x = BatchDeleteVideosMetadata{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchDeleteVideosMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteVideosMetadata) ProtoMessage() {}

func (x *BatchDeleteVideosMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteVideosMetadata.ProtoReflect.Descriptor instead.
func (*BatchDeleteVideosMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{19}
}

func (x *BatchDeleteVideosMetadata) GetVideoIds() []string {
	if x != nil {
		return x.VideoIds
	}
	return nil
}

type PerformVideoActionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the video on which to perform the action.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	// Specifies the action to perform on the video (exactly one must be chosen).
	//
	// Types that are valid to be assigned to Action:
	//
	//	*PerformVideoActionRequest_Publish
	//	*PerformVideoActionRequest_Unpublish
	Action        isPerformVideoActionRequest_Action `protobuf_oneof:"action"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PerformVideoActionRequest) Reset() {
	*x = PerformVideoActionRequest{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerformVideoActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformVideoActionRequest) ProtoMessage() {}

func (x *PerformVideoActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformVideoActionRequest.ProtoReflect.Descriptor instead.
func (*PerformVideoActionRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{20}
}

func (x *PerformVideoActionRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *PerformVideoActionRequest) GetAction() isPerformVideoActionRequest_Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *PerformVideoActionRequest) GetPublish() *PublishVideoAction {
	if x != nil {
		if x, ok := x.Action.(*PerformVideoActionRequest_Publish); ok {
			return x.Publish
		}
	}
	return nil
}

func (x *PerformVideoActionRequest) GetUnpublish() *UnpublishVideoAction {
	if x != nil {
		if x, ok := x.Action.(*PerformVideoActionRequest_Unpublish); ok {
			return x.Unpublish
		}
	}
	return nil
}

type isPerformVideoActionRequest_Action interface {
	isPerformVideoActionRequest_Action()
}

type PerformVideoActionRequest_Publish struct {
	// Publish the video, making it available for watching.
	// Changes the video's visibility status to PUBLISHED.
	Publish *PublishVideoAction `protobuf:"bytes,1000,opt,name=publish,proto3,oneof"`
}

type PerformVideoActionRequest_Unpublish struct {
	// Unpublish the video, making it unavailable for watching.
	// Changes the video's visibility status to UNPUBLISHED.
	Unpublish *UnpublishVideoAction `protobuf:"bytes,1001,opt,name=unpublish,proto3,oneof"`
}

func (*PerformVideoActionRequest_Publish) isPerformVideoActionRequest_Action() {}

func (*PerformVideoActionRequest_Unpublish) isPerformVideoActionRequest_Action() {}

// Parameters for the publish action.
type PublishVideoAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishVideoAction) Reset() {
	*x = PublishVideoAction{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishVideoAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishVideoAction) ProtoMessage() {}

func (x *PublishVideoAction) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishVideoAction.ProtoReflect.Descriptor instead.
func (*PublishVideoAction) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{21}
}

// Parameters for the unpublish action.
type UnpublishVideoAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnpublishVideoAction) Reset() {
	*x = UnpublishVideoAction{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnpublishVideoAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpublishVideoAction) ProtoMessage() {}

func (x *UnpublishVideoAction) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpublishVideoAction.ProtoReflect.Descriptor instead.
func (*UnpublishVideoAction) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{22}
}

type PerformVideoActionMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the video on which the action is being performed.
	// This identifier can be used to track the action operation
	// and to verify that the action is being applied to the correct video.
	VideoId       string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PerformVideoActionMetadata) Reset() {
	*x = PerformVideoActionMetadata{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerformVideoActionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformVideoActionMetadata) ProtoMessage() {}

func (x *PerformVideoActionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformVideoActionMetadata.ProtoReflect.Descriptor instead.
func (*PerformVideoActionMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{23}
}

func (x *PerformVideoActionMetadata) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type GetVideoPlayerURLRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the video for which to generate a player URL.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	// Optional player parameters to customize the playback experience.
	// These parameters control initial player state such as mute, autoplay, and visibility of interface controls.
	Params *VideoPlayerParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	// For episodes with signed URL access, specifies how long the generated URL will be valid.
	// If not provided, a default expiration duration will be used.
	SignedUrlExpirationDuration *durationpb.Duration `protobuf:"bytes,3,opt,name=signed_url_expiration_duration,json=signedUrlExpirationDuration,proto3" json:"signed_url_expiration_duration,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *GetVideoPlayerURLRequest) Reset() {
	*x = GetVideoPlayerURLRequest{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVideoPlayerURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoPlayerURLRequest) ProtoMessage() {}

func (x *GetVideoPlayerURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoPlayerURLRequest.ProtoReflect.Descriptor instead.
func (*GetVideoPlayerURLRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{24}
}

func (x *GetVideoPlayerURLRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *GetVideoPlayerURLRequest) GetParams() *VideoPlayerParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *GetVideoPlayerURLRequest) GetSignedUrlExpirationDuration() *durationpb.Duration {
	if x != nil {
		return x.SignedUrlExpirationDuration
	}
	return nil
}

type VideoPlayerParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, the player will start with audio muted.
	// Users can unmute the audio manually after playback starts.
	Mute bool `protobuf:"varint,1,opt,name=mute,proto3" json:"mute,omitempty"`
	// If true, the video will start playing automatically when the player loads.
	// This may be subject to browser autoplay policies that restrict autoplay with sound.
	Autoplay bool `protobuf:"varint,2,opt,name=autoplay,proto3" json:"autoplay,omitempty"`
	// If true, the player interface controls will be hidden initially.
	// Users can typically reveal the controls by moving the mouse over the player.
	Hidden        bool `protobuf:"varint,3,opt,name=hidden,proto3" json:"hidden,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoPlayerParams) Reset() {
	*x = VideoPlayerParams{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoPlayerParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoPlayerParams) ProtoMessage() {}

func (x *VideoPlayerParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoPlayerParams.ProtoReflect.Descriptor instead.
func (*VideoPlayerParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{25}
}

func (x *VideoPlayerParams) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *VideoPlayerParams) GetAutoplay() bool {
	if x != nil {
		return x.Autoplay
	}
	return false
}

func (x *VideoPlayerParams) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

type GetVideoPlayerURLResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Direct URL to the video player.
	// This URL can be used to access the video in a web browser
	// or shared with users who have appropriate permissions.
	PlayerUrl string `protobuf:"bytes,1,opt,name=player_url,json=playerUrl,proto3" json:"player_url,omitempty"`
	// HTML embed code in iframe format that can be inserted into web pages.
	// This code allows the video to be embedded directly in third-party websites.
	Html          string `protobuf:"bytes,2,opt,name=html,proto3" json:"html,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVideoPlayerURLResponse) Reset() {
	*x = GetVideoPlayerURLResponse{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVideoPlayerURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoPlayerURLResponse) ProtoMessage() {}

func (x *GetVideoPlayerURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoPlayerURLResponse.ProtoReflect.Descriptor instead.
func (*GetVideoPlayerURLResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{26}
}

func (x *GetVideoPlayerURLResponse) GetPlayerUrl() string {
	if x != nil {
		return x.PlayerUrl
	}
	return ""
}

func (x *GetVideoPlayerURLResponse) GetHtml() string {
	if x != nil {
		return x.Html
	}
	return ""
}

type BatchGetVideoPlayerURLsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the channel containing the videos for which to generate player URLs.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// List of video IDs for which to generate player URLs.
	VideoIds []string `protobuf:"bytes,2,rep,name=video_ids,json=videoIds,proto3" json:"video_ids,omitempty"`
	// Optional player parameters to customize the playback experience.
	// These parameters control initial player state such as mute, autoplay, and visibility of interface controls.
	// These parameters will be applied to all generated player URLs.
	Params *VideoPlayerParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	// For episodes with signed URL access, specifies how long the generated URL will be valid.
	// If not provided, a default expiration duration will be used.
	// This setting applies to all videos in the batch that use sign_url_access.
	SignedUrlExpirationDuration *durationpb.Duration `protobuf:"bytes,4,opt,name=signed_url_expiration_duration,json=signedUrlExpirationDuration,proto3" json:"signed_url_expiration_duration,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *BatchGetVideoPlayerURLsRequest) Reset() {
	*x = BatchGetVideoPlayerURLsRequest{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetVideoPlayerURLsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetVideoPlayerURLsRequest) ProtoMessage() {}

func (x *BatchGetVideoPlayerURLsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetVideoPlayerURLsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetVideoPlayerURLsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{27}
}

func (x *BatchGetVideoPlayerURLsRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *BatchGetVideoPlayerURLsRequest) GetVideoIds() []string {
	if x != nil {
		return x.VideoIds
	}
	return nil
}

func (x *BatchGetVideoPlayerURLsRequest) GetParams() *VideoPlayerParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *BatchGetVideoPlayerURLsRequest) GetSignedUrlExpirationDuration() *durationpb.Duration {
	if x != nil {
		return x.SignedUrlExpirationDuration
	}
	return nil
}

type BatchGetVideoPlayerURLsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of player URLs corresponding to the requested video IDs.
	// The order of URLs matches the order of video IDs in the request.
	PlayerUrls    []string `protobuf:"bytes,1,rep,name=player_urls,json=playerUrls,proto3" json:"player_urls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetVideoPlayerURLsResponse) Reset() {
	*x = BatchGetVideoPlayerURLsResponse{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetVideoPlayerURLsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetVideoPlayerURLsResponse) ProtoMessage() {}

func (x *BatchGetVideoPlayerURLsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetVideoPlayerURLsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetVideoPlayerURLsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{28}
}

func (x *BatchGetVideoPlayerURLsResponse) GetPlayerUrls() []string {
	if x != nil {
		return x.PlayerUrls
	}
	return nil
}

type GetVideoManifestsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the video for which to retrieve manifest URLs.
	VideoId       string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVideoManifestsRequest) Reset() {
	*x = GetVideoManifestsRequest{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVideoManifestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoManifestsRequest) ProtoMessage() {}

func (x *GetVideoManifestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoManifestsRequest.ProtoReflect.Descriptor instead.
func (*GetVideoManifestsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{29}
}

func (x *GetVideoManifestsRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type GetVideoManifestsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of manifests available for the video.
	// Different manifests may represent different streaming formats (e.g., HLS, DASH)
	Manifests     []*Manifest `protobuf:"bytes,1,rep,name=manifests,proto3" json:"manifests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVideoManifestsResponse) Reset() {
	*x = GetVideoManifestsResponse{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVideoManifestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoManifestsResponse) ProtoMessage() {}

func (x *GetVideoManifestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoManifestsResponse.ProtoReflect.Descriptor instead.
func (*GetVideoManifestsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{30}
}

func (x *GetVideoManifestsResponse) GetManifests() []*Manifest {
	if x != nil {
		return x.Manifests
	}
	return nil
}

type VideoTranslationSettings_TranslationTrack struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Input track settings.
	InputTrack *VideoTranslationSettings_InputTrack `protobuf:"bytes,1,opt,name=input_track,json=inputTrack,proto3" json:"input_track,omitempty"`
	// Settings for target subtitle tracks.
	Subtitles []*VideoTranslationSettings_SubtitleTrack `protobuf:"bytes,2,rep,name=subtitles,proto3" json:"subtitles,omitempty"`
	// Settings for target audio tracks.
	Audio         []*VideoTranslationSettings_AudioTrack `protobuf:"bytes,3,rep,name=audio,proto3" json:"audio,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoTranslationSettings_TranslationTrack) Reset() {
	*x = VideoTranslationSettings_TranslationTrack{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoTranslationSettings_TranslationTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTranslationSettings_TranslationTrack) ProtoMessage() {}

func (x *VideoTranslationSettings_TranslationTrack) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTranslationSettings_TranslationTrack.ProtoReflect.Descriptor instead.
func (*VideoTranslationSettings_TranslationTrack) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{13, 0}
}

func (x *VideoTranslationSettings_TranslationTrack) GetInputTrack() *VideoTranslationSettings_InputTrack {
	if x != nil {
		return x.InputTrack
	}
	return nil
}

func (x *VideoTranslationSettings_TranslationTrack) GetSubtitles() []*VideoTranslationSettings_SubtitleTrack {
	if x != nil {
		return x.Subtitles
	}
	return nil
}

func (x *VideoTranslationSettings_TranslationTrack) GetAudio() []*VideoTranslationSettings_AudioTrack {
	if x != nil {
		return x.Audio
	}
	return nil
}

type VideoTranslationSettings_InputTrack struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Input audio track index (one-based).
	TrackIndex int64 `protobuf:"varint,1,opt,name=track_index,json=trackIndex,proto3" json:"track_index,omitempty"`
	// Source track language represented as a three-letter code according to ISO 639-2/T.
	// Track language will be deduced automatically if not provided.
	// In the latter case the deduction accuracy is not guaranteed.
	// For better performance please do specify the source track language when possible.
	SrcLang       string `protobuf:"bytes,2,opt,name=src_lang,json=srcLang,proto3" json:"src_lang,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoTranslationSettings_InputTrack) Reset() {
	*x = VideoTranslationSettings_InputTrack{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoTranslationSettings_InputTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTranslationSettings_InputTrack) ProtoMessage() {}

func (x *VideoTranslationSettings_InputTrack) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTranslationSettings_InputTrack.ProtoReflect.Descriptor instead.
func (*VideoTranslationSettings_InputTrack) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{13, 1}
}

func (x *VideoTranslationSettings_InputTrack) GetTrackIndex() int64 {
	if x != nil {
		return x.TrackIndex
	}
	return 0
}

func (x *VideoTranslationSettings_InputTrack) GetSrcLang() string {
	if x != nil {
		return x.SrcLang
	}
	return ""
}

type VideoTranslationSettings_SubtitleTrack struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Target language represented as a three-letter code according to ISO 639-2/T.
	DstLang string `protobuf:"bytes,1,opt,name=dst_lang,json=dstLang,proto3" json:"dst_lang,omitempty"`
	// Track label to be displayed on the screen during video playback.
	Label         string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoTranslationSettings_SubtitleTrack) Reset() {
	*x = VideoTranslationSettings_SubtitleTrack{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoTranslationSettings_SubtitleTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTranslationSettings_SubtitleTrack) ProtoMessage() {}

func (x *VideoTranslationSettings_SubtitleTrack) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTranslationSettings_SubtitleTrack.ProtoReflect.Descriptor instead.
func (*VideoTranslationSettings_SubtitleTrack) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{13, 2}
}

func (x *VideoTranslationSettings_SubtitleTrack) GetDstLang() string {
	if x != nil {
		return x.DstLang
	}
	return ""
}

func (x *VideoTranslationSettings_SubtitleTrack) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type VideoTranslationSettings_AudioTrack struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Target language represented as a three-letter code according to ISO 639-2/T.
	DstLang string `protobuf:"bytes,1,opt,name=dst_lang,json=dstLang,proto3" json:"dst_lang,omitempty"`
	// Track label to be displayed on the screen during video playback.
	Label         string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoTranslationSettings_AudioTrack) Reset() {
	*x = VideoTranslationSettings_AudioTrack{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoTranslationSettings_AudioTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTranslationSettings_AudioTrack) ProtoMessage() {}

func (x *VideoTranslationSettings_AudioTrack) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTranslationSettings_AudioTrack.ProtoReflect.Descriptor instead.
func (*VideoTranslationSettings_AudioTrack) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{13, 3}
}

func (x *VideoTranslationSettings_AudioTrack) GetDstLang() string {
	if x != nil {
		return x.DstLang
	}
	return ""
}

func (x *VideoTranslationSettings_AudioTrack) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type VideoSummarizationSettings_SummarizationTrack struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Input track settings.
	InputTrack    *VideoSummarizationSettings_InputTrack `protobuf:"bytes,1,opt,name=input_track,json=inputTrack,proto3" json:"input_track,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoSummarizationSettings_SummarizationTrack) Reset() {
	*x = VideoSummarizationSettings_SummarizationTrack{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoSummarizationSettings_SummarizationTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoSummarizationSettings_SummarizationTrack) ProtoMessage() {}

func (x *VideoSummarizationSettings_SummarizationTrack) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoSummarizationSettings_SummarizationTrack.ProtoReflect.Descriptor instead.
func (*VideoSummarizationSettings_SummarizationTrack) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{14, 0}
}

func (x *VideoSummarizationSettings_SummarizationTrack) GetInputTrack() *VideoSummarizationSettings_InputTrack {
	if x != nil {
		return x.InputTrack
	}
	return nil
}

type VideoSummarizationSettings_InputTrack struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Input audio track index (one-based).
	TrackIndex int64 `protobuf:"varint,1,opt,name=track_index,json=trackIndex,proto3" json:"track_index,omitempty"`
	// Source track language represented as a three-letter code according to ISO 639-2/T.
	// It will be deduced automatically if not provided.
	// In the latter case the deduction accuracy is not guaranteed.
	// For better performance please do specify the source track language when possible.
	SrcLang       string `protobuf:"bytes,2,opt,name=src_lang,json=srcLang,proto3" json:"src_lang,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoSummarizationSettings_InputTrack) Reset() {
	*x = VideoSummarizationSettings_InputTrack{}
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoSummarizationSettings_InputTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoSummarizationSettings_InputTrack) ProtoMessage() {}

func (x *VideoSummarizationSettings_InputTrack) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoSummarizationSettings_InputTrack.ProtoReflect.Descriptor instead.
func (*VideoSummarizationSettings_InputTrack) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{14, 1}
}

func (x *VideoSummarizationSettings_InputTrack) GetTrackIndex() int64 {
	if x != nil {
		return x.TrackIndex
	}
	return 0
}

func (x *VideoSummarizationSettings_InputTrack) GetSrcLang() string {
	if x != nil {
		return x.SrcLang
	}
	return ""
}

var File_yandex_cloud_video_v1_video_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_video_v1_video_service_proto_rawDesc = "" +
	"\n" +
	")yandex/cloud/video/v1/video_service.proto\x12\x15yandex.cloud.video.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x1egoogle/protobuf/duration.proto\x1a google/protobuf/field_mask.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a yandex/cloud/api/operation.proto\x1a&yandex/cloud/operation/operation.proto\x1a\x1dyandex/cloud/validation.proto\x1a$yandex/cloud/video/v1/manifest.proto\x1a!yandex/cloud/video/v1/video.proto\":\n" +
	"\x0fGetVideoRequest\x12'\n" +
	"\bvideo_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\avideoId\"\xe2\x01\n" +
	"\x10ListVideoRequest\x12+\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tchannelId\x12&\n" +
	"\tpage_size\x18d \x01(\x03B\t\xfa\xc71\x05<=100R\bpageSize\x12*\n" +
	"\n" +
	"page_token\x18e \x01(\tB\v\x8a\xc81\a<=15000R\tpageToken\x12#\n" +
	"\border_by\x18f \x01(\tB\b\x8a\xc81\x04<=50R\aorderBy\x12\"\n" +
	"\x06filter\x18g \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filterJ\x04\b\x02\x10d\"w\n" +
	"\x11ListVideoResponse\x124\n" +
	"\x06videos\x18\x01 \x03(\v2\x1c.yandex.cloud.video.v1.VideoR\x06videos\x12&\n" +
	"\x0fnext_page_token\x18d \x01(\tR\rnextPageTokenJ\x04\b\x02\x10d\"t\n" +
	"\x15BatchGetVideosRequest\x12+\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tchannelId\x12.\n" +
	"\tvideo_ids\x18\x02 \x03(\tB\x11\x82\xc81\x051-100\x8a\xc81\x04<=50R\bvideoIds\"N\n" +
	"\x16BatchGetVideosResponse\x124\n" +
	"\x06videos\x18\x01 \x03(\v2\x1c.yandex.cloud.video.v1.VideoR\x06videos\"\xd5\a\n" +
	"\x12CreateVideoRequest\x12+\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tchannelId\x12#\n" +
	"\x05title\x18\x02 \x01(\tB\r\xe8\xc71\x01\x8a\xc81\x05<=300R\x05title\x12,\n" +
	"\vdescription\x18\x03 \x01(\tB\n" +
	"\x8a\xc81\x06<=4000R\vdescription\x12+\n" +
	"\fthumbnail_id\x18\x04 \x01(\tB\b\x8a\xc81\x04<=50R\vthumbnailId\x12K\n" +
	"\x0eauto_transcode\x18\x05 \x01(\x0e2$.yandex.cloud.video.v1.AutoTranscodeR\rautoTranscode\x120\n" +
	"\x0fstyle_preset_id\x18\x06 \x01(\tB\b\x8a\xc81\x04<=50R\rstylePresetId\x12=\n" +
	"\fauto_publish\x18\a \x01(\v2\x1a.google.protobuf.BoolValueR\vautoPublish\x127\n" +
	"\tenable_ad\x18\b \x01(\v2\x1a.google.protobuf.BoolValueR\benableAd\x12\x92\x01\n" +
	"\x06labels\x18\xc8\x01 \x03(\v25.yandex.cloud.video.v1.CreateVideoRequest.LabelsEntryBB\xf2\xc71\x12[-_.@:/0-9a-zA-Z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x04<=63R\x06labels\x12=\n" +
	"\x04tusd\x18\xe8\a \x01(\v2&.yandex.cloud.video.v1.VideoTUSDParamsH\x00R\x04tusd\x12V\n" +
	"\rpublic_access\x18\xd0\x0f \x01(\v2..yandex.cloud.video.v1.VideoPublicAccessParamsH\x01R\fpublicAccess\x12Z\n" +
	"\x0fsign_url_access\x18\xd3\x0f \x01(\v2/.yandex.cloud.video.v1.VideoSignURLAccessParamsH\x01R\rsignUrlAccess\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x0e\n" +
	"\x06source\x12\x04\xc0\xc11\x01B\x15\n" +
	"\raccess_rights\x12\x04\xc0\xc11\x01J\x04\b\n" +
	"\x10\vJ\x06\b\xd1\x0f\x10\xd2\x0fJ\x06\b\xd2\x0f\x10\xd3\x0fJ\x04\b\t\x10\n" +
	"J\x05\b\v\x10\xc8\x01J\x06\b\xc9\x01\x10\xe8\aJ\x06\b\xe9\a\x10\xd0\x0f\"S\n" +
	"\x0fVideoTUSDParams\x12#\n" +
	"\tfile_size\x18\x01 \x01(\x03B\x06\xfa\xc71\x02>0R\bfileSize\x12\x1b\n" +
	"\tfile_name\x18\x02 \x01(\tR\bfileName\"\x19\n" +
	"\x17VideoPublicAccessParams\"\x1a\n" +
	"\x18VideoSignURLAccessParams\"0\n" +
	"\x13CreateVideoMetadata\x12\x19\n" +
	"\bvideo_id\x18\x01 \x01(\tR\avideoId\"\xf2\x06\n" +
	"\x12UpdateVideoRequest\x12'\n" +
	"\bvideo_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\avideoId\x12?\n" +
	"\n" +
	"field_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskB\x04\xe8\xc71\x01R\tfieldMask\x12\x1f\n" +
	"\x05title\x18\x03 \x01(\tB\t\x8a\xc81\x05<=300R\x05title\x12,\n" +
	"\vdescription\x18\x04 \x01(\tB\n" +
	"\x8a\xc81\x06<=4000R\vdescription\x12+\n" +
	"\fthumbnail_id\x18\x05 \x01(\tB\b\x8a\xc81\x04<=50R\vthumbnailId\x12K\n" +
	"\x0eauto_transcode\x18\x06 \x01(\x0e2$.yandex.cloud.video.v1.AutoTranscodeR\rautoTranscode\x120\n" +
	"\x0fstyle_preset_id\x18\a \x01(\tB\b\x8a\xc81\x04<=50R\rstylePresetId\x127\n" +
	"\tenable_ad\x18\b \x01(\v2\x1a.google.protobuf.BoolValueR\benableAd\x12\x92\x01\n" +
	"\x06labels\x18\xc8\x01 \x03(\v25.yandex.cloud.video.v1.UpdateVideoRequest.LabelsEntryBB\xf2\xc71\x12[-_.@:/0-9a-zA-Z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x04<=63R\x06labels\x12V\n" +
	"\rpublic_access\x18\xd0\x0f \x01(\v2..yandex.cloud.video.v1.VideoPublicAccessParamsH\x00R\fpublicAccess\x12Z\n" +
	"\x0fsign_url_access\x18\xd3\x0f \x01(\v2/.yandex.cloud.video.v1.VideoSignURLAccessParamsH\x00R\rsignUrlAccess\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x0f\n" +
	"\raccess_rightsJ\x04\b\n" +
	"\x10\vJ\x06\b\xd1\x0f\x10\xd2\x0fJ\x06\b\xd2\x0f\x10\xd3\x0fJ\x04\b\t\x10\n" +
	"J\x05\b\v\x10\xc8\x01J\x06\b\xc9\x01\x10\xd0\x0f\"0\n" +
	"\x13UpdateVideoMetadata\x12\x19\n" +
	"\bvideo_id\x18\x01 \x01(\tR\avideoId\"\xe4\x02\n" +
	"\x15TranscodeVideoRequest\x12\x19\n" +
	"\bvideo_id\x18\x01 \x01(\tR\avideoId\x12?\n" +
	"\n" +
	"field_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskB\x04\xe8\xc71\x01R\tfieldMask\x12!\n" +
	"\fsubtitle_ids\x18\x03 \x03(\tR\vsubtitleIds\x12b\n" +
	"\x14translation_settings\x18\x04 \x01(\v2/.yandex.cloud.video.v1.VideoTranslationSettingsR\x13translationSettings\x12h\n" +
	"\x16summarization_settings\x18\x05 \x01(\v21.yandex.cloud.video.v1.VideoSummarizationSettingsR\x15summarizationSettings\"\xa2\x06\n" +
	"\x18VideoTranslationSettings\x12X\n" +
	"\x06tracks\x18\x01 \x03(\v2@.yandex.cloud.video.v1.VideoTranslationSettings.TranslationTrackR\x06tracks\x1a\xa4\x02\n" +
	"\x10TranslationTrack\x12a\n" +
	"\vinput_track\x18\x01 \x01(\v2:.yandex.cloud.video.v1.VideoTranslationSettings.InputTrackB\x04\xe8\xc71\x01R\n" +
	"inputTrack\x12[\n" +
	"\tsubtitles\x18\x02 \x03(\v2=.yandex.cloud.video.v1.VideoTranslationSettings.SubtitleTrackR\tsubtitles\x12P\n" +
	"\x05audio\x18\x03 \x03(\v2:.yandex.cloud.video.v1.VideoTranslationSettings.AudioTrackR\x05audio\x1a\x8a\x01\n" +
	"\n" +
	"InputTrack\x12(\n" +
	"\vtrack_index\x18\x01 \x01(\x03B\a\xfa\xc71\x03>=1R\n" +
	"trackIndex\x12R\n" +
	"\bsrc_lang\x18\x02 \x01(\tB7\xf2\xc71,|ara|deu|eng|fra|ita|jpn|kor|rus|spa|tur|zho\x8a\xc81\x030,3R\asrcLang\x1a\x90\x01\n" +
	"\rSubtitleTrack\x12[\n" +
	"\bdst_lang\x18\x01 \x01(\tB@\xe8\xc71\x01\xf2\xc713ara|deu|eng|fra|ita|jpn|kaz|kor|rus|spa|tur|ukr|zho\x8a\xc81\x013R\adstLang\x12\"\n" +
	"\x05label\x18\x02 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x05label\x1ae\n" +
	"\n" +
	"AudioTrack\x123\n" +
	"\bdst_lang\x18\x01 \x01(\tB\x18\xe8\xc71\x01\xf2\xc71\veng|kaz|rus\x8a\xc81\x013R\adstLang\x12\"\n" +
	"\x05label\x18\x02 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x05label\"\xb6\x03\n" +
	"\x1aVideoSummarizationSettings\x12\\\n" +
	"\x06tracks\x18\x02 \x03(\v2D.yandex.cloud.video.v1.VideoSummarizationSettings.SummarizationTrackR\x06tracks\x12,\n" +
	"\x12process_all_tracks\x18\x03 \x01(\bR\x10processAllTracks\x1ay\n" +
	"\x12SummarizationTrack\x12c\n" +
	"\vinput_track\x18\x01 \x01(\v2<.yandex.cloud.video.v1.VideoSummarizationSettings.InputTrackB\x04\xe8\xc71\x01R\n" +
	"inputTrack\x1a\x8a\x01\n" +
	"\n" +
	"InputTrack\x12(\n" +
	"\vtrack_index\x18\x01 \x01(\x03B\a\xfa\xc71\x03>=1R\n" +
	"trackIndex\x12R\n" +
	"\bsrc_lang\x18\x02 \x01(\tB7\xf2\xc71,|ara|deu|eng|fra|ita|jpn|kor|rus|spa|tur|zho\x8a\xc81\x030,3R\asrcLangJ\x04\b\x01\x10\x02\"3\n" +
	"\x16TranscodeVideoMetadata\x12\x19\n" +
	"\bvideo_id\x18\x01 \x01(\tR\avideoId\"=\n" +
	"\x12DeleteVideoRequest\x12'\n" +
	"\bvideo_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\avideoId\"0\n" +
	"\x13DeleteVideoMetadata\x12\x19\n" +
	"\bvideo_id\x18\x01 \x01(\tR\avideoId\"w\n" +
	"\x18BatchDeleteVideosRequest\x12+\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tchannelId\x12.\n" +
	"\tvideo_ids\x18\x02 \x03(\tB\x11\x82\xc81\x051-100\x8a\xc81\x04<=50R\bvideoIds\"8\n" +
	"\x19BatchDeleteVideosMetadata\x12\x1b\n" +
	"\tvideo_ids\x18\x01 \x03(\tR\bvideoIds\"\xf1\x01\n" +
	"\x19PerformVideoActionRequest\x12'\n" +
	"\bvideo_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\avideoId\x12F\n" +
	"\apublish\x18\xe8\a \x01(\v2).yandex.cloud.video.v1.PublishVideoActionH\x00R\apublish\x12L\n" +
	"\tunpublish\x18\xe9\a \x01(\v2+.yandex.cloud.video.v1.UnpublishVideoActionH\x00R\tunpublishB\x0e\n" +
	"\x06action\x12\x04\xc0\xc11\x01J\x05\b\x02\x10\xe8\a\"\x14\n" +
	"\x12PublishVideoAction\"\x16\n" +
	"\x14UnpublishVideoAction\"7\n" +
	"\x1aPerformVideoActionMetadata\x12\x19\n" +
	"\bvideo_id\x18\x01 \x01(\tR\avideoId\"\xe5\x01\n" +
	"\x18GetVideoPlayerURLRequest\x12'\n" +
	"\bvideo_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\avideoId\x12@\n" +
	"\x06params\x18\x02 \x01(\v2(.yandex.cloud.video.v1.VideoPlayerParamsR\x06params\x12^\n" +
	"\x1esigned_url_expiration_duration\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\x1bsignedUrlExpirationDuration\"[\n" +
	"\x11VideoPlayerParams\x12\x12\n" +
	"\x04mute\x18\x01 \x01(\bR\x04mute\x12\x1a\n" +
	"\bautoplay\x18\x02 \x01(\bR\bautoplay\x12\x16\n" +
	"\x06hidden\x18\x03 \x01(\bR\x06hidden\"N\n" +
	"\x19GetVideoPlayerURLResponse\x12\x1d\n" +
	"\n" +
	"player_url\x18\x01 \x01(\tR\tplayerUrl\x12\x12\n" +
	"\x04html\x18\x02 \x01(\tR\x04html\"\x9f\x02\n" +
	"\x1eBatchGetVideoPlayerURLsRequest\x12+\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tchannelId\x12.\n" +
	"\tvideo_ids\x18\x02 \x03(\tB\x11\x82\xc81\x051-100\x8a\xc81\x04<=50R\bvideoIds\x12@\n" +
	"\x06params\x18\x03 \x01(\v2(.yandex.cloud.video.v1.VideoPlayerParamsR\x06params\x12^\n" +
	"\x1esigned_url_expiration_duration\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\x1bsignedUrlExpirationDuration\"B\n" +
	"\x1fBatchGetVideoPlayerURLsResponse\x12\x1f\n" +
	"\vplayer_urls\x18\x01 \x03(\tR\n" +
	"playerUrls\"C\n" +
	"\x18GetVideoManifestsRequest\x12'\n" +
	"\bvideo_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\avideoId\"Z\n" +
	"\x19GetVideoManifestsResponse\x12=\n" +
	"\tmanifests\x18\x01 \x03(\v2\x1f.yandex.cloud.video.v1.ManifestR\tmanifests2\xa7\x0f\n" +
	"\fVideoService\x12p\n" +
	"\x03Get\x12&.yandex.cloud.video.v1.GetVideoRequest\x1a\x1c.yandex.cloud.video.v1.Video\"#\x82\xd3\xe4\x93\x02\x1d\x12\x1b/video/v1/videos/{video_id}\x12s\n" +
	"\x04List\x12'.yandex.cloud.video.v1.ListVideoRequest\x1a(.yandex.cloud.video.v1.ListVideoResponse\"\x18\x82\xd3\xe4\x93\x02\x12\x12\x10/video/v1/videos\x12\x8d\x01\n" +
	"\bBatchGet\x12,.yandex.cloud.video.v1.BatchGetVideosRequest\x1a-.yandex.cloud.video.v1.BatchGetVideosResponse\"$\x82\xd3\xe4\x93\x02\x1e:\x01*\"\x19/video/v1/videos:batchGet\x12\x93\x01\n" +
	"\x06Create\x12).yandex.cloud.video.v1.CreateVideoRequest\x1a!.yandex.cloud.operation.Operation\";\xb2\xd2*\x1c\n" +
	"\x13CreateVideoMetadata\x12\x05Video\x82\xd3\xe4\x93\x02\x15:\x01*\"\x10/video/v1/videos\x12\x9e\x01\n" +
	"\x06Update\x12).yandex.cloud.video.v1.UpdateVideoRequest\x1a!.yandex.cloud.operation.Operation\"F\xb2\xd2*\x1c\n" +
	"\x13UpdateVideoMetadata\x12\x05Video\x82\xd3\xe4\x93\x02 :\x01*2\x1b/video/v1/videos/{video_id}\x12\xb1\x01\n" +
	"\tTranscode\x12,.yandex.cloud.video.v1.TranscodeVideoRequest\x1a!.yandex.cloud.operation.Operation\"S\xb2\xd2*\x1f\n" +
	"\x16TranscodeVideoMetadata\x12\x05Video\x82\xd3\xe4\x93\x02*:\x01*\"%/video/v1/videos/{video_id}:transcode\x12\xab\x01\n" +
	"\x06Delete\x12).yandex.cloud.video.v1.DeleteVideoRequest\x1a!.yandex.cloud.operation.Operation\"S\xb2\xd2*,\n" +
	"\x13DeleteVideoMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02\x1d*\x1b/video/v1/videos/{video_id}\x12\xc0\x01\n" +
	"\vBatchDelete\x12/.yandex.cloud.video.v1.BatchDeleteVideosRequest\x1a!.yandex.cloud.operation.Operation\"]\xb2\xd2*2\n" +
	"\x19BatchDeleteVideosMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02!:\x01*\"\x1c/video/v1/videos:batchDelete\x12\xc1\x01\n" +
	"\rPerformAction\x120.yandex.cloud.video.v1.PerformVideoActionRequest\x1a!.yandex.cloud.operation.Operation\"[\xb2\xd2*#\n" +
	"\x1aPerformVideoActionMetadata\x12\x05Video\x82\xd3\xe4\x93\x02.:\x01*\")/video/v1/videos/{video_id}:performAction\x12\xa3\x01\n" +
	"\fGetPlayerURL\x12/.yandex.cloud.video.v1.GetVideoPlayerURLRequest\x1a0.yandex.cloud.video.v1.GetVideoPlayerURLResponse\"0\x82\xd3\xe4\x93\x02*\x12(/video/v1/videos/{video_id}:getPlayerURL\x12\xb3\x01\n" +
	"\x12BatchGetPlayerURLs\x125.yandex.cloud.video.v1.BatchGetVideoPlayerURLsRequest\x1a6.yandex.cloud.video.v1.BatchGetVideoPlayerURLsResponse\".\x82\xd3\xe4\x93\x02(:\x01*\"#/video/v1/videos:batchGetPlayerURLs\x12\xa3\x01\n" +
	"\fGetManifests\x12/.yandex.cloud.video.v1.GetVideoManifestsRequest\x1a0.yandex.cloud.video.v1.GetVideoManifestsResponse\"0\x82\xd3\xe4\x93\x02*\x12(/video/v1/videos/{video_id}:getManifestsB\\\n" +
	"\x19yandex.cloud.api.video.v1Z?github.com/yandex-cloud/go-genproto/yandex/cloud/video/v1;videob\x06proto3"

var (
	file_yandex_cloud_video_v1_video_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_video_v1_video_service_proto_rawDescData []byte
)

func file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_video_v1_video_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_video_v1_video_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_video_v1_video_service_proto_rawDesc), len(file_yandex_cloud_video_v1_video_service_proto_rawDesc)))
	})
	return file_yandex_cloud_video_v1_video_service_proto_rawDescData
}

var file_yandex_cloud_video_v1_video_service_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_yandex_cloud_video_v1_video_service_proto_goTypes = []any{
	(*GetVideoRequest)(nil),                               // 0: yandex.cloud.video.v1.GetVideoRequest
	(*ListVideoRequest)(nil),                              // 1: yandex.cloud.video.v1.ListVideoRequest
	(*ListVideoResponse)(nil),                             // 2: yandex.cloud.video.v1.ListVideoResponse
	(*BatchGetVideosRequest)(nil),                         // 3: yandex.cloud.video.v1.BatchGetVideosRequest
	(*BatchGetVideosResponse)(nil),                        // 4: yandex.cloud.video.v1.BatchGetVideosResponse
	(*CreateVideoRequest)(nil),                            // 5: yandex.cloud.video.v1.CreateVideoRequest
	(*VideoTUSDParams)(nil),                               // 6: yandex.cloud.video.v1.VideoTUSDParams
	(*VideoPublicAccessParams)(nil),                       // 7: yandex.cloud.video.v1.VideoPublicAccessParams
	(*VideoSignURLAccessParams)(nil),                      // 8: yandex.cloud.video.v1.VideoSignURLAccessParams
	(*CreateVideoMetadata)(nil),                           // 9: yandex.cloud.video.v1.CreateVideoMetadata
	(*UpdateVideoRequest)(nil),                            // 10: yandex.cloud.video.v1.UpdateVideoRequest
	(*UpdateVideoMetadata)(nil),                           // 11: yandex.cloud.video.v1.UpdateVideoMetadata
	(*TranscodeVideoRequest)(nil),                         // 12: yandex.cloud.video.v1.TranscodeVideoRequest
	(*VideoTranslationSettings)(nil),                      // 13: yandex.cloud.video.v1.VideoTranslationSettings
	(*VideoSummarizationSettings)(nil),                    // 14: yandex.cloud.video.v1.VideoSummarizationSettings
	(*TranscodeVideoMetadata)(nil),                        // 15: yandex.cloud.video.v1.TranscodeVideoMetadata
	(*DeleteVideoRequest)(nil),                            // 16: yandex.cloud.video.v1.DeleteVideoRequest
	(*DeleteVideoMetadata)(nil),                           // 17: yandex.cloud.video.v1.DeleteVideoMetadata
	(*BatchDeleteVideosRequest)(nil),                      // 18: yandex.cloud.video.v1.BatchDeleteVideosRequest
	(*BatchDeleteVideosMetadata)(nil),                     // 19: yandex.cloud.video.v1.BatchDeleteVideosMetadata
	(*PerformVideoActionRequest)(nil),                     // 20: yandex.cloud.video.v1.PerformVideoActionRequest
	(*PublishVideoAction)(nil),                            // 21: yandex.cloud.video.v1.PublishVideoAction
	(*UnpublishVideoAction)(nil),                          // 22: yandex.cloud.video.v1.UnpublishVideoAction
	(*PerformVideoActionMetadata)(nil),                    // 23: yandex.cloud.video.v1.PerformVideoActionMetadata
	(*GetVideoPlayerURLRequest)(nil),                      // 24: yandex.cloud.video.v1.GetVideoPlayerURLRequest
	(*VideoPlayerParams)(nil),                             // 25: yandex.cloud.video.v1.VideoPlayerParams
	(*GetVideoPlayerURLResponse)(nil),                     // 26: yandex.cloud.video.v1.GetVideoPlayerURLResponse
	(*BatchGetVideoPlayerURLsRequest)(nil),                // 27: yandex.cloud.video.v1.BatchGetVideoPlayerURLsRequest
	(*BatchGetVideoPlayerURLsResponse)(nil),               // 28: yandex.cloud.video.v1.BatchGetVideoPlayerURLsResponse
	(*GetVideoManifestsRequest)(nil),                      // 29: yandex.cloud.video.v1.GetVideoManifestsRequest
	(*GetVideoManifestsResponse)(nil),                     // 30: yandex.cloud.video.v1.GetVideoManifestsResponse
	nil,                                                   // 31: yandex.cloud.video.v1.CreateVideoRequest.LabelsEntry
	nil,                                                   // 32: yandex.cloud.video.v1.UpdateVideoRequest.LabelsEntry
	(*VideoTranslationSettings_TranslationTrack)(nil),     // 33: yandex.cloud.video.v1.VideoTranslationSettings.TranslationTrack
	(*VideoTranslationSettings_InputTrack)(nil),           // 34: yandex.cloud.video.v1.VideoTranslationSettings.InputTrack
	(*VideoTranslationSettings_SubtitleTrack)(nil),        // 35: yandex.cloud.video.v1.VideoTranslationSettings.SubtitleTrack
	(*VideoTranslationSettings_AudioTrack)(nil),           // 36: yandex.cloud.video.v1.VideoTranslationSettings.AudioTrack
	(*VideoSummarizationSettings_SummarizationTrack)(nil), // 37: yandex.cloud.video.v1.VideoSummarizationSettings.SummarizationTrack
	(*VideoSummarizationSettings_InputTrack)(nil),         // 38: yandex.cloud.video.v1.VideoSummarizationSettings.InputTrack
	(*Video)(nil),                                         // 39: yandex.cloud.video.v1.Video
	(AutoTranscode)(0),                                    // 40: yandex.cloud.video.v1.AutoTranscode
	(*wrapperspb.BoolValue)(nil),                          // 41: google.protobuf.BoolValue
	(*fieldmaskpb.FieldMask)(nil),                         // 42: google.protobuf.FieldMask
	(*durationpb.Duration)(nil),                           // 43: google.protobuf.Duration
	(*Manifest)(nil),                                      // 44: yandex.cloud.video.v1.Manifest
	(*operation.Operation)(nil),                           // 45: yandex.cloud.operation.Operation
}
var file_yandex_cloud_video_v1_video_service_proto_depIdxs = []int32{
	39, // 0: yandex.cloud.video.v1.ListVideoResponse.videos:type_name -> yandex.cloud.video.v1.Video
	39, // 1: yandex.cloud.video.v1.BatchGetVideosResponse.videos:type_name -> yandex.cloud.video.v1.Video
	40, // 2: yandex.cloud.video.v1.CreateVideoRequest.auto_transcode:type_name -> yandex.cloud.video.v1.AutoTranscode
	41, // 3: yandex.cloud.video.v1.CreateVideoRequest.auto_publish:type_name -> google.protobuf.BoolValue
	41, // 4: yandex.cloud.video.v1.CreateVideoRequest.enable_ad:type_name -> google.protobuf.BoolValue
	31, // 5: yandex.cloud.video.v1.CreateVideoRequest.labels:type_name -> yandex.cloud.video.v1.CreateVideoRequest.LabelsEntry
	6,  // 6: yandex.cloud.video.v1.CreateVideoRequest.tusd:type_name -> yandex.cloud.video.v1.VideoTUSDParams
	7,  // 7: yandex.cloud.video.v1.CreateVideoRequest.public_access:type_name -> yandex.cloud.video.v1.VideoPublicAccessParams
	8,  // 8: yandex.cloud.video.v1.CreateVideoRequest.sign_url_access:type_name -> yandex.cloud.video.v1.VideoSignURLAccessParams
	42, // 9: yandex.cloud.video.v1.UpdateVideoRequest.field_mask:type_name -> google.protobuf.FieldMask
	40, // 10: yandex.cloud.video.v1.UpdateVideoRequest.auto_transcode:type_name -> yandex.cloud.video.v1.AutoTranscode
	41, // 11: yandex.cloud.video.v1.UpdateVideoRequest.enable_ad:type_name -> google.protobuf.BoolValue
	32, // 12: yandex.cloud.video.v1.UpdateVideoRequest.labels:type_name -> yandex.cloud.video.v1.UpdateVideoRequest.LabelsEntry
	7,  // 13: yandex.cloud.video.v1.UpdateVideoRequest.public_access:type_name -> yandex.cloud.video.v1.VideoPublicAccessParams
	8,  // 14: yandex.cloud.video.v1.UpdateVideoRequest.sign_url_access:type_name -> yandex.cloud.video.v1.VideoSignURLAccessParams
	42, // 15: yandex.cloud.video.v1.TranscodeVideoRequest.field_mask:type_name -> google.protobuf.FieldMask
	13, // 16: yandex.cloud.video.v1.TranscodeVideoRequest.translation_settings:type_name -> yandex.cloud.video.v1.VideoTranslationSettings
	14, // 17: yandex.cloud.video.v1.TranscodeVideoRequest.summarization_settings:type_name -> yandex.cloud.video.v1.VideoSummarizationSettings
	33, // 18: yandex.cloud.video.v1.VideoTranslationSettings.tracks:type_name -> yandex.cloud.video.v1.VideoTranslationSettings.TranslationTrack
	37, // 19: yandex.cloud.video.v1.VideoSummarizationSettings.tracks:type_name -> yandex.cloud.video.v1.VideoSummarizationSettings.SummarizationTrack
	21, // 20: yandex.cloud.video.v1.PerformVideoActionRequest.publish:type_name -> yandex.cloud.video.v1.PublishVideoAction
	22, // 21: yandex.cloud.video.v1.PerformVideoActionRequest.unpublish:type_name -> yandex.cloud.video.v1.UnpublishVideoAction
	25, // 22: yandex.cloud.video.v1.GetVideoPlayerURLRequest.params:type_name -> yandex.cloud.video.v1.VideoPlayerParams
	43, // 23: yandex.cloud.video.v1.GetVideoPlayerURLRequest.signed_url_expiration_duration:type_name -> google.protobuf.Duration
	25, // 24: yandex.cloud.video.v1.BatchGetVideoPlayerURLsRequest.params:type_name -> yandex.cloud.video.v1.VideoPlayerParams
	43, // 25: yandex.cloud.video.v1.BatchGetVideoPlayerURLsRequest.signed_url_expiration_duration:type_name -> google.protobuf.Duration
	44, // 26: yandex.cloud.video.v1.GetVideoManifestsResponse.manifests:type_name -> yandex.cloud.video.v1.Manifest
	34, // 27: yandex.cloud.video.v1.VideoTranslationSettings.TranslationTrack.input_track:type_name -> yandex.cloud.video.v1.VideoTranslationSettings.InputTrack
	35, // 28: yandex.cloud.video.v1.VideoTranslationSettings.TranslationTrack.subtitles:type_name -> yandex.cloud.video.v1.VideoTranslationSettings.SubtitleTrack
	36, // 29: yandex.cloud.video.v1.VideoTranslationSettings.TranslationTrack.audio:type_name -> yandex.cloud.video.v1.VideoTranslationSettings.AudioTrack
	38, // 30: yandex.cloud.video.v1.VideoSummarizationSettings.SummarizationTrack.input_track:type_name -> yandex.cloud.video.v1.VideoSummarizationSettings.InputTrack
	0,  // 31: yandex.cloud.video.v1.VideoService.Get:input_type -> yandex.cloud.video.v1.GetVideoRequest
	1,  // 32: yandex.cloud.video.v1.VideoService.List:input_type -> yandex.cloud.video.v1.ListVideoRequest
	3,  // 33: yandex.cloud.video.v1.VideoService.BatchGet:input_type -> yandex.cloud.video.v1.BatchGetVideosRequest
	5,  // 34: yandex.cloud.video.v1.VideoService.Create:input_type -> yandex.cloud.video.v1.CreateVideoRequest
	10, // 35: yandex.cloud.video.v1.VideoService.Update:input_type -> yandex.cloud.video.v1.UpdateVideoRequest
	12, // 36: yandex.cloud.video.v1.VideoService.Transcode:input_type -> yandex.cloud.video.v1.TranscodeVideoRequest
	16, // 37: yandex.cloud.video.v1.VideoService.Delete:input_type -> yandex.cloud.video.v1.DeleteVideoRequest
	18, // 38: yandex.cloud.video.v1.VideoService.BatchDelete:input_type -> yandex.cloud.video.v1.BatchDeleteVideosRequest
	20, // 39: yandex.cloud.video.v1.VideoService.PerformAction:input_type -> yandex.cloud.video.v1.PerformVideoActionRequest
	24, // 40: yandex.cloud.video.v1.VideoService.GetPlayerURL:input_type -> yandex.cloud.video.v1.GetVideoPlayerURLRequest
	27, // 41: yandex.cloud.video.v1.VideoService.BatchGetPlayerURLs:input_type -> yandex.cloud.video.v1.BatchGetVideoPlayerURLsRequest
	29, // 42: yandex.cloud.video.v1.VideoService.GetManifests:input_type -> yandex.cloud.video.v1.GetVideoManifestsRequest
	39, // 43: yandex.cloud.video.v1.VideoService.Get:output_type -> yandex.cloud.video.v1.Video
	2,  // 44: yandex.cloud.video.v1.VideoService.List:output_type -> yandex.cloud.video.v1.ListVideoResponse
	4,  // 45: yandex.cloud.video.v1.VideoService.BatchGet:output_type -> yandex.cloud.video.v1.BatchGetVideosResponse
	45, // 46: yandex.cloud.video.v1.VideoService.Create:output_type -> yandex.cloud.operation.Operation
	45, // 47: yandex.cloud.video.v1.VideoService.Update:output_type -> yandex.cloud.operation.Operation
	45, // 48: yandex.cloud.video.v1.VideoService.Transcode:output_type -> yandex.cloud.operation.Operation
	45, // 49: yandex.cloud.video.v1.VideoService.Delete:output_type -> yandex.cloud.operation.Operation
	45, // 50: yandex.cloud.video.v1.VideoService.BatchDelete:output_type -> yandex.cloud.operation.Operation
	45, // 51: yandex.cloud.video.v1.VideoService.PerformAction:output_type -> yandex.cloud.operation.Operation
	26, // 52: yandex.cloud.video.v1.VideoService.GetPlayerURL:output_type -> yandex.cloud.video.v1.GetVideoPlayerURLResponse
	28, // 53: yandex.cloud.video.v1.VideoService.BatchGetPlayerURLs:output_type -> yandex.cloud.video.v1.BatchGetVideoPlayerURLsResponse
	30, // 54: yandex.cloud.video.v1.VideoService.GetManifests:output_type -> yandex.cloud.video.v1.GetVideoManifestsResponse
	43, // [43:55] is the sub-list for method output_type
	31, // [31:43] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_yandex_cloud_video_v1_video_service_proto_init() }
func file_yandex_cloud_video_v1_video_service_proto_init() {
	if File_yandex_cloud_video_v1_video_service_proto != nil {
		return
	}
	file_yandex_cloud_video_v1_manifest_proto_init()
	file_yandex_cloud_video_v1_video_proto_init()
	file_yandex_cloud_video_v1_video_service_proto_msgTypes[5].OneofWrappers = []any{
		(*CreateVideoRequest_Tusd)(nil),
		(*CreateVideoRequest_PublicAccess)(nil),
		(*CreateVideoRequest_SignUrlAccess)(nil),
	}
	file_yandex_cloud_video_v1_video_service_proto_msgTypes[10].OneofWrappers = []any{
		(*UpdateVideoRequest_PublicAccess)(nil),
		(*UpdateVideoRequest_SignUrlAccess)(nil),
	}
	file_yandex_cloud_video_v1_video_service_proto_msgTypes[20].OneofWrappers = []any{
		(*PerformVideoActionRequest_Publish)(nil),
		(*PerformVideoActionRequest_Unpublish)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_video_v1_video_service_proto_rawDesc), len(file_yandex_cloud_video_v1_video_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_video_v1_video_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_video_v1_video_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_video_v1_video_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_video_v1_video_service_proto = out.File
	file_yandex_cloud_video_v1_video_service_proto_goTypes = nil
	file_yandex_cloud_video_v1_video_service_proto_depIdxs = nil
}

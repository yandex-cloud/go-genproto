// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: yandex/cloud/video/v1/video_service.proto

package video

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the video.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *GetVideoRequest) Reset() {
	*x = GetVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoRequest) ProtoMessage() {}

func (x *GetVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoRequest.ProtoReflect.Descriptor instead.
func (*GetVideoRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetVideoRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type ListVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the channel.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The maximum number of the results per page to return.
	// Default value: 100.
	PageSize int64 `protobuf:"varint,100,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token for getting the next page of the result.
	PageToken string `protobuf:"bytes,101,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// By which column the listing should be ordered and in which direction,
	// format is "<field> <order>" (e.g. "createdAt desc").
	// Default: "id asc".
	// Possible fields: ["id", "title", "createdAt", "updatedAt"].
	// Both snake_case and camelCase are supported for fields.
	OrderBy string `protobuf:"bytes,102,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Filter expression that filters resources listed in the response.
	// Expressions are composed of terms connected by logic operators.
	// If value contains spaces or quotes,
	// it should be in quotes (`'` or `"`) with the inner quotes being backslash escaped.
	// Supported logical operators: ["AND", "OR"].
	// Supported string match operators: ["=", "!=", ":"].
	// Operator ":" stands for substring matching.
	// Filter expressions may also contain parentheses to group logical operands.
	// Example: `key1='value' AND (key2!='\'value\‚Äù OR key2:"\"value\"")`
	// Supported fields: ["id", "title", "status", "visibilityStatus"].
	// Both snake_case and camelCase are supported for fields.
	Filter string `protobuf:"bytes,103,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListVideoRequest) Reset() {
	*x = ListVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVideoRequest) ProtoMessage() {}

func (x *ListVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVideoRequest.ProtoReflect.Descriptor instead.
func (*ListVideoRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListVideoRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ListVideoRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListVideoRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListVideoRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListVideoRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListVideoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Videos []*Video `protobuf:"bytes,1,rep,name=videos,proto3" json:"videos,omitempty"`
	// Token for getting the next page.
	NextPageToken string `protobuf:"bytes,100,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListVideoResponse) Reset() {
	*x = ListVideoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVideoResponse) ProtoMessage() {}

func (x *ListVideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVideoResponse.ProtoReflect.Descriptor instead.
func (*ListVideoResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListVideoResponse) GetVideos() []*Video {
	if x != nil {
		return x.Videos
	}
	return nil
}

func (x *ListVideoResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type BatchGetVideosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the channel.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// List of requested video IDs.
	VideoIds []string `protobuf:"bytes,2,rep,name=video_ids,json=videoIds,proto3" json:"video_ids,omitempty"`
}

func (x *BatchGetVideosRequest) Reset() {
	*x = BatchGetVideosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetVideosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetVideosRequest) ProtoMessage() {}

func (x *BatchGetVideosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetVideosRequest.ProtoReflect.Descriptor instead.
func (*BatchGetVideosRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{3}
}

func (x *BatchGetVideosRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *BatchGetVideosRequest) GetVideoIds() []string {
	if x != nil {
		return x.VideoIds
	}
	return nil
}

type BatchGetVideosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of videos for channel.
	Videos []*Video `protobuf:"bytes,1,rep,name=videos,proto3" json:"videos,omitempty"`
}

func (x *BatchGetVideosResponse) Reset() {
	*x = BatchGetVideosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetVideosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetVideosResponse) ProtoMessage() {}

func (x *BatchGetVideosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetVideosResponse.ProtoReflect.Descriptor instead.
func (*BatchGetVideosResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{4}
}

func (x *BatchGetVideosResponse) GetVideos() []*Video {
	if x != nil {
		return x.Videos
	}
	return nil
}

type CreateVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the channel.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Video title.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Video description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// ID of the thumbnail.
	ThumbnailId string `protobuf:"bytes,4,opt,name=thumbnail_id,json=thumbnailId,proto3" json:"thumbnail_id,omitempty"`
	// Auto start transcoding.
	AutoTranscode AutoTranscode `protobuf:"varint,5,opt,name=auto_transcode,json=autoTranscode,proto3,enum=yandex.cloud.video.v1.AutoTranscode" json:"auto_transcode,omitempty"`
	// Automatically publish video after transcoding.
	// Switches visibility status to PUBLISHED.
	AutoPublish *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=auto_publish,json=autoPublish,proto3" json:"auto_publish,omitempty"`
	// Enable advertisement for this video.
	// Default: true.
	// Set explicitly to false to disable advertisements for a specific video.
	EnableAd *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=enable_ad,json=enableAd,proto3" json:"enable_ad,omitempty"`
	// Custom labels as ‚Äú key:value ‚Äú pairs. Maximum 64 per resource.
	Labels map[string]string `protobuf:"bytes,200,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Source type.
	//
	// Types that are assignable to Source:
	//
	//	*CreateVideoRequest_Tusd
	Source isCreateVideoRequest_Source `protobuf_oneof:"source"`
	// Video access permission settings.
	//
	// Types that are assignable to AccessRights:
	//
	//	*CreateVideoRequest_PublicAccess
	//	*CreateVideoRequest_SignUrlAccess
	AccessRights isCreateVideoRequest_AccessRights `protobuf_oneof:"access_rights"`
}

func (x *CreateVideoRequest) Reset() {
	*x = CreateVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVideoRequest) ProtoMessage() {}

func (x *CreateVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVideoRequest.ProtoReflect.Descriptor instead.
func (*CreateVideoRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateVideoRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *CreateVideoRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateVideoRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateVideoRequest) GetThumbnailId() string {
	if x != nil {
		return x.ThumbnailId
	}
	return ""
}

func (x *CreateVideoRequest) GetAutoTranscode() AutoTranscode {
	if x != nil {
		return x.AutoTranscode
	}
	return AutoTranscode_AUTO_TRANSCODE_UNSPECIFIED
}

func (x *CreateVideoRequest) GetAutoPublish() *wrapperspb.BoolValue {
	if x != nil {
		return x.AutoPublish
	}
	return nil
}

func (x *CreateVideoRequest) GetEnableAd() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableAd
	}
	return nil
}

func (x *CreateVideoRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (m *CreateVideoRequest) GetSource() isCreateVideoRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *CreateVideoRequest) GetTusd() *VideoTUSDParams {
	if x, ok := x.GetSource().(*CreateVideoRequest_Tusd); ok {
		return x.Tusd
	}
	return nil
}

func (m *CreateVideoRequest) GetAccessRights() isCreateVideoRequest_AccessRights {
	if m != nil {
		return m.AccessRights
	}
	return nil
}

func (x *CreateVideoRequest) GetPublicAccess() *VideoPublicAccessParams {
	if x, ok := x.GetAccessRights().(*CreateVideoRequest_PublicAccess); ok {
		return x.PublicAccess
	}
	return nil
}

func (x *CreateVideoRequest) GetSignUrlAccess() *VideoSignURLAccessParams {
	if x, ok := x.GetAccessRights().(*CreateVideoRequest_SignUrlAccess); ok {
		return x.SignUrlAccess
	}
	return nil
}

type isCreateVideoRequest_Source interface {
	isCreateVideoRequest_Source()
}

type CreateVideoRequest_Tusd struct {
	// Upload video using the tus protocol.
	Tusd *VideoTUSDParams `protobuf:"bytes,1000,opt,name=tusd,proto3,oneof"`
}

func (*CreateVideoRequest_Tusd) isCreateVideoRequest_Source() {}

type isCreateVideoRequest_AccessRights interface {
	isCreateVideoRequest_AccessRights()
}

type CreateVideoRequest_PublicAccess struct {
	// Publicly accessible video available for viewing by anyone with the direct link.
	// No additional authorization or access control is applied.
	PublicAccess *VideoPublicAccessParams `protobuf:"bytes,2000,opt,name=public_access,json=publicAccess,proto3,oneof"`
}

type CreateVideoRequest_SignUrlAccess struct {
	// Checking access rights using url's signature.
	SignUrlAccess *VideoSignURLAccessParams `protobuf:"bytes,2003,opt,name=sign_url_access,json=signUrlAccess,proto3,oneof"`
}

func (*CreateVideoRequest_PublicAccess) isCreateVideoRequest_AccessRights() {}

func (*CreateVideoRequest_SignUrlAccess) isCreateVideoRequest_AccessRights() {}

type VideoTUSDParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File size.
	FileSize int64 `protobuf:"varint,1,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	// File name.
	FileName string `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *VideoTUSDParams) Reset() {
	*x = VideoTUSDParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoTUSDParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTUSDParams) ProtoMessage() {}

func (x *VideoTUSDParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTUSDParams.ProtoReflect.Descriptor instead.
func (*VideoTUSDParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{6}
}

func (x *VideoTUSDParams) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *VideoTUSDParams) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type VideoPublicAccessParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VideoPublicAccessParams) Reset() {
	*x = VideoPublicAccessParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoPublicAccessParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoPublicAccessParams) ProtoMessage() {}

func (x *VideoPublicAccessParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoPublicAccessParams.ProtoReflect.Descriptor instead.
func (*VideoPublicAccessParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{7}
}

type VideoSignURLAccessParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VideoSignURLAccessParams) Reset() {
	*x = VideoSignURLAccessParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoSignURLAccessParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoSignURLAccessParams) ProtoMessage() {}

func (x *VideoSignURLAccessParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoSignURLAccessParams.ProtoReflect.Descriptor instead.
func (*VideoSignURLAccessParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{8}
}

type CreateVideoMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the video.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *CreateVideoMetadata) Reset() {
	*x = CreateVideoMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVideoMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVideoMetadata) ProtoMessage() {}

func (x *CreateVideoMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVideoMetadata.ProtoReflect.Descriptor instead.
func (*CreateVideoMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{9}
}

func (x *CreateVideoMetadata) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type UpdateVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the video.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	// Field mask that specifies which fields of the video are going to be updated.
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// Video title.
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// Video description.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// ID of the thumbnail.
	ThumbnailId string `protobuf:"bytes,5,opt,name=thumbnail_id,json=thumbnailId,proto3" json:"thumbnail_id,omitempty"`
	// Auto start transcoding.
	AutoTranscode AutoTranscode `protobuf:"varint,6,opt,name=auto_transcode,json=autoTranscode,proto3,enum=yandex.cloud.video.v1.AutoTranscode" json:"auto_transcode,omitempty"`
	// Enable advertisement for this video.
	// Default: true.
	// Use this to disable advertisement for a specific video.
	EnableAd *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=enable_ad,json=enableAd,proto3" json:"enable_ad,omitempty"`
	// Custom labels as ‚Äú key:value ‚Äú pairs. Maximum 64 per resource.
	Labels map[string]string `protobuf:"bytes,200,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Video access permission settings.
	//
	// Types that are assignable to AccessRights:
	//
	//	*UpdateVideoRequest_PublicAccess
	//	*UpdateVideoRequest_SignUrlAccess
	AccessRights isUpdateVideoRequest_AccessRights `protobuf_oneof:"access_rights"`
}

func (x *UpdateVideoRequest) Reset() {
	*x = UpdateVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVideoRequest) ProtoMessage() {}

func (x *UpdateVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVideoRequest.ProtoReflect.Descriptor instead.
func (*UpdateVideoRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateVideoRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *UpdateVideoRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

func (x *UpdateVideoRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateVideoRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateVideoRequest) GetThumbnailId() string {
	if x != nil {
		return x.ThumbnailId
	}
	return ""
}

func (x *UpdateVideoRequest) GetAutoTranscode() AutoTranscode {
	if x != nil {
		return x.AutoTranscode
	}
	return AutoTranscode_AUTO_TRANSCODE_UNSPECIFIED
}

func (x *UpdateVideoRequest) GetEnableAd() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableAd
	}
	return nil
}

func (x *UpdateVideoRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (m *UpdateVideoRequest) GetAccessRights() isUpdateVideoRequest_AccessRights {
	if m != nil {
		return m.AccessRights
	}
	return nil
}

func (x *UpdateVideoRequest) GetPublicAccess() *VideoPublicAccessParams {
	if x, ok := x.GetAccessRights().(*UpdateVideoRequest_PublicAccess); ok {
		return x.PublicAccess
	}
	return nil
}

func (x *UpdateVideoRequest) GetSignUrlAccess() *VideoSignURLAccessParams {
	if x, ok := x.GetAccessRights().(*UpdateVideoRequest_SignUrlAccess); ok {
		return x.SignUrlAccess
	}
	return nil
}

type isUpdateVideoRequest_AccessRights interface {
	isUpdateVideoRequest_AccessRights()
}

type UpdateVideoRequest_PublicAccess struct {
	// Publicly accessible video available for viewing by anyone with the direct link.
	// No additional authorization or access control is applied.
	PublicAccess *VideoPublicAccessParams `protobuf:"bytes,2000,opt,name=public_access,json=publicAccess,proto3,oneof"`
}

type UpdateVideoRequest_SignUrlAccess struct {
	// Checking access rights using url's signature.
	SignUrlAccess *VideoSignURLAccessParams `protobuf:"bytes,2003,opt,name=sign_url_access,json=signUrlAccess,proto3,oneof"`
}

func (*UpdateVideoRequest_PublicAccess) isUpdateVideoRequest_AccessRights() {}

func (*UpdateVideoRequest_SignUrlAccess) isUpdateVideoRequest_AccessRights() {}

type UpdateVideoMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the video.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *UpdateVideoMetadata) Reset() {
	*x = UpdateVideoMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVideoMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVideoMetadata) ProtoMessage() {}

func (x *UpdateVideoMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVideoMetadata.ProtoReflect.Descriptor instead.
func (*UpdateVideoMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateVideoMetadata) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type TranscodeVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the video.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	// Field mask that specifies which transcoding specific fields of the video
	// are going to be updated.
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// IDs of active manually uploaded video subtitles.
	SubtitleIds []string `protobuf:"bytes,3,rep,name=subtitle_ids,json=subtitleIds,proto3" json:"subtitle_ids,omitempty"`
	// Video translation settings.
	TranslationSettings *VideoTranslationSettings `protobuf:"bytes,4,opt,name=translation_settings,json=translationSettings,proto3" json:"translation_settings,omitempty"`
	// Video summarization settings.
	SummarizationSettings *VideoSummarizationSettings `protobuf:"bytes,5,opt,name=summarization_settings,json=summarizationSettings,proto3" json:"summarization_settings,omitempty"`
}

func (x *TranscodeVideoRequest) Reset() {
	*x = TranscodeVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodeVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeVideoRequest) ProtoMessage() {}

func (x *TranscodeVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeVideoRequest.ProtoReflect.Descriptor instead.
func (*TranscodeVideoRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{12}
}

func (x *TranscodeVideoRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *TranscodeVideoRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

func (x *TranscodeVideoRequest) GetSubtitleIds() []string {
	if x != nil {
		return x.SubtitleIds
	}
	return nil
}

func (x *TranscodeVideoRequest) GetTranslationSettings() *VideoTranslationSettings {
	if x != nil {
		return x.TranslationSettings
	}
	return nil
}

func (x *TranscodeVideoRequest) GetSummarizationSettings() *VideoSummarizationSettings {
	if x != nil {
		return x.SummarizationSettings
	}
	return nil
}

type VideoTranslationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Translation settings for each track.
	Tracks []*VideoTranslationSettings_TranslationTrack `protobuf:"bytes,1,rep,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *VideoTranslationSettings) Reset() {
	*x = VideoTranslationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoTranslationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTranslationSettings) ProtoMessage() {}

func (x *VideoTranslationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTranslationSettings.ProtoReflect.Descriptor instead.
func (*VideoTranslationSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{13}
}

func (x *VideoTranslationSettings) GetTracks() []*VideoTranslationSettings_TranslationTrack {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type VideoSummarizationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summarization settings for each track.
	Tracks []*VideoSummarizationSettings_SummarizationTrack `protobuf:"bytes,2,rep,name=tracks,proto3" json:"tracks,omitempty"`
	// Summarize all available tracks.
	// If enabled, `tracks` parameter is ignored.
	// Enables automatic source language deduction for each track
	// and thus may lead to performance degradation.
	ProcessAllTracks bool `protobuf:"varint,3,opt,name=process_all_tracks,json=processAllTracks,proto3" json:"process_all_tracks,omitempty"`
}

func (x *VideoSummarizationSettings) Reset() {
	*x = VideoSummarizationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoSummarizationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoSummarizationSettings) ProtoMessage() {}

func (x *VideoSummarizationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoSummarizationSettings.ProtoReflect.Descriptor instead.
func (*VideoSummarizationSettings) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{14}
}

func (x *VideoSummarizationSettings) GetTracks() []*VideoSummarizationSettings_SummarizationTrack {
	if x != nil {
		return x.Tracks
	}
	return nil
}

func (x *VideoSummarizationSettings) GetProcessAllTracks() bool {
	if x != nil {
		return x.ProcessAllTracks
	}
	return false
}

type TranscodeVideoMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the video.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *TranscodeVideoMetadata) Reset() {
	*x = TranscodeVideoMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscodeVideoMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscodeVideoMetadata) ProtoMessage() {}

func (x *TranscodeVideoMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscodeVideoMetadata.ProtoReflect.Descriptor instead.
func (*TranscodeVideoMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{15}
}

func (x *TranscodeVideoMetadata) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type DeleteVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the video.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *DeleteVideoRequest) Reset() {
	*x = DeleteVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVideoRequest) ProtoMessage() {}

func (x *DeleteVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVideoRequest.ProtoReflect.Descriptor instead.
func (*DeleteVideoRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteVideoRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type DeleteVideoMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the video.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *DeleteVideoMetadata) Reset() {
	*x = DeleteVideoMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVideoMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVideoMetadata) ProtoMessage() {}

func (x *DeleteVideoMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVideoMetadata.ProtoReflect.Descriptor instead.
func (*DeleteVideoMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteVideoMetadata) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type BatchDeleteVideosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the channel.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// List of video IDs.
	VideoIds []string `protobuf:"bytes,2,rep,name=video_ids,json=videoIds,proto3" json:"video_ids,omitempty"`
}

func (x *BatchDeleteVideosRequest) Reset() {
	*x = BatchDeleteVideosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteVideosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteVideosRequest) ProtoMessage() {}

func (x *BatchDeleteVideosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteVideosRequest.ProtoReflect.Descriptor instead.
func (*BatchDeleteVideosRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{18}
}

func (x *BatchDeleteVideosRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *BatchDeleteVideosRequest) GetVideoIds() []string {
	if x != nil {
		return x.VideoIds
	}
	return nil
}

type BatchDeleteVideosMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of video IDs.
	VideoIds []string `protobuf:"bytes,1,rep,name=video_ids,json=videoIds,proto3" json:"video_ids,omitempty"`
}

func (x *BatchDeleteVideosMetadata) Reset() {
	*x = BatchDeleteVideosMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDeleteVideosMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteVideosMetadata) ProtoMessage() {}

func (x *BatchDeleteVideosMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteVideosMetadata.ProtoReflect.Descriptor instead.
func (*BatchDeleteVideosMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{19}
}

func (x *BatchDeleteVideosMetadata) GetVideoIds() []string {
	if x != nil {
		return x.VideoIds
	}
	return nil
}

type PerformVideoActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the video.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	// Types that are assignable to Action:
	//
	//	*PerformVideoActionRequest_Publish
	//	*PerformVideoActionRequest_Unpublish
	Action isPerformVideoActionRequest_Action `protobuf_oneof:"action"`
}

func (x *PerformVideoActionRequest) Reset() {
	*x = PerformVideoActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformVideoActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformVideoActionRequest) ProtoMessage() {}

func (x *PerformVideoActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformVideoActionRequest.ProtoReflect.Descriptor instead.
func (*PerformVideoActionRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{20}
}

func (x *PerformVideoActionRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (m *PerformVideoActionRequest) GetAction() isPerformVideoActionRequest_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *PerformVideoActionRequest) GetPublish() *PublishVideoAction {
	if x, ok := x.GetAction().(*PerformVideoActionRequest_Publish); ok {
		return x.Publish
	}
	return nil
}

func (x *PerformVideoActionRequest) GetUnpublish() *UnpublishVideoAction {
	if x, ok := x.GetAction().(*PerformVideoActionRequest_Unpublish); ok {
		return x.Unpublish
	}
	return nil
}

type isPerformVideoActionRequest_Action interface {
	isPerformVideoActionRequest_Action()
}

type PerformVideoActionRequest_Publish struct {
	Publish *PublishVideoAction `protobuf:"bytes,1000,opt,name=publish,proto3,oneof"`
}

type PerformVideoActionRequest_Unpublish struct {
	Unpublish *UnpublishVideoAction `protobuf:"bytes,1001,opt,name=unpublish,proto3,oneof"`
}

func (*PerformVideoActionRequest_Publish) isPerformVideoActionRequest_Action() {}

func (*PerformVideoActionRequest_Unpublish) isPerformVideoActionRequest_Action() {}

type PublishVideoAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PublishVideoAction) Reset() {
	*x = PublishVideoAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishVideoAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishVideoAction) ProtoMessage() {}

func (x *PublishVideoAction) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishVideoAction.ProtoReflect.Descriptor instead.
func (*PublishVideoAction) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{21}
}

type UnpublishVideoAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnpublishVideoAction) Reset() {
	*x = UnpublishVideoAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnpublishVideoAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpublishVideoAction) ProtoMessage() {}

func (x *UnpublishVideoAction) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpublishVideoAction.ProtoReflect.Descriptor instead.
func (*UnpublishVideoAction) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{22}
}

type PerformVideoActionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the video.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *PerformVideoActionMetadata) Reset() {
	*x = PerformVideoActionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformVideoActionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformVideoActionMetadata) ProtoMessage() {}

func (x *PerformVideoActionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformVideoActionMetadata.ProtoReflect.Descriptor instead.
func (*PerformVideoActionMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{23}
}

func (x *PerformVideoActionMetadata) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type GetVideoPlayerURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the video.
	VideoId string             `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	Params  *VideoPlayerParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	// Optional field, used to set custom url expiration duration for videos with sign_url_access
	SignedUrlExpirationDuration *durationpb.Duration `protobuf:"bytes,3,opt,name=signed_url_expiration_duration,json=signedUrlExpirationDuration,proto3" json:"signed_url_expiration_duration,omitempty"`
}

func (x *GetVideoPlayerURLRequest) Reset() {
	*x = GetVideoPlayerURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVideoPlayerURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoPlayerURLRequest) ProtoMessage() {}

func (x *GetVideoPlayerURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoPlayerURLRequest.ProtoReflect.Descriptor instead.
func (*GetVideoPlayerURLRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{24}
}

func (x *GetVideoPlayerURLRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *GetVideoPlayerURLRequest) GetParams() *VideoPlayerParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *GetVideoPlayerURLRequest) GetSignedUrlExpirationDuration() *durationpb.Duration {
	if x != nil {
		return x.SignedUrlExpirationDuration
	}
	return nil
}

type VideoPlayerParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, a player will be muted by default.
	Mute bool `protobuf:"varint,1,opt,name=mute,proto3" json:"mute,omitempty"`
	// If true, playback will start automatically.
	Autoplay bool `protobuf:"varint,2,opt,name=autoplay,proto3" json:"autoplay,omitempty"`
	// If true, a player interface will be hidden by default.
	Hidden bool `protobuf:"varint,3,opt,name=hidden,proto3" json:"hidden,omitempty"`
}

func (x *VideoPlayerParams) Reset() {
	*x = VideoPlayerParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoPlayerParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoPlayerParams) ProtoMessage() {}

func (x *VideoPlayerParams) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoPlayerParams.ProtoReflect.Descriptor instead.
func (*VideoPlayerParams) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{25}
}

func (x *VideoPlayerParams) GetMute() bool {
	if x != nil {
		return x.Mute
	}
	return false
}

func (x *VideoPlayerParams) GetAutoplay() bool {
	if x != nil {
		return x.Autoplay
	}
	return false
}

func (x *VideoPlayerParams) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

type GetVideoPlayerURLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Direct link to the video.
	PlayerUrl string `protobuf:"bytes,1,opt,name=player_url,json=playerUrl,proto3" json:"player_url,omitempty"`
	// HTML embed code in Iframe format.
	Html string `protobuf:"bytes,2,opt,name=html,proto3" json:"html,omitempty"`
}

func (x *GetVideoPlayerURLResponse) Reset() {
	*x = GetVideoPlayerURLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVideoPlayerURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoPlayerURLResponse) ProtoMessage() {}

func (x *GetVideoPlayerURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoPlayerURLResponse.ProtoReflect.Descriptor instead.
func (*GetVideoPlayerURLResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{26}
}

func (x *GetVideoPlayerURLResponse) GetPlayerUrl() string {
	if x != nil {
		return x.PlayerUrl
	}
	return ""
}

func (x *GetVideoPlayerURLResponse) GetHtml() string {
	if x != nil {
		return x.Html
	}
	return ""
}

type BatchGetVideoPlayerURLsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the channel.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// List of requested video IDs.
	VideoIds []string           `protobuf:"bytes,2,rep,name=video_ids,json=videoIds,proto3" json:"video_ids,omitempty"`
	Params   *VideoPlayerParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	// Optional field, used to set custom url expiration duration for videos with sign_url_access
	SignedUrlExpirationDuration *durationpb.Duration `protobuf:"bytes,4,opt,name=signed_url_expiration_duration,json=signedUrlExpirationDuration,proto3" json:"signed_url_expiration_duration,omitempty"`
}

func (x *BatchGetVideoPlayerURLsRequest) Reset() {
	*x = BatchGetVideoPlayerURLsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetVideoPlayerURLsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetVideoPlayerURLsRequest) ProtoMessage() {}

func (x *BatchGetVideoPlayerURLsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetVideoPlayerURLsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetVideoPlayerURLsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{27}
}

func (x *BatchGetVideoPlayerURLsRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *BatchGetVideoPlayerURLsRequest) GetVideoIds() []string {
	if x != nil {
		return x.VideoIds
	}
	return nil
}

func (x *BatchGetVideoPlayerURLsRequest) GetParams() *VideoPlayerParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *BatchGetVideoPlayerURLsRequest) GetSignedUrlExpirationDuration() *durationpb.Duration {
	if x != nil {
		return x.SignedUrlExpirationDuration
	}
	return nil
}

type BatchGetVideoPlayerURLsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUrls []string `protobuf:"bytes,1,rep,name=player_urls,json=playerUrls,proto3" json:"player_urls,omitempty"`
}

func (x *BatchGetVideoPlayerURLsResponse) Reset() {
	*x = BatchGetVideoPlayerURLsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetVideoPlayerURLsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetVideoPlayerURLsResponse) ProtoMessage() {}

func (x *BatchGetVideoPlayerURLsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetVideoPlayerURLsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetVideoPlayerURLsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{28}
}

func (x *BatchGetVideoPlayerURLsResponse) GetPlayerUrls() []string {
	if x != nil {
		return x.PlayerUrls
	}
	return nil
}

type GetVideoManifestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the video.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (x *GetVideoManifestsRequest) Reset() {
	*x = GetVideoManifestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVideoManifestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoManifestsRequest) ProtoMessage() {}

func (x *GetVideoManifestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoManifestsRequest.ProtoReflect.Descriptor instead.
func (*GetVideoManifestsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{29}
}

func (x *GetVideoManifestsRequest) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

type GetVideoManifestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manifests []*Manifest `protobuf:"bytes,1,rep,name=manifests,proto3" json:"manifests,omitempty"`
}

func (x *GetVideoManifestsResponse) Reset() {
	*x = GetVideoManifestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVideoManifestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoManifestsResponse) ProtoMessage() {}

func (x *GetVideoManifestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoManifestsResponse.ProtoReflect.Descriptor instead.
func (*GetVideoManifestsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{30}
}

func (x *GetVideoManifestsResponse) GetManifests() []*Manifest {
	if x != nil {
		return x.Manifests
	}
	return nil
}

type VideoTranslationSettings_TranslationTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input track settings.
	InputTrack *VideoTranslationSettings_InputTrack `protobuf:"bytes,1,opt,name=input_track,json=inputTrack,proto3" json:"input_track,omitempty"`
	// Settings for target subtitle tracks.
	Subtitles []*VideoTranslationSettings_SubtitleTrack `protobuf:"bytes,2,rep,name=subtitles,proto3" json:"subtitles,omitempty"`
	// Settings for target audio tracks.
	Audio []*VideoTranslationSettings_AudioTrack `protobuf:"bytes,3,rep,name=audio,proto3" json:"audio,omitempty"`
}

func (x *VideoTranslationSettings_TranslationTrack) Reset() {
	*x = VideoTranslationSettings_TranslationTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoTranslationSettings_TranslationTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTranslationSettings_TranslationTrack) ProtoMessage() {}

func (x *VideoTranslationSettings_TranslationTrack) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTranslationSettings_TranslationTrack.ProtoReflect.Descriptor instead.
func (*VideoTranslationSettings_TranslationTrack) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{13, 0}
}

func (x *VideoTranslationSettings_TranslationTrack) GetInputTrack() *VideoTranslationSettings_InputTrack {
	if x != nil {
		return x.InputTrack
	}
	return nil
}

func (x *VideoTranslationSettings_TranslationTrack) GetSubtitles() []*VideoTranslationSettings_SubtitleTrack {
	if x != nil {
		return x.Subtitles
	}
	return nil
}

func (x *VideoTranslationSettings_TranslationTrack) GetAudio() []*VideoTranslationSettings_AudioTrack {
	if x != nil {
		return x.Audio
	}
	return nil
}

type VideoTranslationSettings_InputTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input audio track index (one-based).
	TrackIndex int64 `protobuf:"varint,1,opt,name=track_index,json=trackIndex,proto3" json:"track_index,omitempty"`
	// Source track language in any of the following formats:
	// * three-letter code according to ISO 639-2/T, ISO 639-2/B, or ISO 639-3
	// * two-letter code according to ISO 639-1
	// Track language will be deduced automatically if not provided.
	// In the latter case the deduction accuracy is not guaranteed.
	// For better performance please do specify the source track language when possible.
	SrcLang string `protobuf:"bytes,2,opt,name=src_lang,json=srcLang,proto3" json:"src_lang,omitempty"`
}

func (x *VideoTranslationSettings_InputTrack) Reset() {
	*x = VideoTranslationSettings_InputTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoTranslationSettings_InputTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTranslationSettings_InputTrack) ProtoMessage() {}

func (x *VideoTranslationSettings_InputTrack) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTranslationSettings_InputTrack.ProtoReflect.Descriptor instead.
func (*VideoTranslationSettings_InputTrack) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{13, 1}
}

func (x *VideoTranslationSettings_InputTrack) GetTrackIndex() int64 {
	if x != nil {
		return x.TrackIndex
	}
	return 0
}

func (x *VideoTranslationSettings_InputTrack) GetSrcLang() string {
	if x != nil {
		return x.SrcLang
	}
	return ""
}

type VideoTranslationSettings_SubtitleTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target language in any of the following formats:
	// * three-letter code according to ISO 639-2/T, ISO 639-2/B, or ISO 639-3
	// * two-letter code according to ISO 639-1
	DstLang string `protobuf:"bytes,1,opt,name=dst_lang,json=dstLang,proto3" json:"dst_lang,omitempty"`
	// Track label to be displayed on the screen during video playback.
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *VideoTranslationSettings_SubtitleTrack) Reset() {
	*x = VideoTranslationSettings_SubtitleTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoTranslationSettings_SubtitleTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTranslationSettings_SubtitleTrack) ProtoMessage() {}

func (x *VideoTranslationSettings_SubtitleTrack) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTranslationSettings_SubtitleTrack.ProtoReflect.Descriptor instead.
func (*VideoTranslationSettings_SubtitleTrack) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{13, 2}
}

func (x *VideoTranslationSettings_SubtitleTrack) GetDstLang() string {
	if x != nil {
		return x.DstLang
	}
	return ""
}

func (x *VideoTranslationSettings_SubtitleTrack) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type VideoTranslationSettings_AudioTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target language in any of the following formats:
	// * three-letter code according to ISO 639-2/T, ISO 639-2/B, or ISO 639-3
	// * two-letter code according to ISO 639-1
	DstLang string `protobuf:"bytes,1,opt,name=dst_lang,json=dstLang,proto3" json:"dst_lang,omitempty"`
	// Track label to be displayed on the screen during video playback.
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *VideoTranslationSettings_AudioTrack) Reset() {
	*x = VideoTranslationSettings_AudioTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoTranslationSettings_AudioTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoTranslationSettings_AudioTrack) ProtoMessage() {}

func (x *VideoTranslationSettings_AudioTrack) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoTranslationSettings_AudioTrack.ProtoReflect.Descriptor instead.
func (*VideoTranslationSettings_AudioTrack) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{13, 3}
}

func (x *VideoTranslationSettings_AudioTrack) GetDstLang() string {
	if x != nil {
		return x.DstLang
	}
	return ""
}

func (x *VideoTranslationSettings_AudioTrack) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type VideoSummarizationSettings_SummarizationTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input track settings.
	InputTrack *VideoSummarizationSettings_InputTrack `protobuf:"bytes,1,opt,name=input_track,json=inputTrack,proto3" json:"input_track,omitempty"`
}

func (x *VideoSummarizationSettings_SummarizationTrack) Reset() {
	*x = VideoSummarizationSettings_SummarizationTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoSummarizationSettings_SummarizationTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoSummarizationSettings_SummarizationTrack) ProtoMessage() {}

func (x *VideoSummarizationSettings_SummarizationTrack) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoSummarizationSettings_SummarizationTrack.ProtoReflect.Descriptor instead.
func (*VideoSummarizationSettings_SummarizationTrack) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{14, 0}
}

func (x *VideoSummarizationSettings_SummarizationTrack) GetInputTrack() *VideoSummarizationSettings_InputTrack {
	if x != nil {
		return x.InputTrack
	}
	return nil
}

type VideoSummarizationSettings_InputTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input audio track index (one-based).
	TrackIndex int64 `protobuf:"varint,1,opt,name=track_index,json=trackIndex,proto3" json:"track_index,omitempty"`
	// Source track language (three-letter code according to ISO 639-2/T, ISO 639-2/B, or ISO 639-3).
	// It will be deduced automatically if not provided.
	// In the latter case the deduction accuracy is not guaranteed.
	// For better performance please do specify the source track language when possible.
	SrcLang string `protobuf:"bytes,2,opt,name=src_lang,json=srcLang,proto3" json:"src_lang,omitempty"`
}

func (x *VideoSummarizationSettings_InputTrack) Reset() {
	*x = VideoSummarizationSettings_InputTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoSummarizationSettings_InputTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoSummarizationSettings_InputTrack) ProtoMessage() {}

func (x *VideoSummarizationSettings_InputTrack) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_video_v1_video_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoSummarizationSettings_InputTrack.ProtoReflect.Descriptor instead.
func (*VideoSummarizationSettings_InputTrack) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP(), []int{14, 1}
}

func (x *VideoSummarizationSettings_InputTrack) GetTrackIndex() int64 {
	if x != nil {
		return x.TrackIndex
	}
	return 0
}

func (x *VideoSummarizationSettings_InputTrack) GetSrcLang() string {
	if x != nil {
		return x.SrcLang
	}
	return ""
}

var File_yandex_cloud_video_v1_video_service_proto protoreflect.FileDescriptor

var file_yandex_cloud_video_v1_video_service_proto_rawDesc = []byte{
	0x0a, 0x29, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x21, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a,
	0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64,
	0x22, 0xd8, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a,
	0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xfa, 0xc7, 0x31, 0x05, 0x3c, 0x3d, 0x31, 0x30, 0x30,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0x8a, 0xc8, 0x31, 0x07, 0x3c, 0x3d, 0x31, 0x35, 0x30, 0x30, 0x30, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x8a, 0xc8, 0x31, 0x06, 0x3c, 0x3d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x64, 0x22, 0x77, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x06,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x64, 0x22, 0x74, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0x82,
	0xc8, 0x31, 0x05, 0x31, 0x2d, 0x31, 0x30, 0x30, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30,
	0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x73, 0x22, 0x4e, 0x0a, 0x16, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x52, 0x06, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x22, 0x8c, 0x07, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c,
	0x3d, 0x35, 0x30, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xe8,
	0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x06, 0x3c, 0x3d, 0x32, 0x35, 0x30, 0x30, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xc8,
	0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0b, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12,
	0x37, 0x0a, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x12, 0x92, 0x01, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x42, 0xf2, 0xc7, 0x31, 0x12, 0x5b, 0x2d, 0x5f, 0x2e, 0x40, 0x3a, 0x2f, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x2a, 0x82, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36,
	0x34, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0xb2, 0xc8, 0x31, 0x18, 0x12, 0x10, 0x5b,
	0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x1a,
	0x04, 0x3c, 0x3d, 0x36, 0x33, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3d, 0x0a,
	0x04, 0x74, 0x75, 0x73, 0x64, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x55, 0x53, 0x44, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x04, 0x74, 0x75, 0x73, 0x64, 0x12, 0x56, 0x0a, 0x0d,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0xd0, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x48, 0x01, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x5a, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x75, 0x72, 0x6c,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0xd3, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x69, 0x67, 0x6e,
	0x55, 0x52, 0x4c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48,
	0x01, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x72, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0e, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x4a, 0x06, 0x08, 0xd1,
	0x0f, 0x10, 0xd2, 0x0f, 0x4a, 0x06, 0x08, 0xd2, 0x0f, 0x10, 0xd3, 0x0f, 0x4a, 0x04, 0x08, 0x06,
	0x10, 0x07, 0x4a, 0x05, 0x08, 0x09, 0x10, 0xc8, 0x01, 0x4a, 0x06, 0x08, 0xc9, 0x01, 0x10, 0xe8,
	0x07, 0x4a, 0x06, 0x08, 0xe9, 0x07, 0x10, 0xd0, 0x0f, 0x22, 0x53, 0x0a, 0x0f, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x54, 0x55, 0x53, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x06, 0xfa, 0xc7, 0x31, 0x02, 0x3e, 0x30, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x19,
	0x0a, 0x17, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x52, 0x4c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x30, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x22, 0xaf, 0x06, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x07,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x8a, 0xc8, 0x31, 0x06, 0x3c, 0x3d, 0x32,
	0x35, 0x30, 0x30, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x0c,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x0b, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x12,
	0x92, 0x01, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x42, 0xf2, 0xc7, 0x31, 0x12, 0x5b, 0x2d,
	0x5f, 0x2e, 0x40, 0x3a, 0x2f, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x5d, 0x2a,
	0x82, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x34, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x36, 0x33,
	0xb2, 0xc8, 0x31, 0x18, 0x12, 0x10, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x2d, 0x5f, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x5d, 0x2a, 0x1a, 0x04, 0x3c, 0x3d, 0x36, 0x33, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x56, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0xd0, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0c,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5a, 0x0a, 0x0f,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0xd3, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x52, 0x4c, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x55,
	0x72, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x4a, 0x06, 0x08, 0xd1, 0x0f, 0x10, 0xd2, 0x0f, 0x4a, 0x06, 0x08, 0xd2,
	0x0f, 0x10, 0xd3, 0x0f, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x05, 0x08, 0x09, 0x10, 0xc8,
	0x01, 0x4a, 0x06, 0x08, 0xc9, 0x01, 0x10, 0xd0, 0x0f, 0x22, 0x30, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x22, 0xe4, 0x02, 0x0a, 0x15,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64,
	0x12, 0x3f, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x62, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x68, 0x0a, 0x16, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x15, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0xae, 0x05, 0x0a, 0x18, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x58, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x1a, 0xa4, 0x02, 0x0a, 0x10, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x61,
	0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x42,
	0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x12, 0x5b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x52, 0x09, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x50,
	0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x1a, 0x5a, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x28,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0xc7, 0x31, 0x03, 0x3e, 0x3d, 0x31, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f,
	0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0x8a, 0xc8, 0x31, 0x03,
	0x3c, 0x3d, 0x33, 0x52, 0x07, 0x73, 0x72, 0x63, 0x4c, 0x61, 0x6e, 0x67, 0x1a, 0x5b, 0x0a, 0x0d,
	0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x26, 0x0a,
	0x08, 0x64, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x03, 0x32, 0x2d, 0x33, 0x52, 0x07, 0x64, 0x73,
	0x74, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d,
	0x35, 0x30, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x58, 0x0a, 0x0a, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x6c,
	0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe8, 0xc7, 0x31, 0x01, 0x8a,
	0xc8, 0x31, 0x03, 0x32, 0x2d, 0x33, 0x52, 0x07, 0x64, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x12,
	0x22, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x22, 0x85, 0x03, 0x0a, 0x1a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x5c, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x1a, 0x79,
	0x0a, 0x12, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x12, 0x63, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x04, 0xe8, 0xc7, 0x31, 0x01, 0x52, 0x0a, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x1a, 0x5a, 0x0a, 0x0a, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0xc7,
	0x31, 0x03, 0x3e, 0x3d, 0x31, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0x8a, 0xc8, 0x31, 0x03, 0x3c, 0x3d, 0x33, 0x52, 0x07, 0x73, 0x72,
	0x63, 0x4c, 0x61, 0x6e, 0x67, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x33, 0x0a, 0x16, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64,
	0x22, 0x3d, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8,
	0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x22,
	0x30, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49,
	0x64, 0x22, 0x77, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0x82,
	0xc8, 0x31, 0x05, 0x31, 0x2d, 0x31, 0x30, 0x30, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30,
	0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x73, 0x22, 0x38, 0x0a, 0x19, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x49, 0x64, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x19, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d,
	0x35, 0x30, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x07, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x12, 0x4c, 0x0a, 0x09, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x42, 0x0e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x04, 0xc0, 0xc1, 0x31,
	0x01, 0x4a, 0x05, 0x08, 0x02, 0x10, 0xe8, 0x07, 0x22, 0x14, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x16,
	0x0a, 0x14, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x1a, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x22,
	0xe5, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x08,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x07, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5e, 0x0a, 0x1e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x55, 0x72, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0x0a, 0x11, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x75, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x22, 0x4e, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x74, 0x6d, 0x6c, 0x22, 0x9f, 0x02, 0x0a, 0x1e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31,
	0x01, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0x82, 0xc8, 0x31, 0x05, 0x31, 0x2d, 0x31,
	0x30, 0x30, 0x8a, 0xc8, 0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x49, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5e, 0x0a, 0x1e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x55, 0x72, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x1f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x52, 0x4c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x73, 0x22, 0x43, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe8, 0xc7, 0x31, 0x01, 0x8a, 0xc8,
	0x31, 0x04, 0x3c, 0x3d, 0x35, 0x30, 0x52, 0x07, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x22,
	0x5a, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x61, 0x6e, 0x69, 0x66,
	0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x52, 0x09, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x32, 0xa7, 0x0f, 0x0a, 0x0c,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x70, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x73,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x12, 0x12, 0x10, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x08, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x12, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x12, 0x93, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x29,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0xb2, 0xd2,
	0x2a, 0x1c, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f,
	0x76, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x06, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x46, 0xb2, 0xd2, 0x2a, 0x1c, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x05, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x32, 0x1b, 0x2f,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x2f,
	0x7b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xb1, 0x01, 0x0a, 0x09, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0xb2, 0xd2, 0x2a, 0x1f, 0x0a,
	0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f,
	0x76, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0xab,
	0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0xb2, 0xd2, 0x2a, 0x2c, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a,
	0x1b, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x73, 0x2f, 0x7b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0xc0, 0x01, 0x0a,
	0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x5d, 0xb2, 0xd2, 0x2a, 0x32, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01,
	0x2a, 0x22, 0x1c, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0xc1, 0x01, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5b, 0xb2, 0xd2, 0x2a, 0x23, 0x0a, 0x1a, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x22, 0x29, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0xa3, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x55, 0x52, 0x4c, 0x12, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12,
	0x28, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x73, 0x2f, 0x7b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x67, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x12, 0xb3, 0x01, 0x0a, 0x12, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x73,
	0x12, 0x35, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x3a, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x73, 0x12,
	0xa3, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x2f, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x2f, 0x7b, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x73, 0x42, 0x5c, 0x0a, 0x19, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x76, 0x31, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79,
	0x61, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67,
	0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_video_v1_video_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_video_v1_video_service_proto_rawDescData = file_yandex_cloud_video_v1_video_service_proto_rawDesc
)

func file_yandex_cloud_video_v1_video_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_video_v1_video_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_video_v1_video_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_video_v1_video_service_proto_rawDescData)
	})
	return file_yandex_cloud_video_v1_video_service_proto_rawDescData
}

var file_yandex_cloud_video_v1_video_service_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_yandex_cloud_video_v1_video_service_proto_goTypes = []any{
	(*GetVideoRequest)(nil),                               // 0: yandex.cloud.video.v1.GetVideoRequest
	(*ListVideoRequest)(nil),                              // 1: yandex.cloud.video.v1.ListVideoRequest
	(*ListVideoResponse)(nil),                             // 2: yandex.cloud.video.v1.ListVideoResponse
	(*BatchGetVideosRequest)(nil),                         // 3: yandex.cloud.video.v1.BatchGetVideosRequest
	(*BatchGetVideosResponse)(nil),                        // 4: yandex.cloud.video.v1.BatchGetVideosResponse
	(*CreateVideoRequest)(nil),                            // 5: yandex.cloud.video.v1.CreateVideoRequest
	(*VideoTUSDParams)(nil),                               // 6: yandex.cloud.video.v1.VideoTUSDParams
	(*VideoPublicAccessParams)(nil),                       // 7: yandex.cloud.video.v1.VideoPublicAccessParams
	(*VideoSignURLAccessParams)(nil),                      // 8: yandex.cloud.video.v1.VideoSignURLAccessParams
	(*CreateVideoMetadata)(nil),                           // 9: yandex.cloud.video.v1.CreateVideoMetadata
	(*UpdateVideoRequest)(nil),                            // 10: yandex.cloud.video.v1.UpdateVideoRequest
	(*UpdateVideoMetadata)(nil),                           // 11: yandex.cloud.video.v1.UpdateVideoMetadata
	(*TranscodeVideoRequest)(nil),                         // 12: yandex.cloud.video.v1.TranscodeVideoRequest
	(*VideoTranslationSettings)(nil),                      // 13: yandex.cloud.video.v1.VideoTranslationSettings
	(*VideoSummarizationSettings)(nil),                    // 14: yandex.cloud.video.v1.VideoSummarizationSettings
	(*TranscodeVideoMetadata)(nil),                        // 15: yandex.cloud.video.v1.TranscodeVideoMetadata
	(*DeleteVideoRequest)(nil),                            // 16: yandex.cloud.video.v1.DeleteVideoRequest
	(*DeleteVideoMetadata)(nil),                           // 17: yandex.cloud.video.v1.DeleteVideoMetadata
	(*BatchDeleteVideosRequest)(nil),                      // 18: yandex.cloud.video.v1.BatchDeleteVideosRequest
	(*BatchDeleteVideosMetadata)(nil),                     // 19: yandex.cloud.video.v1.BatchDeleteVideosMetadata
	(*PerformVideoActionRequest)(nil),                     // 20: yandex.cloud.video.v1.PerformVideoActionRequest
	(*PublishVideoAction)(nil),                            // 21: yandex.cloud.video.v1.PublishVideoAction
	(*UnpublishVideoAction)(nil),                          // 22: yandex.cloud.video.v1.UnpublishVideoAction
	(*PerformVideoActionMetadata)(nil),                    // 23: yandex.cloud.video.v1.PerformVideoActionMetadata
	(*GetVideoPlayerURLRequest)(nil),                      // 24: yandex.cloud.video.v1.GetVideoPlayerURLRequest
	(*VideoPlayerParams)(nil),                             // 25: yandex.cloud.video.v1.VideoPlayerParams
	(*GetVideoPlayerURLResponse)(nil),                     // 26: yandex.cloud.video.v1.GetVideoPlayerURLResponse
	(*BatchGetVideoPlayerURLsRequest)(nil),                // 27: yandex.cloud.video.v1.BatchGetVideoPlayerURLsRequest
	(*BatchGetVideoPlayerURLsResponse)(nil),               // 28: yandex.cloud.video.v1.BatchGetVideoPlayerURLsResponse
	(*GetVideoManifestsRequest)(nil),                      // 29: yandex.cloud.video.v1.GetVideoManifestsRequest
	(*GetVideoManifestsResponse)(nil),                     // 30: yandex.cloud.video.v1.GetVideoManifestsResponse
	nil,                                                   // 31: yandex.cloud.video.v1.CreateVideoRequest.LabelsEntry
	nil,                                                   // 32: yandex.cloud.video.v1.UpdateVideoRequest.LabelsEntry
	(*VideoTranslationSettings_TranslationTrack)(nil),     // 33: yandex.cloud.video.v1.VideoTranslationSettings.TranslationTrack
	(*VideoTranslationSettings_InputTrack)(nil),           // 34: yandex.cloud.video.v1.VideoTranslationSettings.InputTrack
	(*VideoTranslationSettings_SubtitleTrack)(nil),        // 35: yandex.cloud.video.v1.VideoTranslationSettings.SubtitleTrack
	(*VideoTranslationSettings_AudioTrack)(nil),           // 36: yandex.cloud.video.v1.VideoTranslationSettings.AudioTrack
	(*VideoSummarizationSettings_SummarizationTrack)(nil), // 37: yandex.cloud.video.v1.VideoSummarizationSettings.SummarizationTrack
	(*VideoSummarizationSettings_InputTrack)(nil),         // 38: yandex.cloud.video.v1.VideoSummarizationSettings.InputTrack
	(*Video)(nil),                                         // 39: yandex.cloud.video.v1.Video
	(AutoTranscode)(0),                                    // 40: yandex.cloud.video.v1.AutoTranscode
	(*wrapperspb.BoolValue)(nil),                          // 41: google.protobuf.BoolValue
	(*fieldmaskpb.FieldMask)(nil),                         // 42: google.protobuf.FieldMask
	(*durationpb.Duration)(nil),                           // 43: google.protobuf.Duration
	(*Manifest)(nil),                                      // 44: yandex.cloud.video.v1.Manifest
	(*operation.Operation)(nil),                           // 45: yandex.cloud.operation.Operation
}
var file_yandex_cloud_video_v1_video_service_proto_depIdxs = []int32{
	39, // 0: yandex.cloud.video.v1.ListVideoResponse.videos:type_name -> yandex.cloud.video.v1.Video
	39, // 1: yandex.cloud.video.v1.BatchGetVideosResponse.videos:type_name -> yandex.cloud.video.v1.Video
	40, // 2: yandex.cloud.video.v1.CreateVideoRequest.auto_transcode:type_name -> yandex.cloud.video.v1.AutoTranscode
	41, // 3: yandex.cloud.video.v1.CreateVideoRequest.auto_publish:type_name -> google.protobuf.BoolValue
	41, // 4: yandex.cloud.video.v1.CreateVideoRequest.enable_ad:type_name -> google.protobuf.BoolValue
	31, // 5: yandex.cloud.video.v1.CreateVideoRequest.labels:type_name -> yandex.cloud.video.v1.CreateVideoRequest.LabelsEntry
	6,  // 6: yandex.cloud.video.v1.CreateVideoRequest.tusd:type_name -> yandex.cloud.video.v1.VideoTUSDParams
	7,  // 7: yandex.cloud.video.v1.CreateVideoRequest.public_access:type_name -> yandex.cloud.video.v1.VideoPublicAccessParams
	8,  // 8: yandex.cloud.video.v1.CreateVideoRequest.sign_url_access:type_name -> yandex.cloud.video.v1.VideoSignURLAccessParams
	42, // 9: yandex.cloud.video.v1.UpdateVideoRequest.field_mask:type_name -> google.protobuf.FieldMask
	40, // 10: yandex.cloud.video.v1.UpdateVideoRequest.auto_transcode:type_name -> yandex.cloud.video.v1.AutoTranscode
	41, // 11: yandex.cloud.video.v1.UpdateVideoRequest.enable_ad:type_name -> google.protobuf.BoolValue
	32, // 12: yandex.cloud.video.v1.UpdateVideoRequest.labels:type_name -> yandex.cloud.video.v1.UpdateVideoRequest.LabelsEntry
	7,  // 13: yandex.cloud.video.v1.UpdateVideoRequest.public_access:type_name -> yandex.cloud.video.v1.VideoPublicAccessParams
	8,  // 14: yandex.cloud.video.v1.UpdateVideoRequest.sign_url_access:type_name -> yandex.cloud.video.v1.VideoSignURLAccessParams
	42, // 15: yandex.cloud.video.v1.TranscodeVideoRequest.field_mask:type_name -> google.protobuf.FieldMask
	13, // 16: yandex.cloud.video.v1.TranscodeVideoRequest.translation_settings:type_name -> yandex.cloud.video.v1.VideoTranslationSettings
	14, // 17: yandex.cloud.video.v1.TranscodeVideoRequest.summarization_settings:type_name -> yandex.cloud.video.v1.VideoSummarizationSettings
	33, // 18: yandex.cloud.video.v1.VideoTranslationSettings.tracks:type_name -> yandex.cloud.video.v1.VideoTranslationSettings.TranslationTrack
	37, // 19: yandex.cloud.video.v1.VideoSummarizationSettings.tracks:type_name -> yandex.cloud.video.v1.VideoSummarizationSettings.SummarizationTrack
	21, // 20: yandex.cloud.video.v1.PerformVideoActionRequest.publish:type_name -> yandex.cloud.video.v1.PublishVideoAction
	22, // 21: yandex.cloud.video.v1.PerformVideoActionRequest.unpublish:type_name -> yandex.cloud.video.v1.UnpublishVideoAction
	25, // 22: yandex.cloud.video.v1.GetVideoPlayerURLRequest.params:type_name -> yandex.cloud.video.v1.VideoPlayerParams
	43, // 23: yandex.cloud.video.v1.GetVideoPlayerURLRequest.signed_url_expiration_duration:type_name -> google.protobuf.Duration
	25, // 24: yandex.cloud.video.v1.BatchGetVideoPlayerURLsRequest.params:type_name -> yandex.cloud.video.v1.VideoPlayerParams
	43, // 25: yandex.cloud.video.v1.BatchGetVideoPlayerURLsRequest.signed_url_expiration_duration:type_name -> google.protobuf.Duration
	44, // 26: yandex.cloud.video.v1.GetVideoManifestsResponse.manifests:type_name -> yandex.cloud.video.v1.Manifest
	34, // 27: yandex.cloud.video.v1.VideoTranslationSettings.TranslationTrack.input_track:type_name -> yandex.cloud.video.v1.VideoTranslationSettings.InputTrack
	35, // 28: yandex.cloud.video.v1.VideoTranslationSettings.TranslationTrack.subtitles:type_name -> yandex.cloud.video.v1.VideoTranslationSettings.SubtitleTrack
	36, // 29: yandex.cloud.video.v1.VideoTranslationSettings.TranslationTrack.audio:type_name -> yandex.cloud.video.v1.VideoTranslationSettings.AudioTrack
	38, // 30: yandex.cloud.video.v1.VideoSummarizationSettings.SummarizationTrack.input_track:type_name -> yandex.cloud.video.v1.VideoSummarizationSettings.InputTrack
	0,  // 31: yandex.cloud.video.v1.VideoService.Get:input_type -> yandex.cloud.video.v1.GetVideoRequest
	1,  // 32: yandex.cloud.video.v1.VideoService.List:input_type -> yandex.cloud.video.v1.ListVideoRequest
	3,  // 33: yandex.cloud.video.v1.VideoService.BatchGet:input_type -> yandex.cloud.video.v1.BatchGetVideosRequest
	5,  // 34: yandex.cloud.video.v1.VideoService.Create:input_type -> yandex.cloud.video.v1.CreateVideoRequest
	10, // 35: yandex.cloud.video.v1.VideoService.Update:input_type -> yandex.cloud.video.v1.UpdateVideoRequest
	12, // 36: yandex.cloud.video.v1.VideoService.Transcode:input_type -> yandex.cloud.video.v1.TranscodeVideoRequest
	16, // 37: yandex.cloud.video.v1.VideoService.Delete:input_type -> yandex.cloud.video.v1.DeleteVideoRequest
	18, // 38: yandex.cloud.video.v1.VideoService.BatchDelete:input_type -> yandex.cloud.video.v1.BatchDeleteVideosRequest
	20, // 39: yandex.cloud.video.v1.VideoService.PerformAction:input_type -> yandex.cloud.video.v1.PerformVideoActionRequest
	24, // 40: yandex.cloud.video.v1.VideoService.GetPlayerURL:input_type -> yandex.cloud.video.v1.GetVideoPlayerURLRequest
	27, // 41: yandex.cloud.video.v1.VideoService.BatchGetPlayerURLs:input_type -> yandex.cloud.video.v1.BatchGetVideoPlayerURLsRequest
	29, // 42: yandex.cloud.video.v1.VideoService.GetManifests:input_type -> yandex.cloud.video.v1.GetVideoManifestsRequest
	39, // 43: yandex.cloud.video.v1.VideoService.Get:output_type -> yandex.cloud.video.v1.Video
	2,  // 44: yandex.cloud.video.v1.VideoService.List:output_type -> yandex.cloud.video.v1.ListVideoResponse
	4,  // 45: yandex.cloud.video.v1.VideoService.BatchGet:output_type -> yandex.cloud.video.v1.BatchGetVideosResponse
	45, // 46: yandex.cloud.video.v1.VideoService.Create:output_type -> yandex.cloud.operation.Operation
	45, // 47: yandex.cloud.video.v1.VideoService.Update:output_type -> yandex.cloud.operation.Operation
	45, // 48: yandex.cloud.video.v1.VideoService.Transcode:output_type -> yandex.cloud.operation.Operation
	45, // 49: yandex.cloud.video.v1.VideoService.Delete:output_type -> yandex.cloud.operation.Operation
	45, // 50: yandex.cloud.video.v1.VideoService.BatchDelete:output_type -> yandex.cloud.operation.Operation
	45, // 51: yandex.cloud.video.v1.VideoService.PerformAction:output_type -> yandex.cloud.operation.Operation
	26, // 52: yandex.cloud.video.v1.VideoService.GetPlayerURL:output_type -> yandex.cloud.video.v1.GetVideoPlayerURLResponse
	28, // 53: yandex.cloud.video.v1.VideoService.BatchGetPlayerURLs:output_type -> yandex.cloud.video.v1.BatchGetVideoPlayerURLsResponse
	30, // 54: yandex.cloud.video.v1.VideoService.GetManifests:output_type -> yandex.cloud.video.v1.GetVideoManifestsResponse
	43, // [43:55] is the sub-list for method output_type
	31, // [31:43] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_yandex_cloud_video_v1_video_service_proto_init() }
func file_yandex_cloud_video_v1_video_service_proto_init() {
	if File_yandex_cloud_video_v1_video_service_proto != nil {
		return
	}
	file_yandex_cloud_video_v1_manifest_proto_init()
	file_yandex_cloud_video_v1_video_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListVideoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*BatchGetVideosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*BatchGetVideosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CreateVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*VideoTUSDParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*VideoPublicAccessParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*VideoSignURLAccessParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CreateVideoMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateVideoMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*TranscodeVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*VideoTranslationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*VideoSummarizationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*TranscodeVideoMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteVideoMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*BatchDeleteVideosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*BatchDeleteVideosMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*PerformVideoActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*PublishVideoAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*UnpublishVideoAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*PerformVideoActionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*GetVideoPlayerURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*VideoPlayerParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GetVideoPlayerURLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*BatchGetVideoPlayerURLsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*BatchGetVideoPlayerURLsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*GetVideoManifestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*GetVideoManifestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*VideoTranslationSettings_TranslationTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*VideoTranslationSettings_InputTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*VideoTranslationSettings_SubtitleTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*VideoTranslationSettings_AudioTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*VideoSummarizationSettings_SummarizationTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_video_v1_video_service_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*VideoSummarizationSettings_InputTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_video_v1_video_service_proto_msgTypes[5].OneofWrappers = []any{
		(*CreateVideoRequest_Tusd)(nil),
		(*CreateVideoRequest_PublicAccess)(nil),
		(*CreateVideoRequest_SignUrlAccess)(nil),
	}
	file_yandex_cloud_video_v1_video_service_proto_msgTypes[10].OneofWrappers = []any{
		(*UpdateVideoRequest_PublicAccess)(nil),
		(*UpdateVideoRequest_SignUrlAccess)(nil),
	}
	file_yandex_cloud_video_v1_video_service_proto_msgTypes[20].OneofWrappers = []any{
		(*PerformVideoActionRequest_Publish)(nil),
		(*PerformVideoActionRequest_Unpublish)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_video_v1_video_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_video_v1_video_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_video_v1_video_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_video_v1_video_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_video_v1_video_service_proto = out.File
	file_yandex_cloud_video_v1_video_service_proto_rawDesc = nil
	file_yandex_cloud_video_v1_video_service_proto_goTypes = nil
	file_yandex_cloud_video_v1_video_service_proto_depIdxs = nil
}

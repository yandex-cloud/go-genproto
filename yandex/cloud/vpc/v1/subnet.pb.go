// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/vpc/v1/subnet.proto

package vpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IpVersion int32

const (
	IpVersion_IP_VERSION_UNSPECIFIED IpVersion = 0
	IpVersion_IPV4                   IpVersion = 1
	IpVersion_IPV6                   IpVersion = 2
)

// Enum value maps for IpVersion.
var (
	IpVersion_name = map[int32]string{
		0: "IP_VERSION_UNSPECIFIED",
		1: "IPV4",
		2: "IPV6",
	}
	IpVersion_value = map[string]int32{
		"IP_VERSION_UNSPECIFIED": 0,
		"IPV4":                   1,
		"IPV6":                   2,
	}
)

func (x IpVersion) Enum() *IpVersion {
	p := new(IpVersion)
	*p = x
	return p
}

func (x IpVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_vpc_v1_subnet_proto_enumTypes[0].Descriptor()
}

func (IpVersion) Type() protoreflect.EnumType {
	return &file_yandex_cloud_vpc_v1_subnet_proto_enumTypes[0]
}

func (x IpVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpVersion.Descriptor instead.
func (IpVersion) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_proto_rawDescGZIP(), []int{0}
}

// A Subnet resource. For more information, see [Subnets](/docs/vpc/concepts/network#subnet).
type Subnet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the subnet.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the folder that the subnet belongs to.
	FolderId string `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Name of the subnet.
	// The name must be unique within the folder.
	// Value must match the regular expression “\|[a-zA-Z]([-_a-zA-Z0-9]{0,61}[a-zA-Z0-9])?“.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Optional description of the subnet. 0-256 characters long.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels, `key:value` pairs.
	// No more than 64 per resource.
	// The maximum string length in characters for each value is 63.
	// Each value must match the regular expression `[-_0-9a-z]*`.
	// The string length in characters for each key must be 1-63.
	// Each key must match the regular expression `[a-z][-_0-9a-z]*`.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// ID of the network the subnet belongs to.
	NetworkId string `protobuf:"bytes,7,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// ID of the availability zone where the subnet resides.
	ZoneId string `protobuf:"bytes,8,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"` // if subnet will be zonal
	// CIDR block.
	// The range of internal addresses that are defined for this subnet.
	// This field can be set only at Subnet resource creation time and cannot be changed.
	// For example, 10.0.0.0/22 or 192.168.0.0/24.
	// Minimum subnet size is /28, maximum subnet size is /16.
	V4CidrBlocks []string `protobuf:"bytes,10,rep,name=v4_cidr_blocks,json=v4CidrBlocks,proto3" json:"v4_cidr_blocks,omitempty"`
	// IPv6 not available yet.
	V6CidrBlocks []string `protobuf:"bytes,11,rep,name=v6_cidr_blocks,json=v6CidrBlocks,proto3" json:"v6_cidr_blocks,omitempty"`
	// ID of route table the subnet is linked to.
	RouteTableId string `protobuf:"bytes,12,opt,name=route_table_id,json=routeTableId,proto3" json:"route_table_id,omitempty"`
	// DHCP options for the subnet.
	DhcpOptions   *DhcpOptions `protobuf:"bytes,13,opt,name=dhcp_options,json=dhcpOptions,proto3" json:"dhcp_options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	mi := &file_yandex_cloud_vpc_v1_subnet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_proto_rawDescGZIP(), []int{0}
}

func (x *Subnet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Subnet) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *Subnet) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Subnet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Subnet) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Subnet) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Subnet) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *Subnet) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *Subnet) GetV4CidrBlocks() []string {
	if x != nil {
		return x.V4CidrBlocks
	}
	return nil
}

func (x *Subnet) GetV6CidrBlocks() []string {
	if x != nil {
		return x.V6CidrBlocks
	}
	return nil
}

func (x *Subnet) GetRouteTableId() string {
	if x != nil {
		return x.RouteTableId
	}
	return ""
}

func (x *Subnet) GetDhcpOptions() *DhcpOptions {
	if x != nil {
		return x.DhcpOptions
	}
	return nil
}

type DhcpOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of DHCP servers for this subnet.
	DomainNameServers []string `protobuf:"bytes,1,rep,name=domain_name_servers,json=domainNameServers,proto3" json:"domain_name_servers,omitempty"`
	// A domain name to us as a suffix when resolving host names in this subnet.
	DomainName string `protobuf:"bytes,2,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	// List of NTP servers for this subnet.
	NtpServers    []string `protobuf:"bytes,3,rep,name=ntp_servers,json=ntpServers,proto3" json:"ntp_servers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DhcpOptions) Reset() {
	*x = DhcpOptions{}
	mi := &file_yandex_cloud_vpc_v1_subnet_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DhcpOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DhcpOptions) ProtoMessage() {}

func (x *DhcpOptions) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DhcpOptions.ProtoReflect.Descriptor instead.
func (*DhcpOptions) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_proto_rawDescGZIP(), []int{1}
}

func (x *DhcpOptions) GetDomainNameServers() []string {
	if x != nil {
		return x.DomainNameServers
	}
	return nil
}

func (x *DhcpOptions) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *DhcpOptions) GetNtpServers() []string {
	if x != nil {
		return x.NtpServers
	}
	return nil
}

var File_yandex_cloud_vpc_v1_subnet_proto protoreflect.FileDescriptor

const file_yandex_cloud_vpc_v1_subnet_proto_rawDesc = "" +
	"\n" +
	" yandex/cloud/vpc/v1/subnet.proto\x12\x13yandex.cloud.vpc.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\x97\x04\n" +
	"\x06Subnet\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\tfolder_id\x18\x02 \x01(\tR\bfolderId\x129\n" +
	"\n" +
	"created_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12?\n" +
	"\x06labels\x18\x06 \x03(\v2'.yandex.cloud.vpc.v1.Subnet.LabelsEntryR\x06labels\x12\x1d\n" +
	"\n" +
	"network_id\x18\a \x01(\tR\tnetworkId\x12\x17\n" +
	"\azone_id\x18\b \x01(\tR\x06zoneId\x12$\n" +
	"\x0ev4_cidr_blocks\x18\n" +
	" \x03(\tR\fv4CidrBlocks\x12$\n" +
	"\x0ev6_cidr_blocks\x18\v \x03(\tR\fv6CidrBlocks\x12$\n" +
	"\x0eroute_table_id\x18\f \x01(\tR\frouteTableId\x12C\n" +
	"\fdhcp_options\x18\r \x01(\v2 .yandex.cloud.vpc.v1.DhcpOptionsR\vdhcpOptions\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01J\x04\b\t\x10\n" +
	"\"\x7f\n" +
	"\vDhcpOptions\x12.\n" +
	"\x13domain_name_servers\x18\x01 \x03(\tR\x11domainNameServers\x12\x1f\n" +
	"\vdomain_name\x18\x02 \x01(\tR\n" +
	"domainName\x12\x1f\n" +
	"\vntp_servers\x18\x03 \x03(\tR\n" +
	"ntpServers*;\n" +
	"\tIpVersion\x12\x1a\n" +
	"\x16IP_VERSION_UNSPECIFIED\x10\x00\x12\b\n" +
	"\x04IPV4\x10\x01\x12\b\n" +
	"\x04IPV6\x10\x02BV\n" +
	"\x17yandex.cloud.api.vpc.v1Z;github.com/yandex-cloud/go-genproto/yandex/cloud/vpc/v1;vpcb\x06proto3"

var (
	file_yandex_cloud_vpc_v1_subnet_proto_rawDescOnce sync.Once
	file_yandex_cloud_vpc_v1_subnet_proto_rawDescData []byte
)

func file_yandex_cloud_vpc_v1_subnet_proto_rawDescGZIP() []byte {
	file_yandex_cloud_vpc_v1_subnet_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_vpc_v1_subnet_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_vpc_v1_subnet_proto_rawDesc), len(file_yandex_cloud_vpc_v1_subnet_proto_rawDesc)))
	})
	return file_yandex_cloud_vpc_v1_subnet_proto_rawDescData
}

var file_yandex_cloud_vpc_v1_subnet_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yandex_cloud_vpc_v1_subnet_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_yandex_cloud_vpc_v1_subnet_proto_goTypes = []any{
	(IpVersion)(0),                // 0: yandex.cloud.vpc.v1.IpVersion
	(*Subnet)(nil),                // 1: yandex.cloud.vpc.v1.Subnet
	(*DhcpOptions)(nil),           // 2: yandex.cloud.vpc.v1.DhcpOptions
	nil,                           // 3: yandex.cloud.vpc.v1.Subnet.LabelsEntry
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_yandex_cloud_vpc_v1_subnet_proto_depIdxs = []int32{
	4, // 0: yandex.cloud.vpc.v1.Subnet.created_at:type_name -> google.protobuf.Timestamp
	3, // 1: yandex.cloud.vpc.v1.Subnet.labels:type_name -> yandex.cloud.vpc.v1.Subnet.LabelsEntry
	2, // 2: yandex.cloud.vpc.v1.Subnet.dhcp_options:type_name -> yandex.cloud.vpc.v1.DhcpOptions
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_yandex_cloud_vpc_v1_subnet_proto_init() }
func file_yandex_cloud_vpc_v1_subnet_proto_init() {
	if File_yandex_cloud_vpc_v1_subnet_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_vpc_v1_subnet_proto_rawDesc), len(file_yandex_cloud_vpc_v1_subnet_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_vpc_v1_subnet_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_vpc_v1_subnet_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_vpc_v1_subnet_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_vpc_v1_subnet_proto_msgTypes,
	}.Build()
	File_yandex_cloud_vpc_v1_subnet_proto = out.File
	file_yandex_cloud_vpc_v1_subnet_proto_goTypes = nil
	file_yandex_cloud_vpc_v1_subnet_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: yandex/cloud/vpc/v1/subnet_service.proto

package vpc

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud/api"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	reference "github.com/yandex-cloud/go-genproto/yandex/cloud/reference"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetSubnetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Subnet resource to return.
	// To get the subnet ID use a [SubnetService.List] request.
	SubnetId      string `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubnetRequest) Reset() {
	*x = GetSubnetRequest{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnetRequest) ProtoMessage() {}

func (x *GetSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnetRequest.ProtoReflect.Descriptor instead.
func (*GetSubnetRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetSubnetRequest) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

type ListSubnetsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to list subnets in.
	// To get the folder ID use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// The maximum number of results per page to return. If the number of available
	// results is larger than [page_size],
	// the service returns a [ListSubnetsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests. Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListSubnetsResponse.next_page_token] returned by a previous list request.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// A filter expression that filters resources listed in the response.
	// The expression must specify:
	// 1. The field name. Currently you can use filtering only on [Subnet.name] field.
	// 2. An `=` operator.
	// 3. The value in double quotes (`"`). Must be 3-63 characters long and match the regular expression `[a-z][-a-z0-9]{1,61}[a-z0-9]`.
	Filter        string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSubnetsRequest) Reset() {
	*x = ListSubnetsRequest{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSubnetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubnetsRequest) ProtoMessage() {}

func (x *ListSubnetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubnetsRequest.ProtoReflect.Descriptor instead.
func (*ListSubnetsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListSubnetsRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *ListSubnetsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSubnetsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListSubnetsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListSubnetsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of Subnet resources.
	Subnets []*Subnet `protobuf:"bytes,1,rep,name=subnets,proto3" json:"subnets,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListSubnetsRequest.page_size], use
	// the [next_page_token] as the value
	// for the [ListSubnetsRequest.page_token] query parameter
	// in the next list request. Subsequent list requests will have their own
	// [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSubnetsResponse) Reset() {
	*x = ListSubnetsResponse{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSubnetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubnetsResponse) ProtoMessage() {}

func (x *ListSubnetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubnetsResponse.ProtoReflect.Descriptor instead.
func (*ListSubnetsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListSubnetsResponse) GetSubnets() []*Subnet {
	if x != nil {
		return x.Subnets
	}
	return nil
}

func (x *ListSubnetsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateSubnetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the folder to create a subnet in.
	// To get folder ID use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
	FolderId string `protobuf:"bytes,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// Name of the subnet.
	// The name must be unique within the folder.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the subnet.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels, “ key:value “ pairs.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// ID of the network to create subnet in.
	NetworkId string `protobuf:"bytes,5,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// ID of the availability zone where the subnet resides.
	// To get a list of available zones, use the [yandex.cloud.compute.v1.ZoneService.List] request.
	ZoneId string `protobuf:"bytes,6,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// CIDR block.
	// The range of internal addresses that are defined for this subnet.
	// For example, 10.0.0.0/22 or 192.168.0.0/24.
	// Minimum subnet size is /28, maximum subnet size is /16.
	V4CidrBlocks []string `protobuf:"bytes,7,rep,name=v4_cidr_blocks,json=v4CidrBlocks,proto3" json:"v4_cidr_blocks,omitempty"`
	// ID of route table the subnet is linked to.
	RouteTableId  string       `protobuf:"bytes,9,opt,name=route_table_id,json=routeTableId,proto3" json:"route_table_id,omitempty"`
	DhcpOptions   *DhcpOptions `protobuf:"bytes,10,opt,name=dhcp_options,json=dhcpOptions,proto3" json:"dhcp_options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSubnetRequest) Reset() {
	*x = CreateSubnetRequest{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubnetRequest) ProtoMessage() {}

func (x *CreateSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubnetRequest.ProtoReflect.Descriptor instead.
func (*CreateSubnetRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSubnetRequest) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *CreateSubnetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSubnetRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateSubnetRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateSubnetRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *CreateSubnetRequest) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *CreateSubnetRequest) GetV4CidrBlocks() []string {
	if x != nil {
		return x.V4CidrBlocks
	}
	return nil
}

func (x *CreateSubnetRequest) GetRouteTableId() string {
	if x != nil {
		return x.RouteTableId
	}
	return ""
}

func (x *CreateSubnetRequest) GetDhcpOptions() *DhcpOptions {
	if x != nil {
		return x.DhcpOptions
	}
	return nil
}

type CreateSubnetMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the subnet that is being created.
	SubnetId      string `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSubnetMetadata) Reset() {
	*x = CreateSubnetMetadata{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSubnetMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubnetMetadata) ProtoMessage() {}

func (x *CreateSubnetMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubnetMetadata.ProtoReflect.Descriptor instead.
func (*CreateSubnetMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateSubnetMetadata) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

type UpdateSubnetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Subnet resource to update.
	SubnetId string `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// Field mask that specifies which fields of the Subnet resource are going to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Name of the subnet.
	// The name must be unique within the folder.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the subnet.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Resource labels as “ key:value “ pairs.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// ID of route table the subnet is linked to.
	RouteTableId string       `protobuf:"bytes,6,opt,name=route_table_id,json=routeTableId,proto3" json:"route_table_id,omitempty"`
	DhcpOptions  *DhcpOptions `protobuf:"bytes,7,opt,name=dhcp_options,json=dhcpOptions,proto3" json:"dhcp_options,omitempty"`
	// New CIDR blocks which will overwrite the existing ones.
	V4CidrBlocks  []string `protobuf:"bytes,8,rep,name=v4_cidr_blocks,json=v4CidrBlocks,proto3" json:"v4_cidr_blocks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSubnetRequest) Reset() {
	*x = UpdateSubnetRequest{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubnetRequest) ProtoMessage() {}

func (x *UpdateSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubnetRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubnetRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateSubnetRequest) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *UpdateSubnetRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateSubnetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSubnetRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateSubnetRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateSubnetRequest) GetRouteTableId() string {
	if x != nil {
		return x.RouteTableId
	}
	return ""
}

func (x *UpdateSubnetRequest) GetDhcpOptions() *DhcpOptions {
	if x != nil {
		return x.DhcpOptions
	}
	return nil
}

func (x *UpdateSubnetRequest) GetV4CidrBlocks() []string {
	if x != nil {
		return x.V4CidrBlocks
	}
	return nil
}

type UpdateSubnetMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Subnet resource that is being updated.
	SubnetId      string `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSubnetMetadata) Reset() {
	*x = UpdateSubnetMetadata{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSubnetMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubnetMetadata) ProtoMessage() {}

func (x *UpdateSubnetMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubnetMetadata.ProtoReflect.Descriptor instead.
func (*UpdateSubnetMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateSubnetMetadata) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

type AddSubnetCidrBlocksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Subnet resource that is being updated.
	SubnetId string `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// CIDR block.
	// The range of internal addresses that should be added to this subnet.
	// For example, 10.0.0.0/22 or 192.168.0.0/24.
	// Minimum subnet size is /28, maximum subnet size is /16.
	V4CidrBlocks  []string `protobuf:"bytes,2,rep,name=v4_cidr_blocks,json=v4CidrBlocks,proto3" json:"v4_cidr_blocks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddSubnetCidrBlocksRequest) Reset() {
	*x = AddSubnetCidrBlocksRequest{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddSubnetCidrBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubnetCidrBlocksRequest) ProtoMessage() {}

func (x *AddSubnetCidrBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubnetCidrBlocksRequest.ProtoReflect.Descriptor instead.
func (*AddSubnetCidrBlocksRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{7}
}

func (x *AddSubnetCidrBlocksRequest) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *AddSubnetCidrBlocksRequest) GetV4CidrBlocks() []string {
	if x != nil {
		return x.V4CidrBlocks
	}
	return nil
}

type AddSubnetCidrBlocksMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Subnet resource that is being updated.
	SubnetId      string `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddSubnetCidrBlocksMetadata) Reset() {
	*x = AddSubnetCidrBlocksMetadata{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddSubnetCidrBlocksMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubnetCidrBlocksMetadata) ProtoMessage() {}

func (x *AddSubnetCidrBlocksMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubnetCidrBlocksMetadata.ProtoReflect.Descriptor instead.
func (*AddSubnetCidrBlocksMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{8}
}

func (x *AddSubnetCidrBlocksMetadata) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

type RemoveSubnetCidrBlocksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Subnet resource that is being updated.
	SubnetId string `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// CIDR block.
	// The range of internal addresses that are removed from this subnet.
	V4CidrBlocks  []string `protobuf:"bytes,2,rep,name=v4_cidr_blocks,json=v4CidrBlocks,proto3" json:"v4_cidr_blocks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveSubnetCidrBlocksRequest) Reset() {
	*x = RemoveSubnetCidrBlocksRequest{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveSubnetCidrBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSubnetCidrBlocksRequest) ProtoMessage() {}

func (x *RemoveSubnetCidrBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSubnetCidrBlocksRequest.ProtoReflect.Descriptor instead.
func (*RemoveSubnetCidrBlocksRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{9}
}

func (x *RemoveSubnetCidrBlocksRequest) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *RemoveSubnetCidrBlocksRequest) GetV4CidrBlocks() []string {
	if x != nil {
		return x.V4CidrBlocks
	}
	return nil
}

type RemoveSubnetCidrBlocksMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Subnet resource that is being updated.
	SubnetId      string `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveSubnetCidrBlocksMetadata) Reset() {
	*x = RemoveSubnetCidrBlocksMetadata{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveSubnetCidrBlocksMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSubnetCidrBlocksMetadata) ProtoMessage() {}

func (x *RemoveSubnetCidrBlocksMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSubnetCidrBlocksMetadata.ProtoReflect.Descriptor instead.
func (*RemoveSubnetCidrBlocksMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveSubnetCidrBlocksMetadata) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

type DeleteSubnetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the subnet to delete.
	// To get the subnet ID use a [SubnetService.List] request.
	SubnetId      string `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSubnetRequest) Reset() {
	*x = DeleteSubnetRequest{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubnetRequest) ProtoMessage() {}

func (x *DeleteSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubnetRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubnetRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteSubnetRequest) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

type DeleteSubnetMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Subnet resource that is being deleted.
	SubnetId      string `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSubnetMetadata) Reset() {
	*x = DeleteSubnetMetadata{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSubnetMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubnetMetadata) ProtoMessage() {}

func (x *DeleteSubnetMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubnetMetadata.ProtoReflect.Descriptor instead.
func (*DeleteSubnetMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteSubnetMetadata) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

type ListSubnetOperationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Subnet resource to list operations for.
	SubnetId string `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// The maximum number of results per page that should be returned. If the number of available
	// results is larger than [page_size], the service returns a [ListSubnetOperationsResponse.next_page_token]
	// that can be used to get the next page of results in subsequent list requests. Default value: 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token. To get the next page of results, set [page_token] to the
	// [ListSubnetOperationsResponse.next_page_token] returned by a previous list request.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSubnetOperationsRequest) Reset() {
	*x = ListSubnetOperationsRequest{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSubnetOperationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubnetOperationsRequest) ProtoMessage() {}

func (x *ListSubnetOperationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubnetOperationsRequest.ProtoReflect.Descriptor instead.
func (*ListSubnetOperationsRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListSubnetOperationsRequest) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *ListSubnetOperationsRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSubnetOperationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListSubnetOperationsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of operations for the specified Subnet resource.
	Operations []*operation.Operation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// This token allows you to get the next page of results for list requests. If the number of results
	// is larger than [ListSubnetOperationsRequest.page_size], use the [next_page_token] as the value
	// for the [ListSubnetOperationsRequest.page_token] query parameter in the next list request.
	// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSubnetOperationsResponse) Reset() {
	*x = ListSubnetOperationsResponse{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSubnetOperationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubnetOperationsResponse) ProtoMessage() {}

func (x *ListSubnetOperationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubnetOperationsResponse.ProtoReflect.Descriptor instead.
func (*ListSubnetOperationsResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListSubnetOperationsResponse) GetOperations() []*operation.Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *ListSubnetOperationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type MoveSubnetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Subnet resource to move.
	SubnetId string `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// ID of the destination folder.
	DestinationFolderId string `protobuf:"bytes,2,opt,name=destination_folder_id,json=destinationFolderId,proto3" json:"destination_folder_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MoveSubnetRequest) Reset() {
	*x = MoveSubnetRequest{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveSubnetRequest) ProtoMessage() {}

func (x *MoveSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveSubnetRequest.ProtoReflect.Descriptor instead.
func (*MoveSubnetRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{15}
}

func (x *MoveSubnetRequest) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *MoveSubnetRequest) GetDestinationFolderId() string {
	if x != nil {
		return x.DestinationFolderId
	}
	return ""
}

type MoveSubnetMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Subnet resource that is being moved.
	SubnetId      string `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveSubnetMetadata) Reset() {
	*x = MoveSubnetMetadata{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveSubnetMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveSubnetMetadata) ProtoMessage() {}

func (x *MoveSubnetMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveSubnetMetadata.ProtoReflect.Descriptor instead.
func (*MoveSubnetMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{16}
}

func (x *MoveSubnetMetadata) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

type ListUsedAddressesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SubnetId      string                 `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	PageSize      int64                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string                 `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Filter        string                 `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUsedAddressesRequest) Reset() {
	*x = ListUsedAddressesRequest{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUsedAddressesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsedAddressesRequest) ProtoMessage() {}

func (x *ListUsedAddressesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsedAddressesRequest.ProtoReflect.Descriptor instead.
func (*ListUsedAddressesRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{17}
}

func (x *ListUsedAddressesRequest) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *ListUsedAddressesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListUsedAddressesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListUsedAddressesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListUsedAddressesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addresses     []*UsedAddress         `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUsedAddressesResponse) Reset() {
	*x = ListUsedAddressesResponse{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUsedAddressesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsedAddressesResponse) ProtoMessage() {}

func (x *ListUsedAddressesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsedAddressesResponse.ProtoReflect.Descriptor instead.
func (*ListUsedAddressesResponse) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{18}
}

func (x *ListUsedAddressesResponse) GetAddresses() []*UsedAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *ListUsedAddressesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UsedAddress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	IpVersion     IpVersion              `protobuf:"varint,2,opt,name=ip_version,json=ipVersion,proto3,enum=yandex.cloud.vpc.v1.IpVersion" json:"ip_version,omitempty"`
	References    []*reference.Reference `protobuf:"bytes,3,rep,name=references,proto3" json:"references,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UsedAddress) Reset() {
	*x = UsedAddress{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsedAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsedAddress) ProtoMessage() {}

func (x *UsedAddress) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsedAddress.ProtoReflect.Descriptor instead.
func (*UsedAddress) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{19}
}

func (x *UsedAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UsedAddress) GetIpVersion() IpVersion {
	if x != nil {
		return x.IpVersion
	}
	return IpVersion_IP_VERSION_UNSPECIFIED
}

func (x *UsedAddress) GetReferences() []*reference.Reference {
	if x != nil {
		return x.References
	}
	return nil
}

type RelocateSubnetRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SubnetId          string                 `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	DestinationZoneId string                 `protobuf:"bytes,2,opt,name=destination_zone_id,json=destinationZoneId,proto3" json:"destination_zone_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RelocateSubnetRequest) Reset() {
	*x = RelocateSubnetRequest{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelocateSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelocateSubnetRequest) ProtoMessage() {}

func (x *RelocateSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelocateSubnetRequest.ProtoReflect.Descriptor instead.
func (*RelocateSubnetRequest) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{20}
}

func (x *RelocateSubnetRequest) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *RelocateSubnetRequest) GetDestinationZoneId() string {
	if x != nil {
		return x.DestinationZoneId
	}
	return ""
}

type RelocateSubnetMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SubnetId      string                 `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelocateSubnetMetadata) Reset() {
	*x = RelocateSubnetMetadata{}
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelocateSubnetMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelocateSubnetMetadata) ProtoMessage() {}

func (x *RelocateSubnetMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelocateSubnetMetadata.ProtoReflect.Descriptor instead.
func (*RelocateSubnetMetadata) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP(), []int{21}
}

func (x *RelocateSubnetMetadata) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

var File_yandex_cloud_vpc_v1_subnet_service_proto protoreflect.FileDescriptor

const file_yandex_cloud_vpc_v1_subnet_service_proto_rawDesc = "" +
	"\n" +
	"(yandex/cloud/vpc/v1/subnet_service.proto\x12\x13yandex.cloud.vpc.v1\x1a\x1cgoogle/api/annotations.proto\x1a google/protobuf/field_mask.proto\x1a yandex/cloud/api/operation.proto\x1a&yandex/cloud/operation/operation.proto\x1a&yandex/cloud/reference/reference.proto\x1a\x1dyandex/cloud/validation.proto\x1a yandex/cloud/vpc/v1/subnet.proto\"=\n" +
	"\x10GetSubnetRequest\x12)\n" +
	"\tsubnet_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bsubnetId\"\xb6\x01\n" +
	"\x12ListSubnetsRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\x12\"\n" +
	"\x06filter\x18\x04 \x01(\tB\n" +
	"\x8a\xc81\x06<=1000R\x06filter\"t\n" +
	"\x13ListSubnetsResponse\x125\n" +
	"\asubnets\x18\x01 \x03(\v2\x1b.yandex.cloud.vpc.v1.SubnetR\asubnets\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xf3\x04\n" +
	"\x13CreateSubnetRequest\x12)\n" +
	"\tfolder_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bfolderId\x12B\n" +
	"\x04name\x18\x02 \x01(\tB.\xf2\xc71*|[a-zA-Z]([-_a-zA-Z0-9]{0,61}[a-zA-Z0-9])?R\x04name\x12+\n" +
	"\vdescription\x18\x03 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x89\x01\n" +
	"\x06labels\x18\x04 \x03(\v24.yandex.cloud.vpc.v1.CreateSubnetRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x041-63R\x06labels\x12+\n" +
	"\n" +
	"network_id\x18\x05 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\tnetworkId\x12%\n" +
	"\azone_id\x18\x06 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x06zoneId\x12*\n" +
	"\x0ev4_cidr_blocks\x18\a \x03(\tB\x04\xe8\xc71\x01R\fv4CidrBlocks\x12.\n" +
	"\x0eroute_table_id\x18\t \x01(\tB\b\x8a\xc81\x04<=50R\frouteTableId\x12C\n" +
	"\fdhcp_options\x18\n" +
	" \x01(\v2 .yandex.cloud.vpc.v1.DhcpOptionsR\vdhcpOptions\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01J\x04\b\b\x10\t\"3\n" +
	"\x14CreateSubnetMetadata\x12\x1b\n" +
	"\tsubnet_id\x18\x01 \x01(\tR\bsubnetId\"\xd0\x04\n" +
	"\x13UpdateSubnetRequest\x12)\n" +
	"\tsubnet_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bsubnetId\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12B\n" +
	"\x04name\x18\x03 \x01(\tB.\xf2\xc71*|[a-zA-Z]([-_a-zA-Z0-9]{0,61}[a-zA-Z0-9])?R\x04name\x12+\n" +
	"\vdescription\x18\x04 \x01(\tB\t\x8a\xc81\x05<=256R\vdescription\x12\x89\x01\n" +
	"\x06labels\x18\x05 \x03(\v24.yandex.cloud.vpc.v1.UpdateSubnetRequest.LabelsEntryB;\xf2\xc71\v[-_0-9a-z]*\x82\xc81\x04<=64\x8a\xc81\x04<=63\xb2\xc81\x18\x12\x10[a-z][-_0-9a-z]*\x1a\x041-63R\x06labels\x12.\n" +
	"\x0eroute_table_id\x18\x06 \x01(\tB\b\x8a\xc81\x04<=50R\frouteTableId\x12C\n" +
	"\fdhcp_options\x18\a \x01(\v2 .yandex.cloud.vpc.v1.DhcpOptionsR\vdhcpOptions\x12$\n" +
	"\x0ev4_cidr_blocks\x18\b \x03(\tR\fv4CidrBlocks\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"3\n" +
	"\x14UpdateSubnetMetadata\x12\x1b\n" +
	"\tsubnet_id\x18\x01 \x01(\tR\bsubnetId\"m\n" +
	"\x1aAddSubnetCidrBlocksRequest\x12)\n" +
	"\tsubnet_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bsubnetId\x12$\n" +
	"\x0ev4_cidr_blocks\x18\x02 \x03(\tR\fv4CidrBlocks\":\n" +
	"\x1bAddSubnetCidrBlocksMetadata\x12\x1b\n" +
	"\tsubnet_id\x18\x01 \x01(\tR\bsubnetId\"p\n" +
	"\x1dRemoveSubnetCidrBlocksRequest\x12)\n" +
	"\tsubnet_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bsubnetId\x12$\n" +
	"\x0ev4_cidr_blocks\x18\x02 \x03(\tR\fv4CidrBlocks\"=\n" +
	"\x1eRemoveSubnetCidrBlocksMetadata\x12\x1b\n" +
	"\tsubnet_id\x18\x01 \x01(\tR\bsubnetId\"@\n" +
	"\x13DeleteSubnetRequest\x12)\n" +
	"\tsubnet_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bsubnetId\"3\n" +
	"\x14DeleteSubnetMetadata\x12\x1b\n" +
	"\tsubnet_id\x18\x01 \x01(\tR\bsubnetId\"\x9b\x01\n" +
	"\x1bListSubnetOperationsRequest\x12)\n" +
	"\tsubnet_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bsubnetId\x12'\n" +
	"\tpage_size\x18\x02 \x01(\x03B\n" +
	"\xfa\xc71\x06<=1000R\bpageSize\x12(\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\t\x8a\xc81\x05<=100R\tpageToken\"\x89\x01\n" +
	"\x1cListSubnetOperationsResponse\x12A\n" +
	"\n" +
	"operations\x18\x01 \x03(\v2!.yandex.cloud.operation.OperationR\n" +
	"operations\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x80\x01\n" +
	"\x11MoveSubnetRequest\x12)\n" +
	"\tsubnet_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bsubnetId\x12@\n" +
	"\x15destination_folder_id\x18\x02 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\x13destinationFolderId\"1\n" +
	"\x12MoveSubnetMetadata\x12\x1b\n" +
	"\tsubnet_id\x18\x01 \x01(\tR\bsubnetId\"\x91\x01\n" +
	"\x18ListUsedAddressesRequest\x12!\n" +
	"\tsubnet_id\x18\x01 \x01(\tB\x04\xe8\xc71\x01R\bsubnetId\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x03R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\x12\x16\n" +
	"\x06filter\x18\x04 \x01(\tR\x06filter\"\x83\x01\n" +
	"\x19ListUsedAddressesResponse\x12>\n" +
	"\taddresses\x18\x01 \x03(\v2 .yandex.cloud.vpc.v1.UsedAddressR\taddresses\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xa9\x01\n" +
	"\vUsedAddress\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12=\n" +
	"\n" +
	"ip_version\x18\x02 \x01(\x0e2\x1e.yandex.cloud.vpc.v1.IpVersionR\tipVersion\x12A\n" +
	"\n" +
	"references\x18\x03 \x03(\v2!.yandex.cloud.reference.ReferenceR\n" +
	"references\"x\n" +
	"\x15RelocateSubnetRequest\x12)\n" +
	"\tsubnet_id\x18\x01 \x01(\tB\f\xe8\xc71\x01\x8a\xc81\x04<=50R\bsubnetId\x124\n" +
	"\x13destination_zone_id\x18\x02 \x01(\tB\x04\xe8\xc71\x01R\x11destinationZoneId\"5\n" +
	"\x16RelocateSubnetMetadata\x12\x1b\n" +
	"\tsubnet_id\x18\x01 \x01(\tR\bsubnetId2\x80\x0e\n" +
	"\rSubnetService\x12n\n" +
	"\x03Get\x12%.yandex.cloud.vpc.v1.GetSubnetRequest\x1a\x1b.yandex.cloud.vpc.v1.Subnet\"#\x82\xd3\xe4\x93\x02\x1d\x12\x1b/vpc/v1/subnets/{subnet_id}\x12r\n" +
	"\x04List\x12'.yandex.cloud.vpc.v1.ListSubnetsRequest\x1a(.yandex.cloud.vpc.v1.ListSubnetsResponse\"\x17\x82\xd3\xe4\x93\x02\x11\x12\x0f/vpc/v1/subnets\x12\x93\x01\n" +
	"\x06Create\x12(.yandex.cloud.vpc.v1.CreateSubnetRequest\x1a!.yandex.cloud.operation.Operation\"<\xb2\xd2*\x1e\n" +
	"\x14CreateSubnetMetadata\x12\x06Subnet\x82\xd3\xe4\x93\x02\x14:\x01*\"\x0f/vpc/v1/subnets\x12\x9f\x01\n" +
	"\x06Update\x12(.yandex.cloud.vpc.v1.UpdateSubnetRequest\x1a!.yandex.cloud.operation.Operation\"H\xb2\xd2*\x1e\n" +
	"\x14UpdateSubnetMetadata\x12\x06Subnet\x82\xd3\xe4\x93\x02 :\x01*2\x1b/vpc/v1/subnets/{subnet_id}\x12\xbd\x01\n" +
	"\rAddCidrBlocks\x12/.yandex.cloud.vpc.v1.AddSubnetCidrBlocksRequest\x1a!.yandex.cloud.operation.Operation\"X\xb2\xd2*\x1e\n" +
	"\x14UpdateSubnetMetadata\x12\x06Subnet\x82\xd3\xe4\x93\x020:\x01*\"+/vpc/v1/subnets/{subnet_id}:add-cidr-blocks\x12\xc6\x01\n" +
	"\x10RemoveCidrBlocks\x122.yandex.cloud.vpc.v1.RemoveSubnetCidrBlocksRequest\x1a!.yandex.cloud.operation.Operation\"[\xb2\xd2*\x1e\n" +
	"\x14UpdateSubnetMetadata\x12\x06Subnet\x82\xd3\xe4\x93\x023:\x01*\"./vpc/v1/subnets/{subnet_id}:remove-cidr-blocks\x12\xab\x01\n" +
	"\x06Delete\x12(.yandex.cloud.vpc.v1.DeleteSubnetRequest\x1a!.yandex.cloud.operation.Operation\"T\xb2\xd2*-\n" +
	"\x14DeleteSubnetMetadata\x12\x15google.protobuf.Empty\x82\xd3\xe4\x93\x02\x1d*\x1b/vpc/v1/subnets/{subnet_id}\x12\xa5\x01\n" +
	"\x0eListOperations\x120.yandex.cloud.vpc.v1.ListSubnetOperationsRequest\x1a1.yandex.cloud.vpc.v1.ListSubnetOperationsResponse\".\x82\xd3\xe4\x93\x02(\x12&/vpc/v1/subnets/{subnet_id}/operations\x12\x9e\x01\n" +
	"\x04Move\x12&.yandex.cloud.vpc.v1.MoveSubnetRequest\x1a!.yandex.cloud.operation.Operation\"K\xb2\xd2*\x1c\n" +
	"\x12MoveSubnetMetadata\x12\x06Subnet\x82\xd3\xe4\x93\x02%:\x01*\" /vpc/v1/subnets/{subnet_id}:move\x12\xae\x01\n" +
	"\bRelocate\x12*.yandex.cloud.vpc.v1.RelocateSubnetRequest\x1a!.yandex.cloud.operation.Operation\"S\xb2\xd2* \n" +
	"\x16RelocateSubnetMetadata\x12\x06Subnet\x82\xd3\xe4\x93\x02):\x01*\"$/vpc/v1/subnets/{subnet_id}:relocate\x12\xa1\x01\n" +
	"\x11ListUsedAddresses\x12-.yandex.cloud.vpc.v1.ListUsedAddressesRequest\x1a..yandex.cloud.vpc.v1.ListUsedAddressesResponse\"-\x82\xd3\xe4\x93\x02'\x12%/vpc/v1/subnets/{subnet_id}/addressesBV\n" +
	"\x17yandex.cloud.api.vpc.v1Z;github.com/yandex-cloud/go-genproto/yandex/cloud/vpc/v1;vpcb\x06proto3"

var (
	file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescOnce sync.Once
	file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescData []byte
)

func file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescGZIP() []byte {
	file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yandex_cloud_vpc_v1_subnet_service_proto_rawDesc), len(file_yandex_cloud_vpc_v1_subnet_service_proto_rawDesc)))
	})
	return file_yandex_cloud_vpc_v1_subnet_service_proto_rawDescData
}

var file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_yandex_cloud_vpc_v1_subnet_service_proto_goTypes = []any{
	(*GetSubnetRequest)(nil),               // 0: yandex.cloud.vpc.v1.GetSubnetRequest
	(*ListSubnetsRequest)(nil),             // 1: yandex.cloud.vpc.v1.ListSubnetsRequest
	(*ListSubnetsResponse)(nil),            // 2: yandex.cloud.vpc.v1.ListSubnetsResponse
	(*CreateSubnetRequest)(nil),            // 3: yandex.cloud.vpc.v1.CreateSubnetRequest
	(*CreateSubnetMetadata)(nil),           // 4: yandex.cloud.vpc.v1.CreateSubnetMetadata
	(*UpdateSubnetRequest)(nil),            // 5: yandex.cloud.vpc.v1.UpdateSubnetRequest
	(*UpdateSubnetMetadata)(nil),           // 6: yandex.cloud.vpc.v1.UpdateSubnetMetadata
	(*AddSubnetCidrBlocksRequest)(nil),     // 7: yandex.cloud.vpc.v1.AddSubnetCidrBlocksRequest
	(*AddSubnetCidrBlocksMetadata)(nil),    // 8: yandex.cloud.vpc.v1.AddSubnetCidrBlocksMetadata
	(*RemoveSubnetCidrBlocksRequest)(nil),  // 9: yandex.cloud.vpc.v1.RemoveSubnetCidrBlocksRequest
	(*RemoveSubnetCidrBlocksMetadata)(nil), // 10: yandex.cloud.vpc.v1.RemoveSubnetCidrBlocksMetadata
	(*DeleteSubnetRequest)(nil),            // 11: yandex.cloud.vpc.v1.DeleteSubnetRequest
	(*DeleteSubnetMetadata)(nil),           // 12: yandex.cloud.vpc.v1.DeleteSubnetMetadata
	(*ListSubnetOperationsRequest)(nil),    // 13: yandex.cloud.vpc.v1.ListSubnetOperationsRequest
	(*ListSubnetOperationsResponse)(nil),   // 14: yandex.cloud.vpc.v1.ListSubnetOperationsResponse
	(*MoveSubnetRequest)(nil),              // 15: yandex.cloud.vpc.v1.MoveSubnetRequest
	(*MoveSubnetMetadata)(nil),             // 16: yandex.cloud.vpc.v1.MoveSubnetMetadata
	(*ListUsedAddressesRequest)(nil),       // 17: yandex.cloud.vpc.v1.ListUsedAddressesRequest
	(*ListUsedAddressesResponse)(nil),      // 18: yandex.cloud.vpc.v1.ListUsedAddressesResponse
	(*UsedAddress)(nil),                    // 19: yandex.cloud.vpc.v1.UsedAddress
	(*RelocateSubnetRequest)(nil),          // 20: yandex.cloud.vpc.v1.RelocateSubnetRequest
	(*RelocateSubnetMetadata)(nil),         // 21: yandex.cloud.vpc.v1.RelocateSubnetMetadata
	nil,                                    // 22: yandex.cloud.vpc.v1.CreateSubnetRequest.LabelsEntry
	nil,                                    // 23: yandex.cloud.vpc.v1.UpdateSubnetRequest.LabelsEntry
	(*Subnet)(nil),                         // 24: yandex.cloud.vpc.v1.Subnet
	(*DhcpOptions)(nil),                    // 25: yandex.cloud.vpc.v1.DhcpOptions
	(*fieldmaskpb.FieldMask)(nil),          // 26: google.protobuf.FieldMask
	(*operation.Operation)(nil),            // 27: yandex.cloud.operation.Operation
	(IpVersion)(0),                         // 28: yandex.cloud.vpc.v1.IpVersion
	(*reference.Reference)(nil),            // 29: yandex.cloud.reference.Reference
}
var file_yandex_cloud_vpc_v1_subnet_service_proto_depIdxs = []int32{
	24, // 0: yandex.cloud.vpc.v1.ListSubnetsResponse.subnets:type_name -> yandex.cloud.vpc.v1.Subnet
	22, // 1: yandex.cloud.vpc.v1.CreateSubnetRequest.labels:type_name -> yandex.cloud.vpc.v1.CreateSubnetRequest.LabelsEntry
	25, // 2: yandex.cloud.vpc.v1.CreateSubnetRequest.dhcp_options:type_name -> yandex.cloud.vpc.v1.DhcpOptions
	26, // 3: yandex.cloud.vpc.v1.UpdateSubnetRequest.update_mask:type_name -> google.protobuf.FieldMask
	23, // 4: yandex.cloud.vpc.v1.UpdateSubnetRequest.labels:type_name -> yandex.cloud.vpc.v1.UpdateSubnetRequest.LabelsEntry
	25, // 5: yandex.cloud.vpc.v1.UpdateSubnetRequest.dhcp_options:type_name -> yandex.cloud.vpc.v1.DhcpOptions
	27, // 6: yandex.cloud.vpc.v1.ListSubnetOperationsResponse.operations:type_name -> yandex.cloud.operation.Operation
	19, // 7: yandex.cloud.vpc.v1.ListUsedAddressesResponse.addresses:type_name -> yandex.cloud.vpc.v1.UsedAddress
	28, // 8: yandex.cloud.vpc.v1.UsedAddress.ip_version:type_name -> yandex.cloud.vpc.v1.IpVersion
	29, // 9: yandex.cloud.vpc.v1.UsedAddress.references:type_name -> yandex.cloud.reference.Reference
	0,  // 10: yandex.cloud.vpc.v1.SubnetService.Get:input_type -> yandex.cloud.vpc.v1.GetSubnetRequest
	1,  // 11: yandex.cloud.vpc.v1.SubnetService.List:input_type -> yandex.cloud.vpc.v1.ListSubnetsRequest
	3,  // 12: yandex.cloud.vpc.v1.SubnetService.Create:input_type -> yandex.cloud.vpc.v1.CreateSubnetRequest
	5,  // 13: yandex.cloud.vpc.v1.SubnetService.Update:input_type -> yandex.cloud.vpc.v1.UpdateSubnetRequest
	7,  // 14: yandex.cloud.vpc.v1.SubnetService.AddCidrBlocks:input_type -> yandex.cloud.vpc.v1.AddSubnetCidrBlocksRequest
	9,  // 15: yandex.cloud.vpc.v1.SubnetService.RemoveCidrBlocks:input_type -> yandex.cloud.vpc.v1.RemoveSubnetCidrBlocksRequest
	11, // 16: yandex.cloud.vpc.v1.SubnetService.Delete:input_type -> yandex.cloud.vpc.v1.DeleteSubnetRequest
	13, // 17: yandex.cloud.vpc.v1.SubnetService.ListOperations:input_type -> yandex.cloud.vpc.v1.ListSubnetOperationsRequest
	15, // 18: yandex.cloud.vpc.v1.SubnetService.Move:input_type -> yandex.cloud.vpc.v1.MoveSubnetRequest
	20, // 19: yandex.cloud.vpc.v1.SubnetService.Relocate:input_type -> yandex.cloud.vpc.v1.RelocateSubnetRequest
	17, // 20: yandex.cloud.vpc.v1.SubnetService.ListUsedAddresses:input_type -> yandex.cloud.vpc.v1.ListUsedAddressesRequest
	24, // 21: yandex.cloud.vpc.v1.SubnetService.Get:output_type -> yandex.cloud.vpc.v1.Subnet
	2,  // 22: yandex.cloud.vpc.v1.SubnetService.List:output_type -> yandex.cloud.vpc.v1.ListSubnetsResponse
	27, // 23: yandex.cloud.vpc.v1.SubnetService.Create:output_type -> yandex.cloud.operation.Operation
	27, // 24: yandex.cloud.vpc.v1.SubnetService.Update:output_type -> yandex.cloud.operation.Operation
	27, // 25: yandex.cloud.vpc.v1.SubnetService.AddCidrBlocks:output_type -> yandex.cloud.operation.Operation
	27, // 26: yandex.cloud.vpc.v1.SubnetService.RemoveCidrBlocks:output_type -> yandex.cloud.operation.Operation
	27, // 27: yandex.cloud.vpc.v1.SubnetService.Delete:output_type -> yandex.cloud.operation.Operation
	14, // 28: yandex.cloud.vpc.v1.SubnetService.ListOperations:output_type -> yandex.cloud.vpc.v1.ListSubnetOperationsResponse
	27, // 29: yandex.cloud.vpc.v1.SubnetService.Move:output_type -> yandex.cloud.operation.Operation
	27, // 30: yandex.cloud.vpc.v1.SubnetService.Relocate:output_type -> yandex.cloud.operation.Operation
	18, // 31: yandex.cloud.vpc.v1.SubnetService.ListUsedAddresses:output_type -> yandex.cloud.vpc.v1.ListUsedAddressesResponse
	21, // [21:32] is the sub-list for method output_type
	10, // [10:21] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_yandex_cloud_vpc_v1_subnet_service_proto_init() }
func file_yandex_cloud_vpc_v1_subnet_service_proto_init() {
	if File_yandex_cloud_vpc_v1_subnet_service_proto != nil {
		return
	}
	file_yandex_cloud_vpc_v1_subnet_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yandex_cloud_vpc_v1_subnet_service_proto_rawDesc), len(file_yandex_cloud_vpc_v1_subnet_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yandex_cloud_vpc_v1_subnet_service_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_vpc_v1_subnet_service_proto_depIdxs,
		MessageInfos:      file_yandex_cloud_vpc_v1_subnet_service_proto_msgTypes,
	}.Build()
	File_yandex_cloud_vpc_v1_subnet_service_proto = out.File
	file_yandex_cloud_vpc_v1_subnet_service_proto_goTypes = nil
	file_yandex_cloud_vpc_v1_subnet_service_proto_depIdxs = nil
}

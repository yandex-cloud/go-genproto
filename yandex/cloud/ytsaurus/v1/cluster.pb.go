// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: yandex/cloud/ytsaurus/v1/cluster.proto

package ytsaurus

import (
	_ "github.com/yandex-cloud/go-genproto/yandex/cloud"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Cluster_Status int32

const (
	Cluster_STATUS_UNKNOWN Cluster_Status = 0
	// Cluster is being created.
	Cluster_CREATING Cluster_Status = 1
	// Cluster is running.
	Cluster_RUNNING Cluster_Status = 2
	// Cluster encountered a problem and cannot operate.
	Cluster_ERROR Cluster_Status = 3
	// Cluster is being stopped.
	Cluster_STOPPING Cluster_Status = 4
	// Cluster stopped.
	Cluster_STOPPED Cluster_Status = 5
	// Cluster is being started.
	Cluster_STARTING Cluster_Status = 6
	// Cluster is being updated.
	Cluster_UPDATING Cluster_Status = 7
	// Cluster is being deleted.
	Cluster_DELETING Cluster_Status = 8
)

// Enum value maps for Cluster_Status.
var (
	Cluster_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "CREATING",
		2: "RUNNING",
		3: "ERROR",
		4: "STOPPING",
		5: "STOPPED",
		6: "STARTING",
		7: "UPDATING",
		8: "DELETING",
	}
	Cluster_Status_value = map[string]int32{
		"STATUS_UNKNOWN": 0,
		"CREATING":       1,
		"RUNNING":        2,
		"ERROR":          3,
		"STOPPING":       4,
		"STOPPED":        5,
		"STARTING":       6,
		"UPDATING":       7,
		"DELETING":       8,
	}
)

func (x Cluster_Status) Enum() *Cluster_Status {
	p := new(Cluster_Status)
	*p = x
	return p
}

func (x Cluster_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cluster_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_ytsaurus_v1_cluster_proto_enumTypes[0].Descriptor()
}

func (Cluster_Status) Type() protoreflect.EnumType {
	return &file_yandex_cloud_ytsaurus_v1_cluster_proto_enumTypes[0]
}

func (x Cluster_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cluster_Status.Descriptor instead.
func (Cluster_Status) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescGZIP(), []int{0, 0}
}

type Cluster_Health int32

const (
	Cluster_HEALTH_UNKNOWN Cluster_Health = 0
	// Cluster is alive.
	Cluster_ALIVE Cluster_Health = 1
	// Cluster is dead.
	Cluster_DEAD Cluster_Health = 2
	// Cluster is degraded.
	Cluster_DEGRADED Cluster_Health = 3
)

// Enum value maps for Cluster_Health.
var (
	Cluster_Health_name = map[int32]string{
		0: "HEALTH_UNKNOWN",
		1: "ALIVE",
		2: "DEAD",
		3: "DEGRADED",
	}
	Cluster_Health_value = map[string]int32{
		"HEALTH_UNKNOWN": 0,
		"ALIVE":          1,
		"DEAD":           2,
		"DEGRADED":       3,
	}
)

func (x Cluster_Health) Enum() *Cluster_Health {
	p := new(Cluster_Health)
	*p = x
	return p
}

func (x Cluster_Health) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cluster_Health) Descriptor() protoreflect.EnumDescriptor {
	return file_yandex_cloud_ytsaurus_v1_cluster_proto_enumTypes[1].Descriptor()
}

func (Cluster_Health) Type() protoreflect.EnumType {
	return &file_yandex_cloud_ytsaurus_v1_cluster_proto_enumTypes[1]
}

func (x Cluster_Health) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Cluster_Health.Descriptor instead.
func (Cluster_Health) EnumDescriptor() ([]byte, []int) {
	return file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescGZIP(), []int{0, 1}
}

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the cluster. Generated at creation time.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the folder that the cluster belongs to.
	FolderId string `protobuf:"bytes,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	// ID of the availability zone where the cluster resides.
	ZoneId string `protobuf:"bytes,3,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// Name of the cluster.
	// The name is unique within the folder.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the cluster.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Cluster labels as `key:value` pairs.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ID of the subnet where the cluster resides.
	SubnetId string `protobuf:"bytes,7,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	// Network interfaces security groups.
	SecurityGroupIds []string `protobuf:"bytes,8,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// Cluster specification.
	Spec *ClusterSpec `protobuf:"bytes,9,opt,name=spec,proto3" json:"spec,omitempty"`
	// Time when the cluster was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// User who created the cluster.
	CreatedBy string `protobuf:"bytes,11,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Time when the cluster was last updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// User who last updated the cluster.
	UpdatedBy string `protobuf:"bytes,13,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Status of the cluster.
	Status Cluster_Status `protobuf:"varint,14,opt,name=status,proto3,enum=yandex.cloud.ytsaurus.v1.Cluster_Status" json:"status,omitempty"`
	// Health of the cluster.
	Health Cluster_Health `protobuf:"varint,15,opt,name=health,proto3,enum=yandex.cloud.ytsaurus.v1.Cluster_Health" json:"health,omitempty"`
	// Endpoints of the cluster.
	Endpoints *Cluster_Endpoints `protobuf:"bytes,16,opt,name=endpoints,proto3" json:"endpoints,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *Cluster) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cluster) GetFolderId() string {
	if x != nil {
		return x.FolderId
	}
	return ""
}

func (x *Cluster) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Cluster) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Cluster) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *Cluster) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *Cluster) GetSpec() *ClusterSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Cluster) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Cluster) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Cluster) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Cluster) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *Cluster) GetStatus() Cluster_Status {
	if x != nil {
		return x.Status
	}
	return Cluster_STATUS_UNKNOWN
}

func (x *Cluster) GetHealth() Cluster_Health {
	if x != nil {
		return x.Health
	}
	return Cluster_HEALTH_UNKNOWN
}

func (x *Cluster) GetEndpoints() *Cluster_Endpoints {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

type StorageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hdd *StorageSpec_HddSpec `protobuf:"bytes,1,opt,name=hdd,proto3" json:"hdd,omitempty"`
	Ssd *StorageSpec_SsdSpec `protobuf:"bytes,2,opt,name=ssd,proto3" json:"ssd,omitempty"`
}

func (x *StorageSpec) Reset() {
	*x = StorageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageSpec) ProtoMessage() {}

func (x *StorageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageSpec.ProtoReflect.Descriptor instead.
func (*StorageSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *StorageSpec) GetHdd() *StorageSpec_HddSpec {
	if x != nil {
		return x.Hdd
	}
	return nil
}

func (x *StorageSpec) GetSsd() *StorageSpec_SsdSpec {
	if x != nil {
		return x.Ssd
	}
	return nil
}

type ComputeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preset      string                   `protobuf:"bytes,1,opt,name=preset,proto3" json:"preset,omitempty"`
	Disks       []*ComputeSpec_DiskSpec  `protobuf:"bytes,2,rep,name=disks,proto3" json:"disks,omitempty"`
	ScalePolicy *ComputeSpec_ScalePolicy `protobuf:"bytes,3,opt,name=scale_policy,json=scalePolicy,proto3" json:"scale_policy,omitempty"`
}

func (x *ComputeSpec) Reset() {
	*x = ComputeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeSpec) ProtoMessage() {}

func (x *ComputeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeSpec.ProtoReflect.Descriptor instead.
func (*ComputeSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *ComputeSpec) GetPreset() string {
	if x != nil {
		return x.Preset
	}
	return ""
}

func (x *ComputeSpec) GetDisks() []*ComputeSpec_DiskSpec {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *ComputeSpec) GetScalePolicy() *ComputeSpec_ScalePolicy {
	if x != nil {
		return x.ScalePolicy
	}
	return nil
}

type HttpProxySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *HttpProxySpec) Reset() {
	*x = HttpProxySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpProxySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpProxySpec) ProtoMessage() {}

func (x *HttpProxySpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpProxySpec.ProtoReflect.Descriptor instead.
func (*HttpProxySpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *HttpProxySpec) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RpcProxySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *RpcProxySpec) Reset() {
	*x = RpcProxySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcProxySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcProxySpec) ProtoMessage() {}

func (x *RpcProxySpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcProxySpec.ProtoReflect.Descriptor instead.
func (*RpcProxySpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *RpcProxySpec) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TabletSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preset string `protobuf:"bytes,1,opt,name=preset,proto3" json:"preset,omitempty"`
	Count  int64  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TabletSpec) Reset() {
	*x = TabletSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabletSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletSpec) ProtoMessage() {}

func (x *TabletSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletSpec.ProtoReflect.Descriptor instead.
func (*TabletSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *TabletSpec) GetPreset() string {
	if x != nil {
		return x.Preset
	}
	return ""
}

func (x *TabletSpec) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ProxySpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Http *HttpProxySpec `protobuf:"bytes,1,opt,name=http,proto3" json:"http,omitempty"`
	Rpc  *RpcProxySpec  `protobuf:"bytes,2,opt,name=rpc,proto3" json:"rpc,omitempty"`
}

func (x *ProxySpec) Reset() {
	*x = ProxySpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxySpec) ProtoMessage() {}

func (x *ProxySpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxySpec.ProtoReflect.Descriptor instead.
func (*ProxySpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescGZIP(), []int{6}
}

func (x *ProxySpec) GetHttp() *HttpProxySpec {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *ProxySpec) GetRpc() *RpcProxySpec {
	if x != nil {
		return x.Rpc
	}
	return nil
}

type ClusterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Storage *StorageSpec   `protobuf:"bytes,1,opt,name=storage,proto3" json:"storage,omitempty"`
	Compute []*ComputeSpec `protobuf:"bytes,2,rep,name=compute,proto3" json:"compute,omitempty"`
	Tablet  *TabletSpec    `protobuf:"bytes,3,opt,name=tablet,proto3" json:"tablet,omitempty"`
	Proxy   *ProxySpec     `protobuf:"bytes,4,opt,name=proxy,proto3" json:"proxy,omitempty"`
}

func (x *ClusterSpec) Reset() {
	*x = ClusterSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSpec) ProtoMessage() {}

func (x *ClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSpec.ProtoReflect.Descriptor instead.
func (*ClusterSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescGZIP(), []int{7}
}

func (x *ClusterSpec) GetStorage() *StorageSpec {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *ClusterSpec) GetCompute() []*ComputeSpec {
	if x != nil {
		return x.Compute
	}
	return nil
}

func (x *ClusterSpec) GetTablet() *TabletSpec {
	if x != nil {
		return x.Tablet
	}
	return nil
}

func (x *ClusterSpec) GetProxy() *ProxySpec {
	if x != nil {
		return x.Proxy
	}
	return nil
}

type Cluster_Endpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ui                        string   `protobuf:"bytes,1,opt,name=ui,proto3" json:"ui,omitempty"`                                                                                    // https://CID.ui.ytsaurus.yandexcloud.net
	ExternalHttpProxyBalancer string   `protobuf:"bytes,2,opt,name=external_http_proxy_balancer,json=externalHttpProxyBalancer,proto3" json:"external_http_proxy_balancer,omitempty"` // https://CID.proxy.ytsaurus.yandexcloud.net
	InternalHttpProxyAlias    string   `protobuf:"bytes,3,opt,name=internal_http_proxy_alias,json=internalHttpProxyAlias,proto3" json:"internal_http_proxy_alias,omitempty"`          // https://proxy.CID.ytsaurus.mdb.yandexcloud.net:PORT
	InternalRpcProxyAlias     string   `protobuf:"bytes,4,opt,name=internal_rpc_proxy_alias,json=internalRpcProxyAlias,proto3" json:"internal_rpc_proxy_alias,omitempty"`             // proxy.CID.ytsaurus.mdb.yandexcloud.net:PORT
	InternalHttpProxies       []string `protobuf:"bytes,5,rep,name=internal_http_proxies,json=internalHttpProxies,proto3" json:"internal_http_proxies,omitempty"`                     // https://proxy-{index}.CID.ytsaurus.mdb.yandexcloud.net
	InternalRpcProxies        []string `protobuf:"bytes,6,rep,name=internal_rpc_proxies,json=internalRpcProxies,proto3" json:"internal_rpc_proxies,omitempty"`                        // proxy-{index}.CID.ytsaurus.mdb.yandexcloud.net:PORT
}

func (x *Cluster_Endpoints) Reset() {
	*x = Cluster_Endpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster_Endpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_Endpoints) ProtoMessage() {}

func (x *Cluster_Endpoints) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_Endpoints.ProtoReflect.Descriptor instead.
func (*Cluster_Endpoints) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Cluster_Endpoints) GetUi() string {
	if x != nil {
		return x.Ui
	}
	return ""
}

func (x *Cluster_Endpoints) GetExternalHttpProxyBalancer() string {
	if x != nil {
		return x.ExternalHttpProxyBalancer
	}
	return ""
}

func (x *Cluster_Endpoints) GetInternalHttpProxyAlias() string {
	if x != nil {
		return x.InternalHttpProxyAlias
	}
	return ""
}

func (x *Cluster_Endpoints) GetInternalRpcProxyAlias() string {
	if x != nil {
		return x.InternalRpcProxyAlias
	}
	return ""
}

func (x *Cluster_Endpoints) GetInternalHttpProxies() []string {
	if x != nil {
		return x.InternalHttpProxies
	}
	return nil
}

func (x *Cluster_Endpoints) GetInternalRpcProxies() []string {
	if x != nil {
		return x.InternalRpcProxies
	}
	return nil
}

type StorageSpec_HddSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SizeGb int64 `protobuf:"varint,2,opt,name=size_gb,json=sizeGb,proto3" json:"size_gb,omitempty"`
	Count  int64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *StorageSpec_HddSpec) Reset() {
	*x = StorageSpec_HddSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageSpec_HddSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageSpec_HddSpec) ProtoMessage() {}

func (x *StorageSpec_HddSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageSpec_HddSpec.ProtoReflect.Descriptor instead.
func (*StorageSpec_HddSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescGZIP(), []int{1, 0}
}

func (x *StorageSpec_HddSpec) GetSizeGb() int64 {
	if x != nil {
		return x.SizeGb
	}
	return 0
}

func (x *StorageSpec_HddSpec) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type StorageSpec_SsdSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SizeGb int64  `protobuf:"varint,2,opt,name=size_gb,json=sizeGb,proto3" json:"size_gb,omitempty"`
	Type   string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Count  int64  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *StorageSpec_SsdSpec) Reset() {
	*x = StorageSpec_SsdSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageSpec_SsdSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageSpec_SsdSpec) ProtoMessage() {}

func (x *StorageSpec_SsdSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageSpec_SsdSpec.ProtoReflect.Descriptor instead.
func (*StorageSpec_SsdSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescGZIP(), []int{1, 1}
}

func (x *StorageSpec_SsdSpec) GetSizeGb() int64 {
	if x != nil {
		return x.SizeGb
	}
	return 0
}

func (x *StorageSpec_SsdSpec) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StorageSpec_SsdSpec) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ComputeSpec_DiskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	SizeGb    int64    `protobuf:"varint,2,opt,name=size_gb,json=sizeGb,proto3" json:"size_gb,omitempty"`
	Locations []string `protobuf:"bytes,3,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (x *ComputeSpec_DiskSpec) Reset() {
	*x = ComputeSpec_DiskSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeSpec_DiskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeSpec_DiskSpec) ProtoMessage() {}

func (x *ComputeSpec_DiskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeSpec_DiskSpec.ProtoReflect.Descriptor instead.
func (*ComputeSpec_DiskSpec) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ComputeSpec_DiskSpec) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ComputeSpec_DiskSpec) GetSizeGb() int64 {
	if x != nil {
		return x.SizeGb
	}
	return 0
}

func (x *ComputeSpec_DiskSpec) GetLocations() []string {
	if x != nil {
		return x.Locations
	}
	return nil
}

type ComputeSpec_ScalePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Policy:
	//
	//	*ComputeSpec_ScalePolicy_Fixed
	//	*ComputeSpec_ScalePolicy_Auto
	Policy isComputeSpec_ScalePolicy_Policy `protobuf_oneof:"policy"`
}

func (x *ComputeSpec_ScalePolicy) Reset() {
	*x = ComputeSpec_ScalePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeSpec_ScalePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeSpec_ScalePolicy) ProtoMessage() {}

func (x *ComputeSpec_ScalePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeSpec_ScalePolicy.ProtoReflect.Descriptor instead.
func (*ComputeSpec_ScalePolicy) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescGZIP(), []int{2, 1}
}

func (m *ComputeSpec_ScalePolicy) GetPolicy() isComputeSpec_ScalePolicy_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (x *ComputeSpec_ScalePolicy) GetFixed() *ComputeSpec_ScalePolicy_FixedScale {
	if x, ok := x.GetPolicy().(*ComputeSpec_ScalePolicy_Fixed); ok {
		return x.Fixed
	}
	return nil
}

func (x *ComputeSpec_ScalePolicy) GetAuto() *ComputeSpec_ScalePolicy_AutoScale {
	if x, ok := x.GetPolicy().(*ComputeSpec_ScalePolicy_Auto); ok {
		return x.Auto
	}
	return nil
}

type isComputeSpec_ScalePolicy_Policy interface {
	isComputeSpec_ScalePolicy_Policy()
}

type ComputeSpec_ScalePolicy_Fixed struct {
	Fixed *ComputeSpec_ScalePolicy_FixedScale `protobuf:"bytes,1,opt,name=fixed,proto3,oneof"`
}

type ComputeSpec_ScalePolicy_Auto struct {
	Auto *ComputeSpec_ScalePolicy_AutoScale `protobuf:"bytes,2,opt,name=auto,proto3,oneof"`
}

func (*ComputeSpec_ScalePolicy_Fixed) isComputeSpec_ScalePolicy_Policy() {}

func (*ComputeSpec_ScalePolicy_Auto) isComputeSpec_ScalePolicy_Policy() {}

type ComputeSpec_ScalePolicy_FixedScale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size int64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ComputeSpec_ScalePolicy_FixedScale) Reset() {
	*x = ComputeSpec_ScalePolicy_FixedScale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeSpec_ScalePolicy_FixedScale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeSpec_ScalePolicy_FixedScale) ProtoMessage() {}

func (x *ComputeSpec_ScalePolicy_FixedScale) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeSpec_ScalePolicy_FixedScale.ProtoReflect.Descriptor instead.
func (*ComputeSpec_ScalePolicy_FixedScale) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (x *ComputeSpec_ScalePolicy_FixedScale) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ComputeSpec_ScalePolicy_AutoScale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinSize int64 `protobuf:"varint,1,opt,name=min_size,json=minSize,proto3" json:"min_size,omitempty"`
	MaxSize int64 `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
}

func (x *ComputeSpec_ScalePolicy_AutoScale) Reset() {
	*x = ComputeSpec_ScalePolicy_AutoScale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeSpec_ScalePolicy_AutoScale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeSpec_ScalePolicy_AutoScale) ProtoMessage() {}

func (x *ComputeSpec_ScalePolicy_AutoScale) ProtoReflect() protoreflect.Message {
	mi := &file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeSpec_ScalePolicy_AutoScale.ProtoReflect.Descriptor instead.
func (*ComputeSpec_ScalePolicy_AutoScale) Descriptor() ([]byte, []int) {
	return file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescGZIP(), []int{2, 1, 1}
}

func (x *ComputeSpec_ScalePolicy_AutoScale) GetMinSize() int64 {
	if x != nil {
		return x.MinSize
	}
	return 0
}

func (x *ComputeSpec_ScalePolicy_AutoScale) GetMaxSize() int64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

var File_yandex_cloud_ytsaurus_v1_cluster_proto protoreflect.FileDescriptor

var file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDesc = []byte{
	0x0a, 0x26, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x79,
	0x74, 0x73, 0x61, 0x75, 0x72, 0x75, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x79, 0x74, 0x73, 0x61, 0x75, 0x72, 0x75, 0x73, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x94, 0x0a, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x7a, 0x6f,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x79, 0x74, 0x73, 0x61, 0x75, 0x72,
	0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x79, 0x74, 0x73, 0x61, 0x75, 0x72,
	0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x40, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x79, 0x61,
	0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x79, 0x74, 0x73, 0x61, 0x75,
	0x72, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x79, 0x74, 0x73,
	0x61, 0x75, 0x72, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x49, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x79, 0x74, 0x73, 0x61, 0x75, 0x72, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52,
	0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xb6, 0x02, 0x0a, 0x09, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x75, 0x69, 0x12, 0x3f, 0x0a, 0x1c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x37, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x70, 0x63, 0x5f,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x70, 0x63, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x70, 0x63, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x52, 0x70, 0x63, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x22, 0x87,
	0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10,
	0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x22, 0x3f, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44,
	0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x03, 0x22, 0xa3, 0x02, 0x0a, 0x0b, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3f, 0x0a, 0x03, 0x68, 0x64, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x79, 0x74, 0x73, 0x61, 0x75, 0x72, 0x75, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x48, 0x64,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x03, 0x68, 0x64, 0x64, 0x12, 0x3f, 0x0a, 0x03, 0x73, 0x73,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x79, 0x74, 0x73, 0x61, 0x75, 0x72, 0x75, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53,
	0x73, 0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x03, 0x73, 0x73, 0x64, 0x1a, 0x3e, 0x0a, 0x07, 0x48,
	0x64, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x1a, 0x52, 0x0a, 0x07, 0x53,
	0x73, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22,
	0xc6, 0x04, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x79, 0x74, 0x73, 0x61, 0x75, 0x72, 0x75, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x54, 0x0a,
	0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x79, 0x74, 0x73, 0x61, 0x75, 0x72, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x1a, 0x55, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x47, 0x62, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xab, 0x02, 0x0a, 0x0b, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x54, 0x0a, 0x05, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x79, 0x74, 0x73, 0x61, 0x75, 0x72, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x12, 0x51, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x79, 0x74,
	0x73, 0x61, 0x75, 0x72, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x04, 0x61,
	0x75, 0x74, 0x6f, 0x1a, 0x20, 0x0a, 0x0a, 0x46, 0x69, 0x78, 0x65, 0x64, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x1a, 0x41, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0e, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x04, 0xc0, 0xc1, 0x31, 0x01, 0x22, 0x2b, 0x0a, 0x0d, 0x48, 0x74, 0x74, 0x70,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x2a, 0x0a, 0x0c, 0x52, 0x70, 0x63, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10,
	0x02, 0x22, 0x3a, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x82, 0x01,
	0x0a, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3b, 0x0a, 0x04, 0x68,
	0x74, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x61, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x79, 0x74, 0x73, 0x61, 0x75, 0x72, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x38, 0x0a, 0x03, 0x72, 0x70, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x79, 0x74, 0x73, 0x61, 0x75, 0x72, 0x75, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x70, 0x63, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x03, 0x72,
	0x70, 0x63, 0x22, 0x88, 0x02, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x79, 0x74, 0x73, 0x61, 0x75, 0x72, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x79, 0x74, 0x73, 0x61, 0x75, 0x72, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x79, 0x74, 0x73, 0x61, 0x75, 0x72, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x79, 0x74, 0x73, 0x61, 0x75, 0x72, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x65, 0x0a,
	0x1c, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x79, 0x74, 0x73, 0x61, 0x75, 0x72, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x5a, 0x45, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78,
	0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x79, 0x61, 0x6e, 0x64, 0x65, 0x78, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x79, 0x74, 0x73, 0x61, 0x75, 0x72, 0x75, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x79, 0x74, 0x73, 0x61,
	0x75, 0x72, 0x75, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescOnce sync.Once
	file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescData = file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDesc
)

func file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescGZIP() []byte {
	file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescOnce.Do(func() {
		file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescData)
	})
	return file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDescData
}

var file_yandex_cloud_ytsaurus_v1_cluster_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_yandex_cloud_ytsaurus_v1_cluster_proto_goTypes = []any{
	(Cluster_Status)(0),                        // 0: yandex.cloud.ytsaurus.v1.Cluster.Status
	(Cluster_Health)(0),                        // 1: yandex.cloud.ytsaurus.v1.Cluster.Health
	(*Cluster)(nil),                            // 2: yandex.cloud.ytsaurus.v1.Cluster
	(*StorageSpec)(nil),                        // 3: yandex.cloud.ytsaurus.v1.StorageSpec
	(*ComputeSpec)(nil),                        // 4: yandex.cloud.ytsaurus.v1.ComputeSpec
	(*HttpProxySpec)(nil),                      // 5: yandex.cloud.ytsaurus.v1.HttpProxySpec
	(*RpcProxySpec)(nil),                       // 6: yandex.cloud.ytsaurus.v1.RpcProxySpec
	(*TabletSpec)(nil),                         // 7: yandex.cloud.ytsaurus.v1.TabletSpec
	(*ProxySpec)(nil),                          // 8: yandex.cloud.ytsaurus.v1.ProxySpec
	(*ClusterSpec)(nil),                        // 9: yandex.cloud.ytsaurus.v1.ClusterSpec
	nil,                                        // 10: yandex.cloud.ytsaurus.v1.Cluster.LabelsEntry
	(*Cluster_Endpoints)(nil),                  // 11: yandex.cloud.ytsaurus.v1.Cluster.Endpoints
	(*StorageSpec_HddSpec)(nil),                // 12: yandex.cloud.ytsaurus.v1.StorageSpec.HddSpec
	(*StorageSpec_SsdSpec)(nil),                // 13: yandex.cloud.ytsaurus.v1.StorageSpec.SsdSpec
	(*ComputeSpec_DiskSpec)(nil),               // 14: yandex.cloud.ytsaurus.v1.ComputeSpec.DiskSpec
	(*ComputeSpec_ScalePolicy)(nil),            // 15: yandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy
	(*ComputeSpec_ScalePolicy_FixedScale)(nil), // 16: yandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.FixedScale
	(*ComputeSpec_ScalePolicy_AutoScale)(nil),  // 17: yandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.AutoScale
	(*timestamppb.Timestamp)(nil),              // 18: google.protobuf.Timestamp
}
var file_yandex_cloud_ytsaurus_v1_cluster_proto_depIdxs = []int32{
	10, // 0: yandex.cloud.ytsaurus.v1.Cluster.labels:type_name -> yandex.cloud.ytsaurus.v1.Cluster.LabelsEntry
	9,  // 1: yandex.cloud.ytsaurus.v1.Cluster.spec:type_name -> yandex.cloud.ytsaurus.v1.ClusterSpec
	18, // 2: yandex.cloud.ytsaurus.v1.Cluster.created_at:type_name -> google.protobuf.Timestamp
	18, // 3: yandex.cloud.ytsaurus.v1.Cluster.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 4: yandex.cloud.ytsaurus.v1.Cluster.status:type_name -> yandex.cloud.ytsaurus.v1.Cluster.Status
	1,  // 5: yandex.cloud.ytsaurus.v1.Cluster.health:type_name -> yandex.cloud.ytsaurus.v1.Cluster.Health
	11, // 6: yandex.cloud.ytsaurus.v1.Cluster.endpoints:type_name -> yandex.cloud.ytsaurus.v1.Cluster.Endpoints
	12, // 7: yandex.cloud.ytsaurus.v1.StorageSpec.hdd:type_name -> yandex.cloud.ytsaurus.v1.StorageSpec.HddSpec
	13, // 8: yandex.cloud.ytsaurus.v1.StorageSpec.ssd:type_name -> yandex.cloud.ytsaurus.v1.StorageSpec.SsdSpec
	14, // 9: yandex.cloud.ytsaurus.v1.ComputeSpec.disks:type_name -> yandex.cloud.ytsaurus.v1.ComputeSpec.DiskSpec
	15, // 10: yandex.cloud.ytsaurus.v1.ComputeSpec.scale_policy:type_name -> yandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy
	5,  // 11: yandex.cloud.ytsaurus.v1.ProxySpec.http:type_name -> yandex.cloud.ytsaurus.v1.HttpProxySpec
	6,  // 12: yandex.cloud.ytsaurus.v1.ProxySpec.rpc:type_name -> yandex.cloud.ytsaurus.v1.RpcProxySpec
	3,  // 13: yandex.cloud.ytsaurus.v1.ClusterSpec.storage:type_name -> yandex.cloud.ytsaurus.v1.StorageSpec
	4,  // 14: yandex.cloud.ytsaurus.v1.ClusterSpec.compute:type_name -> yandex.cloud.ytsaurus.v1.ComputeSpec
	7,  // 15: yandex.cloud.ytsaurus.v1.ClusterSpec.tablet:type_name -> yandex.cloud.ytsaurus.v1.TabletSpec
	8,  // 16: yandex.cloud.ytsaurus.v1.ClusterSpec.proxy:type_name -> yandex.cloud.ytsaurus.v1.ProxySpec
	16, // 17: yandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.fixed:type_name -> yandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.FixedScale
	17, // 18: yandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.auto:type_name -> yandex.cloud.ytsaurus.v1.ComputeSpec.ScalePolicy.AutoScale
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_yandex_cloud_ytsaurus_v1_cluster_proto_init() }
func file_yandex_cloud_ytsaurus_v1_cluster_proto_init() {
	if File_yandex_cloud_ytsaurus_v1_cluster_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*StorageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ComputeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*HttpProxySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*RpcProxySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*TabletSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ProxySpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Cluster_Endpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*StorageSpec_HddSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*StorageSpec_SsdSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ComputeSpec_DiskSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ComputeSpec_ScalePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ComputeSpec_ScalePolicy_FixedScale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ComputeSpec_ScalePolicy_AutoScale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes[13].OneofWrappers = []any{
		(*ComputeSpec_ScalePolicy_Fixed)(nil),
		(*ComputeSpec_ScalePolicy_Auto)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yandex_cloud_ytsaurus_v1_cluster_proto_goTypes,
		DependencyIndexes: file_yandex_cloud_ytsaurus_v1_cluster_proto_depIdxs,
		EnumInfos:         file_yandex_cloud_ytsaurus_v1_cluster_proto_enumTypes,
		MessageInfos:      file_yandex_cloud_ytsaurus_v1_cluster_proto_msgTypes,
	}.Build()
	File_yandex_cloud_ytsaurus_v1_cluster_proto = out.File
	file_yandex_cloud_ytsaurus_v1_cluster_proto_rawDesc = nil
	file_yandex_cloud_ytsaurus_v1_cluster_proto_goTypes = nil
	file_yandex_cloud_ytsaurus_v1_cluster_proto_depIdxs = nil
}
